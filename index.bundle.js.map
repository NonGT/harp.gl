{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"THREE\"","webpack:///../@here/harp-utils/index.web.ts","webpack:///../@here/harp-datasource-protocol/index.ts","webpack:///../@here/harp-geoutils/index.ts","webpack:///../@here/harp-materials/index.ts","webpack:///../@here/harp-datasource-protocol/lib/Expr.ts","webpack:///../@here/harp-text-canvas/index.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinates.ts","webpack:///../@here/harp-geoutils/lib/math/MathUtils.ts","webpack:///../@here/harp-mapview/lib/Utils.ts","webpack:///../@here/harp-geoutils/lib/projection/EarthConstants.ts","webpack:///../@here/harp-geoutils/lib/math/Box3Like.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3Like.ts","webpack:///../@here/harp-geoutils/lib/projection/Projection.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedProperty.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextStyle.ts","webpack:///../@here/harp-mapview/lib/DecodedTileHelpers.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoBox.ts","webpack:///../@here/harp-geoutils/lib/tiling/TilingScheme.ts","webpack:///../@here/harp-mapview/index.ts","webpack:///../@here/harp-materials/lib/Utils.ts","webpack:///../@here/harp-mapview/lib/MapView.ts","webpack:///../@here/harp-datasource-protocol/lib/ColorUtils.ts","webpack:///../@here/harp-text-canvas/lib/utils/UnicodeUtils.ts","webpack:///../@here/harp-mapview/lib/text/TextElement.ts","webpack:///../@here/harp-mapview/lib/text/TextElementType.ts","webpack:///../@here/harp-mapview/lib/Statistics.ts","webpack:///../@here/harp-mapview/lib/composing/Pass.ts","webpack:///../@here/harp-geoutils/lib/projection/MercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKey.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterialsDefs.ts","webpack:///../@here/harp-datasource-protocol/lib/InterpolatedPropertyDefs.ts","webpack:///../@here/harp-datasource-protocol/lib/Theme.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryCreator.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRenderer.ts","webpack:///../@here/harp-mapview/lib/PickHandler.ts","webpack:///../@here/harp-mapview/lib/Tile.ts","webpack:///../@here/harp-mapview/lib/AnimatedExtrusionHandler.ts","webpack:///../@here/harp-utils/lib/Logger/ILogger.ts","webpack:///../@here/harp-utils/lib/UrlUtils.ts","webpack:///../@here/harp-materials/lib/MapMeshMaterials.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/LinesChunks.ts","webpack:///../@here/harp-datasource-protocol/lib/StringEncodedNumeral.ts","webpack:///../@here/harp-datasource-protocol/lib/Techniques.ts","webpack:///../@here/harp-mapview/lib/DataSource.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphData.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextGeometry.ts","webpack:///../@here/harp-text-canvas/lib/utils/TypesettingUtils.ts","webpack:///../@here/harp-mapview/lib/MapViewPoints.ts","webpack:///../@here/harp-mapview/lib/DebugContext.ts","webpack:///../@here/harp-mapview/lib/ColorCache.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/ConcurrentDecoderFacade.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightInfo.ts","webpack:///../@here/harp-lines/lib/HighPrecisionUtils.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDecoderDefs.ts","webpack:///../@here/harp-omv-datasource/lib/OmvTile.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoCoordinatesLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/GeoPointLike.ts","webpack:///../@here/harp-geoutils/lib/coordinates/LatLngLike.ts","webpack:///../@here/harp-geoutils/lib/projection/EquirectangularProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/TransverseMercatorProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/FlatTileBoundingBoxGenerator.ts","webpack:///../@here/harp-geoutils/lib/tiling/HalfQuadTreeSubdivisionScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/SubTiles.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileKeyUtils.ts","webpack:///../@here/harp-geoutils/lib/tiling/TileTreeTraverse.ts","webpack:///../@here/harp-utils/lib/Logger/ConsoleChannel.ts","webpack:///../@here/harp-utils/lib/Logger/Logger.ts","webpack:///../@here/harp-utils/lib/Logger/WorkerChannel.ts","webpack:///../@here/harp-materials/lib/CopyMaterial.ts","webpack:///../@here/harp-datasource-protocol/lib/Env.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueParams.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueDescriptor.ts","webpack:///../@here/harp-datasource-protocol/lib/DecodedTile.ts","webpack:///../@here/harp-datasource-protocol/lib/StyleSetEvaluator.ts","webpack:///../@here/harp-lrucache/index.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextMaterials.ts","webpack:///../@here/harp-text-canvas/lib/rendering/TextBufferObject.ts","webpack:///../@here/harp-text-canvas/lib/utils/MaterialUtils.ts","webpack:///../@here/harp-mapview/lib/ThemeHelpers.ts","webpack:///../@here/harp-mapview/lib/DepthPrePass.ts","webpack:///../@here/harp-mapview/lib/geometry/overlayOnElevation.ts","webpack:///../@here/harp-mapview/lib/RoadPicker.ts","webpack:///../@here/harp-mapview/lib/text/Placement.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRenderer.ts","webpack:///../@here/harp-mapview/lib/poi/Poi.ts","webpack:///../@here/harp-mapview/lib/ScreenCollisions.ts","webpack:///../node_modules/rbush/rbush.min.js","webpack:///../@here/harp-mapview/lib/text/TextStyleCache.ts","webpack:///../@here/harp-mapview/lib/CameraMovementDetector.ts","webpack:///../@here/harp-mapview/lib/ClipPlanesEvaluator.ts","webpack:///../@here/harp-mapview/lib/composing/index.ts","webpack:///../@here/harp-mapview/lib/composing/MSAARenderPass.ts","webpack:///../@here/harp-mapview/lib/ConcurrentWorkerSet.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerLoader.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedDecoder.ts","webpack:///../@here/harp-mapview/lib/ElevationRangeSource.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/image/MapViewImageCache.ts","webpack:///../@here/harp-mapview/lib/image/ImageCache.ts","webpack:///../@here/harp-mapview/lib/MapViewFog.ts","webpack:///../@here/harp-mapview/lib/poi/PoiManager.ts","webpack:///../@here/harp-mapview/lib/poi/PoiTableManager.ts","webpack:///../@here/harp-mapview/lib/PolarTileDataSource.ts","webpack:///../@here/harp-mapview/lib/SkyCubemapTexture.ts","webpack:///../@here/harp-mapview/lib/ThemeLoader.ts","webpack:///../@here/harp-mapview/lib/VisibleTileSet.ts","webpack:///../@here/harp-mapview/lib/ConcurrentTilerFacade.ts","webpack:///../@here/harp-mapview/lib/WorkerBasedTiler.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightCoverageProvider.ts","webpack:///../@here/harp-transfer-manager/index.ts","webpack:///../@here/harp-mapview/lib/geometry/TileGeometry.ts","webpack:///../@here/harp-lines/lib/TriangulateLines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionLines.ts","webpack:///../@here/harp-mapview-decoder/lib/TileLoader.ts","webpack:///../@here/harp-omv-datasource/lib/OmvRestClient.ts","webpack:///./src/index.ts","webpack:///../@here/harp-geoutils/lib/projection/IdentityProjection.ts","webpack:///../@here/harp-geoutils/lib/projection/SphereProjection.ts","webpack:///../@here/harp-geoutils/lib/tiling/QuadTree.ts","webpack:///../@here/harp-geoutils/lib/tiling/HereTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/WebMercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/MercatorTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/tiling/PolarTilingScheme.ts","webpack:///../@here/harp-geoutils/lib/math/Vector3Like.ts","webpack:///../@here/harp-geoutils/lib/math/TransformLike.ts","webpack:///../@here/harp-geoutils/lib/math/OrientedBox3.ts","webpack:///../@here/harp-materials/lib/CirclePointsMaterial.ts","webpack:///../@here/harp-utils/index-common.ts","webpack:///../@here/harp-utils/lib/GroupedPriorityList.ts","webpack:///../@here/harp-utils/lib/Logger/index.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManager.ts","webpack:///../@here/harp-utils/lib/Logger/LoggerManagerImpl.ts","webpack:///../@here/harp-utils/lib/Logger/MultiChannel.ts","webpack:///../@here/harp-utils/lib/Math2D.ts","webpack:///../@here/harp-utils/lib/MathUtils.ts","webpack:///../@here/harp-utils/lib/Mixins.ts","webpack:///../@here/harp-utils/lib/assert.ts","webpack:///../@here/harp-utils/lib/ContextLogger.ts","webpack:///../@here/harp-utils/lib/PerformanceTimer.ts","webpack:///../@here/harp-utils/lib/ObjectUtils.ts","webpack:///../@here/harp-utils/lib/OptionsUtils.ts","webpack:///../@here/harp-utils/lib/UriResolver.ts","webpack:///../@here/harp-utils/lib/Functions.ts","webpack:///../@here/harp-utils/lib/UrlPlatformUtils.web.ts","webpack:///../@here/harp-materials/lib/DisplacementFeature.ts","webpack:///../@here/harp-materials/lib/EdgeMaterial.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/ExtrusionChunks.ts","webpack:///../@here/harp-materials/lib/ShaderChunks/FadingChunks.ts","webpack:///../@here/harp-materials/lib/HighPrecisionLineMaterial.ts","webpack:///../@here/harp-materials/lib/HighPrecisionPointMaterial.ts","webpack:///../@here/harp-materials/lib/IconMaterial.ts","webpack:///../@here/harp-materials/lib/LuminosityHighPassShader.ts","webpack:///../@here/harp-materials/lib/MSAAMaterial.ts","webpack:///../@here/harp-materials/lib/SepiaShader.ts","webpack:///../@here/harp-materials/lib/SolidLineMaterial.ts","webpack:///../@here/harp-materials/lib/VignetteShader.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprEvaluator.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ArrayOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/CastOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ColorOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ComparisonOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FeatureOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/FlowOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/InterpolationOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExponentialInterpolant.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MapOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MathOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/MiscOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/ObjectOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/StringOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/operators/TypeOperators.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprInstantiator.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprParser.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerServiceProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerTilerProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/WorkerDecoderProtocol.ts","webpack:///../@here/harp-datasource-protocol/lib/TileInfo.ts","webpack:///../@here/harp-datasource-protocol/lib/ExprPool.ts","webpack:///../@here/harp-datasource-protocol/lib/TechniqueAttr.ts","webpack:///../@here/harp-datasource-protocol/lib/ThemeVisitor.ts","webpack:///../@here/harp-mapview/lib/BackgroundDataSource.ts","webpack:///../@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier.ts","webpack:///../@here/harp-geometry/lib/SubdivisionModifier.ts","webpack:///../@here/harp-text-canvas/lib/rendering/FontCatalog.ts","webpack:///../@here/harp-text-canvas/lib/rendering/GlyphTextureCache.ts","webpack:///../@here/harp-lrucache/lib/LRUCache.ts","webpack:///../@here/harp-text-canvas/lib/TextCanvas.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/LineTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/typesetting/PathTypesetter.ts","webpack:///../@here/harp-text-canvas/lib/utils/ContextualArabicConverter.ts","webpack:///../@here/harp-mapview/lib/PathBlockingElement.ts","webpack:///../@here/harp-mapview/lib/poi/BoxBuffer.ts","webpack:///../@here/harp-mapview/lib/poi/PixelPicker.ts","webpack:///../@here/harp-mapview/lib/text/PlacementStats.ts","webpack:///../@here/harp-mapview/lib/text/SimplePath.ts","webpack:///../@here/harp-mapview/lib/text/TextElementsRendererOptions.ts","webpack:///../@here/harp-mapview/lib/text/TextElementStateCache.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupState.ts","webpack:///../@here/harp-mapview/lib/text/TextElementState.ts","webpack:///../@here/harp-mapview/lib/text/RenderState.ts","webpack:///../@here/harp-mapview/lib/text/UpdateStats.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroup.ts","webpack:///../@here/harp-mapview/lib/text/TextElementGroupPriorityList.ts","webpack:///../@here/harp-mapview/lib/composing/MapRenderingManager.ts","webpack:///../@here/harp-mapview/lib/composing/LowResRenderPass.ts","webpack:///../@here/harp-mapview/lib/composing/Outline.ts","webpack:///../@here/harp-mapview/lib/composing/UnrealBloomPass.ts","webpack:///../@here/harp-mapview/lib/workers/WorkerBootstrapDefs.ts","webpack:///../@here/harp-mapview/lib/FrustumIntersection.ts","webpack:///../@here/harp-mapview/lib/MapTileCuller.ts","webpack:///../@here/harp-mapview/lib/geometry/PhasedTileGeometryManager.ts","webpack:///../@here/harp-mapview/lib/geometry/PhasedTileGeometryLoader.ts","webpack:///../@here/harp-mapview/lib/PickingRaycaster.ts","webpack:///../@here/harp-mapview/lib/poi/PoiRendererFactory.ts","webpack:///../@here/harp-datasource-protocol/index-decoder.ts","webpack:///../@here/harp-datasource-protocol/lib/Extruder.ts","webpack:///../@here/harp-datasource-protocol/lib/Outliner.ts","webpack:///../@here/harp-datasource-protocol/lib/ThreeBufferUtils.ts","webpack:///../@here/harp-mapview/lib/ScreenProjector.ts","webpack:///../@here/harp-mapview/lib/SkyBackground.ts","webpack:///../@here/harp-mapview/lib/SkyGradientTexture.ts","webpack:///../@here/harp-mapview/lib/text/FontCatalogLoader.ts","webpack:///../@here/harp-mapview/lib/text/MapViewState.ts","webpack:///../@here/harp-mapview/lib/text/TextCanvasFactory.ts","webpack:///../@here/harp-mapview/lib/copyrights/CopyrightElementHandler.ts","webpack:///../@here/harp-mapview/lib/copyrights/UrlCopyrightProvider.ts","webpack:///../@here/harp-transfer-manager/src/TransferManager.ts","webpack:///../@here/harp-transfer-manager/src/DeferredPromise.ts","webpack:///../@here/harp-mapview/lib/image/Image.ts","webpack:///../@here/harp-mapview/lib/geometry/TileDataAccessor.ts","webpack:///../@here/harp-lines/index.ts","webpack:///../@here/harp-lines/lib/Lines.ts","webpack:///../@here/harp-lines/lib/HighPrecisionPoints.ts","webpack:///../@here/harp-omv-datasource/index.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataFilter.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDataSource.ts","webpack:///../@here/harp-mapview-decoder/index.ts","webpack:///../@here/harp-mapview-decoder/lib/TileDataSource.ts","webpack:///../@here/harp-omv-datasource/lib/OmvDebugLabelsTile.ts","webpack:///../@here/harp-examples/config.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","THREE","exprEvaluator","ExprEvaluator","exprInstantiator","ExprInstantiator","ExprDependencies","properties","Set","ComputeExprDependencies","expr","dependencies","accept","this","instance","context","add","op","args","length","zoom","forEach","childExpr","branches","_","branch","fallback","condition","isJsonExpr","v","Array","isArray","ExprScope","Expr","code","ExprParser","parse","node","definitions","definitionExprCache","parseNode","undefined","lockedNames","cache","Map","env","scope","Value","ExprEvaluatorContext","m_dependencies","of","pool","ExprSerializer","serialize","m_isDynamic","exprIsDynamic","VarExpr","super","visitor","visitVarExpr","LiteralExpr","BooleanLiteralExpr","NumberLiteralExpr","StringLiteralExpr","NullLiteralExpr","ObjectLiteralExpr","Error","visitNullLiteralExpr","visitBooleanLiteralExpr","visitNumberLiteralExpr","visitStringLiteralExpr","visitObjectLiteralExpr","HasAttributeExpr","visitHasAttributeExpr","ContainsExpr","elements","elementTy","every","element","visitContainsExpr","isDynamic","CallExpr","visitCallExpr","descriptor","getOperator","isDynamicOperator","some","e","MatchExpr","visitMatchExpr","CaseExpr","visitCaseExpr","cond","map","label","body","push","referenceResolverState","parseCall","slice","has","cachedEntry","result","definitionEntry","isLiteralDefinition","fromJSON","isBoxedDefinition","isInterpolatedPropertyDefinition","interpolatedPropertyDefinitionToJsonExpr","delete","set","resolveReference","makeCallExpr","parseGetExpr","parseHasExpr","isValidElementsArray","parseInExpr","obj","parseLiteralExpr","conditions","isValidMatchLabel","JSON","stringify","parseMatchExpr","caseFallback","parseCaseExpr","GeoCoordinates","latitude","longitude","altitude","Math","radToDeg","latLng","lat","lng","geoPoint","isGeoPointLike","fromGeoPoint","isGeoCoordinatesLike","fromDegrees","isLatLngLike","degToRad","isNaN","wrapped","sign","other","MathUtils","normalizeAngleDeg","a","angleDistanceDeg","b","newEmptyBox3","min","x","Infinity","y","z","max","newVector3","clamp","interpolateAnglesDeg","p0","p1","logger","LoggerManager","MINIMUM_OBJECT3D_SIZE_ESTIMATION","MINIMUM_ATTRIBUTE_SIZE_ESTIMATION","groundNormalPlanarProj","Vector3","groundPlane","Plane","clone","groundSphere","Sphere","EarthConstants","EQUATORIAL_RADIUS","rayCaster","Raycaster","maxTiltAngleAllowed","MAX_TILT_ANGLE","epsilon","space","tangentSpace","quaternions","Quaternion","vector3","matrix4","Matrix4","transforms","xAxis","yAxis","zAxis","position","MapViewUtils","orbitFocusPoint","mapView","deltaAzimuthDeg","deltaTiltDeg","maxTiltAngleRad","target","worldTarget","targetCoordinates","projection","unprojectPoint","sphericalCoordinates","extractSphericalCoordinatesFromLocation","camera","tiltDeg","tilt","lookAt","distanceTo","azimuth","PI","getWorldTargetFromCamera","elevation","cameraPos","copy","cameraLookAt","getWorldDirection","constant","radius","targetWorldPos","type","ProjectionType","Planar","ray","intersectPlane","intersectSphere","getCameraPositionFromTargetCoordinates","distance","yawDeg","pitchDeg","pitchRad","cos","yawRad","projectPoint","groundDistance","sin","Spherical","normalize","projectOnPlane","setFromAxisAngle","applyQuaternion","setLength","height","cameraHeight","sqrt","rayCastWorldCoordinates","pointOnScreenXinNDC","pointOnScreenYinNDC","pointInNDCPosition","extractRotation","matrixWorld","multiplyMatrices","getInverse","projectionMatrix","pointInCameraSpace","applyMatrix4","worldPosition","panCameraAboveFlatMap","offsetX","offsetY","panCameraAroundGlobe","fromWorld","toWorld","setFromUnitVectors","inverse","makeRotationFromQuaternion","applyMatrix","updateMatrixWorld","getCameraRotationAtTarget","transform","localTangentSpace","makeBasis","setFromRotationMatrix","multiply","extractCameraTilt","normal","surfaceNormal","negate","cosTheta","dot","acos","assert","targetGeoCoords","getGeoTargetFromCamera","extractTiltAngleFromLocation","warn","extractAttitude","options","setFromMatrixPosition","setFromMatrixColumn","yaw","pitch","roll","atan2","location","sub","angleTo","cross","calculateDistanceToGroundFromZoomLevel","zoomLevel","cameraPitch","tileSize","EQUATORIAL_CIRCUMFERENCE","pow","focalLength","estimateTextureSize","texture","objectSize","visitedObjects","image","uuid","imageBytes","width","heapSize","gpuSize","estimateMaterialSize","material","RawShaderMaterial","ShaderMaterial","rawMaterial","uniforms","uniform","Texture","MeshBasicMaterial","MapMeshBasicMaterial","meshMaterial","aoMap","specularMap","alphaMap","envMap","MapMeshStandardMaterial","standardMaterial","lightMap","emissiveMap","bumpMap","normalMap","displacementMap","roughnessMap","metalnessMap","LineBasicMaterial","LineDashedMaterial","estimateAttributeSize","attribute","attrName","generateUUID","attrBytes","bytesPerElement","array","BYTES_PER_ELEMENT","InterleavedBufferAttribute","BufferAttribute","count","itemSize","getIsoLanguageCode","language","substring","MAX_TILT_DEG","zoomOnTargetPosition","targetPositionOnScreenXinNDC","targetPositionOnScreenYinNDC","maxTiltAngle","targetPosition","setZ","deltaTilt","newTargetPosition","getCameraCoordinatesFromTargetCoordinates","rotate","deltaYawDeg","deltaPitchDeg","rotateOnWorldAxis","newPitch","maxPitch","asin","rotateX","setRotation","geoCenter","quaternion","dirVec","dirLen","error","divideScalar","getCameraFrustumPlanes","near","far","top","tan","fov","aspect","left","view","enabled","fullWidth","fullHeight","filmOffset","getFilmWidth","right","bottom","rayCastGeoCoordinates","worldCoordinates","calculateDistanceFromZoomLevel","calculateZoomLevelFromDistance","log2","minZoomLevel","maxZoomLevel","round","calculateDepthFromClipDistance","clipDistance","perspCam","cameraRange","viewSpaceDistance","cameraToWorldDistance","calculateVerticalFovByHorizontalFov","hFov","atan","calculateHorizontalFovByVerticalFov","vFov","calculateFocalLengthByVerticalFov","calculateFovByFocalLength","calculateScreenSizeByFocalLength","worldSize","calculateWorldSizeByFocalLength","screenSize","estimateObject3dSize","parentSize","size","isObject3D","Scene","isMesh","isLine","isPoints","mesh","materials","geometry","bufferGeometry","Geometry","vertices","faces","_bufferGeometry","BufferGeometry","attributes","index","estimateGeometrySize","featureData","userData","feature","getFeatureDataSize","estimateMeshSize","children","child","mapViewIsLoading","numTilesLoading","tileList","visibleTileSet","dataSourceTileList","tile","visibleTiles","tileLoader","isFinished","tileGeometryLoader","isLoading","textElementsRenderer","loading","poiTableManager","finishedLoading","allVisibleTilesLoaded","getBrowserLanguages","navigator","languages","languageList","lang","powerOfTwo","TileOffsetUtils","getKeyForTileKeyAndOffset","tileKey","offset","bitshift","shiftedOffset","offsetBits","totalOffsetsToStore","getShiftedOffset","mortonCode","extractOffsetAndMortonKeyFromKey","num","getParentKeyFromKey","calculatedKey","TileKey","fromMortonCode","parentMortonCode","MIN_ELEVATION","MAX_ELEVATION","MAX_BUILDING_HEIGHT","box3","obb","extents","unitScale","sourceProjection","worldPos","interpolants","DiscreteInterpolant","LinearInterpolant","CubicInterpolant","ExponentialInterpolant","tmpBuffer","StringEncodedNumeralFormatMaxSize","isInterpolatedProperty","interpolationMode","zoomLevels","Float32Array","values","evaluateInterpolatedProperty","level","lookup","pixelToMeters","_stringEncodedNumeralType","StringEncodedNumeralType","Meters","Pixels","getInterpolatedMetric","Hex","RGB","RGBA","HSL","nChannels","interpolant","InterpolationMode","Exponential","exponent","evaluate","ColorUtils","getHexFromRgba","resultBuffer","getHexFromRgb","getInterpolatedColor","_stringEncodedNumeralDynamicMask","maskInterpolant","isExpr","Dynamic","parseStringEncodedNumeral","prop","isCubic","interpolation","findIndex","abs","splice","removeDuplicatePropertyValues","Discrete","firstValue","matchedFormat","StringEncodedNumeralFormats","find","format","regExp","test","needsMask","propValues","maskValues","baseFormat","allowedValueFormats","StringEncodedMetricFormats","StringEncodedColorFormats","valueIdx","matched","valueFormat","decoder","mask","procesStringEnocodedNumeralInterpolatedProperty","FontUnit","FontStyle","FontVariant","VerticalAlignment","HorizontalAlignment","WrappingMode","DefaultTextStyle","DEFAULT_FONT_NAME","DEFAULT_FONT_SIZE","unit","freeze","Pixel","backgroundSize","DEFAULT_FONT_STYLE","Regular","DEFAULT_FONT_VARIANT","DEFAULT_ROTATION","DEFAULT_COLOR","Color","DEFAULT_OPACITY","DEFAULT_BACKGROUND_COLOR","DEFAULT_BACKGROUND_OPACITY","DEFAULT_TRACKING","DEFAULT_LEADING","DEFAULT_MAX_LINES","DEFAULT_LINE_WIDTH","DEFAULT_CANVAS_ROTATION","DEFAULT_LINE_ROTATION","DEFAULT_WRAPPING_MODE","Word","DEFAULT_VERTICAL_ALIGNMENT","Above","DEFAULT_HORIZONTAL_ALIGNMENT","Left","TextRenderStyle","params","m_params","fontName","fontSize","fontStyle","fontVariant","rotation","color","opacity","backgroundColor","backgroundOpacity","TextLayoutStyle","tracking","leading","maxLines","lineWidth","canvasRotation","lineRotation","wrappingMode","verticalAlignment","horizontalAlignment","DEFAULT_SKIP_PROPERTIES","TEXTURE_PROPERTY_KEYS","getMaterialConstructor","technique","isExtrudedLineTechnique","shading","SolidLineMaterial","PointsMaterial","CirclePointsMaterial","applyTechniquePropertyToMaterial","propertyName","techniqueAttrValue","applySecondaryColorToMaterial","evaluateProperty","materialColor","techniqueColor","evaluateColorProperty","hasAlphaInHex","removeAlphaFromHex","setHex","applyBaseColorToMaterial","colorValue","g","getRgbaFromHex","tech","setRGB","disableBlending","enableBlending","getPropertyValue","parsed","parseStringEncodedColor","getBaseColorPropName","techDescriptor","techniqueDescriptors","attrTransparencyColor","textureReadyCallback","Constructor","settings","HighPrecisionLineMaterial","fog","id","isExtrudedPolygonTechnique","flatShading","vertexColors","depthTest","isStandardTechnique","isTerrainTechnique","texturePropertyName","textureProperty","onLoad","wrapS","toWrappingMode","wrapT","magFilter","toTextureFilter","minFilter","flipY","repeatU","repeat","repeatV","needsUpdate","onError","textureUrl","isTextureBuffer","dataTextureProperties","textureDataType","toTextureDataType","textureBuffer","buffer","Uint8Array","UnsignedByteType","ByteType","Int8Array","ShortType","Int16Array","UnsignedShortType","Uint16Array","IntType","Int32Array","UnsignedIntType","Uint32Array","FloatType","HalfFloatType","getTextureBuffer","DataTexture","toPixelFormat","textureBlob","Blob","URL","createObjectURL","TextureLoader","load","isShaderTechnique","baseColorPropName","hasBaseColor","getOwnPropertyNames","filter","TRANSPARENCY_PROPERTY_KEYS","indexOf","propColor","applyShaderTechniqueToMaterial","skipExtraProps","startsWith","BASE_TECHNIQUE_NON_MATERIAL_PROPS","applyTechniqueToMaterial","itemCount","normalized","Mesh","Circles","Squares","LineSegments","primitive","Line","Points","baseColorProp","getBaseColorProp","techniques","GeoBox","southWest","northEast","south","north","west","east","minAltitude","altitudeSpan","latitudeSpan","longitudeSpan","maxAltitude","point","containsHelper","isFlat","isSameAltitude","isWithinAltitudeRange","subdivisionScheme","boundingBoxGenerator","FlatTileBoundingBoxGenerator","tileTreeTraverse","TileTreeTraverse","subTiles","TileKeyUtils","geoCoordinatesToTileKey","geoBox","geoRectangleToTileKeys","getGeoBox","getWorldBox","transparent","forcedBlending","blending","CustomBlending","premultipliedAlpha","blendSrc","OneFactor","blendDst","OneMinusSrcAlphaFactor","blendSrcAlpha","blendDstAlpha","SrcAlphaFactor","getShaderMaterialDefine","fallbackValue","defines","getShaderDefine","setShaderDefine","updated","DEFINE_BOOL_TRUE","currentValue","DEFINE_BOOL_FALSE","shaderContent","shaderName","insertedShaderName","addTab","tabChar","replace","NormalBlending","isProduction","MapViewEventNames","setLogLevelForAll","LogLevel","Log","DEFAULT_CLEAR_COLOR","DEFAULT_FOV_CALCULATION","DEFAULT_CAM_NEAR_PLANE","DEFAULT_CAM_FAR_PLANE","MAX_FIELD_OF_VIEW","MIN_FIELD_OF_VIEW","FALLBACK_RENDER_ORDER_OFFSET","DEFAULT_MIN_ZOOM_LEVEL","DEFAULT_MAX_ZOOM_LEVEL","DEFAULT_MIN_CAMERA_HEIGHT","FRAME_RATE_RING_SIZE","FALLBACK_FRAME_RATE","TERRAIN_ZOOM_LEVEL","DEFAULT_POLAR_STYLE_SET_NAME","UPDATE","Update","RENDER_EVENT","Render","DID_RENDER_EVENT","AfterRender","FIRST_FRAME_EVENT","FirstFrame","FRAME_COMPLETE_EVENT","FrameComplete","THEME_LOADED_EVENT","ThemeLoaded","ANIMATION_STARTED_EVENT","AnimationStarted","ANIMATION_FINISHED_EVENT","AnimationFinished","MOVEMENT_STARTED_EVENT","MovementStarted","MOVEMENT_FINISHED_EVENT","MovementFinished","CONTEXT_LOST_EVENT","ContextLost","CONTEXT_RESTORED_EVENT","ContextRestored","COPYRIGHT_CHANGED_EVENT","CopyrightChanged","vector2","Vector2","MapViewPowerPreference","MapViewDefaults","mercatorProjection","maxVisibleDataSourceTiles","extendedFrustumCulling","tileCacheSize","resourceComputationType","ResourceComputationType","EstimationInMb","quadTreeSearchDistanceUp","quadTreeSearchDistanceDown","pixelRatio","window","devicePixelRatio","heading","theme","MapView","EventDispatcher","dumpNext","m_renderLabels","m_screenCollisions","ScreenCollisions","m_visibleTileSetLock","m_tileWrappingEnabled","m_zoomLevel","m_minZoomLevel","m_maxZoomLevel","m_minCameraHeight","m_screenCamera","OrthographicCamera","m_rteCamera","PerspectiveCamera","m_targetGeoPos","m_targetWorldPos","m_viewRanges","minimum","maximum","m_scene","m_fog","MapViewFog","m_mapTilesRoot","Object3D","m_mapAnchors","m_animationCount","m_drawing","m_updatePending","m_frameNumber","m_maxFps","m_detectedFps","m_forceCameraAspect","m_tileDataSources","m_connectedDataSources","m_failedDataSources","m_enablePolarDataSource","m_plane","m_sphere","m_theme","m_themeIsLoading","m_firstFrameRendered","m_firstFrameComplete","m_initialTextPlacementDone","m_frameTimeIndex","m_frameTimeRing","m_imageCache","MapViewImageCache","m_poiManager","PoiManager","m_poiTableManager","PoiTableManager","m_lastTileIds","m_copyrightInfo","m_env","MapEnv","onWebGLContextLost","event","dispatchEvent","onWebGLContextRestored","m_renderer","clearColor","setClearColor","update","m_options","m_uriResolver","uriResolver","minCameraHeight","decoderUrl","ConcurrentDecoderFacade","defaultScriptUrl","resolveUri","decoderCount","defaultWorkerCount","m_visibleTileSetOptions","clipPlanesEvaluator","createDefaultClipPlanesEvaluator","enablePolarDataSource","m_pixelRatio","maxFps","enableStatistics","m_languages","collisionDebugCanvas","m_collisionDebugCanvas","ScreenCollisionsDebug","handleRequestAnimationFrame","renderFunc","handlePostponedAnimationFrame","postponedAnimationFrame","m_pickHandler","PickHandler","enableRoadPicking","enablePickTechnique","tileWrappingEnabled","setupStats","canvas","addEventListener","WebGLRenderer","antialias","nativeWebglAntialiasEnabled","alpha","preserveDrawingBuffer","powerPreference","Default","autoClear","info","autoReset","setupRenderer","fovCalculation","getCanvasClientSize","m_camera","up","m_focalLength","m_screenProjector","ScreenProjector","setupCamera","m_targetDistance","m_raycaster","PickingRaycaster","m_movementDetector","CameraMovementDetector","movementThrottleTimeout","movementStarted","movementFinished","mapPassAntialiasSettings","customAntialiasSettings","mapRenderingManager","MapRenderingManager","dynamicPixelRatio","m_tileGeometryManager","enablePhasedLoading","PhasedTileGeometryManager","SimpleTileGeometryManager","enableMixedLod","m_enableMixedLod","m_visibleTiles","createVisibleTileSet","m_animatedExtrusionHandler","AnimatedExtrusionHandler","m_backgroundDataSource","BackgroundDataSource","addDataSource","styleSetName","polarStyleSetName","m_polarDataSource","PolarTileDataSource","geometryLevelOffset","polarGeometryLevelOffset","updatePolarDataSource","backgroundTilingScheme","setTilingScheme","initTheme","m_textElementsRenderer","createTextRenderer","drawFrame","resetTextRenderer","m_movementFinishedUpdateTimerId","clearTimeout","m_animationFrameHandle","cancelAnimationFrame","removeEventListener","dataSource","dispose","clearTileCache","clearRenderStates","clear","getDataSourceCacheSize","numVisibleTiles","setDataSourceCacheSize","setNumberOfVisibleTiles","floor","updateImages","updateLighting","invalidateCache","updateSkyBackground","m_pointOfView","pointOfView","postEffectsFile","fetch","then","response","json","postEffects","m_postEffects","setPostEffects","ThemeLoader","isThemeLoaded","loadedTheme","catch","sky","reset","lights","renderer","images","imageTextures","poiTables","loadPoiTables","textStyles","defaultTextStyle","fontCatalogs","priorities","labelPriorities","styles","setTheme","time","Date","now","fps","setLanguages","disable","disableFading","m_previousFrameTimeStamp","listener","rendererClearColor","getClearColor","getHex","targetDistance","attitude","headingDeg","enableNativeWebglAntialias","calculateFocalLength","getSize","updateCameras","dataSourceName","ds","ready","getDataSourceByName","attach","setEnableElevationOverlay","m_elevationProvider","updateStorageLevelOffset","connect","Promise","resolve","resolveOnce","DataSourceConnect","message","dsIndex","detach","removeDataSource","textElements","addOverlayText","clearOverlayText","limitedTilt","geoPos","limitedPitch","maxPitchRadWithCurvature","maxPitchDegWithCurvature","cameraIsMoving","animating","isAnimating","m_pixelToWorld","lookAtDistance","pixelToWorld","getPixelRatio","setPixelRatio","ratio","lowResPixelRatio","project","setFromCamera","getNormalizedScreenCoordinates","getWorldPositionAt","intersectMapObjects","setSize","Resize","PerformanceTimer","clearCache","fun","forEachVisibleTile","forEachCachedTile","markTilesDirty","elevationSource","elevationRangeSource","elevationProvider","m_elevationRangeSource","dataSources","setTileUpdateCallback","overlayOnElevation","bloom","outline","vignette","sepia","updateOutline","twinDataSource","viewRanges","setFovOnCamera","maxGeometryHeightScaled","getScaleFactor","reduce","maxGeometryHeight","assign","updateClipPlanes","updateProjectionMatrix","setScalar","zoomLevelDistance","getCameraHeightAboveTerrain","entries","$zoom","$pixelToMeters","$frameNumber","heightAboveTerrain","getHeight","unprojectAltitude","m_previousRequestAnimationTime","currentFps","capturedFrames","sum","synchronousRendering","requestAnimationFrame","vSyncFrameTime","frameInterval","previousFrameTime","targetTime","m_targetRequestAnimationTime","detectCurrentFps","render","enabledDataSources","isDataSourceEnabled","stats","PerformanceStatistics","gatherStatistics","frameStartTime","currentFrameEvent","setupTime","cullTime","textPlacementTime","drawTime","textDrawTime","endTime","currentFrame","setValue","timeSincePreviousFrame","m_thisFrameTilesChanged","updateEnv","remove","lockVisibleTileSet","viewRangesStatus","updateRenderList","storageLevel","getEnabledTileDataSources","viewRangesChanged","renderList","renderedTiles","renderTileObjects","frameNumLastVisible","isDynamicFrame","initializing","childObject","geoPosition","addValue","checkCameraMoved","CameraPositionChanged","renderLabels","prepareRenderTextElements","m_skyBackground","updateCamera","finishRenderTextElements","appResults","disposePendingTiles","checkCopyrightUpdates","storeFrameInfo","worldOffsetX","computeWorldOffsetX","willRender","objects","center","displacement","setRotationFromMatrix","boundingBox","getRotationMatrix","frustumCulled","_backupRenderOrder","renderOrder","isBuilding","kind","includes","GeometryKind","Building","levelOffset","didRender","placeText","renderText","getOptionValue","themeName","defaultGeoCenter","scene","setInitialCameraPosition","resize","fromObject","VisibleTileSet","FrustumIntersection","SkyBackground","updateSkyBackgroundColors","addNewSkyBackground","removeSkyBackGround","groundColor","background","updateTexture","m_createdLights","light","lightDescription","createLight","setTimeout","tileIdList","sort","newTileIds","join","checkIfTilesChanged","newCopyrightInfo","getRenderedTilesCopyrightInfo","allEqual","tileCopyrightInfo","copyrightInfo","CopyrightInfo","mergeArrays","poiManager","keys","addImage","url","preload","atlas","addTextureAtlas","imageTexture","addImageTexture","enable","TextElementsRenderer","MapViewState","TextCanvasFactory","PoiRendererFactory","FontCatalogLoader","overlayText","limitFov","clientWidth","clientHeight","SHIFT_TRANSPARENCY","SHIFT_RED","SHIFT_GREEN","SHIFT_BLUE","HEX_FULL_CHANNEL","HEX_RGB_MASK","HEX_TRGB_MASK","tmpColor","getHexFromHsl","h","setHSL","hex","getAlphaFromHex","UnicodeUtils","Direction","whiteSpaceRanges","isWhiteSpace","codePoint","range","newLineRanges","isNewLine","nonPrintableRanges","isPrintable","rtlBlocks","neutralBidirectionalRanges","weakBidirectionalRanges","getDirection","block","weakRange","Weak","neutralRange","Neutral","RTL","LTR","rtlMirroredCodePoints","isRtlMirrored","poiInfo","poiRenderBatch","LoadingState","text","points","renderParams","layoutParams","priority","xOffset","yOffset","featureId","style","fadeNear","fadeFar","tileOffset","visible","distanceScale","elevated","renderStyle","layoutStyle","TextElementType","PoiLabel","PathLabel","mayOverlap","reserveSpace","m_poiInfo","path","LineMarker","poiRenderOrder","m_renderStyle","m_layoutStyle","min2","iconMinZoomLevel","textMinZoomLevel","max2","iconMaxZoomLevel","textMaxZoomLevel","RingBuffer","capacity","head","tail","data","next","enqOne","previous","Iterator","m_buffer","m_index","SimpleTimer","statistics","running","m_currentValue","val","SampledTimer","numResets","maxNumSamples","samples","getStats","computeArrayStats","asArray","median","median75","median90","median95","median97","median99","median999","mid","avg","numSamples","stages","stage","hasTimer","getTimer","currentStage","stop","start","timers","nullTimer","keepSamples","timer","addTimer","header","footer","log","maxNameLength","print","toFixed","simpleStats","FrameStats","messages","oldValue","FrameStatsArray","frameEntries","frameStats","currentSize","enq","maxNumFrames","configs","m_instance","m_frameEvents","clearFrames","webGlInfo","calls","lines","triangles","memory","geometries","textures","programs","performance","totalJSHeapSize","usedJSHeapSize","jsHeapSizeLimit","addFrame","onlyLastFrame","frames","plainObject","getAsPlainObject","simpleStatistics","Pass","renderToScreen","writeBuffer","readBuffer","delta","setRenderTarget","shader","textureID","UniformsUtils","vertexShader","fragmentShader","fsQuad","FullScreenQuad","PlaneBufferGeometry","m_mesh","MercatorProjection","Projection","MercatorConstants","MAXIMUM_LATITUDE","latitudeProject","latitudeClamp","exp","worldPoint","cosh","geoPointLike","latitudeClampProject","latitudeInRadians","fromRadians","unprojectLatitude","worldCenter","worldNorth","worldSouth","worldYCenter","isBox3Like","isOrientedBox3Like","Number","EPSILON","worldBox","minGeo","maxGeo","fromCoordinates","_worldPoint","webMercatorProjection","reprojectPoint","sy","projectBox","maxY","quadTreeSubdivisionScheme","row","column","quadkey","parseInt","charAt","fromRowColumnLevel","quadKey64","quadKey","m_mortonCode","quadkey64","m_hereTile","coordX","coordY","totalWidth","totalHeight","rowsAtLevel","columnsAtLevel","changedLevelBy","toString","col","qnr","subQuad","fromQuadKey","fromHereTile","msb","ExtrusionFeatureDefs","DEFAULT_RATIO_MIN","DEFAULT_RATIO_MAX","MIN_BUILDING_HEIGHT","step","def","bdef","styleDef","tmpVector3","tmpVector2","TileGeometryCreator","decodedTile","enabledKinds","disabledKinds","GeometryKindSet","hasOrIntersects","srcGeometry","group","groups","createdOffsets","compileTechniques","createObjects","preparePois","createTextElements","isPoiTechnique","isLineMarkerTechnique","isTextTechnique","createLabelRejectionElements","addGroundPlane","pathGeometries","addBlockingElement","PathBlockingElement","processPriorities","TileGeometryLoader","setDefaultGeometryKind","initDecodedTile","geometryKind","from","resetVisibilityCounter","textPathGeometries","textFilter","processedPaths","newPaths","textPath","pop","discreteZoomLevel","discreteZoomEnv","prepareTextPaths","objInfos","getFeatureId","textElement","TextElement","ContextualArabicConverter","convert","styleCache","getRenderStyle","getLayoutStyle","pathLengthSqr","DEFAULT_TEXT_DISTANCE_SCALE","addTextElement","textGeometries","stringCatalog","positions","numPositions","getX","getY","getZ","texts","techniqueFilter","groupCount","groupIndex","techniqueIndex","ObjectCtor","getObjectConstructor","onMaterialUpdated","requestUpdate","addOwnedTexture","createMaterial","setupTerrainMaterial","vertexAttributes","vertexAttribute","getBufferAttribute","setAttribute","interleavedVertexAttributes","attr","ArrayCtor","getArrayConstructor","InterleavedBuffer","stride","interleavedAttr","setIndex","getAttribute","needsVertexNormals","computeVertexNormals","addGroup","isSolidLineTechnique","isHighPrecisionLineMaterial","lineMaterial","clipping","clipTileSize","setShaderMaterialDefine","hasSolidLinesOutlines","secondaryWidth","renderOrderOffset","geometryId","isCirclesTechnique","isSquaresTechnique","enablePicking","enableRayTesting","isLineTechnique","isSegmentsTechnique","hasDynamicColor","fadingParams","getFadingParams","FadingFeature","addRenderHelper","mat","unitFactor","metricUnit","outlineWidth","dashSize","gapSize","extrudedMaterial","addUserData","isFillTechnique","hasDynamicPrimaryColor","hasDynamicSecondaryColor","emissive","polygonMaterial","standardMat","extrudedObjects","animatedExtrusionHandler","extrusionAnimationEnabled","animateExtrusionValue","animateExtrusion","forceEnabled","isRenderDepthPrePassEnabled","depthPassMesh","createDepthPrePassMesh","registerTileObject","materialFeature","setDepthPrePassStencil","edgeIndex","edgeGeometry","colorAttribute","extrusionAttribute","normalAttribute","uvAttribute","extrudedPolygonTechnique","getPolygonFadingParams","materialParams","colorMix","lineFadeNear","lineFadeFar","edgeMaterial","EdgeMaterial","edgeObj","lineColor","extrusionAnimationDuration","animateExtrusionDuration","duration","animatedExtrusionTileHandler","AnimatedExtrusionTileHandler","outlineGeometry","fillTechnique","outlineMaterial","outlineObj","outlineTechnique","secondaryColor","secondaryCaps","caps","secondaryRenderOrder","techniqueLineWidth","techniqueSecondaryWidth","techniqueOpacity","poiGeometries","addPois","tmpV","getTilingScheme","posAttr","toArray","SphericalGeometrySubdivisionModifier","modify","depthWrite","Background","createPlane","indexedTechnique","_category","_styleSet","computeRenderOrder","category","entry","_secondaryCategory","terrainColor","onBeforeCompile","planeCenter","colorHex","isVisible","PlaneGeometry","plane","tileDisplacementMap","xCountVertices","yCountVertices","LuminanceFormat","geometryType","starts","featureStarts","DEFAULT_FADE_NEAR","DEFAULT_FADE_FAR","DEFAULT_COLOR_MIX","lineColorMix","OVERLOAD_LABEL_LIMIT","OVERLOAD_UPDATED_LABEL_LIMIT","OVERLOAD_UPDATE_TIME_LIMIT","OVERLOAD_PLACE_TIME_LIMIT","PRINT_LABEL_DEBUG_INFO","updateStats","UpdateStats","placementStats","PlacementStats","tempPosition","tempScreenPosition","tempScreenPoints","tempPoiScreenPosition","tmpTextBufferCreationParams","tmpAdditionParams","tmpBufferAdditionParams","TileTextElements","TextElementLists","lists","list","addTextToCanvas","screenPosition","pathOverflow","layer","letterCaseArray","glyphCaseArray","pickingData","addText","glyphs","isPlacementTimeExceeded","startTime","debug","m_viewState","m_viewCamera","m_viewUpdateCallback","m_textCanvasFactory","m_poiRendererFactory","m_fontCatalogLoader","m_initialized","m_glyphLoadingCount","m_textRenderers","m_tmpVector","m_overloaded","m_cacheInvalidated","m_forceNewLabelsPass","m_textElementStateCache","TextElementStateCache","m_textStyleCache","TextStyleCache","initializeDefaultOptions","setGlyphCountLimits","minNumGlyphs","maxNumGlyphs","initialized","updateGlyphDebugMesh","textRenderer","textCanvas","tileTextElementsChanged","textElementsChanged","checkIfTextElementsChanged","textElementsAvailable","hasOverlayText","initialize","updateTextElements","renderedTilesChanged","frameNumber","clearVisited","findReplacements","anyTextGroupEvicted","prepopulateScreenWithBlockingElements","placeNewTextElements","placeTextElements","placeOverlayTextElements","updateTextRenderers","m_overlayTextElements","concat","pickResults","pickHandler","pickData","pickObjectType","isDuplicate","pickResult","pickText","PickObjectType","Text","poiRenderer","pickTextElements","Icon","waitInitialized","m_loadPromise","memoryUsage","getMemoryUsage","m_initPromise","initializeDefaultAssets","initializeTextCanvases","boxes","renderListEntry","startLinePointProj","endLinePointProj","pathBlockingElement","blockingElements","project3","line","screenSpaceLines","end","lineWithBound","minX","maxX","minY","allocateIBoxes","groupState","maxNumPlacedLabels","pass","visited","shieldGroups","hiddenKinds","hiddenGeometryKinds","elevationMap","getDisplacementMap","textElementState","textElementStates","PersistentLabels","total","numRenderedTextElements","uninitialized","viewDistance","tooFar","elementVisible","NewLabels","textElementStyle","getTextElementStyle","overlayTextElement","elementType","isPathLabelTooSmall","numNotVisible","dbgPathTooSmall","numPathTooSmall","textRenderState","forceNewPassOnLoaded","initializeGlyphs","getLayer","DEFAULT_TEXT_CANVAS_LAYER","storage","drawCount","numCannotAdd","textRenderStyle","textLayoutStyle","addPoiLabel","addLineMarkerLabel","addPathLabel","loadingState","Initialized","Requested","Loaded","newLoadPromise","fontCatalog","loadCharset","all","bounds","getGlyphs","defaultFontCatalogName","initializeDefaultTextElementStyle","loadCatalogs","catalog","loadedTextCanvas","createTextCanvas","createPoiRenderer","defaultTextCanvas","defaultPoiRenderer","initializeTextElementStyles","debugGlyphs","debugContext","getValue","m_debugGlyphTextureCacheMesh","initializeGlyphDebugMesh","m_debugGlyphTextureCacheWireMesh","defaultFontCatalog","planeGeometry","textureSize","maxWidth","maxHeight","wireframe","WireframeGeometry","wireframeMaterial","clearTextCache","checkIfOverloaded","updateStartTime","overloaded","updateTextElementsFromSource","tileDataSource","tiles","sortedTiles","prepareTextElementGroup","userTextElements","sortedGroups","createSortedGroupsForSorting","numTextElementsUpdated","textElementLists","selectTextElementsToUpdateByDistance","textElementGroup","maxViewDistance","found","getOrSet","checkReadyForPlacement","PrePlacementResult","Ok","deduplicateElement","Duplicate","totalLabels","results","totalGroups","newGroups","tilesToRender","shouldRenderText","groupedPriorityLists","textElementGroups","foundGroup","farDistanceLimitRatio","maxDistanceRatioForTextLabels","maxDistanceRatioForPoiLabels","getMaxViewDistance","tileTextElements","fadeAnimationRunning","placeStartTime","placeNew","maxNumPlacedTextElements","maxNumVisibleLabels","groupStates","sortedGroupStates","currentPriority","currentPriorityBegin","textElementGroupState","newPriority","placeTextElementGroup","beginGroupIndex","endGroupIndex","screenXOrigin","screenYOrigin","screenPoints","pt","pX","pY","SimplePath","LineCurve","factor","labelDistanceScaleMin","labelDistanceScaleMax","state","maxVisibilityDist","distanceFadeValue","textDistance","labelState","iconIndex","pointLabel","iconRenderStates","iconRenderState","setViewDistance","iconRejected","renderIcon","isClamped","isValid","distanceScaleFactor","getDistanceScalingFactor","iconReady","prepareRender","placeIcon","PlacementResult","Invisible","Rejected","distanceFadeFactor","getDistanceFadingFactor","viewState","poiTextMaxDistance","ignoreDistance","iconIsOptional","shouldRenderPointText","placeResult","placePointLabel","numPoiTextsInvisible","textRejected","textIsOptional","startFadeOut","renderTextDuringMovements","shouldRenderPoiText","isFading","startFadeIn","fadeFactor","scaleFactor","textBufferObject","createTextBufferObject","backgroundIsVisible","scale","addTextBufferObject","addTextBufferToCanvas","numRenderedPoiTexts","allocateSpace","renderPoi","renderDistance","numRenderedPoiIcons","addPointLabel","lineMarkerLabel","shieldGroup","shieldGroupIndex","lineTechnique","minDistanceSqr","minDistance","pointIndex","tooClose","j","Math2D","distSquared","textMaxDistance","pathLabel","Path","SimpleLineCurve","getPoint","computeViewDistance","textRenderDistance","prevSize","placePathLabel","prevOpacity","prevBgOpacity","numTextElementsInScene","newOverloaded","m_roadPicker","RoadPicker","registerTile","raycasterFromScreenPoint","screenX","screenY","scenePosition","intersects","intersectObjects","worldRootObject","intersect","Unspecified","intersection","addObjInfo","GeometryType","Point","ExtrudedLine","SolidLine","TextPath","Polygon","ExtrudedPolygon","Area","planeIntersectPosition","intersectRoads","MapViewPoints","faceIndex","objInfosIndex","polygonStartFace","MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION","MINIMUM_OBJECT_SIZE_ESTIMATION","TileLoaderState","numBytes","OrientedBox3","frameNumLastRequested","frameNumVisible","numFramesVisible","visibilityCounter","m_disposed","m_localTangentSpace","m_forceHasGeometry","m_userTextElements","TextElementGroup","MAX_SAFE_INTEGER","m_textElementGroups","TextElementGroupPriorityList","m_pathBlockingElements","m_visibleArea","m_minElevation","m_maxElevation","m_ownedTextures","WeakSet","m_resourceInfo","computeResourceInfo","m_textElementsChanged","foundIndex","blockingElement","changed","m_decodedTile","tileInfo","roadIntersectionData","_zoomLevel","area","updatePriority","invalidateResourceInfo","forceHasGeometry","decodeTime","copyrightHolderIds","m_tileGeometryLoader","hasGeometry","basicGeometryLoaded","allGeometryLoaded","m_tileLoader","loadAndDecode","tileLoaderState","Ready","Canceled","Failed","m_animatedExtrusionTileHandler","handler","disposeMaterial","materialProperty","shouldDisposeTexture","disposeObject","shouldDisposeObjectGeometry","shouldDisposeObjectMaterial","rootObject","traverse","preparedTextPaths","clearTextElements","hasTextElements","cancel","worldExtent","num3dObjects","numTextElements","numUserTextElements","aggregatedObjSize","intersectionData","bytesPerEntry","numEntries","ids","getRoadIntersectionDataSize","AnimatedExtrusionState","m_mapView","m_tileHandlerMap","m_zoomDirection","m_zoomLevelPrevious","tileHandler","zoomLevelChanged","m_forceAnimatedExtrusion","animatedExtrusion","m_forceAnimatedExtrusionDuration","extrusionDuration","tileKeys","m_tile","m_animatedExtrusionDuration","m_extrudedObjects","m_animatedExtrusionRatio","m_animatedExtrusionState","None","m_animatedExtrusionStartTime","Playing","Started","currentTime","timeProgress","extrusionRatio","easeInOutCubic","Finished","stopExtrusionAnimation","extrudedObject","startExtrusionAnimationIfNeeded","zoomDirection","removeTile","childTileKeys","getSubTileKeys","childTileKey","extrusionStartTime","nextLevelDiff","getChildTiles","parentTileKey","parent","startExtrusionAnimation","parentUri","childUri","absoluteUrlWithOriginRe","getUrlOrigin","substr","baseUrl","RegExp","idx","lastIndexOf","getUrlHostAndProtocol","protocol","host","urlOriginRe","match","emptyTexture","visibilityRange","linkMixinWithMaterial","mixin","shaderDefines","shaderUniforms","linkMixinWithShader","DisplacementFeature","ExtrusionFeature","isEnabled","displacementMaterial","updateDisplacementFeature","useDisplacementMap","insertShaderInclude","DisplacementFeatureMixin","m_displacementMap","setDisplacementMap","Uniform","displacementScale","displacementBias","chainCallbacks","source","fadingMaterial","patchGlobalShaderChunks","ShaderChunk","fading_pars_vertex","updateFadingFeature","useFading","updateUniforms","additionalCallback","onBeforeRender","FadingFeatureMixin","m_fadeNear","m_fadeFar","getFadeNear","setFadeNear","getFadeFar","setFadeFar","extrusionMaterial","extrusion_pars_vertex","updateExtrusionFeature","useExtrusion","ExtrusionFeatureMixin","m_extrusion","getExtrusionRatio","setExtrusionRatio","zFightingWorkaround","ZFIGHTING_WORKAROUND","addFadingProperties","applyFadingParameters","addExtrusionProperties","applyExtrusionParameters","addDisplacementProperties","applyDisplacementParameters","copyFadingParameters","copyExtrusionParameters","copyDisplacementParameters","MeshStandardMaterial","applyMixinsWithoutProperties","LineCapsModes","extrude_line_vert_func","round_edges_and_add_caps","CAPS_NONE","CAPS_SQUARE","CAPS_ROUND","CAPS_TRIANGLE_IN","CAPS_TRIANGLE_OUT","tile_clip_func","high_precision_vert_func","StringEncodedMeters","encodedValue","exec","StringEncodedPixels","StringEncodedHex","StringEncodedRGB","channels","StringEncodedRGBA","parseFloat","StringEncodedHSL","StringEncodedMetricFormatMaxSize","StringEncodedColorFormatMaxSize","numeral","formats","baseTechniqueParamsDescriptor","attrScopes","AttrScope","TechniqueGeometry","transient","TechniqueRendering","pointTechniquePropTypes","mergeTechniqueDescriptor","squaresTechniquePropTypes","squares","circlesTechniquePropTypes","circles","lineMarkerTechniquePropTypes","FeatureGeometry","useAbbreviation","useIsoCode","textMayOverlap","iconMayOverlap","textReserveSpace","iconReserveSpace","alwaysOnTop","showOnMap","stackMode","iconFadeTime","textFadeTime","iconXOffset","iconYOffset","iconScale","screenHeight","screenWidth","poiTable","poiName","poiNameField","imageTextureField","imageTexturePrefix","imageTexturePostfix","hAlignment","vAlignment","polygonalTechniqueDescriptor","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","solidLineTechniqueDescriptor","lineTechniqueDescriptor","fillTechniqueDescriptor","fill","standardTechniqueDescriptor","roughness","metalness","alphaTest","emissiveIntensity","refractionRatio","mapProperties","normalMapProperties","displacementMapProperties","roughnessMapProperties","emissiveMapProperties","bumpMapProperties","metalnessMapProperties","alphaMapProperties","standard","extrudedPolygonTechniqueDescriptor","floorHeight","defaultColor","defaultHeight","constantHeight","boundaryWalls","footprint","maxSlope","enableDepthPrePass","textTechniqueDescriptor","shaderTechniqueDescriptor","isStandardExtrudedLineTechnique","dashes","textureCoordinateType","transferList","texturePropertyKey","ArrayBuffer","imageName","textureName","UPDATE_EVENT","DataSource","uniqueName","storageLevelOffset","cacheable","useGeometryLoader","m_maxGeometryHeight","m_storageLevelOffset","uniqueNameCounter","m_styleSetName","styleSet","GlyphData","advanceX","u0","v0","u1","v1","font","sourceTextureCoordinates","dynamicTextureCoordinates","copyIndex","isInCache","character","String","fromCodePoint","direction","metrics","lineHeight","MAX_CAPACITY","VERTEX_BUFFER_STRIDE","INDEX_BUFFER_STRIDE","VERTICES_PER_QUAD","INDICES_PER_QUAD","QUAD_VERTEX_MEMORY_FOOTPRINT","QUAD_INDEX_MEMORY_FOOTPRINT","NUM_BYTES_PER_FLOAT","NUM_BYTES_PER_INT32","backgroundMaterial","initialSize","m_currentCapacity","m_drawCount","m_updateOffset","m_pickingCount","m_vertexBuffer","setUsage","DynamicDrawUsage","m_positionAttribute","m_uvAttribute","m_colorAttribute","m_bgColorAttribute","m_indexBuffer","m_geometry","m_pickingDataArray","m_bgMesh","updateRange","setDrawRange","glyphData","corners","weight","bgWeight","mirrored","newSize","resizeBuffers","baseVertex","baseIndex","setXYZW","mirroredUVIdx","setX","vertexOffset","bgColor","bgOpacity","cosR","sinR","offsetZ","rotSign","red","green","blue","bgRed","bgGreen","bgBlue","bgAlpha","targetOffset","srcOffset","glyph","w","bw","startIdx","endIdx","pickCallback","positionIndex","newVertexBuffer","newIndexBuffer","TypesettingUtils","EM_TO_PX","PT_TO_PX","OBLIQUE_ANGLE","OBLIQUE_OFFSET","getPixelSize","originalSize","Em","Percent","getSmallCapsScale","smallCapsTransformations","SmallCaps","xHeight","capHeight","computeGlyphTransform","localRotation","cosAngle","sinAngle","localCosAngle","localSinAngle","updateBounds","globalBounds","individualBounds","Box2","raycaster","screenCoords","origin","mouseCoords","ceil","indices","il","fromArray","pointInfo","getPointInfo","pointIsOnScreen","testPoint","absoluteScreenPosition","relativeScreenPosition","pickCoordinates","dx","dy","halfSize","isNode","DebugOption","SET_EVENT_TYPE","DebugContext","m_optionsMap","__debugContext","opt","hasEventListener","option","ColorCache","m_map","colorCode","padStart","Label","All","prepareDecodedTile","foundSet","m_isFinished","m_availableGeometryKinds","discardNeedlessTile","geometryCreationPending","compareGeometryKinds","processTechniques","setGeometryKinds","setDecodedTile","prepareForRender","m_enabledKinds","m_disabledKinds","m_timeout","loadingFinished","removeDecodedTile","geometryCreator","createAllGeometries","geometryCreationTime","addMessage","finish","disposeTile","disposed","enabledSame","disabledSame","enabledEmpty","disabledEmpty","decoderServiceType","scriptUrl","workerCount","workerSet","getWorkerSet","WorkerBasedDecoder","workerSets","ConcurrentWorkerSet","destroy","sourceInfo","existingInfo","findItem","year","link","formatAsHtml","filtered","HighPrecisionUtils","doubleToFloatVec","fround","createHighPrecisionCameraPos","objectInverseWorldMatrix","mvp","matrixWorldInverse","eyePos","eyePosFloat","viewProjection","eyePosHi","eyePosLo","createAttributes","positionVec","positionVecLow","addHPValue","major","addHPVector","vec","positionHigh","Float32BufferAttribute","positionLow","addInterleavedAttributes3","positionOffset","newPositions","majorX","minorX","majorY","minorY","majorZ","minorZ","setPositions","makeFloatVec","minorVec","updateHpUniforms","shaderMaterial","highPrecisionCameraInfo","isMaterial","u_mvp","u_eyepos","u_eyepos_lowpart","convertPositions","vAny","returnPositions","createLine","linePositions","addCircles","wireFrame","triangulateLine","hpLineGeometry","hpPositions","positionAttribute","positionLowAttribute","hpSolidMaterial","lineObject","HPL","HighPrecisionWireFrameLine","HighPrecisionLine","setupForRendering","createPoints","pointPositions","materialParameters","hpPointsGeometry","hpPointsMaterial","isHighPrecisionPointMaterial","HighPrecisionPointMaterial","pointsObject","HPP","HighPrecisionPoints","FeatureModifierId","OmvFilterString","StringMatch","matchString","str","filterString","Any","Match","StartsWith","EndsWith","endsWith","OmvGeometryType","OMV_TILE_DECODER_SERVICE_TYPE","OMV_TILER_SERVICE_TYPE","OmvTile","Tile","EquirectangularProjection","geoToWorldScale","worldToGeoScale","latitudeSpanInRadians","longitudeSpanInRadians","sizeX","sizeY","normalizedEquirectangularProjection","equirectangularProjection","TransverseMercatorProjection","m_phi0","m_lambda0","_unitScale","lon","TransverseMercatorUtils","POLE_RADIUS","rsq","POLE_RADIUS_SQ","nearestQuarter","deltaLon","deltaLat","distanceToPoleSq","distanceToPole","dir","offsetLon","clamped","clampGeoPoint","normalLon","phi","lambda","B","atanh","outScale","tau","nx","ny","D","sinh","pointsToCheck","E","POLE_EDGE_DEG","containsEastCut","containsCenterX","containsCenterY","alignLatitude","projected","vx","vy","vz","minZ","maxZ","lowerQ","upperQ","containsLowerQY","containsUpperQY","geoPoints","alignLongitude","latitudes","longitudes","altitudes","referencePoint","bad","good","POLE_EDGE","transverseMercatorProjection","tilingScheme","minElevation","maxElevation","m_tilingScheme","m_worldBox","m_worldDimensions","levelDimensionX","getLevelDimensionX","levelDimensionY","getLevelDimensionY","originX","originY","unprojectBox","halfQuadTreeSubdivisionScheme","SubTiles","iterator","ZCurveIterator","RowColumnIterator","parentKey","worldCoordinatesToTileKey","cx","cy","worldSizeX","worldSizeY","wrap","lower","upper","minVal","maxVal","southWestLongitude","longitudeInRadians","southWestLatitude","northEastLongitude","northEastLatitude","minTileKey","maxTileKey","columnCount","minColumn","maxColumn","minRow","maxRow","m_subdivisionScheme","divX","getSubdivisionX","divY","getSubdivisionY","optionalParams","console","trace","m_channel","Trace","prefix","Debug","Info","Warn","WORKERCHANNEL_MSG_TYPE","workerMessage","self","postMessage","CopyShader","tDiffuse","CopyMaterial","NoBlending","Env","_name","unmap","subset","elem","hasIntersection","TextureCoordinateType","PoiStackMode","descriptors","projectionName","sphereProjection","attributeMap","$id","emptyTechniqueDescriptor","StyleConditionClassifier","_whenExpr","savedStyle","switchStyle","_style","enclosingExpr","matchVarStringComparison","_geometryType","saved","OptimizedSubSetKey","keyUpdateNeeded","envLayer","envGeometryType","updateKey","cachedStyleSet","makeDecodedTechnique","attrValue","toJSON","m_techniques","m_exprPool","ExprPool","m_cachedResults","m_styleConditionClassifier","m_subStyleSetCache","m_definitionExprCache","m_tmpOptimizedSubSetKey","m_emptyEnv","m_definitions","resolveStyleReferences","isJsonExprReference","definitionName","isActualSelectorDefinition","resolveReferences","techniqueRenderOrder","styleSetIndex","_styleSetIndex","computeDefaultRenderOrder","compileStyleSet","optimizedSubSetKey","m_layer","m_geometryType","searchedStyleSet","getOptimizedStyleSet","currStyle","processStyle","techinque","_index","subSetKey","optimizedStyleSet","createPreFilteredStyleSet","compileStyle","when","classify","intern","_minZoomLevelExpr","_maxZoomLevelExpr","err","checkZoomLevel","Condition","getTechniqueForStyleMatch","final","checkStyleDynamicAttributes","_dynamicTechniques","dynamicAttributes","evaluateTechniqueProperties","getDynamicTechniqueKey","createTechnique","_staticTechnique","dynamicAttrKey","_attrName","_dynamicTechniqueAttributes","_dynamicFeatureAttributes","_dynamicForwardedAttributes","_staticAttributes","dynamicFeatureAttributes","dynamicTechniqueAttributes","dynamicForwardedAttributes","targetStaticAttributes","techniqueDescriptor","processAttribute","deps","attrScope","secondaryCategory","labelProperty","instantiationContext","attrExpr","instantiate","dynamicAttrs","_key","SdfShaderChunks","sdf_attributes","sdf_varying","sdf_varying_computation","sdf_frag_uniforms","sdf_sampling_functions","clearVertexSource","clearFragmentSource","copyVertexSource","copyFragmentSource","sdfTextVertexSource","sdfTextFragmentSource","GlyphClearMaterial","GlyphCopyMaterial","pageOffset","page0","DEFAULT_IMAGE","page1","page2","page3","page4","page5","page6","page7","SdfTextMaterial","vertexSource","fragmentSource","sdfTexture","sdfParams","Vector4","distanceRange","MSDF","isMsdf","BG_TEXT","isBackground","side","DoubleSide","extensions","derivatives","characterBounds","AlphaFormat","RGBFormat","RGBAFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","dataType","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","AmbientLight","intensity","DirectionalLight","castShadow","DEPTH_PRE_PASS_STENCIL_MASK","DEPTH_PRE_PASS_RENDER_ORDER_OFFSET","createDepthPrePassMaterial","baseMaterial","depthFunc","EqualDepth","colorWrite","enforceBlending","depthPassMaterial","LessDepth","evaluateBaseColorProperty","originalGeometry","depthPassGeometry","extrusionAxisAttribute","materialIndex","depthMesh","colorMesh","depthMaterial","stencilWrite","stencilFail","KeepStencilOp","stencilZFail","stencilZPass","ReplaceStencilOp","stencilFunc","AlwaysStencilFunc","stencilRef","stencilFuncMask","colorMaterial","ZeroStencilOp","EqualStencilFunc","overlayObject","hasDisplacementFeature","overlayPosition","worldCoords","geoCoords","contains","sampleHeight","overlayPath","firstObject","Terrain","MAX_DISTANCE_ERROR","extendedTileInfo","lineFeatures","lineGroup","numFeatures","widths","techniqueCatalog","featureIds","pickPos","distanceToPoint","techniqueIndices","px","py","pickDistance","featureStart","featureEnd","startX","startY","widthEntry","actualWidth","lineWidthSqr","closestDistSqr","MAX_VALUE","endX","endY","distSqr","distToSegmentSquared","roadPickResult","distFromCenter","MIN_AVERAGE_CHAR_WIDTH","tmpPosition","tmpCameraDir","COS_TEXT_ELEMENT_FALLOFF_ANGLE","refPosition","viewDistance0","viewDistance1","viewCamera","updatePoiFromPoiTable","projectionType","getWorldPosition","checkViewDistance","TooFar","NotReady","tmpBox","tmpBoxes","tmpMeasurementParams","tmpCollisionBoxes","tmpCollisionBox","CollisionBox","tmpScreenPosition","tmpTextOffset","tmp2DBox","Box","pointLabelMargin","screenCollisions","PoiRenderer","computeIconScreenBox","isAllocated","isRejected","outScreenPosition","outputCharacterBounds","measureText","hAlign","vAlign","Right","Below","poiIsRenderable","computedWidth","computedHeight","computePointTextOffset","expandByVector","multiplyScalar","translate","textReservesSpace","allocate","candidateBoxes","checkGlyphCollision","search","checkGlyphVisible","isFullyVisible","glyphBox","collisionBox","intersectsDetails","DetailedCollisionBox","screenProjector","outScreenPoints","anyPointVisible","projectOnScreen","minScreenSpace","setFromPoints","lengthSq","INVALID_RENDER_BATCH","tempPos","PoiRenderBufferBatch","imageItem","getColor","boxBuffer","setup","init","updateBufferGeometry","updateMemoryUsage","iconTexture","IconTexture","imageData","UVMapping","premultiplyAlpha","generateMipmaps","m_material","IconMaterial","BoxBuffer","PoiRenderBuffer","batches","m_batchMap","imageTextureName","batchKey","mappedIndex","bufferBatch","batchSet","screenBox","batchIndex","registerPoi","uvBox","addBox","batch","pickBoxes","m_tempScreenBox","m_renderBuffer","centerX","centerY","preparePoi","allocateScreenSpace","addPoi","poiTableName","getImageTexture","m_missingTextureName","imageDefinition","imageCache","findImageByName","loaded","loadingPromise","imageUrl","loadImage","loadedImageItem","setupPoiInfo","imageWidth","imageHeight","iconWidth","iconHeight","minS","maxS","minT","maxT","iconScaleH","iconScaleV","s0","t0","s1","t1","ImageOrigin","RBush","box","detailBoxes","isLineWithBound","screenBounds","rtree","bbox","insert","containsBox","testBox","detailBox","boundedLine","intersectsLine","lineXDiffTransformed","signBL","signBR","signTL","signTR","lineYDiffTransformed","normalX","normalY","debugCanvas","m_renderContext","m_renderingEnabled","m_numAllocations","m_numSuccessfulTests","m_numFailedTests","m_numSuccessfulVisibilityTests","m_numFailedVisibilityTests","getContext","strokeStyle","strokeRect","boundsArray","collisionFound","f","u","_maxEntries","_minEntries","leaf","_all","toBBox","collides","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","apply","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","M","_allDistMargin","computeStyleCacheId","datasourceName","DEFAULT_TEXT_STYLE_CACHE_ID","TextRenderStyleCache","TextLayoutStyleCache","Center","DEFAULT_STYLE_NAME","m_textRenderStyleCache","m_textLayoutStyleCache","m_textStyles","m_defaultStyle","themedDefaultStyle","createTextElementStyle","textRenderers","styledTextRenderer","styleId","cacheId","defaultRenderParams","defaultOpacity","hexColor","defaultBackgroundSize","hasBackgroundDefined","defaultBackgroundOpacity","hexBgColor","themeRenderParams","floorZoomLevel","defaultLayoutParams","wrapping","themeLayoutParams","styleName","fontCatalogName","DEFAULT_THROTTLING_TIMEOUT","m_throttlingTimeout","m_movementStartedFunc","m_movementFinishedFunc","m_lastCameraPos","m_newCameraPos","m_throttlingTimerId","m_movementDetectorDeadline","onDeadlineTimer","startMovementFinishedTimer","newAttitude","newCameraPos","m_lastAttitude","cameraMoved","equals","m_cameraMovedLastFrame","NaN","removeMovementFinishedTimer","remainingTime","nearMin","nearMultiplier","nearFarMultiplier","farOffset","m_tmpVectors","m_tmpQuaternion","farMin","nearPlane","farPlane","extractBasis","fwd","fwdRot","addScaledVector","ElevationBasedClipPlanesEvaluator","TopViewClipPlanesEvaluator","nearFarMarginRatio","farMaxRatio","nearFarMargin","m_minimumViewRange","evaluateDistanceSphericalProj","evaluateDistancePlanarProj","minimumViewRange","getCameraAltitude","farMax","cameraAltitude","cam","halfFovAngle","farTangent","getTangentBasedFarPlane","getFovBasedFarPlane","getOrthoBasedFarPlane","getTangentDistance","te","fovAngle","dVec","cameraFwdVec","tVec","cta","a2","r2","TiltViewClipPlanesEvaluator","cosTiltAngle","halfPiLimit","cameraTilt","getCameraTilt","topAngleRad","bottomAngleRad","z1","z2","sinBeta","topDist","bottomDist","planesDist","getFrustumGroundIntersectionDist","cosHalfFov","getCameraLookAtDistance","cameraToOrigin","getCameraPitch","modifiedAlpha","getTiltedFovBasedFarPlane","cosAlpha","dSqr","cosAlpha1","minNear","minFarOffset","minFar","m_nearPlane","m_farPlane","fixedNear","invalidatePlanes","fixedFar","nearDist","farDist","MSAARenderPass","MSAASampling","samplingLevel","Level_1","m_renderTarget","m_localCamera","m_quadScene","m_quadUniforms","m_quadMaterial","MSAAMaterial","m_quad","WebGLRenderTarget","offsets","OffsetVectors","oldClearColor","oldView","oldRenderTarget","getRenderTarget","setViewOffset","uniformCenteredDistribution","sampleWeight","isLoggingMessage","DEFAULT_WORKER_COUNT","DEFAULT_WORKER_INITIALIZATION_TIMEOUT","m_workerChannelLogger","m_eventListeners","m_workers","m_availableWorkers","m_workerPromises","m_readyPromises","m_requests","m_workerRequestQueue","m_nextMessageId","m_stopped","m_referenceCount","onWorkerMessage","workerId","WorkerServiceProtocol","isResponseMessage","messageId","worker","checkWorkerRequestQueue","errorMessage","errorStack","stack","resolver","isInitializedMessage","readyPromise","getReadyPromise","service","eventHandler","m_workerCount","hardwareConcurrency","timeout","workerConnectionTimeout","workerPromise","WorkerLoader","startWorker","evt","waitForAllResponses","terminateWorkers","serviceId","ensureStarted","promise","callback","request","requestController","reject","ServiceMessageName","Request","postRequestMessage","promises","buffers","signal","aborted","RequestController","unshift","workerEntry","terminate","newPromise","that","startWorkerImmediately","directlyFallbackToBlobBasedLoading","startWorkerBlob","pageUrl","href","fullScriptUrl","Worker","waitWorkerInitialized","fetchScriptSourceToBlobUrl","blobUrl","sourceLoaderCache","scriptSource","blob","firstMessageCallback","isWorkerBootstrapRequest","resolvedDependencies","dependency","resolved","dependencyUrlMapping","cleanup","errorCallback","filename","lineno","timerId","nextUniqueServiceId","m_serviceCreated","addReference","broadcastRequest","WORKER_SERVICE_MANAGER_SERVICE_ID","Requests","DestroyService","targetServiceId","removeReference","CreateService","targetServiceType","tileKeyCode","WorkerDecoderProtocol","DecodeTileRequest","getProjectionName","invokeRequest","TileInfoRequest","DecoderMessageName","Configuration","broadcastMessage","CalculationStatus","TileGeometryManagerBase","enableFilterByKind","m_visibilityCounter","kinds","incrementVisibilityCounter","addOrRemoveToEnabledSet","enableDisableKinds","addOrRemoveToDisabledSet","addOrRemoveToHiddenSet","visibilityHasChanged","oneKind","visibilityChange","addRemove","visibleKinds","geometryLoader","tileKinds","availableGeometryKinds","needUpdate","nowVisible","m_tileUpdateCallback","addToSet","kindSet","kindsSet","SimpleTileGeometryLoader","enabledGeometryKinds","disabledGeometryKinds","updateTileObjectVisibility","m_name2Url","m_url2Name","hasName","oldNames","ImageCache","findImage","registerImage","startLoading","m_images","imageCacheItem","findImageCacheItem","mapViews","itemsToRemove","mapViewIndex","keyToDelete","imageLoader","ImageLoader","renderImage","ex","errorEvent","createImageBitmap","imageOrientation","imageBitmap","document","createElement","drawImage","getImageData","m_enabled","Fog","m_fogIsDefined","m_cachedTheme","enableFog","startRatio","viewRange","horizontalDensity","verticalDensity","endRatio","density","smoothStep","lerp","setFogInRawShaderMaterials","Material","m_imageTextures","m_poiShieldGroups","m_missingPoiTableName","loadedOk","m_missingPoiName","assertExists","poiGeometry","addLineMarker","ok","statusText","jsonAtlas","imageTextureDef","reason","getPoiTable","notifyMissingPoiTable","poiTableEntry","getEntry","notifyMissingPoi","iconName","composeTechniqueTextureName","iconMinLevel","iconMaxLevel","textMinLevel","textMaxLevel","updateMinMaxZoomLevelsFromPoiInfo","groupKey","positionArray","checkCreateTextElement","techniqueTextureName","poiTechnique","PoiTableEntry","jsonEntry","isOK","altNames","Show","Hide","ShowParent","PoiTable","useAltNamesForKey","poiList","poiDict","m_isLoading","m_loadedOk","entryIdx","poiTableUrl","jsonPoiTable","tableEntry","verifyJSON","newPoiEntry","altName","m_poiTables","loadPromises","poiTableRef","addTable","finally","finishLoading","debugTiles","polarTilingScheme","m_maxLatitude","m_geometryLevelOffset","m_debugTiles","m_northPoleMaterial","m_southPoleMaterial","m_styleSetEvaluator","styleSetEvaluator","$geometryType","$layer","getMatchingTechniques","StyleSetEvaluator","setStyleSet","createTileGeometry","latA","latB","lonA","lonB","isNorthPole","srcProjection","dstProjection","maxLat","poleLat","pBL","pBR","pTR","pTL","needsGeometryCut","isLeftHalf","poleX","poleY","pPole","pXX","lats","lmax","lmin","nearest","shift","inPointB","inPointD","cutStart","intersectEdge","cutEnd","cutIndexStart","cutIndexEnd","Face3","fromGeometry","SkyCubemapFaceId","SKY_CUBEMAP_FACE_COUNT","createCubemapFaceArray","m_skybox","CubeTextureLoader","CubeTexture","face","DEFAULT_MAX_THEME_INTHERITANCE_DEPTH","themeUrl","resolveReferenceUri","getAppBaseUrl","resolveUrls","checkTechniqueSupport","resolveDefinitions","resolveBaseThemes","contextLoader","ContextLogger","resolveThemeReferences","extends","childUrlResolver","composeUriResolvers","RelativeUriResolver","resolveIncludes","resolveIncludeUris","baseTheme","convertFlatTheme","resolveResourceUris","resolveResources","contextLogger","pushAttr","resolvedDef","resolveStyle","resolveStyleSet","currentStyle","pushIndex","resolvedStyle","cloneDeep","resolvedWhen","resolveExpressionReferences","resolvedValue","failed","resolveInternal","defName","maxInheritanceDepth","baseThemes","baseThemesMerged","actualBaseTheme","mergeThemes","currentStyleSets","incomingStyleSets","faceUrl","MB_FACTOR","DataSourceCache","cacheSize","rct","m_disposedTiles","m_resourceComputationType","m_tileCache","LRUCache","evictionCallback","canEvict","getKey","setCapacityAndMeasure","getKeyForTile","deleteByKey","shrinkToCapacity","evictAll","selector","evictSelected","inDataSource","m_frustumIntersection","m_projectionMatrixOverride","m_viewRange","m_dataSourceCache","computationType","setCapacity","evaluateClipPlanes","visibleTileKeysResult","getVisibleTileKeysForDataSources","visibleTileKeys","distanceDiff","minDiff","actuallyVisibleTiles","allDataSourceTilesLoaded","displayZoomLevel","getDisplayZoomLevel","tileEntry","getTile","prepareTileInfo","visibleArea","updateTiles","allVisibleTileLoaded","allBoundingBoxesFinal","fillMissingTilesFromCache","oldViewRanges","newViewRanges","getTileImpl","dataSourceVisibleTileList","visibleLevel","visibleTileKey","getTileKey","searchLevelsUp","searchLevelsDown","getCacheSearchLevels","childLevel","markDataSourceTilesDirty","disposeTiles","listEntry","SearchDirection","defaultSearchDirection","NONE","BOTH","DOWN","UP","incompleteTiles","tileCode","checkedTiles","searchDirection","findUp","findDown","childTileCode","childTile","parentCode","exists","parentTile","foundUp","cacheOnly","updateTile","tileToUpdate","resultTile","tileCache","initTile","dataSourceCache","retainedTiles","markTileDirty","tileGeometryManager","dataSourceBuckets","bucket","fp","makePerspective","updateFrustum","compute","calculationFinal","tileKeyEntry","tileKeyEntries","canGetTile","ConcurrentTilerFacade","tilerServiceType","WorkerBasedTiler","indexId","input","WorkerTilerProtocol","RegisterIndex","UpdateIndex","TileRequest","m_cachedTreePromise","getCopyrightCoverageData","coverageInfo","initRBush","matchingEntries","getTree","minLevel","maxLevel","item","tree","alt","arg","isLineAccessor","isObject3dAccessor","BufferedGeometryAccessorBase","startCapSize","endCapSize","constructor","rawShaderMaterial","diffuse","BufferedGeometryAccessor","checkSetUp","positionsArray","subarray","getVertices","IndexedBufferedGeometryAccessor","reconstructLineWidth","k","UNIT_Z","POINTS","BEVEL_POINTS","SECTORS_IN_CIRCLE","STEP","addCircle","lineAngle","angle","startWithCircle","endWithCircle","angleVec","prevBt","bt","averageBt","p2","p3","N","useBevel","inclineWidth","inBuffer","startOffset","outBuffer","i2","startIndex","xd","yd","zd","_renderer","_scene","_geometry","_material","_group","force","doUpdateMatrixWorldInverse","matrixWorldNeedsUpdate","TileLoader","dataProvider","tileDecoder","loadAbortController","AbortController","Loading","Decoding","donePromise","abort","onDone","myLoadCancellationToken","payload","onLoaded","resolveDonePromise","rejectedDonePromise","byteLength","startDecodeTile","decodeTile","onDecoded","doneState","getTileInfo","APIFormat","AuthenticationMethod","AuthenticationTypeBearer","method","AuthorizationHeader","AuthenticationTypeTomTomV1","QueryString","AuthenticationTypeAccessToken","downloadManager","TransferManager","urlParams","abortSignal","tileUrl","dataUrl","authenticationCode","getActualAuthenticationCode","applyAuthCode","addQueryParams","apiFormat","XYZJson","downloadJson","downloadArrayBuffer","getBearerToken","HereV1","MapboxV4","XYZOMV","XYZMVT","XYZSpace","TomtomV1","authMethod","authenticationMethod","getDefaultAuthMethod","headers","Headers","authType","append","authParams","queryParams","queryString","concatinator","s3Base","querySelector","getElementById","innerText","getFullYear","releases","date","hash","version","dropdown","res","release","appendChild","onchange","selected","omvDataSource","OmvDataSource","accessToken","innerWidth","Boston","beginAnimation","main","IdentityProjection","identityProjection","getLongitudeQuadrant","oneOverPI","quadrantIndex","lengthOfVector3","makeBox3","halfEquatorialRadius","minLongitude","maxLongitude","minLongitudeQuadrant","maxLongitudeQuadrant","xMin","xMax","yMin","yMax","cosMaxLongitude","sinMaxLongitude","xCenter","xExtent","yCenter","yExtent","minLatitude","maxLatutide","zMax","zMin","zCenter","zExtent","SphereProjection","_minElevation","worldpoint","cosLatitude","parallelRadiusSq","parallelRadius","midX","midY","cosSouth","sinSouth","cosWest","sinWest","cosNorth","sinNorth","cosEast","sinEast","cosMidX","sinMidX","cosMidY","sinMidY","rMax","rMin","_worldBox","mx","my","gx","gy","cosLongitude","sinLongitude","sinLatitude","visitTileKey","subTileKey","hereTilingScheme","TilingScheme","webMercatorTilingScheme","mercatorTilingScheme","rotationMatrix","newBox","matrix","frustumOrPlanes","planes","dz","distanceToPointSquared","subVectors","lengths","extent","getComponent","dd","parameters","shaderParams","DEFAULT_CIRCLE_SIZE","m_color","m_opacity","PriorityListGroup","getGroup","normalizedPriority","m_sortedGroups","otherGroup","findGroup","priorityList","LoggerManagerImpl","m_loggers","channel","ConsoleChannel","WorkerChannel","loggerName","m_levelSetForAll","Logger","config","ax","ay","bx","by","xmax","ymax","computeSquaredLineLength","squaredLineLength","xDiff","yDiff","l0x","l0y","l1x","l1y","lineLengthSuared","edge0","edge1","smootherStep","inMin","inMax","outMin","outMax","lowerBound","upperBound","startValue","endValue","derivedCtor","baseCtors","baseCtor","getOwnPropertyDescriptor","m_logger","headerMessage","m_headerLogged","createLogMethod","severity","rest","nowFunc","getTime","getNowFunc","cloneInternal","src","cached","flags","candidate","optionValue","uri","resolvers","originalUrl","f1","f2","hasDisplacementMap","hasExtrusion","edgeColor","edgeColorMix","MIN_BUILDING_HEIGHT_SQUARED","extrusion_vertex","extrusion_normal_fragment_begin","extrusion_pars_fragment","extrusion_fragment","fading_vertex","fading_pars_fragment","fading_fragment","updateTransparencyFeature","points_frag","DEFAULT_SIZE","DEFAULT_SCALE","uvTransform","Matrix3","VertexColors","LuminosityHighPassShader","luminosityThreshold","smoothWidth","AdditiveBlending","SepiaShader","amount","LineCapsDefinesMapping","Square","Round","TriangleIn","TriangleOut","DefinesLineCapsMapping","lineCapsName","defineKey","LineDashesModes","LineDashesDefinesMapping","DASHES_SQUARE","DASHES_ROUND","Diamond","DASHES_DIAMOND","DefinesLineDashesMapping","lineDashesName","CAPS_MODE","DASHES_MODE","fogParam","opacityParam","merge","dashColor","outlineColor","DEFAULT_WIDTH","DEFAULT_OUTLINE_WIDTH","drawRange","DEFAULT_DRAW_RANGE_START","DEFAULT_DRAW_RANGE_END","DEFAULT_DASH_SIZE","DEFAULT_GAP_SIZE","UniformsLib","drawRangeStart","drawRangeEnd","invalidateFog","invalidateOpacity","capsMode","dashesMode","useTileClip","VignetteShader","darkness","operatorDescriptors","evaluator","m_partialEvaluation","previousEvaluationMode","fromValue","builtin","builtins","defineOperator","defineOperators","CastOperators","ComparisonOperators","MathOperators","StringOperators","ColorOperators","TypeOperators","MiscOperators","FlowOperators","ArrayOperators","InterpolationOperators","ObjectOperators","FeatureOperators","MapOperators","operators","at","Boolean","rgba","rgbaToHex","rgb","rgbToHex","hsl","euclideanModulo","hslToHex","compare","strict","conditionalCast","any","none","boolean","number","string","interpolate","_interpolatedProperty","_mode","interpolatorType","base","stops","isConstantInterpolation","createInterpolatedProperty","_exponent","_stops","prepareInterpolateCallExpr","interpolatedProperty","_inputIsZoom","classifyStepCallExpr","first","last","MIN_SAFE_INTEGER","hasConstantValues","literal","prepareStepCallExpr","Interpolant","i1","sampleValues","valueSize","offset1","offset0","weight1","weight0","pixels","ppi","ln","ln2","log10","pi","coalesce","LookupMode","lookupMember","lookupMode","memberName","downcase","toLocaleLowerCase","upcase","toLocaleUpperCase","typeof","emptyEnv","_context","preserve","newBranch","newCondition","instantiatedBranch","Character","Token","isSpace","codepoint","Tab","Lf","Cr","Space","isNumber","_0","_9","isLetter","A","Z","isIdentChar","isLetterOrNumber","Dollar","Dot","LBracket","RBracket","tokenSpell","token","Eof","Identifier","Comma","LParen","RParen","Exclaim","TildeEqual","CaretEqual","DollarEqual","EqualEqual","ExclaimEqual","Less","Greater","LessEqual","GreaterEqual","BarBar","AmpAmp","Lexer","m_token","m_char","m_text","yylex","codePointAt","yyinp","ch","SingleQuote","DoubleQuote","Equal","Caret","Tilde","Bar","Amp","getEqualityOp","getRelationalOp","lex","parseLogicalOr","yyexpect","hasAttribute","parseLiteral","parseUnary","parsePrimary","parseRelational","parseEquality","expressions","parseLogicalAnd","isUnknownServiceError","isRequestMessage","Response","isRegisterIndexRequest","isUpdateIndexRequest","isTileRequest","abortController","isConfigurationMessage","isDecodeTileRequest","isTileInfoRequest","FeatureGroupType","FeatureGroup","storeExtendedTags","startSize","textIndex","layerIndex","classIndex","typeIndex","LineFeatureGroup","getNumBytes","segmentIds","segmentStartOffsets","segmentEndOffsets","PolygonFeatureGroup","groupNumRings","outerRingStartIndex","innerRingIsOuterContour","innerRingStartIndex","ExtendedTileInfo","textCatalog","pointGroup","polygonGroup","layerCatalog","classCatalog","typeCatalog","finishFeatureGroup","featureGroup","featureGroupFinished","getFeatureName","abbreviation","isoCode","featureGroupSize","tileInfoFinished","getFeatureText","evaluateTechniqueAttr","techniqueIndexMap","stringMap","layerMap","classMap","typeMap","infoTileTechniqueIndex","decodedTechnique","featureText","featureGroupType","stringIndex","addLayer","addClass","addType","segmentId","endOffset","contour","isOuterRing","addStringValue","ExtendedTileInfoVisitor","visitAllPointFeatures","visitAllLineFeatures","visitAllPolygonFeatures","numFeaturesFound","numPointFeatures","pointFeatures","visitPointFeature","numLineFeatures","visitLineFeature","numPolygonFeatures","polygonsFeatures","visitPolygonFeature","featureIndex","acceptPoint","getTag","positionsStart","numPointValues","acceptLine","acceptPolygon","polygons","ringStart","numRings","polygonAccessor","ringIndex","pointsStart","m_booleanLiterals","m_numberLiterals","m_stringLiterals","m_objectLiterals","m_varExprs","m_hasAttributeExprs","m_inExprs","m_matchExprs","m_caseExprs","m_callExprs","inExprs","inExpr","branchesMatching","defaultValue","evaluated","cachedExprResults","visitFunc","visit","DEFAULT_TILING_SCHEME","newScheme","VERTEX_POSITION_CACHE","SubdivisionModifier","aa","bb","cc","beta","gamma","tmpVectorA","tmpVectorB","tmpVectorC","positionAttr","uvAttr","uv","edgeAttr","edge","wallAttr","wall","indexAttr","getIndex","middleVertex","lerpVectors","newIndices","v2","shouldSplitTriangle","v3","ASSETS_PATH","BOLD_ASSETS_PATH","ITALIC_ASSETS_PATH","BOLD_ITALIC_ASSETS_PATH","REPLACEMENT_PATH","FontCatalog","fonts","unicodeBlocks","maxCodePointCount","m_replacementGlyph","m_glyphTextureCache","GlyphTextureCache","m_loadingJson","m_loadingPages","m_loadingGlyphs","m_loadedJson","m_loadedPages","m_loadedGlyphs","loadJSON","replacementDirUrl","replacementJson","replacementTexture","loadTexture","replacementFont","replacementGlyph","chars","xadvance","xoffset","yoffset","supportedBlocks","rawJSON","loadPages","assetsPath","getAssetsPath","jsonPath","jsonPromise","pagePromises","page","pages","loadPage","pagePath","charset","AllCaps","toUpperCase","glyphPromises","char","getFont","fontHash","glyphHash","fontGlyphMap","glyphPromise","createReplacementGlyph","charUnicodeBlock","loadAssets","loadedGlyph","shouldTransform","transformedCharacter","getGlyph","selectedFontName","textureBytes","loadedPage","loadBlock","sourceGlyphData","texturePath","pagePromise","fontStylePath","Bold","bold","Italic","italic","BoldItalic","boldItalic","MAX_NUM_COPY_PAGES","MAX_TEXTURE_SIZE","entryWidth","entryHeight","nRows","m_cacheHeight","m_cacheWidth","m_textureSize","m_entryCache","initCacheEntries","m_rt","depthBuffer","stencilBuffer","m_copyTextureSet","m_copyTransform","m_copyPositions","m_copyMaterial","m_copyVertexBuffer","m_copyPositionAttribute","m_copyUVAttribute","m_copyGeometry","copyIndexBuffer","m_copyMesh","m_copyGeometryDrawCount","m_clearMaterial","m_clearPositionAttribute","m_clearGeometry","clearIndexBuffer","m_clearMesh","m_clearGeometryDrawCount","oldestEntry","oldest","clearCacheEntry","copyGlyphToCache","willClearGeometry","willCopyGeometry","srcPages","nCopies","pageIndex","dummyFont","lineGap","dummyGlyphData","dummyEntry","cacheLocation","copyTextureIndex","applyMatrix3","setXYZ","setXY","Entry","newer","older","cacheCapacity","sizeFunction","m_size","m_newest","m_oldest","m_capacity","m_sizeFunction","callbackfn","thisArg","newCapacity","evict","sizeMeasure","entrySize","promoteEntry","newest","cb","entryOlder","deleteEntry","evictOldest","itemToRemove","isOk","tempTextPosition","tempTextBounds","tempVertexBuffer","m_fontCatalog","minGlyphCount","maxGlyphCount","m_ownsMaterial","createSdfTextMaterial","m_ownsBgMaterial","m_bgMaterial","m_defaultLayer","TextGeometry","m_layers","m_defaultTextRenderStyle","m_currentTextRenderStyle","m_defaultTextLayoutStyle","m_currentTextLayoutStyle","m_lineTypesetter","LineTypesetter","m_pathTypesetter","PathTypesetter","bgMaterial","backgroundMesh","oldTarget","layerId","outputBounds","upperCaseArray","pathOrigin","textPathOverflow","targetLayer","tempLayer","prevDrawCount","updatePosition","addPickingData","glyphArray","smallCapsEnabled","textBounds","storeStyles","computeTextBuffer","TextBufferObject","pick","glyphBounds","isPath","typesettingParams","smallCapsArray","vertexBuffer","arrangeGlyphs","m_tempTransform","m_tempCorners","m_tempLineDirection","m_tempRunDirection","m_tempPixelSize","m_tempPixelBgSize","m_tempScale","m_tempSmallCaps","m_currentParams","isOnlyMeasured","lineStartIdx","glyphWrapIdx","wordWrapIdx","lineStartX","lineCurrX","glyphWrapX","wordWrapX","lineCount","isBidirectionalLine","wrapPointIdx","wrapPointX","lineAlignment","placeLine","isBidirectional","placeRun","glyphDataArray","isRTL","runStart","neutralIdx","weakRunStart","weakGlyph","glyphFont","glyphFontMetrics","isBoldEmulated","isItalicEmulated","isSmallCaps","smallCapsScale","glyphScale","emulationWeight","isMirrored","verticalOffset","glyphVertexPosition","horizontalOffset","addToBuffer","m_tempPathPosition","m_tempPathLength","m_tempPathOffset","getLength","pathWidth","defaultGlyphRotation","normalDisplacement","textPoint","tangent","getTangent","ContextualForm","CombinedForm","m_singleCharactersMap","m_combinedCharactersMap","m_neutralCharacters","output","currentCodePoint","charCodeAt","isArabicCharacter","prevIndex","isNeutral","prevCodePoint","prevMap","getCharacterMap","Initial","Medial","nextIndex","nextCodePoint","nextMap","Final","combinedMap","getCombinedCharacterMap","fromCharCode","Connected","Isolated","Line3","START_BOX_BUFFER_SIZE","MAX_BOX_BUFFER_SIZE","NUM_VERTICES_PER_ELEMENT","NUM_INDICES_PER_ELEMENT","NUM_POSITION_VALUES_PER_VERTEX","NUM_COLOR_VALUES_PER_VERTEX","NUM_UV_VALUES_PER_VERTEX","NUM_INDEX_VALUES_PER_VERTEX","BoxBufferMesh","startElementCount","maxElementCount","resizeBuffer","pickInfos","internalMesh","indexAttribute","glyphCount","positionAttributeCount","colorAttributeCount","uvAttributeCount","indexAttributeCount","pickInfoCount","pickInfo","canAddElements","clearGroups","clearAttributes","isEmpty","pickInfoIndex","isPixelTransparent","forceResize","xScreenPos","yScreenPos","pixelIsTransparent","screenToUvCoordinates","pixel","getPixelFromImage","newPositionArray","newColorArray","newUvArray","numIndexValues","newIndexArray","getPixelFromImageBitmap","xPos","yPos","pixelData","getPixelFromImageData","imgData","strd","Uint8ClampedArray","getPixel","pickedColor","close","isImageBitmap","pixelsData","resortedGroups","numNotRendered","m_lengths","PathParam","curves","m_point","curve","m_cache","lineCurve","curveLengths","getCurveLengths","diff","segmentLength","DEFAULT_FONT_CATALOG","DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS","DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS","DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS","DEFAULT_LABEL_DISTANCE_SCALE_MIN","DEFAULT_LABEL_DISTANCE_SCALE_MAX","MIN_GLYPH_COUNT","MAX_GLYPH_COUNT","numSecondChanceLabels","tmpCachedDuplicate","getCacheKey","hasFeatureId","isBetterPathDuplicate","newCandidate","_newDistance","oldCandidate","_oldDistance","isBetterPointDuplicate","_newCandidate","newDistance","_oldCandidate","oldDistance","findDuplicateByText","elementState","candidates","maxSqDistError","getDedupSqDistTolerance","entryCount","elementPosition","duplicate","dupIndex","dupDistSquared","isBetterDuplicate","candidateEntry","cachedElement","areDiffType","areBothVisible","distanceToSquared","m_referenceMap","m_textMap","textElementFilter","updateElements","TextElementGroupState","m_sortedGroupStates","replaceCallback","replaceElement","anyEviction","updateFading","traverseVisibleElements","cacheResult","findDuplicate","cachedDuplicate","replacement","cachedEntries","duplicateIndex","findDuplicateById","m_visited","m_textElementStates","TextElementState","visibleElementsCallback","m_textRenderState","m_iconRenderStates","renderState","m_viewDistance","predecessor","RenderState","_point","FadingState","DEFAULT_FADE_TIME","m_state","Undefined","FadingIn","FadingOut","FadedIn","FadedOut","fadingTime","Count","GroupedPriorityList","DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL","DEFAULT_STATIC_MSAA_SAMPLING_LEVEL","Level_4","antialiasSettings","msaaEnabled","strength","threshold","thickness","ghostExtrudedPolygons","m_width","m_height","m_renderPass","RenderPass","m_target1","m_target2","m_sepiaPass","ShaderPass","m_vignettePass","m_readBuffer","m_msaaPass","m_dynamicMsaaSamplingLevel","dynamicMsaaSamplingLevel","m_staticMsaaSamplingLevel","staticMsaaSamplingLevel","m_lowResPass","LowResRenderPass","isStaticFrame","usePostEffects","activeTarget","clearDepth","m_outlineEffect","OutlineEffect","nextEffectEnabled","m_bloomPass","BloomPass","m_savedWidth","m_savedHeight","vertexShaderChunk","vertexShaderChunk2","m_defaultThickness","m_defaultColor","m_defaultAlpha","m_defaultKeepAlive","m_ghostExtrudedPolygons","m_removeThresholdCount","m_originalMaterials","m_originalOnBeforeRenders","m_shaderIDs","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshPhysicalMaterial","m_uniformsChunk","outlineThickness","outlineAlpha","domElement","shadowMap","ghost","depth","stencil","updateStyle","setViewport","setScissor","setScissorTest","renderTarget","currentAutoClear","renderOutline","currentSceneAutoUpdate","autoUpdate","currentSceneBackground","currentShadowMapEnabled","setOutlineMaterial","restoreOriginalMaterial","cleanupCache","originalMaterial","shaderID","originalUniforms","originalVertexShader","ShaderLib","isRawShaderMaterial","createInvisibleMaterial","isShaderMaterial","DECLARE_TRANSFORMED","BackSide","skinning","morphTargets","morphNormals","used","keepAlive","getOutlineMaterialFromCache","updateOutlineMaterial","getOutlineMaterial","outlineParameters","BlurDirectionX","BlurDirectionY","resolution","m_renderTargetsHorizontal","m_renderTargetsVertical","m_nMips","m_separableBlurMaterials","m_basic","m_bloomTintColors","pars","resx","resy","m_renderTargetBright","renderTargetHorizonal","renderTargetVertical","m_highPassUniforms","m_materialHighPassFilter","kernelSizeArray","getSeperableBlurMaterial","m_compositeMaterial","getCompositeMaterial","m_copyUniforms","m_materialCopy","rt","inputRenderTarget","kernelRadius","KERNEL_RADIUS","SIGMA","colorTexture","texSize","nMips","NUM_MIPS","blurTexture1","blurTexture2","blurTexture3","blurTexture4","blurTexture5","dirtTexture","bloomStrength","bloomFactors","bloomTintColors","bloomRadius","tmpVectors3","tmpVector4","TileKeyEntry","longitudeOffset","m_extendedFrustumCulling","m_frustum","Frustum","m_viewProjectionMatrix","m_rootTileKeys","m_tileKeyEntries","m_mapTileCuller","MapTileCuller","projectionMatrixOverride","setFromMatrix","computeRequiredInitialRootTileKeys","viewportHeight","targetTileArea","tileBounds","Box3","uniqueZoomLevels","useElevationRangeSource","workList","shouldSubdivide","tileKeyAndOffset","getElevationRange","calculationStatus","FinalPrecise","computeTileAreaAndDistance","subTileEntry","frustumIntersectsTileBox","intersectsBox","getCenter","projectedPoint","rootTileKey","worldGeoPoint","totalAngleRad","worldLengthHorizontal","worldLeftPoint","worldLeftGeoPoint","offsetRange","SQRT2","m_globalFrustumMin","m_globalFrustumMax","m_frustumCorners","frustumCorners","getFrustumCorners","frustumCorner","globalFrustumMin","globalFrustumMax","invProjMatrix","projectionMatrixInverse","cornerIndex","addPoint","DefaultPhases","Border","DefaultBasicGeometryKinds","m_maxUpdatedTilePerFrame","m_loadPhaseDefinitions","m_basicGeometryKinds","PhasedTileGeometryLoader","updateSomeTiles","updateAllTilesTogether","checkTilesFinished","phasedGeometryLoader","numTilesUpdated","lowestPhase","currentPhase","nextPhase","updateTilesIfNeeded","toPhase","updateToPhase","m_geometryKindsLoaded","m_currentPhaseIndex","didUpdate","numberOfPhases","doFullUpdate","loadPhaseDefinitions","currentPhaseDefinition","createKind","kindToCreate","techniqueKind","indexBuffer","vertexStride","contourEdges","nSegments","vFootprint0","vRoof0","vFootprint1","vRoof1","currEdgeStart","currEdgeGoal","prevEdgeStart","prevEdgeGoal","polygonContour","polygonContourEdges","isExtruded","addFootprintEdges","wallEdgeSlope","prevEdgeIdx","v0x","v0y","v1x","v1y","vFoot0","ThreeBufferUtils","getBufferElementType","fromThreeBufferAttribute","bufferAttribute","fromThreeInterleavedBufferAttribute","fromThreeBufferGeometry","attributeNames","isOnScreen","ndc","projectVector","tempV3","ndcToScreen","tempV2","m_sky","m_projectionType","m_skyTexture","SkyGradientTexture","SkyCubemapTexture","isSameSkyType","DEFAULT_TEXTURE_SIZE","DEFAULT_MONOMIAL_POWER","cameraDir","cameraRight","cameraUp","topColor","bottomColor","m_faceCount","m_faces","fillTextureData","monomialPower","unpackAlignment","m_farClipPlaneDividedVertically","m_groundPlane","m_bottomMidFarPoint","m_topMidFarPoint","m_horizonPosition","m_farClipPlaneCorners","setHorizonPosition","updateTexturePosition","faceIdx","upDir","unproject","intersectLine","skyRatio","DEFAULT_FONT_CATALOG_NAME","m_catalogsLoading","defaultFontCatalogUrl","catalogCallback","fontCatalogConfig","fontCatalogPromise","m_renderedTilesChangeCheck","m_minGlyphCount","m_maxGlyphCount","TextCanvas","CopyrightElementHandler","m_defaults","m_mapViews","mergedCopyrightInfo","staticInfo","m_element","display","defaults","deduped","innerHTML","htmlElement","UrlCopyrightProvider","CopyrightCoverageProvider","m_fetchURL","m_baseScheme","m_cachedCopyrightResponse","fetchFunction","maxRetries","activeDownloadCount","downloadQueue","activeDownloads","defaultInstance","retryCount","status","waitFor","retryTimeout","fetchRepeatedly","milliseconds","downloadAs","download","arrayBuffer","maxParallelDownloads","deferred","DeferredPromise","doDownload","onDownloadDone","execDeferredDownload","future","converter","cacheKey","pendingFetch","newFetch","executor","resolveFunc","rejectFunc","ImageItem","m_wantsPoints","m_wantsLines","m_wantsAreas","m_wantsObject3D","wantsAll","wantsPoints","wantsLines","wantsAreas","wantsObject3D","visitObject","wantsFeature","visitMesh","BufferedGeometryLineAccessor","BufferedGeometryObject3dAccessor","IndexedBufferedGeometryLineAccessor","meshObject","geometryAccessor","getBufferGeometry","getIndexedGeometryAccessor","getGeometryAccessor","getCount","setRange","visitPoint","visitLine","visitArea","visitObject3D","tmpNormal","tmpTangent0","tmpTangent1","tmpBitangent","SEGMENT_OFFSET","LINE_VERTEX_ATTRIBUTES","NORMAL_UV_VERTEX_ATTRIBUTES","LINE_VERTEX_ATTRIBUTES_NUV","HP_LINE_VERTEX_ATTRIBUTES","HP_LINE_VERTEX_ATTRIBUTES_NUV","LineGeometry","getVertexDescriptor","hasNormalsAndUvs","highPrecision","createLineGeometry","polyline","uvs","colors","pointCount","segments","tangents","hasSegmentOffsets","hasTexCoords","sqrLength","lineCoverage","lineLength","isClosed","tmpVertices","addVertexPair","T1","T2","segment","extrusionCoord","highComp","lowComp","setComponent","computeBitangent","createSimpleLineGeometry","LineGroup","isSimple","vertexDescriptor","descr","createGeometry","isHighPrecisionPointsMaterial","dimensionality","setDimensionality","m_processLayersDefault","m_processPointsDefault","m_processLinesDefault","m_processPolygonsDefault","m_layersToProcess","m_layersToIgnore","m_pointsToProcess","m_ignoredPoints","m_linesToProcess","m_linesToIgnore","m_polygonsToProcess","m_polygonsToIgnore","m_kindsToProcess","m_kindsToIgnore","processLayersDefault","processPointsDefault","processLinesDefault","processPolygonsDefault","addItem","addItems","layersToProcess","layersToIgnore","pointsToProcess","pointsToIgnore","linesToProcess","linesToIgnore","polygonsToProcess","polygonsToIgnore","kindsToProcess","kindsToIgnore","items","layerName","matchLayer","geometryTypes","geomType","classes","featureClass","matchClass","featureAttribute","geomTypes","featureClasses","OmvGenericFeatureFilter","description","layerItems","layerItem","itemsToProcess","itemsToIgnore","defaultResult","filters","hasKindFilter","wantsLayer","wantsPointFeature","wantsLineFeature","wantsPolygonFeature","wantsKind","OmvGenericFeatureModifier","doProcessFeature","featureClassThing","matchItems","matchAttribute","getDataProvider","OmvRestClient","missingOmvDecoderServiceInfoEmitted","TileDataSource","tileFactory","TileFactory","concurrentDecoderServiceName","concurrentDecoderScriptUrl","copyrightProvider","m_decoderOptions","showMissingTechniques","filterDescription","filterDescr","gatherFeatureAttributes","createTileInfo","gatherRoadSegments","featureModifierId","skipShortLabels","enableElevationOverlay","configureDecoder","configure","m_modelConstructor","m_tileFactory","m_isReady","m_decoder","getTileDecoder","concurrentDecoderWorkerCount","getCopyrights","TileInfoLoader","loaderState","debugMaterial","linewidth","NeverDepth","debugCircleMaterial","debugBlackCircleMaterial","OmvDebugLabelsTile","addLabelDebugInfo","debugTextPaths","debugTextPathsFull","tileGeometryCreator","colorMap","indexFilter","lineGeometry","lineIndices","redPointGeometry","redPointIndices","redPointPositions","blackPointGeometry","blackPointIndices","blackPointPositions","pointScale","elementIndex","pathIndex","isRedPoint","pointSize","labelElement","addUserTextElement","lineMesh","redPointMesh","blackPointMesh","appId","appCode"],"mappings":"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","file":"index.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 119);\n","module.exports = THREE;","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./index-common\";\nexport * from \"./lib/UrlPlatformUtils.web\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/ColorUtils\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/Techniques\";\nexport * from \"./lib/TechniqueParams\";\nexport * from \"./lib/Theme\";\nexport * from \"./lib/PostEffects\";\nexport * from \"./lib/InterpolatedProperty\";\nexport * from \"./lib/InterpolatedPropertyDefs\";\nexport * from \"./lib/WorkerServiceProtocol\";\nexport * from \"./lib/WorkerTilerProtocol\";\nexport * from \"./lib/WorkerDecoderProtocol\";\nexport * from \"./lib/ITileDecoder\";\nexport * from \"./lib/ITiler\";\nexport * from \"./lib/DecodedTile\";\nexport * from \"./lib/TileInfo\";\nexport * from \"./lib/GeoJsonDataType\";\nexport * from \"./lib/ThemeVisitor\";\nexport * from \"./lib/StringEncodedNumeral\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/coordinates/GeoBox\";\nexport * from \"./lib/coordinates/GeoCoordinatesLike\";\nexport * from \"./lib/coordinates/GeoCoordinates\";\nexport * from \"./lib/coordinates/GeoPointLike\";\nexport * from \"./lib/coordinates/LatLngLike\";\nexport * from \"./lib/projection/EarthConstants\";\nexport * from \"./lib/projection/EquirectangularProjection\";\nexport * from \"./lib/projection/IdentityProjection\";\nexport * from \"./lib/projection/Projection\";\nexport * from \"./lib/projection/MercatorProjection\";\nexport * from \"./lib/projection/TransverseMercatorProjection\";\nexport * from \"./lib/projection/SphereProjection\";\nexport * from \"./lib/tiling/FlatTileBoundingBoxGenerator\";\nexport * from \"./lib/tiling/HalfQuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTreeSubdivisionScheme\";\nexport * from \"./lib/tiling/QuadTree\";\nexport * from \"./lib/tiling/SubTiles\";\nexport * from \"./lib/tiling/SubdivisionScheme\";\nexport * from \"./lib/tiling/TileKey\";\nexport * from \"./lib/tiling/TileKeyUtils\";\nexport * from \"./lib/tiling/TileTreeTraverse\";\nexport * from \"./lib/tiling/TilingScheme\";\nexport * from \"./lib/tiling/HereTilingScheme\";\nexport * from \"./lib/tiling/WebMercatorTilingScheme\";\nexport * from \"./lib/tiling/MercatorTilingScheme\";\nexport * from \"./lib/tiling/PolarTilingScheme\";\nexport * from \"./lib/math/Vector3Like\";\nexport * from \"./lib/math/Box3Like\";\nexport * from \"./lib/math/OrientedBox3Like\";\nexport * from \"./lib/math/MathUtils\";\nexport * from \"./lib/math/TransformLike\";\nexport * from \"./lib/math/OrientedBox3\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/CirclePointsMaterial\";\nexport * from \"./lib/CopyMaterial\";\nexport * from \"./lib/DisplacementFeature\";\nexport * from \"./lib/EdgeMaterial\";\nexport * from \"./lib/HighPrecisionLineMaterial\";\nexport * from \"./lib/HighPrecisionPointMaterial\";\nexport * from \"./lib/IconMaterial\";\nexport * from \"./lib/LuminosityHighPassShader\";\nexport * from \"./lib/MapMeshMaterialsDefs\";\nexport * from \"./lib/MapMeshMaterials\";\nexport * from \"./lib/MSAAMaterial\";\nexport * from \"./lib/SepiaShader\";\nexport * from \"./lib/SolidLineMaterial\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VignetteShader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, Value } from \"./Env\";\nimport { ExprEvaluator, ExprEvaluatorContext, OperatorDescriptor } from \"./ExprEvaluator\";\nimport { ExprInstantiator, InstantiationContext } from \"./ExprInstantiator\";\nimport { ExprParser } from \"./ExprParser\";\nimport { ExprPool } from \"./ExprPool\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedProperty\";\nimport { interpolatedPropertyDefinitionToJsonExpr } from \"./InterpolatedPropertyDefs\";\nimport { Definitions, isBoxedDefinition, isLiteralDefinition } from \"./Theme\";\n\nexport * from \"./Env\";\n\nconst exprEvaluator = new ExprEvaluator();\n\nconst exprInstantiator = new ExprInstantiator();\n\nexport interface ExprVisitor<Result, Context> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: Context): Result;\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: Context): Result;\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: Context): Result;\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: Context): Result;\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: Context): Result;\n    visitVarExpr(expr: VarExpr, context: Context): Result;\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: Context): Result;\n    visitContainsExpr(expr: ContainsExpr, context: Context): Result;\n    visitCallExpr(expr: CallExpr, context: Context): Result;\n    visitMatchExpr(expr: MatchExpr, context: Context): Result;\n    visitCaseExpr(expr: CaseExpr, context: Context): Result;\n}\n\n/**\n * The dependencies of an [[Expr]].\n */\nexport class ExprDependencies {\n    /**\n     * The properties needed to evaluate the [[Expr]].\n     */\n    readonly properties = new Set<string>();\n\n    /**\n     * `true` if the [[Expr]] depends on zoom level. Default is `false`.\n     */\n    zoom?: boolean;\n}\n\nclass ComputeExprDependencies implements ExprVisitor<void, ExprDependencies> {\n    static instance = new ComputeExprDependencies();\n\n    /**\n     * Gets the dependencies of an [[Expr]].\n     *\n     * @param expr The [[Expr]] to process.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param dependencies The output [[Set]] of dependency names.\n     */\n    static of(expr: Expr) {\n        const dependencies = new ExprDependencies();\n        expr.accept(this.instance, dependencies);\n        return dependencies;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprDependencies): void {\n        // nothing to do\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprDependencies): void {\n        context.properties.add(expr.name);\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprDependencies): void {\n        if (expr.op === \"zoom\" && expr.args.length === 0) {\n            context.zoom = true;\n        } else {\n            expr.args.forEach(childExpr => childExpr.accept(this, context));\n        }\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: ExprDependencies): void {\n        expr.value.accept(this, context);\n        expr.branches.forEach(([_, branch]) => branch.accept(this, context));\n        expr.fallback.accept(this, context);\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: ExprDependencies): void {\n        expr.branches.forEach(([condition, branch]) => {\n            condition.accept(this, context);\n            branch.accept(this, context);\n        });\n        expr.fallback.accept(this, context);\n    }\n}\n\n/**\n * A type represeting JSON values.\n */\nexport type JsonValue = null | boolean | number | string | JsonObject | JsonArray;\n\n/**\n * A type representing JSON arrays.\n */\nexport interface JsonArray extends Array<JsonValue> {}\n\n/**\n * A type representing JSON objects.\n */\nexport interface JsonObject {\n    [name: string]: JsonValue;\n}\n\n/**\n * The JSON representation of an [[Expr]] object.\n */\nexport type JsonExpr = JsonArray;\n\nexport function isJsonExpr(v: any): v is JsonExpr {\n    return Array.isArray(v) && v.length > 0 && typeof v[0] === \"string\";\n}\n\n/**\n * Internal state needed by [[Expr.fromJSON]] to resolve `\"ref\"` expressions.\n * @hidden\n */\ninterface ReferenceResolverState {\n    definitions: Definitions;\n    lockedNames: Set<string>;\n    cache: Map<string, Expr>;\n}\n\n/**\n * The evaluation scope of an [[Expr]].\n */\nexport enum ExprScope {\n    /**\n     * The scope of an [[Expr]] used as value of an attribute.\n     */\n    Value,\n\n    /**\n     * The scope of an [[Expr]] used in a [[Technique]] `when` condition.\n     */\n    Condition,\n\n    /**\n     * The scope of an [[Expr]] used as dynamic property attribute value.\n     */\n    Dynamic\n}\n\n/**\n * Abstract class defining a shape of a [[Theme]]'s expression\n */\nexport abstract class Expr {\n    /**\n     * Tests of given value is an [[Expr]].\n     *\n     * @param value The object to test.\n     */\n    static isExpr(value: any): value is Expr {\n        return value instanceof Expr;\n    }\n\n    /**\n     * Creates an expression from the given `code`.\n     *\n     * @param code The code to parse.\n     * @returns The parsed [[Expr]].\n     * @deprecated\n     */\n    static parse(code: string): Expr | never {\n        const parser = new ExprParser(code);\n        const expr = parser.parse();\n        return expr;\n    }\n\n    /**\n     * Parse expression in JSON form.\n     *\n     * If `definitions` are defined, then references (`['ref', name]`) are resolved.\n     *\n     * Pass `definitionExprCache` to reuse `Expr` instances created from definitions across\n     * many `fromJSON` calls.\n     *\n     * @param node expression in JSON format to parse\n     * @param definitions optional set of definitions needed definition resolved by `ref` operator\n     * @param definitionExprCache optional cache of `Expr` instances derived from `definitions`\n     */\n    static fromJSON(\n        node: JsonValue,\n        definitions?: Definitions,\n        definitionExprCache?: Map<string, Expr>\n    ) {\n        const referenceResolverState: ReferenceResolverState | undefined =\n            definitions !== undefined\n                ? {\n                      definitions,\n                      lockedNames: new Set(),\n                      cache: definitionExprCache || new Map<string, Expr>()\n                  }\n                : undefined;\n\n        return parseNode(node, referenceResolverState);\n    }\n\n    private m_dependencies?: ExprDependencies;\n    private m_isDynamic?: boolean;\n\n    /**\n     * Evaluate an expression returning a [[Value]] object.\n     *\n     * @param env The [[Env]] used to lookup symbols.\n     * @param scope The evaluation scope. Defaults to [[ExprScope.Value]].\n     * @param cache A cache of previously computed results.\n     */\n    evaluate(\n        env: Env,\n        scope: ExprScope = ExprScope.Value,\n        cache?: Map<Expr, Value>\n    ): Value | never {\n        return this.accept(\n            exprEvaluator,\n            new ExprEvaluatorContext(exprEvaluator, env, scope, cache)\n        );\n    }\n\n    /**\n     * Instantiates this [[Expr]] by resolving references to the `get` and\n     * `has` operator using the given instantiation context.\n     *\n     * @param context The [[InstantationContext]] used to resolve names.\n     */\n    instantiate(context: InstantiationContext): Expr {\n        return this.accept(exprInstantiator, context);\n    }\n\n    /**\n     * Gets the dependencies of this [[Expr]].\n     */\n    dependencies(): ExprDependencies {\n        if (!this.m_dependencies) {\n            this.m_dependencies = ComputeExprDependencies.of(this);\n        }\n        return this.m_dependencies;\n    }\n\n    /**\n     * Create a unique object that is structurally equivalent to this [[Expr]].\n     *\n     * @param pool The [[ExprPool]] used to create a unique\n     * equivalent object of this [[Expr]].\n     */\n    intern(pool: ExprPool): Expr {\n        return pool.add(this);\n    }\n\n    toJSON(): JsonValue {\n        return new ExprSerializer().serialize(this);\n    }\n\n    /**\n     * Returns `true` if a dynamic execution context is required to evaluate this [[Expr]].\n     */\n    isDynamic(): boolean {\n        if (this.m_isDynamic === undefined) {\n            this.m_isDynamic = this.exprIsDynamic();\n        }\n        return this.m_isDynamic;\n    }\n\n    abstract accept<Result, Context>(\n        visitor: ExprVisitor<Result, Context>,\n        context: Context\n    ): Result;\n\n    /**\n     * Update the dynamic state of this [[Expr]].\n     *\n     * [[exprIsDynamic]] must never be called directly.\n     *\n     * @hidden\n     */\n    protected abstract exprIsDynamic(): boolean;\n}\n\n/**\n * @hidden\n */\nexport type RelationalOp = \"<\" | \">\" | \"<=\" | \">=\";\n\n/**\n * @hidden\n */\nexport type EqualityOp = \"~=\" | \"^=\" | \"$=\" | \"==\" | \"!=\";\n\n/**\n * @hidden\n */\nexport type BinaryOp = RelationalOp | EqualityOp;\n\n/**\n * Var expression.\n * @hidden\n */\nexport class VarExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitVarExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\nexport abstract class LiteralExpr extends Expr {\n    /**\n     * Create a [[LiteralExpr]] from the given value.\n     *\n     * @param value A constant value.\n     */\n    static fromValue(value: Value): Expr {\n        switch (typeof value) {\n            case \"boolean\":\n                return new BooleanLiteralExpr(value);\n            case \"number\":\n                return new NumberLiteralExpr(value);\n            case \"string\":\n                return new StringLiteralExpr(value);\n            case \"object\":\n                return value === null ? NullLiteralExpr.instance : new ObjectLiteralExpr(value);\n            default:\n                throw new Error(`failed to create a literal from '${value}'`);\n        } // switch\n    }\n\n    abstract get value(): Value;\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Null literal expression.\n * @hidden\n */\nexport class NullLiteralExpr extends LiteralExpr {\n    static instance = new NullLiteralExpr();\n    /** @override */\n    readonly value: Value = null;\n\n    protected constructor() {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNullLiteralExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * Boolean literal expression.\n * @hidden\n */\nexport class BooleanLiteralExpr extends LiteralExpr {\n    constructor(readonly value: boolean) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitBooleanLiteralExpr(this, context);\n    }\n}\n\n/**\n * Number literal expression.\n * @hidden\n */\nexport class NumberLiteralExpr extends LiteralExpr {\n    constructor(readonly value: number) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitNumberLiteralExpr(this, context);\n    }\n}\n\n/**\n * String literal expression.\n * @hidden\n */\nexport class StringLiteralExpr extends LiteralExpr {\n    constructor(readonly value: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitStringLiteralExpr(this, context);\n    }\n}\n\n/**\n * Object literal expression.\n * @hidden\n */\nexport class ObjectLiteralExpr extends LiteralExpr {\n    constructor(readonly value: object) {\n        super();\n    }\n\n    get isArrayLiteral() {\n        return Array.isArray(this.value);\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitObjectLiteralExpr(this, context);\n    }\n}\n\n/**\n * A has expression with an attribute, for example `has(ref)`.\n * @hidden\n */\nexport class HasAttributeExpr extends Expr {\n    constructor(readonly name: string) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitHasAttributeExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return false;\n    }\n}\n\n/**\n * A contains expression.\n * @hidden\n */\nexport class ContainsExpr extends Expr {\n    static isValidElementsArray(elements: JsonValue): elements is Array<number | string> {\n        if (!Array.isArray(elements) || elements.length === 0) {\n            return false;\n        }\n\n        const elementTy = typeof elements[0];\n\n        if (elementTy === \"number\" || elementTy === \"string\") {\n            return elements.every(element => typeof element === elementTy);\n        }\n\n        return false;\n    }\n\n    constructor(readonly value: Expr, readonly elements: Array<number | string>) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitContainsExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return this.value.isDynamic();\n    }\n}\n\n/**\n * @hidden\n */\nexport class CallExpr extends Expr {\n    descriptor?: OperatorDescriptor;\n\n    constructor(readonly op: string, readonly args: Expr[]) {\n        super();\n    }\n\n    /**\n     * Returns the child nodes of this [[Expr]].\n     * @deprecated\n     */\n    get children() {\n        return this.args;\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCallExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        const descriptor = this.descriptor || ExprEvaluator.getOperator(this.op);\n\n        if (descriptor && descriptor.isDynamicOperator && descriptor.isDynamicOperator(this)) {\n            return true;\n        }\n\n        return this.args.some(e => e.isDynamic());\n    }\n}\n\n/**\n * @hidden\n */\nexport type MatchLabel = number | string | number[] | string[];\n\n/**\n * @hidden\n */\nexport class MatchExpr extends Expr {\n    /**\n     * Tests if the given JSON node is a valid label for the `\"match\"` operator.\n     *\n     * @param node A JSON value.\n     */\n    static isValidMatchLabel(node: JsonValue): node is MatchLabel {\n        switch (typeof node) {\n            case \"number\":\n            case \"string\":\n                return true;\n            case \"object\":\n                if (!Array.isArray(node) || node.length === 0) {\n                    return false;\n                }\n                const elementTy = typeof node[0];\n                if (elementTy === \"number\" || elementTy === \"string\") {\n                    return node.every(t => typeof t === elementTy);\n                }\n                return false;\n            default:\n                return false;\n        } // switch\n    }\n\n    constructor(\n        readonly value: Expr,\n        readonly branches: Array<[MatchLabel, Expr]>,\n        readonly fallback: Expr\n    ) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitMatchExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.value.isDynamic() ||\n            this.branches.some(([_, branch]) => branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nexport class CaseExpr extends Expr {\n    constructor(readonly branches: Array<[Expr, Expr]>, readonly fallback: Expr) {\n        super();\n    }\n\n    /** @override */\n    accept<Result, Context>(visitor: ExprVisitor<Result, Context>, context: Context): Result {\n        return visitor.visitCaseExpr(this, context);\n    }\n\n    /** @override */\n    protected exprIsDynamic() {\n        return (\n            this.branches.some(([cond, branch]) => cond.isDynamic() || branch.isDynamic()) ||\n            this.fallback.isDynamic()\n        );\n    }\n}\n\n/**\n * @hidden\n */\nclass ExprSerializer implements ExprVisitor<JsonValue, void> {\n    serialize(expr: Expr): JsonValue {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): JsonValue {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): JsonValue {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): JsonValue {\n        return [\"literal\", expr.value as JsonObject];\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): JsonValue {\n        return [\"get\", expr.name];\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): JsonValue {\n        return [\"has\", expr.name];\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: void): JsonValue {\n        return [\"in\", this.serialize(expr.value), expr.elements];\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): JsonValue {\n        return [expr.op, ...expr.args.map(childExpr => this.serialize(childExpr))];\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [label, body] of expr.branches) {\n            branches.push(label, this.serialize(body));\n        }\n        return [\"match\", this.serialize(expr.value), ...branches, this.serialize(expr.fallback)];\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): JsonValue {\n        const branches: JsonValue[] = [];\n        for (const [condition, body] of expr.branches) {\n            branches.push(this.serialize(condition), this.serialize(body));\n        }\n        return [\"case\", ...branches, this.serialize(expr.fallback)];\n    }\n}\n\nfunction parseNode(\n    node: JsonValue,\n    referenceResolverState: ReferenceResolverState | undefined\n): Expr {\n    if (Array.isArray(node)) {\n        return parseCall(node, referenceResolverState);\n    } else if (node === null) {\n        return NullLiteralExpr.instance;\n    } else if (typeof node === \"boolean\") {\n        return new BooleanLiteralExpr(node);\n    } else if (typeof node === \"number\") {\n        return new NumberLiteralExpr(node);\n    } else if (typeof node === \"string\") {\n        return new StringLiteralExpr(node);\n    }\n    throw new Error(`failed to create expression from: ${JSON.stringify(node)}`);\n}\n\nfunction parseCall(node: JsonArray, referenceResolverState?: ReferenceResolverState): Expr {\n    const op = node[0];\n\n    if (typeof op !== \"string\") {\n        throw new Error(\"expected a builtin function name\");\n    }\n\n    switch (op) {\n        case \"!has\":\n        case \"!in\":\n            return new CallExpr(\"!\", [parseCall([op.slice(1), ...node.slice(1)])]);\n\n        case \"ref\":\n            return resolveReference(node, referenceResolverState);\n\n        case \"get\":\n            return parseGetExpr(node, referenceResolverState);\n\n        case \"has\":\n            return parseHasExpr(node, referenceResolverState);\n\n        case \"in\":\n            return parseInExpr(node, referenceResolverState);\n\n        case \"literal\":\n            return parseLiteralExpr(node);\n\n        case \"match\":\n            return parseMatchExpr(node, referenceResolverState);\n\n        case \"case\":\n            return parseCaseExpr(node, referenceResolverState);\n\n        default:\n            return makeCallExpr(op, node, referenceResolverState);\n    } // switch\n}\n\nfunction parseGetExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"get\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new VarExpr(name);\n}\n\nfunction parseHasExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    if (node[2] !== undefined) {\n        return makeCallExpr(\"has\", node, referenceResolverState);\n    }\n    const name = node[1];\n    if (typeof name !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    return new HasAttributeExpr(name);\n}\n\nfunction parseInExpr(node: JsonArray, referenceResolverState: ReferenceResolverState | undefined) {\n    const elements = node[2];\n    if (!ContainsExpr.isValidElementsArray(elements)) {\n        // tslint:disable-next-line: max-line-length\n        throw new Error(`'in' expects an array of number or string literals`);\n    }\n    return new ContainsExpr(parseNode(node[1], referenceResolverState), elements);\n}\n\nfunction parseLiteralExpr(node: JsonArray) {\n    const obj = node[1];\n    if (obj === null || typeof obj !== \"object\") {\n        throw new Error(\"expected an object or array literal\");\n    }\n    return new ObjectLiteralExpr(obj);\n}\n\nfunction parseMatchExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 4) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (!(node.length % 2)) {\n        throw new Error(\"fallback is missing in 'match' expression\");\n    }\n    const value = parseNode(node[1], referenceResolverState);\n    const conditions: Array<[MatchLabel, Expr]> = [];\n    for (let i = 2; i < node.length - 1; i += 2) {\n        const label = node[i];\n        if (!MatchExpr.isValidMatchLabel(label)) {\n            throw new Error(`'${JSON.stringify(label)}' is not a valid label for 'match'`);\n        }\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        conditions.push([label, expr]);\n    }\n    const fallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new MatchExpr(value, conditions, fallback);\n}\n\nfunction parseCaseExpr(\n    node: JsonArray,\n    referenceResolverState: ReferenceResolverState | undefined\n) {\n    if (node.length < 3) {\n        throw new Error(\"not enough arguments\");\n    }\n    if (node.length % 2) {\n        throw new Error(\"fallback is missing in 'case' expression\");\n    }\n    const branches: Array<[Expr, Expr]> = [];\n    for (let i = 1; i < node.length - 1; i += 2) {\n        const condition = parseNode(node[i], referenceResolverState);\n        const expr = parseNode(node[i + 1], referenceResolverState);\n        branches.push([condition, expr]);\n    }\n    const caseFallback = parseNode(node[node.length - 1], referenceResolverState);\n    return new CaseExpr(branches, caseFallback);\n}\n\nfunction makeCallExpr(\n    op: string,\n    node: any[],\n    referenceResolverState?: ReferenceResolverState\n): Expr {\n    return new CallExpr(\n        op,\n        node.slice(1).map(childExpr => parseNode(childExpr, referenceResolverState))\n    );\n}\n\nfunction resolveReference(node: JsonArray, referenceResolverState?: ReferenceResolverState) {\n    if (typeof node[1] !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n    if (referenceResolverState === undefined) {\n        throw new Error(`ref used with no definitions`);\n    }\n    const name = node[1] as string;\n\n    if (referenceResolverState.lockedNames.has(name)) {\n        throw new Error(`circular referene to '${name}'`);\n    }\n\n    if (!(name in referenceResolverState.definitions)) {\n        throw new Error(`definition '${name}' not found`);\n    }\n\n    const cachedEntry = referenceResolverState.cache.get(name);\n    if (cachedEntry !== undefined) {\n        return cachedEntry;\n    }\n    let definitionEntry = referenceResolverState.definitions[name] as any;\n    let result: Expr;\n    if (isLiteralDefinition(definitionEntry)) {\n        return Expr.fromJSON(definitionEntry);\n    } else if (isBoxedDefinition(definitionEntry)) {\n        if (isInterpolatedPropertyDefinition(definitionEntry.value)) {\n            // found a reference to an interpolation using\n            // the deprecated object-like syntax.\n            return Expr.fromJSON(interpolatedPropertyDefinitionToJsonExpr(definitionEntry.value));\n        } else if (isJsonExpr(definitionEntry.value)) {\n            definitionEntry = definitionEntry.value;\n        } else {\n            return Expr.fromJSON(definitionEntry.value);\n        }\n    }\n\n    if (isJsonExpr(definitionEntry)) {\n        referenceResolverState.lockedNames.add(name);\n        try {\n            result = parseNode(definitionEntry, referenceResolverState);\n        } finally {\n            referenceResolverState.lockedNames.delete(name);\n        }\n    } else {\n        throw new Error(`unsupported definition ${name}`);\n    }\n    referenceResolverState.cache.set(name, result);\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/rendering/FontCatalog\";\nexport * from \"./lib/rendering/GlyphData\";\nexport * from \"./lib/rendering/TextStyle\";\nexport * from \"./lib/rendering/TextBufferObject\";\nexport * from \"./lib/TextCanvas\";\n\nexport * from \"./lib/utils/ContextualArabicConverter\";\nexport * from \"./lib/utils/MaterialUtils\";\nexport * from \"./lib/utils/TypesettingUtils\";\nexport * from \"./lib/utils/UnicodeUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinatesLike, isGeoCoordinatesLike } from \"./GeoCoordinatesLike\";\nimport { GeoPointLike, isGeoPointLike } from \"./GeoPointLike\";\nimport { isLatLngLike, LatLngLike } from \"./LatLngLike\";\n\nimport * as THREE from \"three\";\n\n/**\n * Represents an object in different geo coordinate formats\n */\nexport type GeoCoordLike = GeoPointLike | GeoCoordinatesLike | LatLngLike;\n\n/**\n * `GeoCoordinates` is used to represent geo positions.\n */\nexport class GeoCoordinates implements GeoCoordinatesLike {\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    static fromDegrees(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in radians.\n     * @param longitude Longitude in radians.\n     * @param altitude Altitude in meters.\n     */\n    static fromRadians(latitude: number, longitude: number, altitude?: number): GeoCoordinates {\n        return new GeoCoordinates(\n            THREE.Math.radToDeg(latitude),\n            THREE.Math.radToDeg(longitude),\n            altitude\n        );\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[LatLngLike]] literal.\n     * ```typescript\n     * const center = { lat: 53.3, lng: 13.4 };\n     * mapView.geoCenter = GeoCoordinates.fromLatLng(center);\n     * ```\n     * @param latLng A [[LatLngLike]] object literal.\n     */\n    static fromLatLng(latLng: LatLngLike) {\n        return new GeoCoordinates(latLng.lat, latLng.lng);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from a [[GeoPointLike]] tuple.\n     *\n     * Example:\n     * ```typescript\n     * mapView.geoCenter = GeoCoordinates.fromGeoPoint([longitude, latitude]);\n     *\n     * let geoCoords: number[] = ...;\n     *\n     * if (isGeoPointLike(geoCoords)) {\n     *     const p = GeoCoordinates.fromGeoPoint(geoCoords);\n     * }\n     * ```\n     * @param geoPoint An [[Array]] of at least two elements following the order\n     * longitude, latitude, altitude.\n     */\n    static fromGeoPoint(geoPoint: GeoPointLike): GeoCoordinates {\n        return new GeoCoordinates(geoPoint[1], geoPoint[0], geoPoint[2]);\n    }\n\n    /**\n     * Creates a [[GeoCoordinates]] from different types of geo coordinate objects.\n     *\n     * Example:\n     * ```typescript\n     * const fromGeoPointLike = GeoCoordinates.fromObject([longitude, latitude]);\n     * const fromGeoCoordinateLike = GeoCoordinates.fromObject({ longitude, latitude });\n     * const fromGeoCoordinate = GeoCoordinates.fromObject(new GeoCoordinates(latitude, longitude));\n     * const fromLatLngLike = GeoCoordinates.fromObject({ lat: latitude , lng: longitude });\n     * ```\n     *\n     * @param geoPoint Either [[GeoPointLike]], [[GeoCoordinatesLike]]\n     * or [[LatLngLike]] object literal.\n     */\n    static fromObject(geoPoint: GeoCoordLike): GeoCoordinates {\n        if (isGeoPointLike(geoPoint)) {\n            return GeoCoordinates.fromGeoPoint(geoPoint);\n        } else if (isGeoCoordinatesLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(\n                geoPoint.latitude,\n                geoPoint.longitude,\n                geoPoint.altitude\n            );\n        } else if (isLatLngLike(geoPoint)) {\n            return GeoCoordinates.fromDegrees(geoPoint.lat, geoPoint.lng);\n        }\n\n        throw new Error(\"Invalid input coordinate format.\");\n    }\n\n    /**\n     * Creates a `GeoCoordinates` from the given latitude, longitude, and optional altitude.\n     *\n     * @param latitude Latitude in degrees.\n     * @param longitude Longitude in degrees.\n     * @param altitude Altitude in meters.\n     */\n    constructor(public latitude: number, public longitude: number, public altitude?: number) {}\n\n    /**\n     * Returns the latitude in radians.\n     */\n    get latitudeInRadians(): number {\n        return THREE.Math.degToRad(this.latitude);\n    }\n\n    /**\n     * Returns the longitude in radians.\n     */\n    get longitudeInRadians(): number {\n        return THREE.Math.degToRad(this.longitude);\n    }\n\n    /**\n     * Returns the latitude in degrees.\n     * @deprecated Use the [[latitude]] property instead.\n     */\n    get latitudeInDegrees(): number {\n        return this.latitude;\n    } // compat api\n\n    /**\n     * Returns the longitude in degrees.\n     * @deprecated Use the [[longitude]] property instead.\n     */\n    get longitudeInDegrees(): number {\n        return this.longitude;\n    } // compat api\n\n    /**\n     * The latitude in the degrees.\n     */\n    get lat() {\n        return this.latitude;\n    }\n\n    /**\n     * The longitude in the degrees.\n     */\n    get lng() {\n        return this.longitude;\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is valid; returns `false` otherwise.\n     */\n    isValid(): boolean {\n        return !isNaN(this.latitude) && !isNaN(this.longitude);\n    }\n\n    /**\n     * Returns the normalized `GeoCoordinates`.\n     */\n    normalized(): GeoCoordinates {\n        let { latitude, longitude } = this;\n\n        if (isNaN(latitude) || isNaN(longitude)) {\n            return this;\n        }\n\n        if (latitude > 90) {\n            let wrapped = (latitude + 90) % 360;\n            if (wrapped >= 180) {\n                longitude += 180;\n                wrapped = 360 - wrapped;\n            }\n\n            latitude = wrapped - 90;\n        }\n\n        if (latitude < -90) {\n            let wrapped = (latitude - 90) % 360;\n            if (wrapped <= -180) {\n                longitude += 180;\n                wrapped = -360 - wrapped;\n            }\n\n            latitude = wrapped + 90;\n        }\n\n        if (longitude < -180 || longitude > 180) {\n            const sign = Math.sign(longitude);\n            longitude = (((longitude % 360) + 180 * sign) % 360) - 180 * sign;\n        }\n\n        if (latitude === this.latitude && longitude === this.longitude) {\n            return this;\n        }\n\n        return new GeoCoordinates(latitude, longitude, this.altitude);\n    }\n\n    /**\n     * Returns `true` if this `GeoCoordinates` is equal to the other.\n     *\n     * @param other GeoCoordinatesLike to compare to.\n     */\n    equals(other: GeoCoordinatesLike): boolean {\n        return (\n            this.latitude === other.latitude &&\n            this.longitude === other.longitude &&\n            this.altitude === other.altitude\n        );\n    }\n\n    /**\n     * Copy values from the other.\n     *\n     * @param other GeoCoordinatesLike to copy all values from.\n     */\n    copy(other: GeoCoordinatesLike): GeoCoordinates {\n        this.latitude = other.latitude;\n        this.longitude = other.longitude;\n        this.altitude = other.altitude;\n        return this;\n    }\n\n    /**\n     * Clones this `GeoCoordinates`.\n     * @deprecated\n     */\n    clone(): GeoCoordinates {\n        return new GeoCoordinates(this.latitude, this.longitude, this.altitude);\n    }\n\n    /**\n     * Returns this [[GeoCoordinates]] as [[LatLngLike]] literal.\n     */\n    toLatLng(): LatLngLike {\n        return { lat: this.latitude, lng: this.longitude };\n    }\n\n    /**\n     * Converts this [[GeoCoordinates]] to a [[GeoPointLike]].\n     */\n    toGeoPoint(): GeoPointLike {\n        return this.altitude !== undefined\n            ? [this.longitude, this.latitude, this.altitude]\n            : [this.longitude, this.latitude];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Box3Like } from \"./Box3Like\";\nimport { Vector3Like } from \"./Vector3Like\";\n\nimport * as THREE from \"three\";\n\nexport namespace MathUtils {\n    /**\n     * Creates a new empty bounding box.\n     * @deprecated\n     */\n    export function newEmptyBox3(): Box3Like {\n        return {\n            min: { x: Infinity, y: Infinity, z: Infinity },\n            max: { x: -Infinity, y: -Infinity, z: -Infinity }\n        };\n    }\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     */\n    export function newVector3(x: number, y: number, z: number): Vector3Like;\n\n    /**\n     * Creates a new [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The resulting [Vector3Like] instance.\n     */\n    export function newVector3<Vector extends Vector3Like>(\n        x: number,\n        y: number,\n        z: number,\n        v: Vector\n    ): Vector;\n\n    /**\n     * Set the components of the given [Vector3Like] instance.\n     *\n     * @param x The x component.\n     * @param y The y component.\n     * @param z The z component.\n     * @param v The [Vector3Like]\n     */\n    export function newVector3(x: number, y: number, z: number, v?: Vector3Like): Vector3Like {\n        if (v === undefined) {\n            return { x, y, z };\n        }\n        v.x = x;\n        v.y = y;\n        v.z = z;\n        return v;\n    }\n\n    /**\n     * Converts an angle measured in degrees to an equivalent value in radians.\n     *\n     * @param degrees Value in degrees.\n     * @returns Value in radians.\n     * @deprecated\n     */\n    export const degToRad = THREE.Math.degToRad;\n\n    /**\n     * Converts an angle measured in radians to an equivalent value in degrees.\n     *\n     * @param degrees Value in radians.\n     * @returns Value in degrees.\n     * @deprecated\n     */\n    export const radToDeg = THREE.Math.radToDeg;\n\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     * @returns Clamped value.\n     * @deprecated\n     */\n    export const clamp = THREE.Math.clamp;\n\n    /**\n     * Normalize angle in degrees to range `[0, 360)`.\n     *\n     * @param a Angle in degrees.\n     * @returns Angle in degrees in range `[0, 360)`.\n     */\n    export function normalizeAngleDeg(a: number): number {\n        a = a % 360;\n        if (a < 0) {\n            a = a + 360;\n        }\n        return a;\n    }\n\n    /**\n     * Return the minimal delta between angles `a` and `b` given in degrees.\n     *\n     * Equivalent to `a - b` in coordinate space with exception vector direction can be reversed\n     * that if `abs(a-b) > 180` because trip is shorter in 'other' direction.\n     *\n     * Useful when interpolating between `b` and `a` in angle space.\n     *\n     * @param a Start angle in degrees.\n     * @param b End angle in degrees.\n     * @returns Angle that that satisfies condition `a - b - d = 0` in angle space.\n     */\n    export function angleDistanceDeg(a: number, b: number): number {\n        a = normalizeAngleDeg(a);\n        b = normalizeAngleDeg(b);\n\n        const d = a - b;\n        if (d > 180) {\n            return d - 360;\n        } else if (d <= -180) {\n            return d + 360;\n        } else {\n            return d;\n        }\n    }\n\n    /**\n     * Interpolate linearly between two angles given in degrees.\n     *\n     * @param p0 Angle from in degrees\n     * @param p1 Angle to in degrees\n     * @param t Interpolation factor (alpha), in range `0-1`.\n     */\n    export function interpolateAnglesDeg(p0: number, p1: number, t: number): number {\n        // hand crafted version,\n        // see stack for maybe better versions:\n        //    https://stackoverflow.com/questions/2708476/rotation-interpolation\n\n        const d = angleDistanceDeg(p1, p0);\n        const r = (p0 + d * t) % 360;\n        return r;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    GeoCoordinates,\n    MathUtils,\n    Projection,\n    ProjectionType,\n    TileKey\n} from \"@here/harp-geoutils\";\nimport { EarthConstants } from \"@here/harp-geoutils/lib/projection/EarthConstants\";\nimport { MapMeshBasicMaterial, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { MapView, MAX_TILT_ANGLE } from \"./MapView\";\nimport { getFeatureDataSize, TileFeatureData } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"MapViewUtils\");\n\n// Estimation of the size of an Object3D with all the simple properties, like matrices and flags.\n// There may be cases where it is possible to construct Object3Ds with considerable less memory\n// consumption, but this value is used to simplify the estimation.\nconst MINIMUM_OBJECT3D_SIZE_ESTIMATION = 1000;\n\nconst MINIMUM_ATTRIBUTE_SIZE_ESTIMATION = 56;\n\n// Caching those for performance reasons.\nconst groundNormalPlanarProj = new THREE.Vector3(0, 0, 1);\nconst groundPlane = new THREE.Plane(groundNormalPlanarProj.clone());\nconst groundSphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\nconst rayCaster = new THREE.Raycaster();\nconst maxTiltAngleAllowed = THREE.Math.degToRad(MAX_TILT_ANGLE);\nconst epsilon = 1e-5;\n\n/**\n * Cached ThreeJS instances for realtime maths.\n */\nconst space = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst tangentSpace = {\n    x: new THREE.Vector3(),\n    y: new THREE.Vector3(),\n    z: new THREE.Vector3()\n};\nconst cache = {\n    quaternions: [new THREE.Quaternion(), new THREE.Quaternion()],\n    vector3: [new THREE.Vector3(), new THREE.Vector3()],\n    matrix4: [new THREE.Matrix4(), new THREE.Matrix4()],\n    transforms: [\n        {\n            xAxis: new THREE.Vector3(),\n            yAxis: new THREE.Vector3(),\n            zAxis: new THREE.Vector3(),\n            position: new THREE.Vector3()\n        }\n    ]\n};\n\nexport namespace MapViewUtils {\n    export const MAX_TILT_DEG = 89;\n    /**\n     * The anti clockwise rotation of an object along the axes of its tangent space, with itself\n     * as origin.\n     */\n    export interface Attitude {\n        /**\n         * Rotation of the object along its vertical axis.\n         */\n        yaw: number;\n\n        /**\n         * Rotation of the object along its horizontal axis.\n         */\n        pitch: number;\n\n        /**\n         * Rotation of the object along its forward axis.\n         */\n        roll: number;\n    }\n\n    /**\n     * Describes estimated usage of memory on heap and GPU.\n     */\n    export interface MemoryUsage {\n        heapSize: number;\n        gpuSize: number;\n    }\n\n    /**\n     * Zooms and moves the map in such a way that the given target position remains at the same\n     * position after the zoom.\n     *\n     * @param mapView Instance of MapView.\n     * @param targetPositionOnScreenXinNDC Target x position in NDC space.\n     * @param targetPositionOnScreenYinNDC Target y position in NDC space.\n     * @param zoomLevel The desired zoom level.\n     * @param maxTiltAngle The maximum tilt angle to comply by, in globe projection, in radian.\n     */\n    export function zoomOnTargetPosition(\n        mapView: MapView,\n        targetPositionOnScreenXinNDC: number,\n        targetPositionOnScreenYinNDC: number,\n        zoomLevel: number,\n        maxTiltAngle: number = maxTiltAngleAllowed\n    ): void {\n        // Get current target position in world space before we zoom.\n        const targetPosition = rayCastWorldCoordinates(\n            mapView,\n            targetPositionOnScreenXinNDC,\n            targetPositionOnScreenYinNDC\n        );\n        const groundDistance = calculateDistanceToGroundFromZoomLevel(mapView, zoomLevel);\n\n        // Set the cameras height according to the given zoom level.\n        if (mapView.projection.type === ProjectionType.Planar) {\n            mapView.camera.position.setZ(groundDistance);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            mapView.camera.position.setLength(EarthConstants.EQUATORIAL_RADIUS + groundDistance);\n        }\n\n        // In sphere, we may have to also orbit the camera around the position located at the\n        // center of the screen, in order to limit the tilt to `maxTiltAngle`, as we change\n        // this tilt by changing the camera's height above.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            const tilt = extractCameraTilt(mapView.camera, mapView.projection);\n            const deltaTilt = tilt - maxTiltAngle;\n            if (deltaTilt > 0) {\n                orbitFocusPoint(mapView, 0, deltaTilt, maxTiltAngle);\n            }\n        }\n\n        // Get new target position after the zoom\n        const newTargetPosition = rayCastWorldCoordinates(\n            mapView,\n            targetPositionOnScreenXinNDC,\n            targetPositionOnScreenYinNDC\n        );\n\n        if (!targetPosition || !newTargetPosition) {\n            return;\n        }\n\n        if (mapView.projection.type === ProjectionType.Planar) {\n            // Calculate the difference and pan the map to maintain the map relative to the target\n            // position.\n            targetPosition.sub(newTargetPosition);\n            panCameraAboveFlatMap(mapView, targetPosition.x, targetPosition.y);\n        } else if (mapView.projection.type === ProjectionType.Spherical) {\n            panCameraAroundGlobe(mapView, targetPosition, newTargetPosition);\n        }\n    }\n\n    /**\n     * Orbits the camera around the focus point of the camera.\n     *\n     * @param mapView The [[MapView]] instance to manipulate.\n     * @param deltaAzimuthDeg Delta azimuth in degrees.\n     * @param deltaTiltDeg Delta tilt in degrees.\n     * @param maxTiltAngleRad The maximum tilt between the camera and its target in radian.\n     */\n    export function orbitFocusPoint(\n        mapView: MapView,\n        deltaAzimuthDeg: number,\n        deltaTiltDeg: number,\n        maxTiltAngleRad = maxTiltAngleAllowed\n    ) {\n        const target = mapView.worldTarget;\n        const targetCoordinates = mapView.projection.unprojectPoint(target);\n        const sphericalCoordinates = extractSphericalCoordinatesFromLocation(\n            mapView,\n            mapView.camera,\n            targetCoordinates\n        );\n        const tiltDeg = Math.max(\n            Math.min(\n                THREE.Math.radToDeg(maxTiltAngleRad),\n                deltaTiltDeg + THREE.Math.radToDeg(sphericalCoordinates.tilt)\n            ),\n            0\n        );\n        mapView.lookAt(\n            targetCoordinates,\n            target.distanceTo(mapView.camera.position),\n            tiltDeg,\n            THREE.Math.radToDeg(sphericalCoordinates.azimuth + Math.PI) + deltaAzimuthDeg\n        );\n    }\n\n    /**\n     * Calculate target (focus) point geo-coordinates for given camera.\n     * @see getTargetPositionFromCamera\n     *\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level measured in world units.\n     */\n    export function getGeoTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): GeoCoordinates | null {\n        // This function does almost the same as:\n        // rayCastGeoCoordinates(mapView, 0, 0)\n        // but in more gentle and performance wise manner\n        const targetWorldPos = getWorldTargetFromCamera(camera, projection, elevation);\n        if (targetWorldPos !== null) {\n            return projection.unprojectPoint(targetWorldPos);\n        }\n        return null;\n    }\n\n    /**\n     * Calculate target (focus) point world coordinates for given camera position and orientation.\n     * @param camera The camera looking on target point.\n     * @param projection The geo-projection used.\n     * @param elevation Optional elevation above (or below) sea level in world units.\n     */\n    export function getWorldTargetFromCamera(\n        camera: THREE.Camera,\n        projection: Projection,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const cameraPos = cache.vector3[0].copy(camera.position);\n        const cameraLookAt = camera.getWorldDirection(cache.vector3[1]);\n        rayCaster.set(cameraPos, cameraLookAt);\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n        const targetWorldPos = new THREE.Vector3();\n        const result =\n            projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, targetWorldPos)\n                : rayCaster.ray.intersectSphere(groundSphere, targetWorldPos);\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] of the camera, given its target coordinates on the map and its\n     * zoom, yaw and pitch.\n     *\n     * @param targetCoordinates Coordinates of the center of the view.\n     * @param distance Distance to the target in meters.\n     * @param yawDeg Camera yaw in degrees.\n     * @param pitchDeg Camera pitch in degrees.\n     * @param projection Active MapView, needed to get the camera fov and map projection.\n     * @param result Optional output vector.\n     * @returns Camera position in world space.\n     */\n    export function getCameraPositionFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        projection: Projection,\n        result: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 {\n        const pitchRad = THREE.Math.degToRad(pitchDeg);\n        const altitude = Math.cos(pitchRad) * distance;\n        const yawRad = THREE.Math.degToRad(yawDeg);\n        projection.projectPoint(targetCoordinates, result);\n        const groundDistance = distance * Math.sin(pitchRad);\n        if (projection.type === ProjectionType.Planar) {\n            result.x = result.x + Math.sin(yawRad) * groundDistance;\n            result.y = result.y - Math.cos(yawRad) * groundDistance;\n            result.z = result.z + altitude;\n        } else if (projection.type === ProjectionType.Spherical) {\n            // In globe yaw and pitch are understood to be in tangent space. The approach below is\n            // to find the Z and Y tangent space axes, then rotate Y around Z by the given yaw, and\n            // set its new length (groundDistance). Finally the up vector's length is set to the\n            // camera height and added to the transformed Y above.\n\n            // Get the Z axis in tangent space: it is the normalized position vector of the target.\n            tangentSpace.z.copy(result).normalize();\n\n            // Get the Y axis (north axis in tangent space):\n            tangentSpace.y\n                .set(0, 0, 1)\n                .projectOnPlane(tangentSpace.z)\n                .normalize();\n\n            // Rotate this north axis by the given yaw, giving the camera direction relative to\n            // the target.\n            cache.quaternions[0].setFromAxisAngle(tangentSpace.z, yawRad - Math.PI);\n            tangentSpace.y.applyQuaternion(cache.quaternions[0]);\n\n            // Push the camera to the specified distance.\n            tangentSpace.y.setLength(groundDistance);\n\n            // Now get the actual camera position vector: from the target position, add the\n            // previous computation to get the projection of the camera on the ground, then add\n            // the height of the camera in the tangent space.\n            const height = distance * Math.cos(pitchRad);\n            result.add(tangentSpace.y).add(tangentSpace.z.setLength(height));\n\n            const a = EarthConstants.EQUATORIAL_RADIUS + altitude;\n            const b = Math.sin(pitchRad) * distance;\n            const cameraHeight = Math.sqrt(a * a + b * b);\n            result.setLength(cameraHeight);\n        }\n\n        return result;\n    }\n\n    /**\n     * @deprecated use getCameraPositionFromTargetCoordinates instead\n     */\n    export function getCameraCoordinatesFromTargetCoordinates(\n        targetCoordinates: GeoCoordinates,\n        distance: number,\n        yawDeg: number,\n        pitchDeg: number,\n        mapView: MapView\n    ): GeoCoordinates {\n        return mapView.projection.unprojectPoint(\n            getCameraPositionFromTargetCoordinates(\n                targetCoordinates,\n                distance,\n                yawDeg,\n                pitchDeg,\n                mapView.projection,\n                cache.vector3[1]\n            )\n        );\n    }\n\n    /**\n     * Casts a ray in NDC space from the current map view and returns the intersection point of that\n     * ray wih the map in world space.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXinNDC X coordinate in NDC space.\n     * @param pointOnScreenYinNDC Y coordinate in NDC space.\n     * @param elevation Optional param used to offset the ground plane. Used when wanting to pan\n     * based on a plane at some altitude. Necessary for example when panning with terrain.\n     *\n     * @returns Intersection coordinates, or `null` if raycast failed.\n     */\n    export function rayCastWorldCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number,\n        elevation?: number\n    ): THREE.Vector3 | null {\n        const pointInNDCPosition = cache.vector3[0].set(\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC,\n            0\n        );\n        const cameraPos = cache.vector3[1].copy(mapView.camera.position);\n\n        cache.matrix4[0].extractRotation(mapView.camera.matrixWorld);\n\n        // Prepare the unprojection matrix which projects from NDC space to camera space\n        // and takes the current rotation of the camera into account.\n        cache.matrix4[1].multiplyMatrices(\n            cache.matrix4[0],\n            cache.matrix4[1].getInverse(mapView.camera.projectionMatrix)\n        );\n        // Unproject the point via the unprojection matrix.\n        const pointInCameraSpace = pointInNDCPosition.applyMatrix4(cache.matrix4[1]);\n        // Use the point in camera space as the vector towards this point.\n        rayCaster.set(cameraPos, pointInCameraSpace.normalize());\n        if (elevation !== undefined) {\n            groundPlane.constant -= elevation;\n            groundSphere.radius += elevation;\n        }\n\n        const worldPosition = new THREE.Vector3();\n        const result =\n            mapView.projection.type === ProjectionType.Planar\n                ? rayCaster.ray.intersectPlane(groundPlane, worldPosition)\n                : rayCaster.ray.intersectSphere(groundSphere, worldPosition);\n\n        if (elevation !== undefined) {\n            groundPlane.constant = 0;\n            groundSphere.radius = EarthConstants.EQUATORIAL_RADIUS;\n        }\n        return result;\n    }\n\n    /**\n     * Pans the camera according to the projection.\n     *\n     * @param mapView Instance of MapView.\n     * @param xOffset In world space. Value > 0 will pan the map to the right, value < 0 will pan\n     * the map to the left in default camera orientation.\n     * @param yOffset In world space. Value > 0 will pan the map upwards, value < 0 will pan the map\n     * downwards in default camera orientation.\n     */\n    export function panCameraAboveFlatMap(\n        mapView: MapView,\n        offsetX: number,\n        offsetY: number\n    ): void {\n        mapView.camera.position.x += offsetX;\n        mapView.camera.position.y += offsetY;\n    }\n\n    /**\n     * The function doing a pan in the spherical space when [[MapView]]'s active [[ProjectionType]]\n     * is spherical. In other words, the function that rotates the camera around the globe.\n     *\n     * @param mapView MapView instance.\n     * @param fromWorld Start vector representing the scene position of a geolocation.\n     * @param toWorld End vector representing the scene position of a geolocation.\n     */\n    export function panCameraAroundGlobe(\n        mapView: MapView,\n        fromWorld: THREE.Vector3,\n        toWorld: THREE.Vector3\n    ) {\n        cache.quaternions[0]\n            .setFromUnitVectors(fromWorld.normalize(), toWorld.normalize())\n            .inverse();\n        cache.matrix4[0].makeRotationFromQuaternion(cache.quaternions[0]);\n        mapView.camera.applyMatrix(cache.matrix4[0]);\n        mapView.camera.updateMatrixWorld();\n    }\n\n    /**\n     * Rotates the camera by the given delta yaw and delta pitch. The pitch will be clamped to the\n     * maximum possible tilt to the new target, and under the horizon in sphere projection.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     * @param deltaYawDeg Delta yaw in degrees.\n     * @param deltaPitchDeg Delta pitch in degrees.\n     * @param maxTiltAngleRad Max tilt angle in radians.\n     */\n    export function rotate(\n        mapView: MapView,\n        deltaYawDeg: number,\n        deltaPitchDeg: number = 0,\n        maxTiltAngleRad = Math.PI / 4\n    ) {\n        // 1. Apply yaw: rotate around the vertical axis.\n        mapView.camera.rotateOnWorldAxis(\n            mapView.projection.type === ProjectionType.Spherical\n                ? cache.vector3[0].copy(mapView.camera.position).normalize()\n                : cache.vector3[0].set(0, 0, 1),\n            MathUtils.degToRad(-deltaYawDeg)\n        );\n        mapView.camera.updateMatrixWorld();\n\n        // 2. Apply pitch: rotate around the camera's local X axis.\n        if (deltaPitchDeg === 0) {\n            return;\n        }\n        const pitch = MapViewUtils.extractAttitude(mapView, mapView.camera).pitch;\n        // `maxTiltAngle` is equivalent to a `maxPitchAngle` in flat projections.\n        let newPitch = THREE.Math.clamp(\n            pitch + THREE.Math.degToRad(deltaPitchDeg),\n            0,\n            maxTiltAngleRad\n        );\n        // In sphere projection, the value of a maximum pitch is smaller than the value of the\n        // maximum tilt, as the curvature of the surface adds up to it.\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            // Deduce max pitch from max tilt. To this end the sine law of triangles is used below.\n            const maxPitch = Math.asin(\n                (EarthConstants.EQUATORIAL_RADIUS * Math.sin(Math.PI - maxTiltAngleRad)) /\n                    mapView.camera.position.length()\n            );\n            newPitch = Math.min(newPitch, maxPitch);\n        }\n        mapView.camera.rotateX(newPitch - pitch);\n    }\n\n    /**\n     * Computes the rotation of the camera according to yaw and pitch in degrees. The computations\n     * hinge on the current `projection` and `target`, because yaw and pitch are defined in\n     * tangent space of the target point.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param projection Current projection.\n     * @param target The camera target.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function getCameraRotationAtTarget(\n        projection: Projection,\n        target: GeoCoordinates,\n        yawDeg: number,\n        pitchDeg: number,\n        result: THREE.Quaternion = new THREE.Quaternion()\n    ): THREE.Quaternion {\n        const transform = cache.transforms[0];\n        projection.localTangentSpace(target, transform);\n\n        cache.matrix4[0].makeBasis(transform.xAxis, transform.yAxis, transform.zAxis);\n        result.setFromRotationMatrix(cache.matrix4[0]);\n\n        cache.quaternions[0].setFromAxisAngle(\n            cache.vector3[1].set(0, 0, 1),\n            THREE.Math.degToRad(yawDeg)\n        );\n        cache.quaternions[1].setFromAxisAngle(\n            cache.vector3[1].set(1, 0, 0),\n            THREE.Math.degToRad(pitchDeg)\n        );\n\n        result.multiply(cache.quaternions[0]);\n        result.multiply(cache.quaternions[1]);\n        return result;\n    }\n\n    /**\n     * Sets the rotation of the camera according to yaw and pitch in degrees. The computations hinge\n     * on the current projection and `geoCenter`, because yaw and pitch are defined in tangent\n     * space. In particular, `MapView#geoCenter` needs to be set before calling `setRotation`.\n     *\n     * **Note:** `yaw == 0 && pitch == 0` will north up the map and you will look downwards onto the\n     * map.\n     *\n     * @param mapView Instance of MapView.\n     * @param yawDeg Yaw in degrees, counter-clockwise (as opposed to azimuth), starting north.\n     * @param pitchDeg Pitch in degrees.\n     */\n    export function setRotation(mapView: MapView, yawDeg: number, pitchDeg: number) {\n        getCameraRotationAtTarget(\n            mapView.projection,\n            mapView.geoCenter,\n            yawDeg,\n            pitchDeg,\n            mapView.camera.quaternion\n        );\n    }\n\n    /**\n     * Extracts current camera tilt angle in radians.\n     *\n     * @param camera The [[Camera]] in use.\n     * @param projection The [[Projection]] used to convert between geo and world coordinates.\n     */\n    export function extractCameraTilt(camera: THREE.Camera, projection: Projection): number {\n        // For planar projections the camera target point local tangent is the same\n        // at every point on the ground (ignoring terrain fluctuations), so we may\n        // simply use inverted ground normal for tilt calculation. This simplifies\n        // the more generic calculus used for spherical projections.\n        if (projection.type === ProjectionType.Planar) {\n            const lookAt: THREE.Vector3 = camera.getWorldDirection(cache.vector3[0]).normalize();\n            const normal: THREE.Vector3 = projection\n                .surfaceNormal(camera.position, cache.vector3[1])\n                .negate();\n            const cosTheta = lookAt.dot(normal);\n            return Math.acos(THREE.Math.clamp(cosTheta, -1, 1));\n        } else {\n            // Sanity check if new projection type is introduced.\n            assert(projection.type === ProjectionType.Spherical);\n            const targetGeoCoords = MapViewUtils.getGeoTargetFromCamera(camera, projection);\n            // If focus point is lost we then expose maximum allowable tilt value.\n            if (targetGeoCoords !== null) {\n                return MapViewUtils.extractTiltAngleFromLocation(\n                    projection,\n                    camera,\n                    targetGeoCoords\n                );\n            } else {\n                logger.warn(\n                    \"MapView camera is pointing in the void, using maxTilt: \",\n                    maxTiltAngleAllowed\n                );\n                return maxTiltAngleAllowed;\n            }\n        }\n    }\n\n    /**\n     * Extracts yaw, pitch, and roll rotation in radians.\n     * - Yaw : Rotation around the vertical axis, counter-clockwise (as opposed to azimuth),\n     * starting north.\n     * - Pitch :Rotation around the horizontal axis.\n     * - Roll : Rotation around the view axis.\n     *\n     * @see https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param object The [[THREE.Object3D]] instance to extract the rotations from.\n     */\n    export function extractAttitude(\n        options: { projection: Projection },\n        object: THREE.Object3D\n    ): Attitude {\n        // 1. Build the matrix of the tangent space of the object.\n        cache.vector3[1].setFromMatrixPosition(object.matrixWorld); // Ensure using world position.\n        options.projection.localTangentSpace(options.projection.unprojectPoint(cache.vector3[1]), {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n        cache.matrix4[1].makeBasis(tangentSpace.x, tangentSpace.y, tangentSpace.z);\n\n        // 2. Change the basis of matrixWorld to the tangent space to get the new base axes.\n        cache.matrix4[0].getInverse(cache.matrix4[1]).multiply(object.matrixWorld);\n        space.x.setFromMatrixColumn(cache.matrix4[0], 0);\n        space.y.setFromMatrixColumn(cache.matrix4[0], 1);\n        space.z.setFromMatrixColumn(cache.matrix4[0], 2);\n\n        // 3. Deduce orientation from the base axes.\n        let yaw = 0;\n        let pitch = 0;\n        let roll = 0;\n\n        // Decompose rotation matrix into Z0 X Z1 Euler angles.\n        const d = space.z.dot(cache.vector3[1].set(0, 0, 1));\n        if (d < 1.0 - epsilon) {\n            if (d > -1.0 + epsilon) {\n                yaw = Math.atan2(space.z.x, -space.z.y);\n                pitch = Math.acos(space.z.z);\n                roll = Math.atan2(space.x.z, space.y.z);\n            } else {\n                // Looking bottom-up with space.z.z == -1.0\n                yaw = -Math.atan2(-space.y.x, space.x.x);\n                pitch = 180;\n                roll = 0;\n            }\n        } else {\n            // Looking top-down with space.z.z == 1.0\n            yaw = Math.atan2(-space.y.x, space.x.x);\n            pitch = 0.0;\n            roll = 0.0;\n        }\n\n        return {\n            yaw,\n            pitch,\n            roll\n        };\n    }\n\n    /**\n     * Gets the spherical coordinates in radian of the object to the coordinates of `point`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the spherical\n     * coordinates of `object` in the tangent space of `location`.\n     *\n     * @param mapView The [[MapView]] instance to consider.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractSphericalCoordinatesFromLocation(\n        mapView: MapView,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): { azimuth: number; tilt: number } {\n        mapView.projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        let tilt = 0;\n        let azimuth = 0;\n\n        // Get point to object vector in `cache.vector3[1]` and deduce `tilt` from the angle with\n        // tangent Z.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .normalize();\n        if (cache.vector3[1].dot(tangentSpace.z) > 1 - epsilon) {\n            // Top down view: the azimuth of the object would be opposite the yaw, and clockwise.\n            azimuth = Math.PI - extractAttitude(mapView, object).yaw;\n            // Wrap between -PI and PI.\n            azimuth = Math.atan2(Math.sin(azimuth), Math.cos(azimuth));\n            tilt = 0;\n            return { tilt, azimuth };\n        }\n        tilt = cache.vector3[1].angleTo(tangentSpace.z);\n        // Tilted view: the azimuth is the direction of the object from the origin.\n        cache.vector3[1]\n            .copy(object.position)\n            .sub(cache.vector3[0])\n            .projectOnPlane(tangentSpace.z)\n            .normalize();\n        azimuth = cache.vector3[1].angleTo(tangentSpace.y);\n        if (cache.vector3[1].cross(tangentSpace.y).dot(tangentSpace.z) < 0) {\n            azimuth = -azimuth;\n        }\n        return { tilt, azimuth };\n    }\n\n    /**\n     * Gets the tilt angle (in radians) of the object relative to the coordinates of `location`.\n     *\n     * Note: this method can be used to get the direction that an object points to, when `location`\n     * is the target of that object, by adding PI to it. Otherwise it only returns the tilt angle\n     * (in radians) of `object` in the tangent space of `location`.\n     *\n     * @param projection The [[Projection]] used when converting from geo to world coordinates.\n     * @param object The object to get the coordinates from.\n     * @param location The reference point.\n     */\n    export function extractTiltAngleFromLocation(\n        projection: Projection,\n        object: THREE.Object3D,\n        location: GeoCoordinates\n    ): number {\n        projection.localTangentSpace(location, {\n            xAxis: tangentSpace.x,\n            yAxis: tangentSpace.y,\n            zAxis: tangentSpace.z,\n            position: cache.vector3[0]\n        });\n\n        // Get point to object vector (dirVec) and compute the `tilt` as the angle with tangent Z.\n        const dirVec = cache.vector3[1].copy(object.position).sub(cache.vector3[0]);\n        const dirLen = dirVec.length();\n        if (dirLen < epsilon) {\n            logger.error(\"Can not calculate tilt for the zero length vector!\");\n            return 0;\n        }\n        dirVec.divideScalar(dirLen);\n\n        const cosTheta = dirVec.dot(tangentSpace.z);\n        if (cosTheta > 1 - epsilon) {\n            // Top down view.\n            return 0;\n        }\n        return Math.acos(THREE.Math.clamp(cosTheta, -1, 1));\n    }\n\n    /**\n     * Get perspective camera frustum planes distances.\n     * @return all plane distances in helper object.\n     */\n    export function getCameraFrustumPlanes(\n        camera: THREE.PerspectiveCamera\n    ): { left: number; right: number; top: number; bottom: number; near: number; far: number } {\n        const near = camera.near;\n        const far = camera.far;\n        let top = (near * Math.tan(THREE.Math.degToRad(0.5 * camera.fov))) / camera.zoom;\n        let height = 2 * top;\n        let width = camera.aspect * height;\n        let left = -0.5 * width;\n\n        const view = camera.view;\n        if (view !== null && view.enabled) {\n            const fullWidth = view.fullWidth;\n            const fullHeight = view.fullHeight;\n\n            left += (view.offsetX * width) / fullWidth;\n            top -= (view.offsetY * height) / fullHeight;\n            width *= view.width / fullWidth;\n            height *= view.height / fullHeight;\n        }\n\n        // Correct by skew factor\n        left += camera.filmOffset !== 0 ? (near * camera.filmOffset) / camera.getFilmWidth() : 0;\n\n        return {\n            left,\n            right: left + width,\n            top,\n            bottom: top - height,\n            near,\n            far\n        };\n    }\n\n    /**\n     * Casts a ray in NDC space from the current view of the camera and returns the intersection\n     * point of that ray against the map in geo coordinates. The return value can be `null` when\n     * the raycast is above the horizon.\n     *\n     * @param mapView Instance of MapView.\n     * @param pointOnScreenXNDC  Abscissa in NDC space.\n     * @param pointOnScreenYNDC  Ordinate in NDC space.\n     * @returns Intersection geo coordinates, or `null` if raycast is above the horizon.\n     */\n    export function rayCastGeoCoordinates(\n        mapView: MapView,\n        pointOnScreenXinNDC: number,\n        pointOnScreenYinNDC: number\n    ): GeoCoordinates | null {\n        const worldCoordinates = rayCastWorldCoordinates(\n            mapView,\n            pointOnScreenXinNDC,\n            pointOnScreenYinNDC\n        );\n\n        if (!worldCoordinates) {\n            return null;\n        }\n\n        return mapView.projection.unprojectPoint(worldCoordinates);\n    }\n\n    /**\n     * Calculates and returns the distance from the ground, which is needed to put the camera to\n     * this height, to see the size of the area that would be covered by one tile for the given zoom\n     * level.\n     *\n     * @param mapView Instance of MapView.\n     * @param options Subset of necessary [[MapView]] properties.\n     */\n    export function calculateDistanceToGroundFromZoomLevel(\n        options: { projection: Projection; focalLength: number; camera: THREE.Object3D },\n        zoomLevel: number\n    ): number {\n        const cameraPitch = extractAttitude(options, options.camera).pitch;\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return ((options.focalLength * tileSize) / 256) * Math.cos(cameraPitch);\n    }\n\n    /**\n     * Calculates and returns the distance to the target point.\n     *\n     * @param options Necessary subset of MapView properties to compute the distance.\n     * @param zoomLevel The zoom level to get the equivalent height to.\n     */\n    export function calculateDistanceFromZoomLevel(\n        options: { focalLength: number },\n        zoomLevel: number\n    ): number {\n        const tileSize = EarthConstants.EQUATORIAL_CIRCUMFERENCE / Math.pow(2, zoomLevel);\n        return (options.focalLength * tileSize) / 256;\n    }\n\n    /**\n     * Calculates the zoom level, which corresponds to the current distance from\n     * camera to lookAt point.\n     * Therefore the zoom level is a `float` and not an `int`. The height of the camera can be in\n     * between zoom levels. By setting the zoom level, you change the height position of the camera\n     * in away that the field of view of the camera should be able to cover one tile for the given\n     * zoom level.\n     *\n     * As an example for this, when you have a tile of zoom level 14 in front of the camera and you\n     * set the zoom level of the camera to 14, then you are able to see the whole tile in front of\n     * you.\n     *\n     * @param options Subset of necessary [[MapView]] properties.\n     * @param distance The distance in meters, which are scene units in [[MapView]].\n     */\n    export function calculateZoomLevelFromDistance(\n        options: { focalLength: number; minZoomLevel: number; maxZoomLevel: number },\n        distance: number\n    ): number {\n        const tileSize = (256 * distance) / options.focalLength;\n        const zoomLevel = THREE.Math.clamp(\n            Math.log2(EarthConstants.EQUATORIAL_CIRCUMFERENCE / tileSize),\n            options.minZoomLevel,\n            options.maxZoomLevel\n        );\n        // Round to avoid modify the zoom level without distance change, with the imprecision\n        // introduced by raycasting.\n        return Math.round(zoomLevel * 10e15) / 10e15;\n    }\n\n    /**\n     * Translates a linear clip-space distance value to the actual value stored in the depth buffer.\n     * This is useful as the depth values are not stored in the depth buffer linearly, and this can\n     * lead into confusing behavior when not taken into account.\n     *\n     * @param clipDistance Distance from the camera in clip space (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function calculateDepthFromClipDistance(\n        clipDistance: number,\n        camera: THREE.Camera\n    ): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        const cameraRange = perspCam.far - perspCam.near;\n        const viewSpaceDistance = clipDistance * perspCam.far;\n\n        return (1.0 - perspCam.near / viewSpaceDistance) * (perspCam.far / cameraRange);\n    }\n\n    /**\n     * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n     * [0..cameraFar].\n     *\n     * @param distance Distance from the camera (range: [0, 1]).\n     * @param camera Camera applying the perspective projection.\n     */\n    export function cameraToWorldDistance(distance: number, camera: THREE.Camera): number {\n        const perspCam = camera as THREE.PerspectiveCamera;\n        return distance * perspCam.far;\n    }\n\n    /**\n     * Calculates vertical field of view for given horizontal field of vision and aspect ratio.\n     *\n     * @param hFov Horizontal field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateVerticalFovByHorizontalFov(hFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(hFov / 2) / aspect);\n    }\n\n    /**\n     * Calculates horizontal field of view for given vertical field of vision and aspect ratio.\n     *\n     * @param hFov Vertical field of view in rad.\n     * @param aspect Aspect ratio.\n     */\n    export function calculateHorizontalFovByVerticalFov(vFov: number, aspect: number): number {\n        return 2 * Math.atan(Math.tan(vFov / 2) * aspect);\n    }\n\n    /**\n     * Calculates the focal length based on the vertical FOV and height.\n     *\n     * @param vFov Vertical field of view in rad.\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFocalLengthByVerticalFov(vFov: number, height: number): number {\n        return height / 2 / Math.tan(vFov / 2);\n    }\n\n    /**\n     * Calculates the vertical field of view based on the focal length and the height.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param height Height of canvas in pixels.\n     */\n    export function calculateFovByFocalLength(focalLength: number, height: number): number {\n        return THREE.Math.radToDeg(2 * Math.atan(height / 2 / focalLength));\n    }\n\n    /**\n     * Calculates object's screen size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param worldSize Object size in world space.\n     * @return object size in screen space.\n     */\n    export function calculateScreenSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        worldSize: number\n    ): number {\n        return (focalLength * worldSize) / distance;\n    }\n\n    /**\n     * Calculates object's world size based on the focal length and it's camera distance.\n     *\n     * @param focalLength Focal length in pixels (see [[calculateFocalLengthByVerticalFov]])\n     * @param distance Object distance in world space.\n     * @param screenSize Object size in screen space.\n     * @return object size in world space.\n     */\n    export function calculateWorldSizeByFocalLength(\n        focalLength: number,\n        distance: number,\n        screenSize: number\n    ): number {\n        return (distance * screenSize) / focalLength;\n    }\n\n    /**\n     * Computes estimate for size of a THREE.Object3D object and its children. Shared materials\n     * and/or attributes will be counted multiple times.\n     *\n     * @param object The mesh object to evaluate\n     * @param size The [[MemoryUsage]] to update.\n     * @param visitedObjects Optional map to store large objects that could be shared.\n     *\n     * @returns Estimate of object size in bytes for heap and GPU.\n     */\n    export function estimateObject3dSize(\n        object: THREE.Object3D,\n        parentSize?: MemoryUsage,\n        visitedObjects?: Map<string, boolean>\n    ): MemoryUsage {\n        const size =\n            parentSize !== undefined\n                ? parentSize\n                : {\n                      heapSize: 0,\n                      gpuSize: 0\n                  };\n\n        if (visitedObjects === undefined) {\n            visitedObjects = new Map();\n        }\n\n        estimateMeshSize(object, size, visitedObjects);\n\n        if (object.children.length > 0) {\n            for (const child of object.children) {\n                estimateObject3dSize(child, size, visitedObjects);\n            }\n        }\n        return size;\n    }\n\n    /**\n     * Check if tiles or other content is currently being loaded.\n     *\n     * This method can be removed once HARP-7932 is implemented.\n     *\n     * @returns `true` if MapView has visible tiles or other content that is being loaded.\n     */\n    export function mapViewIsLoading(mapView: MapView) {\n        let numTilesLoading = 0;\n\n        for (const tileList of mapView.visibleTileSet.dataSourceTileList) {\n            numTilesLoading += tileList.numTilesLoading;\n\n            for (const tile of tileList.visibleTiles) {\n                if (tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                    numTilesLoading++;\n                }\n                if (tile.tileGeometryLoader !== undefined && !tile.tileGeometryLoader.isFinished) {\n                    numTilesLoading++;\n                }\n            }\n        }\n        let isLoading = numTilesLoading > 0;\n\n        if (mapView.textElementsRenderer !== undefined) {\n            isLoading = isLoading || mapView.textElementsRenderer.loading;\n        }\n\n        isLoading =\n            isLoading ||\n            !mapView.poiTableManager.finishedLoading ||\n            !mapView.visibleTileSet.allVisibleTilesLoaded;\n\n        return isLoading;\n    }\n\n    function estimateTextureSize(\n        texture: THREE.Texture | null,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (texture === null || texture === undefined || texture.image === undefined) {\n            return;\n        }\n\n        if (texture.uuid !== undefined && visitedObjects.get(texture.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(texture.uuid, true);\n\n        // May be HTMLImage or ImageData\n        const image = texture.image;\n        // Assuming RGBA\n        const imageBytes = 4 * image.width * image.height;\n        objectSize.heapSize += imageBytes;\n        objectSize.gpuSize += imageBytes;\n    }\n\n    function estimateMaterialSize(\n        material: THREE.Material,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (material.uuid !== undefined && visitedObjects.get(material.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(material.uuid, true);\n\n        if (\n            material instanceof THREE.RawShaderMaterial ||\n            material instanceof THREE.ShaderMaterial\n        ) {\n            const rawMaterial = material;\n            for (const name in rawMaterial.uniforms) {\n                if (rawMaterial.uniforms[name] !== undefined) {\n                    const uniform = rawMaterial.uniforms[name];\n                    if (uniform instanceof THREE.Texture) {\n                        estimateTextureSize(uniform, objectSize, visitedObjects);\n                    }\n                }\n            }\n        } else if (\n            material instanceof THREE.MeshBasicMaterial ||\n            material instanceof MapMeshBasicMaterial\n        ) {\n            const meshMaterial = material;\n            estimateTextureSize(meshMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.specularMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(meshMaterial.envMap, objectSize, visitedObjects);\n        } else if (material instanceof MapMeshStandardMaterial) {\n            const standardMaterial = material;\n\n            estimateTextureSize(standardMaterial.map, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.lightMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.aoMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.emissiveMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.bumpMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.normalMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.displacementMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.roughnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.metalnessMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.alphaMap, objectSize, visitedObjects);\n            estimateTextureSize(standardMaterial.envMap, objectSize, visitedObjects);\n        } else if (\n            material instanceof THREE.LineBasicMaterial ||\n            material instanceof THREE.LineDashedMaterial\n        ) {\n            // Nothing to be done here\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified material: \", material);\n        }\n    }\n\n    function estimateAttributeSize(\n        attribute: any,\n        attrName: string,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        // Attributes (apparently) do not have their uuid set up.\n        if (attribute.uuid === undefined) {\n            attribute.uuid = THREE.Math.generateUUID();\n        }\n\n        if (visitedObjects.get(attribute.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(attribute.uuid, true);\n\n        let attrBytes = 0;\n        let bytesPerElement = 4;\n        if (attribute.array.BYTES_PER_ELEMENT !== undefined) {\n            bytesPerElement = attribute.array.BYTES_PER_ELEMENT;\n        }\n        if (\n            attribute instanceof THREE.InterleavedBufferAttribute ||\n            attribute instanceof THREE.BufferAttribute\n        ) {\n            attrBytes = bytesPerElement * attribute.count * attribute.itemSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified attribute: \", attrName);\n        }\n\n        objectSize.heapSize += attrBytes + MINIMUM_ATTRIBUTE_SIZE_ESTIMATION;\n        objectSize.gpuSize += attrBytes;\n    }\n\n    function estimateGeometrySize(\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        const isNewObject =\n            geometry.uuid === undefined || visitedObjects.get(geometry.uuid) !== true;\n\n        if (!isNewObject) {\n            return;\n        }\n        visitedObjects.set(geometry.uuid, true);\n\n        let bufferGeometry: THREE.BufferGeometry | undefined;\n\n        if (geometry instanceof THREE.Geometry) {\n            // Each vertex is represented as 3 floats vector (24 bytes).\n            objectSize.heapSize += geometry.vertices.length * 24;\n            // Face: 3 indices (24 byte), 1 normal (3 floats = 24). Vertex normals and\n            // colors are not counted here.\n            objectSize.heapSize += geometry.faces.length * (24 + 24);\n            // Additionally, the internal _bufferGeometry is also counted:\n            bufferGeometry = (geometry as any)._bufferGeometry;\n        } else if (geometry instanceof THREE.BufferGeometry) {\n            bufferGeometry = geometry;\n        }\n\n        if (bufferGeometry === undefined) {\n            // Nothing more to calculate.\n            return;\n        }\n\n        const attributes = bufferGeometry.attributes;\n        if (attributes === undefined) {\n            logger.warn(\"estimateGeometrySize: unidentified geometry: \", geometry);\n            return;\n        }\n\n        for (const property in attributes) {\n            if (attributes[property] !== undefined) {\n                estimateAttributeSize(attributes[property], property, objectSize, visitedObjects);\n            }\n        }\n        if (bufferGeometry.index !== null) {\n            estimateAttributeSize(bufferGeometry.index, \"index\", objectSize, visitedObjects);\n        }\n    }\n\n    function estimateMeshSize(\n        object: THREE.Object3D,\n        objectSize: MemoryUsage,\n        visitedObjects: Map<string, boolean>\n    ): void {\n        if (!object.isObject3D || object instanceof THREE.Scene) {\n            return;\n        }\n\n        if (object.uuid !== undefined && visitedObjects.get(object.uuid) === true) {\n            return;\n        }\n        visitedObjects.set(object.uuid, true);\n\n        if ((object as any).isMesh || (object as any).isLine || (object as any).isPoints) {\n            // Estimated minimum impact on heap.\n            let heapSize = MINIMUM_OBJECT3D_SIZE_ESTIMATION;\n            const gpuSize = 0;\n\n            // Cast to Points class which contains the minimal required properties sub-set.\n            const mesh = object as THREE.Points;\n\n            // Calculate material(s) impact.\n            if (mesh.material !== undefined) {\n                if (Array.isArray(mesh.material)) {\n                    const materials = mesh.material as THREE.Material[];\n                    for (const material of materials) {\n                        estimateMaterialSize(material, objectSize, visitedObjects);\n                    }\n                } else {\n                    const material = mesh.material as THREE.Material;\n                    estimateMaterialSize(material, objectSize, visitedObjects);\n                }\n            }\n\n            // Calculate cost of geometry.\n            if (mesh.geometry !== undefined) {\n                estimateGeometrySize(mesh.geometry, objectSize, visitedObjects);\n            }\n\n            // Add info that is required for picking (parts of) objects and match them to\n            // the featureID in the map data.\n            const featureData: TileFeatureData | undefined =\n                object.userData !== undefined\n                    ? (object.userData.feature as TileFeatureData)\n                    : undefined;\n\n            if (featureData !== undefined) {\n                heapSize += getFeatureDataSize(featureData);\n            }\n\n            objectSize.heapSize += heapSize;\n            objectSize.gpuSize += gpuSize;\n        } else {\n            logger.warn(\"estimateMeshSize: unidentified object\", object);\n        }\n    }\n\n    /**\n     * Gets language list used by the browser\n     *\n     * @returns Array of iso language codes\n     */\n    export function getBrowserLanguages(): string[] | undefined {\n        if (navigator.languages !== undefined && navigator.languages.length > 0) {\n            const languageList = [];\n            for (const lang of navigator.languages) {\n                languageList.push(getIsoLanguageCode(lang));\n            }\n            return languageList;\n        }\n        if (navigator.language !== undefined) {\n            return [getIsoLanguageCode(navigator.language)];\n        }\n        return undefined;\n    }\n\n    /**\n     * Gets ISO-639-1 language code from browser's code (ex. en for en-US)\n     */\n    function getIsoLanguageCode(language: string) {\n        return language.substring(0, 2);\n    }\n}\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000\n];\n\nexport namespace TileOffsetUtils {\n    /**\n     * Creates a unique key based on the supplied parameters. Note, the uniqueness is bounded by the\n     * bitshift. The [[TileKey.mortonCode()]] supports currently up to 26 levels (this is because\n     * 26*2 equals 52, and 2^52 is the highest bit that can be set in an integer in Javascript), the\n     * bitshift reduces this accordingly, so given the default bitshift of four, we support up to 24\n     * levels. Given the current support up to level 19 this should be fine.\n     *\n     * @param tileKey The unique [[TileKey]] from which to compute the unique key.\n     * @param offset How much the given [[TileKey]] is offset\n     * @param bitshift How much space we have to store the offset. The default of 4 means we have\n     *      enough space to store 16 unique tiles in a single view.\n     */\n    export function getKeyForTileKeyAndOffset(\n        tileKey: TileKey,\n        offset: number,\n        bitshift: number = 4\n    ) {\n        const shiftedOffset = getShiftedOffset(offset, bitshift);\n        return tileKey.mortonCode() + shiftedOffset;\n    }\n\n    /**\n     * Extracts the offset and morton key from the given key (must be created by:\n     * [[getKeyForTileKeyAndOffset]])\n     *\n     * Note, we can't use bitshift operators in Javascript because they work on 32-bit integers, and\n     * would truncate the numbers, hence using powers of two.\n     *\n     * @param key Key to extract offset and morton key.\n     * @param bitshift How many bits to shift by, must be the same as was used when creating the\n     * key.\n     */\n    export function extractOffsetAndMortonKeyFromKey(key: number, bitshift: number = 4) {\n        let offset = 0;\n        let mortonCode = key;\n        let i = 0;\n        // Compute the offset\n        for (; i < bitshift; i++) {\n            // Note, we use 52, because 2^53-1 is the biggest value, the highest value\n            // that can be set is the bit in the 52th position.\n            const num = powerOfTwo[52 - i];\n            if (mortonCode >= num) {\n                mortonCode -= num;\n                offset += powerOfTwo[bitshift - 1 - i];\n            }\n        }\n        // We subtract half of the total amount, this undoes what is computed in getShiftedOffset\n        offset -= powerOfTwo[bitshift - 1];\n        return { offset, mortonCode };\n    }\n\n    /**\n     * Returns the key of the parent. Key must have been computed using the function\n     * [[getKeyForTileKeyAndOffset]].\n     *\n     * @param calculatedKey Key to decompose\n     * @param bitshift Bit shift used to create the key\n     */\n    export function getParentKeyFromKey(calculatedKey: number, bitshift: number = 4) {\n        const { offset, mortonCode } = extractOffsetAndMortonKeyFromKey(calculatedKey, bitshift);\n        const parentTileKey = TileKey.fromMortonCode(TileKey.parentMortonCode(mortonCode));\n        return getKeyForTileKeyAndOffset(parentTileKey, offset, bitshift);\n    }\n\n    /**\n     * Packs the supplied offset into the high bits, where the highbits are between 2^52 and\n     * 2^(52-bitshift).\n     *\n     * Offsets are wrapped around, to fit in the offsetBits. In practice, this doesn't really\n     * matter, this is primarily used to find a unique id, if there is an offset 10, which is\n     * wrapped to 2, it doesn't matter, because the offset of 10 is still stored in the tile.\n     * What can be a problem though is that the cache gets filled up and isn't emptied.\n     *\n     * Note, because bit shifting in JavaScript works on 32 bit integers, we use powers of 2 to set\n     * the high bits instead.\n     *\n     * @param offset Offset to pack into the high bits.\n     * @param offsetBits How many bits to use to pack the offset.\n     */\n    function getShiftedOffset(offset: number, offsetBits: number = 4) {\n        let result = 0;\n        const totalOffsetsToStore = powerOfTwo[offsetBits];\n        //Offsets are stored by adding half 2 ^ (bitshift - 1), i.e.half of the max amount stored,\n        //and then wrapped based on this value.For example, given a bitshift of 3, and an offset -\n        //3, it would have 4 added(half of 2 ^ 3), and be stored as 1, 3 would have 4 added and be\n        //stored as 7, 4 would be added with 4 and be stored as 0 (it wraps around).\n        offset += totalOffsetsToStore / 2;\n        while (offset < 0) {\n            offset += totalOffsetsToStore;\n        }\n        while (offset >= totalOffsetsToStore) {\n            offset -= totalOffsetsToStore;\n        }\n        // Offset is now a number between >= 0 and < totalOffsetsToStore\n        for (let i = 0; i < offsetBits && offset > 0; i++) {\n            // tslint:disable: no-bitwise\n            // 53 is used because 2^53-1 is the biggest number that Javascript can represent as an\n            // integer safely.\n            if (offset & 0x1) {\n                result += powerOfTwo[53 - offsetBits + i];\n            }\n            offset >>>= 1;\n            // tslint:enable: no-bitwise\n        }\n        assert(offset === 0);\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport class EarthConstants {\n    /** The equatorial circumference in meters. */\n    static EQUATORIAL_CIRCUMFERENCE: number = 40075016.6855784861531768177614;\n\n    /** The equatorial radius in meters. */\n    static EQUATORIAL_RADIUS: number = 6378137.0;\n\n    /** The lowest point on earth (Dead Sea) in meters. */\n    static MIN_ELEVATION: number = -433.0;\n\n    /** The highest point on earth (Mt. Everest) in meters. */\n    static MAX_ELEVATION: number = 8848.0;\n\n    /** The highest artificial structure (building) on earth, Burj Khalifa tower in Dubai */\n    static MAX_BUILDING_HEIGHT: number = 828;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * An interface representing bounding box in world coordinates.\n */\nexport interface Box3Like {\n    /**\n     * The minimum position in world coordinates of this bounding box.\n     */\n    readonly min: Vector3Like;\n\n    /**\n     * The maximum position in world coordinates of this bounding box.\n     */\n    readonly max: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the [[Box3Like]] interface.\n *\n * @param object A valid object.\n */\nexport function isBox3Like(object: {}): object is Box3Like {\n    const box3 = object as Partial<Box3Like>;\n    return box3.min !== undefined && box3.max !== undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransformLike } from \"./TransformLike\";\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[OrientedBox3Like]] is used to represent oriented bounding box.\n */\nexport interface OrientedBox3Like extends TransformLike {\n    /**\n     * The extents of this bounding box.\n     */\n    readonly extents: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[OrientedBox3Like]].\n *\n * @param object The object.\n */\nexport function isOrientedBox3Like(object: {}): object is OrientedBox3Like {\n    const obb = object as Partial<OrientedBox3Like>;\n    return (\n        obb.position !== undefined &&\n        obb.xAxis !== undefined &&\n        obb.yAxis !== undefined &&\n        obb.zAxis !== undefined &&\n        obb.extents !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\n\n/**\n * The type of projection.\n */\nexport enum ProjectionType {\n    /**\n     * A type of [Projection] with zero curvature.\n     */\n    Planar,\n\n    /**\n     * A spherical [Projection].\n     */\n    Spherical\n}\n\n/**\n * `Projection` is used to convert positions from geo coordinates to world coordinates and vice\n * versa.\n */\nexport abstract class Projection {\n    /**\n     * The type of this [Projection].\n     */\n    abstract get type(): ProjectionType;\n\n    /**\n     * Constructs the Projection\n     *\n     * @param unitScale How to transform the projected coordinates to world units.\n     */\n    constructor(readonly unitScale: number) {\n        //Prevent empty constructor error.\n    }\n\n    /**\n     * Returns the world extents in world coordinates.\n     *\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     * @param result The optional object that will be used to create the resulting bounding box.\n     */\n    abstract worldExtent<Bounds extends Box3Like>(\n        minElevation: number,\n        maxElevation: number,\n        result?: Bounds\n    ): Bounds;\n\n    /**\n     * Projects a point from geo coordinates (latitude, longitude, altitude) to world coordinates\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const worldPos = new THREE.Vector3();\n     * projection.projectPoint(geoPos, worldPos);\n     * ```\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param result The optional object used to store the resulting world position, result must\n     * implement [[Vector3Like]].\n     */\n    abstract projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates;\n\n    /**\n     * Gets the [[TransformLike]] of the local tangent space at the given geo coordinates.\n     *\n     * @param geoPoint The geo coordinates.\n     * @param result The [[TransformLike]].\n     */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, 1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, 1, result.zAxis);\n        return result;\n    }\n\n    /**\n     * Returns the geo coordinates (latitude, longitude, altitude) from the given world position\n     * (x,y,z).\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectPoint(worldPoint: Vector3Like): GeoCoordinates;\n\n    /**\n     * Returns the altitude at the given world position (x,y,z) in meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract unprojectAltitude(worldPoint: Vector3Like): number;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox);\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     */\n    abstract projectBox(geoBox: GeoBox): Box3Like;\n\n    /**\n     * Projects bounds in geo coordinates to a bounding box in world coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const bounds = projection.projectBox(geoBox, new THREE.Box3());\n     * console.log(bounds.min, bounds.max);\n     * ```\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param result The resulting [[OrientedBox3Like]].\n     */\n    abstract projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: WorldBoundingBox\n    ): WorldBoundingBox;\n\n    /**\n     * Converts a bounding box in world coordinates to a bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = projection.unprojectPoint(worldPos);\n     * console.log(geoPos.latitude, geoPos.longitude, geoPos.altitude);\n     * ```\n     *\n     * @param worldBox The bounding box in world coordinates.\n     */\n    abstract unprojectBox(worldBox: Box3Like): GeoBox;\n\n    /**\n     * Returns the scaling factor that must be used to convert the units used by `worldPoint` to\n     * meters.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract getScaleFactor(worldPoint: Vector3Like): number;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract surfaceNormal(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Returns the surface normal at the given world position.\n     *\n     * @param worldPoint The position in world coordinates.\n     * @returns The resulting normal vector.\n     */\n    abstract surfaceNormal<Normal extends Vector3Like>(\n        worldPoint: Vector3Like,\n        result: Normal\n    ): Normal;\n\n    /**\n     * Returns the signed distance between the given coordinates and\n     * the closest point on the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract groundDistance(worldPoint: Vector3Like): number;\n\n    /**\n     * Scales the given world coordinates to the surface.\n     *\n     * @param worldPoint The position in world coordinates.\n     */\n    abstract scalePointToSurface(worldPoint: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid world position for the given source projection.\n     * @returns The world position reprojected using this [[Projection]].\n     */\n    reprojectPoint(sourceProjection: Projection, worldPos: Vector3Like): Vector3Like;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     */\n    reprojectPoint<WorldCoordinates extends Vector3Like>(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result: WorldCoordinates\n    ): typeof result;\n\n    /**\n     * Reproject a world position from the given source [[Projection]].\n     * Implementations should be aware of worldPos and result may be one object\n     *\n     * @param sourceProjection The source projection.\n     * @param worldPos A valid position in the world space defined by the source projection.\n     * @param result The resulting position reprojected using this [[Projection]].\n     * @hidden\n     */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === this) {\n            if (result === undefined) {\n                return { x: worldPos.x, y: worldPos.y, z: worldPos.z };\n            }\n            result.x = worldPos.x;\n            result.y = worldPos.y;\n            result.z = worldPos.z;\n            return result;\n        }\n        return this.projectPoint(sourceProjection.unprojectPoint(worldPos), result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { ColorUtils } from \"./ColorUtils\";\nimport { Env } from \"./Env\";\nimport { ExponentialInterpolant } from \"./ExponentialInterpolant\";\nimport { Expr, ExprScope, Value } from \"./Expr\";\nimport {\n    InterpolatedProperty,\n    InterpolatedPropertyDefinition,\n    InterpolationMode\n} from \"./InterpolatedPropertyDefs\";\nimport {\n    parseStringEncodedNumeral,\n    StringEncodedColorFormats,\n    StringEncodedMetricFormats,\n    StringEncodedNumeralFormat,\n    StringEncodedNumeralFormatMaxSize,\n    StringEncodedNumeralFormats,\n    StringEncodedNumeralType\n} from \"./StringEncodedNumeral\";\n\nconst logger = LoggerManager.instance.create(\"InterpolatedProperty\");\n\nconst interpolants = [\n    THREE.DiscreteInterpolant,\n    THREE.LinearInterpolant,\n    THREE.CubicInterpolant,\n    ExponentialInterpolant\n];\n\nconst tmpBuffer = new Array<number>(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Checks if a property is interpolated.\n * @param p property to be checked\n */\nexport function isInterpolatedPropertyDefinition<T>(\n    p: any\n): p is InterpolatedPropertyDefinition<T> {\n    if (\n        p &&\n        p.interpolationMode === undefined &&\n        Array.isArray(p.values) &&\n        p.values.length > 0 &&\n        p.values[0] !== undefined &&\n        Array.isArray(p.zoomLevels) &&\n        p.zoomLevels.length > 0 &&\n        p.zoomLevels[0] !== undefined &&\n        p.values.length === p.zoomLevels.length\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Type guard to check if an object is an instance of `InterpolatedProperty`.\n */\nexport function isInterpolatedProperty(p: any): p is InterpolatedProperty {\n    if (\n        p &&\n        p.interpolationMode !== undefined &&\n        p.zoomLevels instanceof Float32Array &&\n        p.values !== undefined &&\n        p.values.length > 0 &&\n        (p.zoomLevels.length === p.values.length / 4 ||\n            p.zoomLevels.length === p.values.length / 3 ||\n            p.zoomLevels.length === p.values.length)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n* Get the value of the specified property in given `env`.\n\n* @param property Property of a technique.\n* @param env The [[Env]] used to evaluate the property\n*/\nexport function getPropertyValue(\n    property: Value | Expr | InterpolatedProperty | undefined,\n    env: Env\n): any {\n    if (Expr.isExpr(property)) {\n        return property.evaluate(env, ExprScope.Dynamic);\n    }\n\n    if (isInterpolatedProperty(property)) {\n        return evaluateInterpolatedProperty(property, env);\n    }\n\n    if (typeof property !== \"string\") {\n        // Property in numeric or array, etc. format\n        return property;\n    } else {\n        // Non-interpolated string encoded numeral parsing\n        const pixelToMeters = (env.lookup(\"$pixelToMeters\") as number) || 1;\n        const value = parseStringEncodedNumeral(property, pixelToMeters);\n        return value !== undefined ? value : property;\n    }\n}\n\nexport function evaluateInterpolatedProperty(property: InterpolatedProperty, env: Env): any {\n    const level = env.lookup(\"$zoom\") as number;\n    const pixelToMeters = env.lookup(\"$pixelToMeters\") as number;\n\n    if (property._stringEncodedNumeralType !== undefined) {\n        switch (property._stringEncodedNumeralType) {\n            case StringEncodedNumeralType.Meters:\n            case StringEncodedNumeralType.Pixels:\n                return getInterpolatedMetric(property, level, pixelToMeters);\n            case StringEncodedNumeralType.Hex:\n            case StringEncodedNumeralType.RGB:\n            case StringEncodedNumeralType.RGBA:\n            case StringEncodedNumeralType.HSL:\n                return getInterpolatedColor(property, level);\n        }\n    }\n    return getInterpolatedMetric(property, level, pixelToMeters);\n}\n\nfunction getInterpolatedMetric(\n    property: InterpolatedProperty,\n    level: number,\n    pixelToMeters: number\n): number {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](\n        property.zoomLevels,\n        property.values,\n        nChannels\n    );\n    if (\n        property.interpolationMode === InterpolationMode.Exponential &&\n        property.exponent !== undefined\n    ) {\n        (interpolant as ExponentialInterpolant).exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n\n    if (property._stringEncodedNumeralDynamicMask === undefined) {\n        return interpolant.resultBuffer[0];\n    } else {\n        const maskInterpolant = new interpolants[property.interpolationMode](\n            property.zoomLevels,\n            property._stringEncodedNumeralDynamicMask,\n            1\n        );\n        if (\n            property.interpolationMode === InterpolationMode.Exponential &&\n            property.exponent !== undefined\n        ) {\n            (maskInterpolant as ExponentialInterpolant).exponent = property.exponent;\n        }\n        maskInterpolant.evaluate(level);\n\n        return (\n            interpolant.resultBuffer[0] *\n            (1 + maskInterpolant.resultBuffer[0] * (pixelToMeters - 1))\n        );\n    }\n}\n\nfunction getInterpolatedColor(property: InterpolatedProperty, level: number): number {\n    const nChannels = property.values.length / property.zoomLevels.length;\n    const interpolant = new interpolants[property.interpolationMode](\n        property.zoomLevels,\n        property.values,\n        nChannels\n    );\n    if (\n        property.interpolationMode === InterpolationMode.Exponential &&\n        property.exponent !== undefined\n    ) {\n        (interpolant as ExponentialInterpolant).exponent = property.exponent;\n    }\n    interpolant.evaluate(level);\n\n    assert(nChannels === 3 || nChannels === 4);\n    // ColorUtils.getHexFromRgba() does not clamp the values which may be out of\n    // color channels range (0 <= c <= 1) after interpolation.\n    if (nChannels === 4) {\n        return ColorUtils.getHexFromRgba(\n            THREE.Math.clamp(interpolant.resultBuffer[0], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[1], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[2], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[3], 0, 1)\n        );\n    } else {\n        return ColorUtils.getHexFromRgb(\n            THREE.Math.clamp(interpolant.resultBuffer[0], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[1], 0, 1),\n            THREE.Math.clamp(interpolant.resultBuffer[2], 0, 1)\n        );\n    }\n}\n\n/**\n * Convert JSON representation of interpolated property to internal, normalized version that\n * can be evaluated by [[getPropertyValue]].\n */\nexport function createInterpolatedProperty(\n    prop: InterpolatedPropertyDefinition<unknown>\n): InterpolatedProperty | undefined {\n    removeDuplicatePropertyValues(prop);\n\n    const interpolationMode =\n        prop.interpolation !== undefined\n            ? InterpolationMode[prop.interpolation]\n            : InterpolationMode.Discrete;\n\n    const zoomLevels = new Float32Array(prop.zoomLevels);\n\n    const firstValue = prop.values[0];\n    switch (typeof firstValue) {\n        default:\n        case \"number\":\n        case \"boolean\":\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: new Float32Array(prop.values as any),\n                exponent: prop.exponent\n            };\n        case \"string\":\n            // TODO: Minimize effort for pre-matching the numeral format.\n            const matchedFormat = StringEncodedNumeralFormats.find(format =>\n                format.regExp.test(firstValue)\n            );\n\n            if (matchedFormat === undefined) {\n                if (interpolationMode === InterpolationMode.Discrete) {\n                    return {\n                        interpolationMode,\n                        zoomLevels,\n                        values: prop.values\n                    };\n                }\n\n                logger.error(`No StringEncodedNumeralFormat matched ${firstValue}.`);\n                return undefined;\n            }\n\n            let needsMask = false;\n\n            const propValues = new Float32Array(prop.values.length * matchedFormat.size);\n            const maskValues = new Float32Array(prop.values.length);\n            needsMask = procesStringEnocodedNumeralInterpolatedProperty(\n                matchedFormat,\n                prop as InterpolatedPropertyDefinition<string>,\n                propValues,\n                maskValues\n            );\n\n            return {\n                interpolationMode,\n                zoomLevels,\n                values: propValues,\n                exponent: prop.exponent,\n                _stringEncodedNumeralType: matchedFormat.type,\n                _stringEncodedNumeralDynamicMask: needsMask ? maskValues : undefined\n            };\n    }\n}\n\nfunction removeDuplicatePropertyValues<T>(p: InterpolatedPropertyDefinition<T>) {\n    const eps = 0.001;\n\n    // detect cubic interpolations and remove stops\n    // closer than `eps`, this is needed to avoid\n    // possible NaN generated by the cubic interpolator.\n    const isCubic = p.interpolation === \"Cubic\";\n\n    for (let i = 0; i < p.values.length; ++i) {\n        const firstIdx = p.zoomLevels.findIndex(a => {\n            return isCubic ? Math.abs(a - p.zoomLevels[i]) < eps : a === p.zoomLevels[i];\n        });\n        if (firstIdx !== i) {\n            p.zoomLevels.splice(--i, 1);\n            p.values.splice(--i, 1);\n        }\n    }\n}\n\nfunction procesStringEnocodedNumeralInterpolatedProperty(\n    baseFormat: StringEncodedNumeralFormat,\n    prop: InterpolatedPropertyDefinition<string>,\n    propValues: Float32Array,\n    maskValues: Float32Array\n): boolean {\n    let needsMask = false;\n    const allowedValueFormats =\n        baseFormat.type === StringEncodedNumeralType.Meters ||\n        baseFormat.type === StringEncodedNumeralType.Pixels\n            ? StringEncodedMetricFormats\n            : StringEncodedColorFormats;\n\n    for (let valueIdx = 0; valueIdx < prop.values.length; ++valueIdx) {\n        let matched = false;\n        for (const valueFormat of allowedValueFormats) {\n            const value = prop.values[valueIdx];\n            matched = valueFormat.decoder(value, tmpBuffer);\n            if (!matched) {\n                continue;\n            }\n\n            if (valueFormat.mask !== undefined) {\n                maskValues[valueIdx] = valueFormat.mask;\n                needsMask = true;\n            }\n\n            for (let i = 0; i < valueFormat.size; ++i) {\n                propValues[valueIdx * valueFormat.size + i] = tmpBuffer[i];\n            }\n            break;\n        }\n        if (!matched) {\n            throw Error(\n                `Not all interpolation values match the same format: ${JSON.stringify(prop)}`\n            );\n        }\n    }\n\n    return needsMask;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Unit of measurement used to specify a font's size.\n */\nexport enum FontUnit {\n    Em,\n    Pixel,\n    Point,\n    Percent\n}\n\n/**\n * Pair of unit and size specifying a font's size.\n */\nexport interface FontSize {\n    unit: FontUnit;\n    size: number;\n    backgroundSize: number;\n}\n\n/**\n * Style to be used when rendering glyphs.\n */\nexport enum FontStyle {\n    Regular,\n    Bold,\n    Italic,\n    BoldItalic\n}\n\n/**\n * Variant to be used when rendering.\n */\nexport enum FontVariant {\n    Regular,\n    AllCaps,\n    SmallCaps\n}\n\n/**\n * Vertical alignment to be used when placing text.\n */\nexport enum VerticalAlignment {\n    Above = 0.0,\n    Center = -0.5,\n    Below = -1.0\n}\n\n/**\n * Horizontal alignment to be used when placing text.\n */\nexport enum HorizontalAlignment {\n    Left = 0.0,\n    Center = -0.5,\n    Right = -1.0\n}\n\n/**\n * Text wrapping rule used when `lineWidth` is reached.\n */\nexport enum WrappingMode {\n    None,\n    Character,\n    Word\n}\n\n/**\n * Namespace containing default values for all members of [[TextRenderParameters]] and\n * [[TextLayoutParameters]].\n */\nexport namespace DefaultTextStyle {\n    export const DEFAULT_FONT_NAME: string = \"\";\n    export const DEFAULT_FONT_SIZE: FontSize = {\n        unit: Object.freeze(FontUnit.Pixel),\n        size: Object.freeze(16.0),\n        backgroundSize: Object.freeze(0.0)\n    };\n    export const DEFAULT_FONT_STYLE: FontStyle = FontStyle.Regular;\n    export const DEFAULT_FONT_VARIANT: FontVariant = FontVariant.Regular;\n    export const DEFAULT_ROTATION: number = 0.0;\n    export const DEFAULT_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_OPACITY: number = 1.0;\n    export const DEFAULT_BACKGROUND_COLOR: THREE.Color = new THREE.Color(0x000000);\n    export const DEFAULT_BACKGROUND_OPACITY: number = 0.0;\n\n    export const DEFAULT_TRACKING: number = 0.0;\n    export const DEFAULT_LEADING: number = 0.0;\n    export const DEFAULT_MAX_LINES: number = Infinity;\n    export const DEFAULT_LINE_WIDTH: number = Infinity;\n    export const DEFAULT_CANVAS_ROTATION: number = 0.0;\n    export const DEFAULT_LINE_ROTATION: number = 0.0;\n    export const DEFAULT_WRAPPING_MODE: WrappingMode = WrappingMode.Word;\n    export const DEFAULT_VERTICAL_ALIGNMENT: VerticalAlignment = VerticalAlignment.Above;\n    export const DEFAULT_HORIZONTAL_ALIGNMENT: HorizontalAlignment = HorizontalAlignment.Left;\n}\n\n/**\n * [[TextCanvas]] text rendering parameters.\n */\nexport interface TextRenderParameters {\n    fontName?: string;\n    fontSize?: FontSize;\n    fontStyle?: FontStyle;\n    fontVariant?: FontVariant;\n    rotation?: number;\n    color?: THREE.Color;\n    backgroundColor?: THREE.Color;\n    opacity?: number;\n    backgroundOpacity?: number;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextRenderStyle {\n    private m_params: TextRenderParameters;\n\n    /**\n     * Creates a new `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns New `TextRenderStyle`.\n     */\n    constructor(params: TextRenderParameters = {}) {\n        this.m_params = {\n            fontName:\n                params.fontName !== undefined\n                    ? params.fontName\n                    : DefaultTextStyle.DEFAULT_FONT_NAME,\n            fontSize:\n                params.fontSize !== undefined\n                    ? params.fontSize\n                    : {\n                          unit: DefaultTextStyle.DEFAULT_FONT_SIZE.unit,\n                          size: DefaultTextStyle.DEFAULT_FONT_SIZE.size,\n                          backgroundSize: DefaultTextStyle.DEFAULT_FONT_SIZE.backgroundSize\n                      },\n            fontStyle:\n                params.fontStyle !== undefined\n                    ? params.fontStyle\n                    : DefaultTextStyle.DEFAULT_FONT_STYLE,\n            fontVariant:\n                params.fontVariant !== undefined\n                    ? params.fontVariant\n                    : DefaultTextStyle.DEFAULT_FONT_VARIANT,\n            rotation:\n                params.rotation !== undefined ? params.rotation : DefaultTextStyle.DEFAULT_ROTATION,\n            color:\n                params.color !== undefined\n                    ? params.color\n                    : new THREE.Color(DefaultTextStyle.DEFAULT_COLOR),\n            opacity:\n                params.opacity !== undefined ? params.opacity : DefaultTextStyle.DEFAULT_OPACITY,\n            backgroundColor:\n                params.backgroundColor !== undefined\n                    ? params.backgroundColor\n                    : new THREE.Color(DefaultTextStyle.DEFAULT_BACKGROUND_COLOR),\n            backgroundOpacity:\n                params.backgroundOpacity !== undefined\n                    ? params.backgroundOpacity\n                    : DefaultTextStyle.DEFAULT_BACKGROUND_OPACITY\n        };\n    }\n\n    /**\n     * Current [[TextRenderParameters]] for this style.\n     */\n    get params(): TextRenderParameters {\n        return this.m_params;\n    }\n    set params(value: TextRenderParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    get fontName(): string {\n        return this.m_params.fontName!;\n    }\n    set fontName(value: string) {\n        this.m_params.fontName = value;\n    }\n\n    /**\n     * Collection of unit and sizes to apply for the currently active [[Font]].\n     */\n    get fontSize(): FontSize {\n        return this.m_params.fontSize!;\n    }\n    set fontSize(value: FontSize) {\n        this.m_params.fontSize = value;\n    }\n\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    get fontStyle(): FontStyle {\n        return this.m_params.fontStyle!;\n    }\n    set fontStyle(value: FontStyle) {\n        this.m_params.fontStyle = value;\n    }\n\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    get fontVariant(): FontVariant {\n        return this.m_params.fontVariant!;\n    }\n    set fontVariant(value: FontVariant) {\n        this.m_params.fontVariant = value;\n    }\n\n    /**\n     * Glyph local rotation (radians).\n     */\n    get rotation(): number {\n        return this.m_params.rotation!;\n    }\n    set rotation(value: number) {\n        this.m_params.rotation = value;\n    }\n\n    /**\n     * Glyph color.\n     */\n    get color(): THREE.Color {\n        return this.m_params.color!;\n    }\n    set color(value: THREE.Color) {\n        this.m_params.color = value;\n    }\n\n    /**\n     * Glyph background color.\n     */\n    get backgroundColor(): THREE.Color {\n        return this.m_params.backgroundColor!;\n    }\n    set backgroundColor(value: THREE.Color) {\n        this.m_params.backgroundColor = value;\n    }\n\n    /**\n     * Glyph opacity.\n     */\n    get opacity(): number {\n        return this.m_params.opacity!;\n    }\n    set opacity(value: number) {\n        this.m_params.opacity = value;\n    }\n\n    /**\n     * Glyph background opacity.\n     */\n    get backgroundOpacity(): number {\n        return this.m_params.backgroundOpacity!;\n    }\n    set backgroundOpacity(value: number) {\n        this.m_params.backgroundOpacity = value;\n    }\n\n    /**\n     * Clone this `TextRenderStyle`.\n     *\n     * @param params Input [[TextRenderParameters]].\n     *\n     * @returns Cloned `TextRenderStyle`.\n     */\n    clone(params: TextRenderParameters = {}): TextRenderStyle {\n        return new TextRenderStyle({ ...this.m_params, ...params });\n    }\n}\n\n/**\n * [[TextCanvas]] text layout parameters.\n */\nexport interface TextLayoutParameters {\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: WrappingMode;\n    verticalAlignment?: VerticalAlignment;\n    horizontalAlignment?: HorizontalAlignment;\n}\n\n/**\n * [[TextCanvas]] text rendering style.\n */\nexport class TextLayoutStyle {\n    private m_params: TextLayoutParameters;\n\n    /**\n     * Creates a new `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns New `TextLayoutStyle`.\n     */\n    constructor(params: TextLayoutParameters = {}) {\n        this.m_params = {\n            tracking:\n                params.tracking !== undefined ? params.tracking : DefaultTextStyle.DEFAULT_TRACKING,\n            leading:\n                params.leading !== undefined ? params.leading : DefaultTextStyle.DEFAULT_LEADING,\n            maxLines:\n                params.maxLines !== undefined\n                    ? params.maxLines\n                    : DefaultTextStyle.DEFAULT_MAX_LINES,\n            lineWidth:\n                params.lineWidth !== undefined\n                    ? params.lineWidth\n                    : DefaultTextStyle.DEFAULT_LINE_WIDTH,\n            canvasRotation:\n                params.canvasRotation !== undefined\n                    ? params.canvasRotation\n                    : DefaultTextStyle.DEFAULT_CANVAS_ROTATION,\n            lineRotation:\n                params.lineRotation !== undefined\n                    ? params.lineRotation\n                    : DefaultTextStyle.DEFAULT_LINE_ROTATION,\n            wrappingMode:\n                params.wrappingMode !== undefined\n                    ? params.wrappingMode\n                    : DefaultTextStyle.DEFAULT_WRAPPING_MODE,\n            verticalAlignment:\n                params.verticalAlignment !== undefined\n                    ? params.verticalAlignment\n                    : DefaultTextStyle.DEFAULT_VERTICAL_ALIGNMENT,\n            horizontalAlignment:\n                params.horizontalAlignment !== undefined\n                    ? params.horizontalAlignment\n                    : DefaultTextStyle.DEFAULT_HORIZONTAL_ALIGNMENT\n        };\n    }\n\n    /**\n     * Current [[TextLayoutParameters]] for this style.\n     */\n    get params(): TextLayoutParameters {\n        return this.m_params;\n    }\n    set params(value: TextLayoutParameters) {\n        this.m_params = { ...this.m_params, ...value };\n    }\n\n    /**\n     * Inter-glyph spacing (pixels). Scaled by [[FontSize]].\n     */\n    get tracking(): number {\n        return this.m_params.tracking!;\n    }\n    set tracking(value: number) {\n        this.m_params.tracking = value;\n    }\n\n    /**\n     * Inter-line spacing (pixels). Scaled by [[FontSize]].\n     */\n    get leading(): number {\n        return this.m_params.leading!;\n    }\n    set leading(value: number) {\n        this.m_params.leading = value;\n    }\n\n    /**\n     * Maximum number of lines to be considered when using [[TextCanvas]].\n     */\n    get maxLines(): number {\n        return this.m_params.maxLines!;\n    }\n    set maxLines(value: number) {\n        this.m_params.maxLines = value;\n    }\n\n    /**\n     * Maximum line width (pixels).\n     */\n    get lineWidth(): number {\n        return this.m_params.lineWidth!;\n    }\n    set lineWidth(value: number) {\n        this.m_params.lineWidth = value;\n    }\n\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    get canvasRotation(): number {\n        return this.m_params.canvasRotation!;\n    }\n    set canvasRotation(value: number) {\n        this.m_params.canvasRotation = value;\n    }\n\n    /**\n     * Line typesetting rotation (radians).\n     */\n    get lineRotation(): number {\n        return this.m_params.lineRotation!;\n    }\n    set lineRotation(value: number) {\n        this.m_params.lineRotation = value;\n    }\n\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    get wrappingMode(): WrappingMode {\n        return this.m_params.wrappingMode!;\n    }\n    set wrappingMode(value: WrappingMode) {\n        this.m_params.wrappingMode = value;\n    }\n\n    /**\n     * Text position regarding the baseline.\n     */\n    get verticalAlignment(): VerticalAlignment {\n        return this.m_params.verticalAlignment!;\n    }\n    set verticalAlignment(value: VerticalAlignment) {\n        this.m_params.verticalAlignment = value;\n    }\n\n    /**\n     * Text position inside a line.\n     */\n    get horizontalAlignment(): HorizontalAlignment {\n        return this.m_params.horizontalAlignment!;\n    }\n    set horizontalAlignment(value: HorizontalAlignment) {\n        this.m_params.horizontalAlignment = value;\n    }\n\n    /**\n     * Clone this `TextLayoutStyle`.\n     *\n     * @param params Input [[TextLayoutParameters]].\n     *\n     * @returns Cloned `TextLayoutStyle`.\n     */\n    clone(params: TextLayoutParameters = {}): TextLayoutStyle {\n        return new TextLayoutStyle({ ...this.m_params, ...params });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute,\n    ColorUtils,\n    Env,\n    Expr,\n    getPropertyValue,\n    InterpolatedProperty,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isInterpolatedProperty,\n    isJsonExpr,\n    isShaderTechnique,\n    isStandardTechnique,\n    isTerrainTechnique,\n    isTextureBuffer,\n    parseStringEncodedColor,\n    ShaderTechnique,\n    Technique,\n    techniqueDescriptors,\n    TEXTURE_PROPERTY_KEYS,\n    TextureProperties,\n    TRANSPARENCY_PROPERTY_KEYS,\n    Value\n} from \"@here/harp-datasource-protocol\";\nimport {\n    CirclePointsMaterial,\n    disableBlending,\n    enableBlending,\n    HighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { Circles, Squares } from \"./MapViewPoints\";\nimport { toPixelFormat, toTextureDataType, toTextureFilter, toWrappingMode } from \"./ThemeHelpers\";\n\nconst logger = LoggerManager.instance.create(\"DecodedTileHelpers\");\n\nconst DEFAULT_SKIP_PROPERTIES = [\n    ...TEXTURE_PROPERTY_KEYS,\n    \"mapProperties\",\n    \"normalMapProperties\",\n    \"displacementMapProperties\",\n    \"roughnessMapProperties\",\n    \"emissiveMapProperties\",\n    \"alphaMapProperties\",\n    \"metalnessMapProperties\",\n    \"bumpMapProperties\"\n];\n\n/**\n * The structure of the options to pass into [[createMaterial]].\n */\nexport interface MaterialOptions {\n    /**\n     * The shader [[Technique]] to choose.\n     */\n    technique: Technique;\n\n    /**\n     * Environment used to evaluate dynamic technique attributes.\n     *\n     * Usually [[MapView.mapEnv]].\n     */\n    env: Env;\n\n    /**\n     * Properties to skip.\n     *\n     * @see [[applyTechniqueToMaterial]]\n     */\n    skipExtraProps?: string[];\n\n    /**\n     * `RawShaderMaterial` instances need to know about the fog at instantiation in order to avoid\n     * recompiling them manually later (ThreeJS does not update fog for `RawShaderMaterial`s).\n     */\n    fog?: boolean;\n}\n\n/**\n * Create a material, depending on the rendering technique provided in the options.\n *\n * @param options The material options the subsequent functions need.\n * @param materialUpdateCallback Optional callback when the material gets updated,\n *                               e.g. after texture loading.\n *\n * @returns new material instance that matches `technique.name`\n */\nexport function createMaterial(\n    options: MaterialOptions,\n    textureReadyCallback?: (texture: THREE.Texture) => void\n): THREE.Material | undefined {\n    const technique = options.technique;\n    const Constructor = getMaterialConstructor(technique);\n\n    const settings: { [key: string]: any } = {};\n\n    if (Constructor === undefined) {\n        return undefined;\n    }\n\n    if (\n        Constructor.prototype instanceof THREE.RawShaderMaterial &&\n        Constructor !== HighPrecisionLineMaterial\n    ) {\n        settings.fog = options.fog;\n    }\n\n    const material = new Constructor(settings);\n\n    if (technique.id !== undefined) {\n        material.name = technique.id;\n    }\n\n    if (isExtrudedPolygonTechnique(technique)) {\n        material.flatShading = true;\n        // We do not support mixing vertex colors (static) and material colors (may be dynamic)\n        // mixture. Vertex colors are stored in VBO and are not modifiable - some solution for\n        // this problem is proposed in the HARP-8289 and PR #1164.\n        // TODO: Remove when problem with substitute (vertex & material) colors will be solved.\n        if (technique.vertexColors === true) {\n            delete technique.color;\n        }\n    }\n\n    material.depthTest = isExtrudedPolygonTechnique(technique) && technique.depthTest !== false;\n\n    if (\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique)\n    ) {\n        TEXTURE_PROPERTY_KEYS.forEach((texturePropertyName: string) => {\n            const textureProperty = (technique as any)[texturePropertyName];\n            if (textureProperty === undefined) {\n                return;\n            }\n\n            const onLoad = (texture: THREE.Texture) => {\n                const properties = (technique as any)[\n                    texturePropertyName + \"Properties\"\n                ] as TextureProperties;\n                if (properties !== undefined) {\n                    if (properties.wrapS !== undefined) {\n                        texture.wrapS = toWrappingMode(properties.wrapS);\n                    }\n                    if (properties.wrapT !== undefined) {\n                        texture.wrapT = toWrappingMode(properties.wrapT);\n                    }\n                    if (properties.magFilter !== undefined) {\n                        texture.magFilter = toTextureFilter(properties.magFilter);\n                    }\n                    if (properties.minFilter !== undefined) {\n                        texture.minFilter = toTextureFilter(properties.minFilter);\n                    }\n                    if (properties.flipY !== undefined) {\n                        texture.flipY = properties.flipY;\n                    }\n                    if (properties.repeatU !== undefined) {\n                        texture.repeat.x = properties.repeatU;\n                    }\n                    if (properties.repeatV !== undefined) {\n                        texture.repeat.y = properties.repeatV;\n                    }\n                }\n                (material as any)[texturePropertyName] = texture;\n                texture.needsUpdate = true;\n                material.needsUpdate = true;\n\n                if (textureReadyCallback) {\n                    textureReadyCallback(texture);\n                }\n            };\n\n            const onError = (error: ErrorEvent | string) => {\n                logger.error(\"#createMaterial: Failed to load texture: \", error);\n            };\n\n            let textureUrl: string | undefined;\n            if (typeof textureProperty === \"string\") {\n                textureUrl = textureProperty;\n            } else if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.type === \"image/raw\") {\n                    const properties = textureProperty.dataTextureProperties;\n                    if (properties !== undefined) {\n                        const textureDataType: THREE.TextureDataType | undefined = properties.type\n                            ? toTextureDataType(properties.type)\n                            : undefined;\n                        const textureBuffer = getTextureBuffer(\n                            textureProperty.buffer,\n                            textureDataType\n                        );\n\n                        const texture = new THREE.DataTexture(\n                            textureBuffer,\n                            properties.width,\n                            properties.height,\n                            properties.format ? toPixelFormat(properties.format) : undefined,\n                            textureDataType\n                        );\n                        onLoad(texture);\n                    } else {\n                        onError(\"no data texture properties provided.\");\n                    }\n                } else {\n                    const textureBlob = new Blob([textureProperty.buffer], {\n                        type: textureProperty.type\n                    });\n                    textureUrl = URL.createObjectURL(textureBlob);\n                }\n            }\n\n            if (textureUrl) {\n                new THREE.TextureLoader().load(\n                    textureUrl,\n                    onLoad,\n                    undefined, // onProgress\n                    onError\n                );\n            }\n        });\n    }\n\n    if (isShaderTechnique(technique)) {\n        // Special case for ShaderTechnique.\n        applyShaderTechniqueToMaterial(technique, material);\n    } else {\n        // Generic technique.\n        applyTechniqueToMaterial(technique, material, options.env, options.skipExtraProps);\n    }\n\n    return material;\n}\n\n/**\n * Returns a [[THREE.BufferAttribute]] created from a provided [[BufferAttribute]] object.\n *\n * @param attribute BufferAttribute a WebGL compliant buffer\n */\nexport function getBufferAttribute(attribute: BufferAttribute): THREE.BufferAttribute {\n    switch (attribute.type) {\n        case \"float\":\n            return new THREE.BufferAttribute(\n                new Float32Array(attribute.buffer),\n                attribute.itemCount\n            );\n        case \"uint8\":\n            return new THREE.BufferAttribute(\n                new Uint8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint16\":\n            return new THREE.BufferAttribute(\n                new Uint16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"uint32\":\n            return new THREE.BufferAttribute(\n                new Uint32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int8\":\n            return new THREE.BufferAttribute(\n                new Int8Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int16\":\n            return new THREE.BufferAttribute(\n                new Int16Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        case \"int32\":\n            return new THREE.BufferAttribute(\n                new Int32Array(attribute.buffer),\n                attribute.itemCount,\n                attribute.normalized\n            );\n        default:\n            throw new Error(`unsupported buffer of type ${attribute.type}`);\n    } // switch\n}\n\n/**\n * The default `three.js` object used with a specific technique.\n */\nexport type ObjectConstructor = new (\n    geometry?: THREE.Geometry | THREE.BufferGeometry,\n    material?: THREE.Material\n) => THREE.Object3D;\n/**\n * Gets the default `three.js` object constructor associated with the given technique.\n *\n * @param technique The technique.\n */\nexport function getObjectConstructor(technique: Technique): ObjectConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n    switch (technique.name) {\n        case \"extruded-line\":\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n        case \"fill\":\n        case \"dashed-line\":\n        case \"solid-line\":\n            return THREE.Mesh as ObjectConstructor;\n\n        case \"circles\":\n            return Circles as ObjectConstructor;\n        case \"squares\":\n            return Squares as ObjectConstructor;\n\n        case \"line\":\n            return THREE.LineSegments as ObjectConstructor;\n\n        case \"segments\":\n            return THREE.LineSegments as ObjectConstructor;\n\n        case \"shader\": {\n            if (!isShaderTechnique(technique)) {\n                throw new Error(\"Invalid technique\");\n            }\n            switch (technique.primitive) {\n                case \"line\":\n                    return THREE.Line as ObjectConstructor;\n                case \"segments\":\n                    return THREE.LineSegments as ObjectConstructor;\n                case \"point\":\n                    return THREE.Points as ObjectConstructor;\n                case \"mesh\":\n                    return THREE.Mesh as ObjectConstructor;\n                default:\n                    return undefined;\n            }\n        }\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Non material properties of [[BaseTechnique]]\n */\nexport const BASE_TECHNIQUE_NON_MATERIAL_PROPS = [\"name\", \"id\", \"renderOrder\", \"transient\"];\n\n/**\n * Generic material type constructor.\n */\nexport type MaterialConstructor = new (params?: {}) => THREE.Material;\n\n/**\n * Returns a [[MaterialConstructor]] basing on provided technique object.\n *\n * @param technique [[Technique]] object which the material will be based on.\n */\nexport function getMaterialConstructor(technique: Technique): MaterialConstructor | undefined {\n    if (technique.name === undefined) {\n        return undefined;\n    }\n\n    switch (technique.name) {\n        case \"extruded-line\":\n            if (!isExtrudedLineTechnique(technique)) {\n                throw new Error(\"Invalid extruded-line technique\");\n            }\n            return technique.shading === \"standard\"\n                ? MapMeshStandardMaterial\n                : MapMeshBasicMaterial;\n\n        case \"standard\":\n        case \"terrain\":\n        case \"extruded-polygon\":\n            return MapMeshStandardMaterial;\n\n        case \"dashed-line\":\n        case \"solid-line\":\n            return SolidLineMaterial;\n\n        case \"fill\":\n            return MapMeshBasicMaterial;\n\n        case \"squares\":\n            return THREE.PointsMaterial;\n\n        case \"circles\":\n            return CirclePointsMaterial;\n\n        case \"line\":\n        case \"segments\":\n            return THREE.LineBasicMaterial;\n\n        case \"shader\":\n            return THREE.ShaderMaterial;\n\n        case \"text\":\n        case \"labeled-icon\":\n        case \"line-marker\":\n        case \"label-rejection-line\":\n            return undefined;\n    }\n}\n\n/**\n * Allows to easy parse/encode technique's base color property value as number coded color.\n *\n * Function takes care about property parsing, interpolation and encoding if neccessary. If\n * you wish to get default value without interpolation simply ignore @param zoom when calling.\n *\n * @see ColorUtils\n * @param technique the technique where we search for base (transparency) color value\n * @param zoomLevel zoom level used for value interpolation.\n * @returns [[number]] encoded color value (in custom #TTRRGGBB) format or [[undefined]] if\n * base color property is not defined in the technique passed.\n */\nexport function evaluateBaseColorProperty(technique: Technique, env?: Env): number | undefined {\n    const baseColorProp = getBaseColorProp(technique);\n    if (baseColorProp !== undefined) {\n        return evaluateColorProperty(baseColorProp, env);\n    }\n    return undefined;\n}\n\n/**\n * Apply [[ShaderTechnique]] parameters to material.\n *\n * @param technique the [[ShaderTechnique]] which requires special handling\n * @param material material to which technique will be applied\n */\nfunction applyShaderTechniqueToMaterial(technique: ShaderTechnique, material: THREE.Material) {\n    // The shader technique takes the argument from its `params' member.\n    const params = technique.params as { [key: string]: any };\n    // Remove base color and transparency properties from the processed set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique.params;\n    const props = Object.getOwnPropertyNames(params).filter(propertyName => {\n        // Omit base color and related transparency attributes if its defined in technique\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof params;\n        if (prop === \"name\") {\n            // skip reserved property names\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all technique properties omitting base color and transparency attributes.\n    props.forEach(propertyName => {\n        // TODO: Check if properties values should not be interpolated, possible bug in old code!\n        // This behavior is kept in the new version too, level is set to undefined.\n        applyTechniquePropertyToMaterial(material, propertyName, params[propertyName]);\n    });\n\n    if (hasBaseColor) {\n        const propColor = baseColorPropName as keyof THREE.Material;\n        // Finally apply base color and related properties to material (opacity, transparent)\n        applyBaseColorToMaterial(material, material[propColor], technique, params[propColor]);\n    }\n}\n\n/**\n * Apply generic technique parameters to material.\n *\n * Skips non-material [[Technique]] props:\n *  * [[BaseTechnique]] props,\n *  * `name` which is used as discriminator for technique types,\n *  * props starting with `_`\n *  * props found `skipExtraProps`\n *\n * `THREE.Color` properties are supported.\n *\n * @param technique technique from where params are copied\n * @param material target material\n * @param zoomLevel tile zoom level for zoom-level dependent props\n * @param skipExtraProps optional, skipped props.\n */\nfunction applyTechniqueToMaterial(\n    technique: Technique,\n    material: THREE.Material,\n    env: Env,\n    skipExtraProps?: string[]\n) {\n    // Remove transparent color from the firstly processed properties set.\n    const baseColorPropName = getBaseColorPropName(technique);\n    const hasBaseColor = baseColorPropName && baseColorPropName in technique;\n    const genericProps = Object.getOwnPropertyNames(technique).filter(propertyName => {\n        if (\n            propertyName.startsWith(\"_\") ||\n            BASE_TECHNIQUE_NON_MATERIAL_PROPS.indexOf(propertyName) !== -1 ||\n            DEFAULT_SKIP_PROPERTIES.indexOf(propertyName) !== -1 ||\n            (skipExtraProps !== undefined && skipExtraProps.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        // Omit base color and related transparency attributes if its defined in technique.\n        if (\n            baseColorPropName === propertyName ||\n            (hasBaseColor && TRANSPARENCY_PROPERTY_KEYS.indexOf(propertyName) !== -1)\n        ) {\n            return false;\n        }\n        const prop = propertyName as keyof typeof technique;\n        const m = material as any;\n        if (typeof m[prop] === \"undefined\") {\n            return false;\n        }\n        return true;\n    });\n\n    // Apply all other properties (even colors), but not transparent (base) ones.\n    genericProps.forEach(propertyName => {\n        const value = technique[propertyName as keyof Technique];\n        if (value !== undefined) {\n            applyTechniquePropertyToMaterial(material, propertyName, value, env);\n        }\n    });\n\n    // Finally apply base (possibly transparent) color itself, using blend modes to\n    // provide transparency if needed.\n    if (hasBaseColor) {\n        applyBaseColorToMaterial(\n            material,\n            material[baseColorPropName as keyof THREE.Material],\n            technique,\n            technique[baseColorPropName as keyof Technique] as Value,\n            env\n        );\n    }\n}\n\n/**\n * Apply single and generic technique property to corresponding material parameter.\n *\n * @note Special handling for material attributes of [[THREE.Color]] type is provided thus it\n * does not provide constructor that would take [[string]] or [[number]] values.\n *\n * @param material target material\n * @param propertyName material and technique parameter name (or index) that is to be transferred\n * @param techniqueAttrValue technique property value which will be applied to material attribute\n * @param zoomLevel optional tile zoom level.\n */\nfunction applyTechniquePropertyToMaterial(\n    material: THREE.Material,\n    propertyName: string,\n    techniqueAttrValue: Value,\n    env?: Env\n) {\n    const m = material as any;\n    if (m[propertyName] instanceof THREE.Color) {\n        applySecondaryColorToMaterial(\n            material[propertyName as keyof THREE.Material],\n            techniqueAttrValue,\n            env\n        );\n    } else {\n        m[propertyName] = evaluateProperty(techniqueAttrValue, env);\n    }\n}\n\n/**\n * Apply technique color to material taking special care with transparent (RGBA) colors.\n *\n * @note This function is intended to be used with secondary, triary etc. technique colors,\n * not the base ones that may contain transparency information. Such colors should be processed\n * with [[applyTechniqueBaseColorToMaterial]] function.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value\n * @param zoomLevel optional tile zoom level for zoom-level dependent properties are evaluated.\n */\nexport function applySecondaryColorToMaterial(\n    materialColor: THREE.Color,\n    techniqueColor: Value | Expr | InterpolatedProperty,\n    env?: Env\n) {\n    let value = evaluateColorProperty(techniqueColor, env);\n\n    if (ColorUtils.hasAlphaInHex(value)) {\n        logger.warn(\"Used RGBA value for technique color without transparency support!\");\n        // Just for clarity remove transparency component, even if that would be ignored\n        // by THREE.Color.setHex() function.\n        value = ColorUtils.removeAlphaFromHex(value);\n    }\n\n    materialColor.setHex(value);\n}\n\n/**\n * Apply technique base color (transparency support) to material with modifying material opacity.\n *\n * This method applies main (or base) technique color with transparency support to the corresponding\n * material color, with an effect on entire [[THREE.Material]] __opacity__ and __transparent__\n * attributes.\n *\n * @note Transparent colors should be processed as the very last technique attributes,\n * since their effect on material properties like [[THREE.Material.opacity]] and\n * [[THREE.Material.transparent]] could be overridden by corresponding technique params.\n *\n * @param technique an technique the applied color comes from\n * @param material the material to which color is applied\n * @param prop technique property (color) name\n * @param value color value in custom number format\n * @param zoomLevel optional, tile zoom level for zoom-level dependent properties are evaluated.\n */\nexport function applyBaseColorToMaterial(\n    material: THREE.Material,\n    materialColor: THREE.Color,\n    technique: Technique,\n    techniqueColor: Value,\n    env?: Env\n) {\n    const colorValue = evaluateColorProperty(techniqueColor, env);\n\n    const { r, g, b, a } = ColorUtils.getRgbaFromHex(colorValue);\n    // Override material opacity and blending by mixing technique defined opacity\n    // with main color transparency\n    const tech = technique as any;\n    let opacity = a;\n    if (tech.opacity !== undefined) {\n        opacity *= evaluateProperty(tech.opacity, env);\n    }\n\n    opacity = THREE.Math.clamp(opacity, 0, 1);\n    material.opacity = opacity;\n    materialColor.setRGB(r, g, b);\n\n    const opaque = opacity >= 1.0;\n    if (!opaque) {\n        enableBlending(material);\n    } else {\n        disableBlending(material);\n    }\n}\n\n/**\n * Calculates the value of the technique defined property.\n *\n * Function takes care about property interpolation (when @param zoom is set) as also parsing\n * string encoded numbers.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param zoomLevel zoom level used for interpolation.\n */\nfunction evaluateProperty(value: any, env?: Env): any {\n    if (env !== undefined && (isInterpolatedProperty(value) || Expr.isExpr(value))) {\n        value = getPropertyValue(value, env);\n    }\n    return value;\n}\n\n/**\n * Calculates the numerical value of the technique defined color property.\n *\n * Function takes care about color interpolation (when @param zoom is set) as also parsing\n * string encoded colors.\n *\n * @note Use with care, because function does not recognize property type.\n * @param value the value of color property defined in technique\n * @param zoomLevel zoom level used for interpolation.\n */\nexport function evaluateColorProperty(value: Value, env?: Env): number {\n    value = evaluateProperty(value, env);\n\n    if (typeof value === \"number\") {\n        return value;\n    }\n\n    if (typeof value === \"string\") {\n        const parsed = parseStringEncodedColor(value);\n        if (parsed !== undefined) {\n            return parsed;\n        }\n    }\n\n    throw new Error(`Unsupported color format: '${value}'`);\n}\n\n/**\n * Compile expressions in techniques as they were received from decoder.\n */\nexport function compileTechniques(techniques: Technique[]) {\n    techniques.forEach((technique: any) => {\n        for (const propertyName in technique) {\n            if (!technique.hasOwnProperty(propertyName)) {\n                continue;\n            }\n            const value = technique[propertyName];\n            if (isJsonExpr(value) && propertyName !== \"kind\") {\n                // \"kind\" is reserved.\n                try {\n                    technique[propertyName] = Expr.fromJSON(value);\n                } catch (error) {\n                    logger.error(\"#compileTechniques: Failed to compile expression:\", error);\n                }\n            }\n        }\n    });\n}\n\n/**\n * Allows to access base color property value for given technique.\n *\n * The color value may be encoded in [[number]], [[string]] or even as\n * [[InterpolateProperty]].\n *\n * @param technique The techniqe where we seach for base color property.\n * @returns The value of technique color used to apply transparency.\n */\nfunction getBaseColorProp(technique: Technique): any {\n    const baseColorPropName = getBaseColorPropName(technique);\n    if (baseColorPropName !== undefined) {\n        if (!isShaderTechnique(technique)) {\n            const propColor = baseColorPropName as keyof typeof technique;\n            return technique[propColor];\n        } else {\n            const params = technique.params as { [key: string]: any };\n            const propColor = baseColorPropName as keyof typeof params;\n            return params[propColor];\n        }\n    }\n    return undefined;\n}\n\nfunction getBaseColorPropName(technique: Technique): string | undefined {\n    const techDescriptor = techniqueDescriptors[technique.name];\n    return techDescriptor !== undefined ? techDescriptor.attrTransparencyColor : undefined;\n}\n\nfunction getTextureBuffer(\n    buffer: ArrayBuffer,\n    textureDataType: THREE.TextureDataType | undefined\n): THREE.TypedArray {\n    if (textureDataType === undefined) {\n        return new Uint8Array(buffer);\n    }\n\n    switch (textureDataType) {\n        case THREE.UnsignedByteType:\n            return new Uint8Array(buffer);\n        case THREE.ByteType:\n            return new Int8Array(buffer);\n        case THREE.ShortType:\n            return new Int16Array(buffer);\n        case THREE.UnsignedShortType:\n            return new Uint16Array(buffer);\n        case THREE.IntType:\n            return new Int32Array(buffer);\n        case THREE.UnsignedIntType:\n            return new Uint32Array(buffer);\n        case THREE.FloatType:\n            return new Float32Array(buffer);\n        case THREE.HalfFloatType:\n            return new Uint16Array(buffer);\n    }\n\n    throw new Error(\"Unsupported texture data type\");\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoCoordinates } from \"./GeoCoordinates\";\n\nimport * as THREE from \"three\";\n\n/**\n * `GeoBox` is used to represent a bounding box in geo coordinates.\n */\nexport class GeoBox {\n    /**\n     * Returns a `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    static fromCoordinates(southWest: GeoCoordinates, northEast: GeoCoordinates): GeoBox {\n        return new GeoBox(southWest, northEast);\n    }\n\n    /**\n     * Constructs a new `GeoBox` with the given geo coordinates.\n     *\n     * @param southWest The south west position in geo coordinates.\n     * @param northEast The north east position in geo coordinates.\n     */\n    constructor(readonly southWest: GeoCoordinates, readonly northEast: GeoCoordinates) {}\n\n    /**\n     * Returns the minimum altitude or `undefined`.\n     */\n    get minAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.min(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the maximum altitude or `undefined`.\n     */\n    get maxAltitude(): number | undefined {\n        if (this.southWest.altitude === undefined || this.northEast.altitude === undefined) {\n            return undefined;\n        }\n        return Math.max(this.southWest.altitude, this.northEast.altitude);\n    }\n\n    /**\n     * Returns the south latitude in degrees of this `GeoBox`.\n     */\n    get south(): number {\n        return this.southWest.latitude;\n    }\n\n    /**\n     * Returns the north altitude in degrees of this `GeoBox`.\n     */\n    get north(): number {\n        return this.northEast.latitude;\n    }\n\n    /**\n     * Returns the west longitude in degrees of this `GeoBox`.\n     */\n    get west(): number {\n        return this.southWest.longitude;\n    }\n\n    /**\n     * Returns the east longitude in degrees of this `GeoBox`.\n     */\n    get east(): number {\n        return this.northEast.longitude;\n    }\n\n    /**\n     * Returns the center of this `GeoBox`.\n     */\n    get center(): GeoCoordinates {\n        const latitude = (this.south + this.north) * 0.5;\n        const { west, east } = this;\n        const { minAltitude, altitudeSpan } = this;\n\n        let altitude: number | undefined;\n\n        if (minAltitude !== undefined && altitudeSpan !== undefined) {\n            altitude = minAltitude + altitudeSpan * 0.5;\n        }\n\n        if (west < east) {\n            return new GeoCoordinates(latitude, (west + east) * 0.5, altitude);\n        }\n\n        let longitude = (360 + east + west) * 0.5;\n\n        if (longitude > 360) {\n            longitude -= 360;\n        }\n\n        return new GeoCoordinates(latitude, longitude, altitude);\n    }\n\n    /**\n     * Returns the latitude span in radians.\n     */\n    get latitudeSpanInRadians(): number {\n        return THREE.Math.degToRad(this.latitudeSpan);\n    }\n\n    /**\n     * Returns the longitude span in radians.\n     */\n    get longitudeSpanInRadians(): number {\n        return THREE.Math.degToRad(this.longitudeSpan);\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     */\n    get latitudeSpan(): number {\n        return this.north - this.south;\n    }\n\n    get altitudeSpan(): number | undefined {\n        if (this.maxAltitude === undefined || this.minAltitude === undefined) {\n            return undefined;\n        }\n        return this.maxAltitude - this.minAltitude;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     */\n    get longitudeSpan(): number {\n        let width = this.northEast.longitude - this.southWest.longitude;\n\n        if (width < 0) {\n            width += 360;\n        }\n\n        return width;\n    }\n\n    /**\n     * Returns the latitude span in degrees.\n     * @deprecated Use [[latitudeSpan]] instead.\n     */\n    get latitudeSpanInDegrees(): number {\n        return this.latitudeSpan;\n    }\n\n    /**\n     * Returns the longitude span in degrees.\n     * @deprecated Use [[longitudeSpan]] instead.\n     */\n    get longitudeSpanInDegrees(): number {\n        return this.longitudeSpan;\n    }\n\n    /**\n     * Returns `true` if the given geo coordinates are contained in this `GeoBox`.\n     *\n     * @param point The geo coordinates.\n     */\n    contains(point: GeoCoordinates): boolean {\n        if (\n            point.altitude === undefined ||\n            this.minAltitude === undefined ||\n            this.maxAltitude === undefined\n        ) {\n            return this.containsHelper(point);\n        }\n\n        const isFlat = this.minAltitude === this.maxAltitude;\n        const isSameAltitude = this.minAltitude === point.altitude;\n        const isWithinAltitudeRange =\n            this.minAltitude <= point.altitude && this.maxAltitude > point.altitude;\n\n        // If box is flat, we should check the altitude and containment,\n        // otherwise we should check also altitude difference where we consider\n        // point to be inside if alt is from [m_minAltitude, m_maxAltitude) range!\n        if (isFlat ? isSameAltitude : isWithinAltitudeRange) {\n            return this.containsHelper(point);\n        }\n\n        return false;\n    }\n\n    /**\n     * Clones this `GeoBox` instance.\n     */\n    clone(): GeoBox {\n        return new GeoBox(this.southWest, this.northEast);\n    }\n\n    /**\n     * Update the bounding box by considering a given point.\n     *\n     * @param point The point that may expand the bounding box.\n     */\n    growToContain(point: GeoCoordinates) {\n        this.southWest.latitude = Math.min(this.southWest.latitude, point.latitude);\n        this.southWest.longitude = Math.min(this.southWest.longitude, point.longitude);\n        this.southWest.altitude =\n            this.southWest.altitude !== undefined && point.altitude !== undefined\n                ? Math.min(this.southWest.altitude, point.altitude)\n                : this.southWest.altitude !== undefined\n                ? this.southWest.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n\n        this.northEast.latitude = Math.max(this.northEast.latitude, point.latitude);\n        this.northEast.longitude = Math.max(this.northEast.longitude, point.longitude);\n        this.northEast.altitude =\n            this.northEast.altitude !== undefined && point.altitude !== undefined\n                ? Math.max(this.northEast.altitude, point.altitude)\n                : this.northEast.altitude !== undefined\n                ? this.northEast.altitude\n                : point.altitude !== undefined\n                ? point.altitude\n                : undefined;\n    }\n\n    private containsHelper(point: GeoCoordinates): boolean {\n        if (point.latitude < this.southWest.latitude || point.latitude >= this.northEast.latitude) {\n            return false;\n        }\n\n        const { west, east } = this;\n\n        if (east > west) {\n            return point.longitude >= west && point.longitude < east;\n        }\n\n        return point.longitude > east || point.longitude <= west;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { FlatTileBoundingBoxGenerator } from \"./FlatTileBoundingBoxGenerator\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TileKeyUtils } from \"./TileKeyUtils\";\nimport { TileTreeTraverse } from \"./TileTreeTraverse\";\n\n/**\n * The `TilingScheme` represents how the data is tiled.\n */\nexport class TilingScheme {\n    readonly boundingBoxGenerator: FlatTileBoundingBoxGenerator;\n    readonly tileTreeTraverse: TileTreeTraverse;\n\n    /**\n     * Constructs a new `TilingScheme` with the given subdivision scheme and projection.\n     *\n     * @param subdivisionScheme The subdivision scheme used by this `TilingScheme`.\n     * @param projection The projection used by this `TilingScheme`.\n     */\n    constructor(readonly subdivisionScheme: SubdivisionScheme, readonly projection: Projection) {\n        this.boundingBoxGenerator = new FlatTileBoundingBoxGenerator(this);\n        this.tileTreeTraverse = new TileTreeTraverse(subdivisionScheme);\n    }\n\n    /**\n     * Returns the sub tile keys of the given tile.\n     *\n     * @param tileKey The [[TileKey]].\n     * @returns The list of the sub tile keys.\n     */\n    getSubTileKeys(tileKey: TileKey): Iterable<TileKey> {\n        return this.tileTreeTraverse.subTiles(tileKey);\n    }\n\n    /**\n     * Gets the [[TileKey]] from the given geo position and level.\n     *\n     * @param geoPoint The position in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKey(geoPoint: GeoCoordinatesLike, level: number): TileKey | null {\n        return TileKeyUtils.geoCoordinatesToTileKey(this, geoPoint, level);\n    }\n\n    /**\n     * Gets the list of [[TileKey]]s contained in the given [[GeoBox]].\n     *\n     * @param geoBox The bounding box in geo coordinates.\n     * @param level The level of the resulting `TileKey`.\n     */\n    getTileKeys(geoBox: GeoBox, level: number): TileKey[] {\n        return TileKeyUtils.geoRectangleToTileKeys(this, geoBox, level);\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * @param tileKey The `TileKey`.\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        return this.boundingBoxGenerator.getGeoBox(tileKey);\n    }\n\n    /**\n     * Returns the bounding box in world coordinates.\n     *\n     * @param tileKey The `TileKey`.\n     * @param result The optional object that will contain the resulting bounding box.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        return this.boundingBoxGenerator.getWorldBox(tileKey, result);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/AnimatedExtrusionHandler\";\nexport * from \"./lib/CameraMovementDetector\";\nexport * from \"./lib/ClipPlanesEvaluator\";\nexport * from \"./lib/ColorCache\";\nexport * from \"./lib/composing\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentDecoderFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/ConcurrentTilerFacade\";\nexport * from \"./lib/copyrights/CopyrightElementHandler\";\nexport * from \"./lib/copyrights/CopyrightInfo\";\nexport * from \"./lib/copyrights/CopyrightProvider\";\nexport * from \"./lib/copyrights/CopyrightCoverageProvider\";\nexport * from \"./lib/copyrights/UrlCopyrightProvider\";\nexport * from \"./lib/DataSource\";\nexport * from \"./lib/PolarTileDataSource\";\nexport * from \"./lib/DecodedTileHelpers\";\nexport * from \"./lib/DepthPrePass\";\nexport * from \"./lib/DisplacementMap\";\nexport * from \"./lib/ElevationProvider\";\nexport * from \"./lib/ElevationRangeSource\";\nexport * from \"./lib/image/Image\";\nexport * from \"./lib/image/ImageCache\";\nexport * from \"./lib/image/MapViewImageCache\";\nexport * from \"./lib/MapView\";\nexport * from \"./lib/MapViewFog\";\nexport * from \"./lib/MapViewPoints\";\nexport * from \"./lib/PickHandler\";\nexport * from \"./lib/poi/Poi\";\nexport * from \"./lib/poi/PoiManager\";\nexport * from \"./lib/poi/PoiTableManager\";\nexport * from \"./lib/RoadPicker\";\nexport * from \"./lib/Statistics\";\nexport * from \"./lib/text/TextElement\";\nexport * from \"./lib/text/TextElementsRenderer\";\nexport * from \"./lib/text/TextStyleCache\";\nexport * from \"./lib/ThemeLoader\";\nexport * from \"./lib/Tile\";\nexport * from \"./lib/geometry/TileDataAccessor\";\nexport * from \"./lib/geometry/TileGeometry\";\nexport * from \"./lib/Utils\";\nexport * from \"./lib/VisibleTileSet\";\nexport * from \"./lib/WorkerBasedDecoder\";\nexport * from \"./lib/WorkerBasedTiler\";\nexport * from \"./lib/workers/WorkerLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * Values for boolean shader defines\n */\nexport const DEFINE_BOOL_TRUE = \"\";\nexport const DEFINE_BOOL_FALSE = undefined;\n\n/**\n * Insert shader includes after another shader include.\n *\n * @param shaderContent Original string.\n * @param shaderName String to append to.\n * @param insertedShaderName String to append after string `shaderA`.\n * @param addTab If `true`, a tab character will be inserted before `shaderB`.\n */\nexport function insertShaderInclude(\n    shaderContent: string,\n    shaderName: string,\n    insertedShaderName: string,\n    addTab?: boolean\n): string {\n    const tabChar = addTab === true ? \"\\t\" : \"\";\n\n    const result = shaderContent.replace(\n        `#include <${shaderName}>`,\n        `#include <${shaderName}>\n${tabChar}#include <${insertedShaderName}>`\n    );\n    return result;\n}\n\nexport interface ForcedBlending {\n    /**\n     * This material has `blending` always enabled regardless of `opacity` setting.s\n     */\n    forcedBlending?: true;\n}\n\n/**\n * THREE.js is enabling blending only when transparent is `true` or when a blend mode\n * different than `NormalBlending` is set.\n * Since we don't want to set transparent to true and mess up the render order we set\n * `CustomBlending` with the same parameters as the `NormalBlending`.\n\n * @param material `Material` that should use blending\n * @note This function should not be used in frame update after material has been passed to WebGL.\n * In such cases use [[enableBlending]] instead.\n */\nexport function enforceBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent) {\n        // Nothing to do\n        return;\n    }\n\n    enableBlending(material);\n    material.forcedBlending = true;\n}\n\n/**\n * Enable alpha blending using THREE.CustomBlending setup.\n *\n * Function enables blending using one of predefined modes, for both color and alpha components:\n * - Src: [[THREE.SrcAlphaFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * - Src: [[THREE.OneFactor]], Dst: [[THREE.OneMinusSrcAlphaFactor]]\n * The second blending equation is used when [[THREE.Material.premultipliedAlpha]] is enabled\n * for this material.\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @param material The material or material parameters to modify.\n */\nexport function enableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.CustomBlending;\n    if (material.premultipliedAlpha === true) {\n        material.blendSrc = THREE.OneFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    } else {\n        material.blendSrc = THREE.SrcAlphaFactor;\n        material.blendDst = THREE.OneMinusSrcAlphaFactor;\n        material.blendSrcAlpha = THREE.OneFactor;\n        material.blendDstAlpha = THREE.OneMinusSrcAlphaFactor;\n    }\n}\n\n/**\n * Disable alpha blending using THREE.CustomBlending mode, switches to [[THREE.NormalBlending]].\n *\n * @note Blending mode change does not require material update.\n * @see THREE.Material.needsUpdate.\n * @see enableBlending.\n * @param material The material or material parameters to modify.\n */\nexport function disableBlending(\n    material: (THREE.Material | THREE.ShaderMaterialParameters) & ForcedBlending\n) {\n    if (material.transparent || material.forcedBlending) {\n        // Nothing to do\n        return;\n    }\n\n    material.blending = THREE.NormalBlending;\n}\n\n/**\n * Setup material shader _define_ using two allowable semantics.\n *\n * Function accepts two types of values for shader preprocessor _define_:\n * - [[boolean]], simple [[true]] or [[false]] which causes _define_ to be set with empty string,\n * such defines may be handled in the shader using __#ifdef__ semantics:\n * ```\n * #ifdef SOME_DEFINE && !defined(OTHER_DEFINE)\n * // do something\n * #endif\n * ```\n *\n * - [[number]] which sets _define_ to explicit value. You may use it to enable/disable some\n * code or even set compile time constants affecting shaders math:\n * ```\n * #if SOME_DEFINE_SWITCH && OTHER_DEFINE_SWITCH == 0\n * gl_FragColor = vec4(1, 1, 1, DEFINE_ALPHA)\n * #endif\n * ```\n * @note Setting _define_ with `false` value is not the same as setting is with number value of `0`.\n *\n * @param material The [[THREE.ShaderMaterial]] which shader _define_ will be set.\n * @param key Name of shader _define_ as used in shader, i.e. `USE_FOG`, `COLOR_ALPHA`, etc.\n * @param value The value to be set as number or boolean specifying if preprocessor define\n * should be defined or not.\n * @returns [[true]] if material has been forced to update (re-compile) due to define changes,\n * return [[false]] whenever define has not been changed.\n */\nexport function setShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    value: boolean | number\n): boolean {\n    assert(\n        material.defines !== undefined,\n        \"Do not use this function in ShaderMaterial derived c-tor.\"\n    );\n    const semanticValue = getShaderMaterialDefine(material, key);\n    const needsUpdate = value !== semanticValue;\n    // Nothing to change - early exit\n    if (!needsUpdate) {\n        return false;\n    }\n    setShaderDefine(material.defines, key, value);\n    material.needsUpdate = needsUpdate;\n    return true;\n}\n\n/**\n * Acquire value of [[THREE.ShaderMaterial]] GPU shader preprocessor define.\n *\n * The semantic used in entire engine assumes that preprocessor defines may have only binary\n * (defined / not defined) or numerical values, this ensures consistency in the shaders and\n * materials code.\n * @note If _define_ with [[key]] is _undefined_ function returns [[false]], if defined but\n * not numerical value it returns [[true]], otherwise returns number.\n * @see setShaderMaterialDefine.\n *\n * @param material The material which shader defines are accessed.\n * @param key The _define_ name (identifier).\n * @param fallbackValue The value returned when material `defines` are not initialized yet,\n * specified by default as [[false]], provide your own default if you expect numeric value.\n */\nexport function getShaderMaterialDefine(\n    material: THREE.ShaderMaterial,\n    key: string,\n    fallbackValue: boolean | number = false\n): boolean | number {\n    if (material.defines === undefined) {\n        return fallbackValue;\n    }\n    return getShaderDefine(material.defines, key);\n}\n\n/**\n * Sets new value of 'define' regardless of current value set.\n *\n * Update `defines` map with new key and value, if key is already occupied it overrides its value.\n * Helper function that may be used to setup [[THREE.ShaderMaterialParameters]] before\n * material is create (i.e. in c-tor).\n *\n * @param defines Shader `defines` stored in key-value map.\n * @param key The key used to identify _define_.\n * @param value The value to be stored.\n * @returns [[true]] if define has actually changed, false is stayed the same.\n * @see setShaderMaterialDefine.\n */\nexport function setShaderDefine(\n    defines: { [key: string]: any },\n    key: string,\n    value: boolean | number\n): boolean {\n    let updated = false;\n    if (typeof value === \"number\") {\n        updated = defines[key] !== value;\n        defines[key] = value;\n    } else if (value === true) {\n        updated = defines[key] !== DEFINE_BOOL_TRUE;\n        defines[key] = DEFINE_BOOL_TRUE;\n    } else if (value === false && defines[key] !== undefined) {\n        // Sets to DEFINE_BOOL_FALSE === undefined\n        delete defines[key];\n        updated = true;\n    }\n    return updated;\n}\n\n/**\n * Acquire shader 'define' value from `defines` map.\n *\n * If there is no value under [[key]] specified, function returns false, otherwise result is\n * true or numeric value if there is a number stored.\n * @param defines The `defines` map.\n * @param key The identifier of the _define_.\n */\nexport function getShaderDefine(defines: { [key: string]: any }, key: string): boolean | number {\n    const currentValue = defines[key];\n    const semanticValue =\n        currentValue === DEFINE_BOOL_FALSE\n            ? false\n            : currentValue === DEFINE_BOOL_TRUE\n            ? true\n            : currentValue;\n    return semanticValue;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    Env,\n    GeometryKind,\n    GradientSky,\n    ImageTexture,\n    Light,\n    MapEnv,\n    PostEffects,\n    Sky,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    EarthConstants,\n    GeoCoordinates,\n    GeoCoordLike,\n    mercatorProjection,\n    Projection,\n    ProjectionType,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport {\n    assert,\n    getOptionValue,\n    LoggerManager,\n    LogLevel,\n    PerformanceTimer,\n    UriResolver\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { AnimatedExtrusionHandler } from \"./AnimatedExtrusionHandler\";\nimport { BackgroundDataSource } from \"./BackgroundDataSource\";\nimport { CameraMovementDetector } from \"./CameraMovementDetector\";\nimport { ClipPlanesEvaluator, createDefaultClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { IMapAntialiasSettings, IMapRenderingManager, MapRenderingManager } from \"./composing\";\nimport { ConcurrentDecoderFacade } from \"./ConcurrentDecoderFacade\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationProvider } from \"./ElevationProvider\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection } from \"./FrustumIntersection\";\nimport { overlayOnElevation } from \"./geometry/overlayOnElevation\";\nimport { PhasedTileGeometryManager } from \"./geometry/PhasedTileGeometryManager\";\nimport { SimpleTileGeometryManager, TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { MapViewImageCache } from \"./image/MapViewImageCache\";\nimport { MapViewFog } from \"./MapViewFog\";\nimport { PickHandler, PickResult } from \"./PickHandler\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\nimport { PoiManager } from \"./poi/PoiManager\";\nimport { PoiRendererFactory } from \"./poi/PoiRendererFactory\";\nimport { PoiTableManager } from \"./poi/PoiTableManager\";\nimport { PolarTileDataSource } from \"./PolarTileDataSource\";\nimport { ScreenCollisions, ScreenCollisionsDebug } from \"./ScreenCollisions\";\nimport { ScreenProjector } from \"./ScreenProjector\";\nimport { SkyBackground } from \"./SkyBackground\";\nimport { FrameStats, PerformanceStatistics } from \"./Statistics\";\nimport { FontCatalogLoader } from \"./text/FontCatalogLoader\";\nimport { MapViewState } from \"./text/MapViewState\";\nimport { TextCanvasFactory } from \"./text/TextCanvasFactory\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementsRenderer, ViewUpdateCallback } from \"./text/TextElementsRenderer\";\nimport { TextElementsRendererOptions } from \"./text/TextElementsRendererOptions\";\nimport { createLight } from \"./ThemeHelpers\";\nimport { ThemeLoader } from \"./ThemeLoader\";\nimport { Tile } from \"./Tile\";\nimport { MapViewUtils } from \"./Utils\";\nimport { ResourceComputationType, VisibleTileSet, VisibleTileSetOptions } from \"./VisibleTileSet\";\n\ndeclare const process: any;\n\n// Cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\nif (isProduction) {\n    // In production: silence logging below error.\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Error);\n} else {\n    // In dev: silence logging below log (silences \"debug\" and \"trace\" levels).\n    LoggerManager.instance.setLogLevelForAll(LogLevel.Log);\n}\n/**\n * An interface describing [[THREE.Object3D]]s anchored on given [[GeoCoordinates]].\n *\n * Example:\n * ```typescript\n * const mesh: MapObject<THREE.Mesh> = new THREE.Mesh(geometry, material);\n * mesh.geoPosition = new GeoCoordinates(latitude, longitude, altitude);\n * mapView.mapAnchors.add(mesh);\n * ```\n *\n */\nexport type MapAnchor<T extends THREE.Object3D = THREE.Object3D> = T & {\n    /**\n     * The position of this [[MapObject]] in [[GeoCoordinates]].\n     */\n    geoPosition?: GeoCoordinates;\n};\n\nexport enum MapViewEventNames {\n    /** Called before this `MapView` starts to render a new frame. */\n    Update = \"update\",\n    /** Called when the WebGL canvas is resized. */\n    Resize = \"resize\",\n    /** Called when the frame is about to be rendered. */\n    Render = \"render\",\n    /** Called after a frame has been rendered. */\n    AfterRender = \"didrender\",\n    /** Called after the first frame has been rendered. */\n    FirstFrame = \"first-render\",\n    /** Called when the first view has all the necessary tiles loaded and rendered. */\n    FrameComplete = \"frame-complete\",\n    /** Called when the theme has been loaded with the internal [[ThemeLoader]]. */\n    ThemeLoaded = \"theme-loaded\",\n    /** Called when the animation mode has started. */\n    AnimationStarted = \"animation-started\",\n    /** Called when the animation mode has stopped. */\n    AnimationFinished = \"animation-finished\",\n    /** Called when a camera interaction has been detected. */\n    MovementStarted = \"movement-started\",\n    /** Called when a camera interaction has been stopped. */\n    MovementFinished = \"movement-finished\",\n    /** Called when a data source has been connected or failed to connect. */\n    DataSourceConnect = \"datasource-connect\",\n    /** Emitted when copyright info of rendered map has been changed. */\n    CopyrightChanged = \"copyright-changed\",\n    /** Called when the WebGL context is lost. */\n    ContextLost = \"webglcontext-lost\",\n    /** Called when the WebGL context is restored. */\n    ContextRestored = \"webglcontext-restored\",\n    /** Called when camera position has been changed. */\n    CameraPositionChanged = \"camera-changed\"\n}\n\nconst logger = LoggerManager.instance.create(\"MapView\");\nconst DEFAULT_CLEAR_COLOR = 0xefe9e1;\nconst DEFAULT_FOV_CALCULATION: FovCalculation = { type: \"dynamic\", fov: 40 };\nconst DEFAULT_CAM_NEAR_PLANE = 0.1;\nconst DEFAULT_CAM_FAR_PLANE = 4000000;\nconst MAX_FIELD_OF_VIEW = 140;\nconst MIN_FIELD_OF_VIEW = 10;\nexport const MAX_TILT_ANGLE = 89;\n// All objects in fallback tiles are reduced by this amount.\nexport const FALLBACK_RENDER_ORDER_OFFSET = 20000;\n\nconst DEFAULT_MIN_ZOOM_LEVEL = 1;\n\n/**\n * Default maximum zoom level.\n */\nconst DEFAULT_MAX_ZOOM_LEVEL = 20;\n\n/**\n * Default minimum camera height.\n */\nconst DEFAULT_MIN_CAMERA_HEIGHT = 20;\n\n/**\n * Amount of framerate values to pick average from\n */\nconst FRAME_RATE_RING_SIZE = 12;\n\n/**\n * Default starting value for FPS computation.\n */\nconst FALLBACK_FRAME_RATE = 30;\n\n/**\n * Zoom level to request terrain tiles for getting the height of the camera above terrain.\n */\nconst TERRAIN_ZOOM_LEVEL = 4;\n\n/**\n * Style set used by [[PolarTileDataSource]] by default.\n */\nconst DEFAULT_POLAR_STYLE_SET_NAME = \"polar\";\n\n/**\n * The type of `RenderEvent`.\n */\nexport interface RenderEvent extends THREE.Event {\n    type:\n        | MapViewEventNames.Render\n        | MapViewEventNames.FirstFrame\n        | MapViewEventNames.FrameComplete\n        | MapViewEventNames.ThemeLoaded\n        | MapViewEventNames.AnimationStarted\n        | MapViewEventNames.AnimationFinished\n        | MapViewEventNames.MovementStarted\n        | MapViewEventNames.MovementFinished\n        | MapViewEventNames.ContextLost\n        | MapViewEventNames.ContextRestored\n        | MapViewEventNames.CopyrightChanged;\n    time?: number;\n}\n\n// Event type: cast needed to workaround wrong THREE.js typings.\nconst UPDATE: RenderEvent = { type: MapViewEventNames.Update } as any;\nconst RENDER_EVENT: RenderEvent = { type: MapViewEventNames.Render } as any;\nconst DID_RENDER_EVENT: RenderEvent = { type: MapViewEventNames.AfterRender } as any;\nconst FIRST_FRAME_EVENT: RenderEvent = { type: MapViewEventNames.FirstFrame } as any;\nconst FRAME_COMPLETE_EVENT: RenderEvent = { type: MapViewEventNames.FrameComplete } as any;\nconst THEME_LOADED_EVENT: RenderEvent = { type: MapViewEventNames.ThemeLoaded } as any;\nconst ANIMATION_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationStarted } as any;\nconst ANIMATION_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.AnimationFinished } as any;\nconst MOVEMENT_STARTED_EVENT: RenderEvent = { type: MapViewEventNames.MovementStarted } as any;\nconst MOVEMENT_FINISHED_EVENT: RenderEvent = { type: MapViewEventNames.MovementFinished } as any;\nconst CONTEXT_LOST_EVENT: RenderEvent = { type: MapViewEventNames.ContextLost } as any;\nconst CONTEXT_RESTORED_EVENT: RenderEvent = { type: MapViewEventNames.ContextRestored } as any;\nconst COPYRIGHT_CHANGED_EVENT: RenderEvent = { type: MapViewEventNames.CopyrightChanged } as any;\n\nconst cache = {\n    vector2: [new THREE.Vector2()],\n    vector3: [new THREE.Vector3()]\n};\n\n/**\n * Specifies how the FOV (Field of View) should be calculated.\n */\nexport interface FovCalculation {\n    /**\n     * How to interpret the [[fov]], can be either `fixed` or `dynamic`.\n     *\n     * `fixed` means that the FOV is fixed regardless of the [[viewportHeight]], such that shrinking\n     * the height causes the map to shrink to keep the content in view. The benefit is that,\n     * regardless of any resizes, the field of view is constant, which means there is no change in\n     * the distortion of buildings near the edges. However the trade off is that the zoom level\n     * changes, which means that the map will pull in new tiles, hence causing some flickering.\n     *\n     * `dynamic` means that the focal length is calculated based on the supplied [[fov]] and\n     * [[viewportHeight]], this means that the map doesn't scale (the image is essentially cropped\n     * but not shrunk) when the [[viewportHeight]] or [[viewportWidth]] is changed. The benefit is\n     * that the zoom level is (currently) stable during resize, because the focal length is used,\n     * however the tradeoff is that changing from a small to a big height will cause the fov to\n     * change a lot, and thus introduce distortion.\n     */\n    type: \"fixed\" | \"dynamic\";\n\n    /**\n     * If [[type]] is `fixed` then the supplied [[fov]] is fixed regardless of\n     * [[viewportHeight]] or [[viewportWidth]].\n     *\n     * If [[type]] is `dynamic` then the supplied [[fov]] is applied to the\n     * first frame, and the focal length calculated. Changes to the viewport\n     * height no longer shrink the content because the field of view is updated\n     * dynamically.\n     */\n    fov: number;\n}\n\n/**\n * Hint for the WebGL implementation on which power mode to prefer.\n *\n * @see https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.12\n */\nexport enum MapViewPowerPreference {\n    /** Default value. */\n    Default = \"default\",\n    /** Lower power mode, used to conserve energy. */\n    LowPower = \"low-power\",\n    /** Maximum performance. */\n    HighPerformance = \"high-performance\"\n}\n\n/**\n * User configuration for the [[MapView]].\n */\nexport interface MapViewOptions extends TextElementsRendererOptions {\n    /**\n     * The canvas element used to render the scene.\n     */\n    canvas: HTMLCanvasElement;\n\n    /**\n     * `true` if the canvas contains an alpha (transparency) buffer or not. Default is `false`.\n     */\n    alpha?: boolean;\n\n    /**\n     * Whether the native WebGL antialiasing should be enabled. It is better to disable it if the\n     * MapView's MSAA is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    enableNativeWebglAntialias?: boolean;\n\n    /**\n     * Antialias settings for the map rendering. It is better to disable the native antialising if\n     * the custom antialiasing is enabled.\n     */\n    customAntialiasSettings?: IMapAntialiasSettings;\n\n    /**\n     * `Projection` used by the `MapView`.\n     *\n     * The default value is [[mercatorProjection]].\n     */\n    projection?: Projection;\n\n    /**\n     * The URL of the script that the decoder worker runs. The default URL is\n     * `./decoder.bundle.js`.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     */\n    decoderUrl?: string;\n\n    /**\n     * The number of Web Workers used to decode data. The default is\n     * CLAMP(`navigator.hardwareConcurrency` - 1, 1, 2).\n     */\n    decoderCount?: number;\n\n    /**\n     * The [[Theme]] used by Mapview.\n     *\n     * This Theme can be one of the following:\n     *  - `string` : the URI of the theme file used to style this map\n     *  - `Theme` : the `Theme` object already loaded\n     *  - `Promise<Theme>` : the future `Theme` object\n     *  - `undefined` : the theme is not yet set up, but can be set later. Rendering waits until\n     *     the theme is set.\n     *\n     * **Note:** Layers that use a theme do not render any content until that theme is available.\n     *\n     * Relative URIs are resolved to full URL using the document's base URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with help\n     * of [[uriResolver]].\n     *\n     * @see [[ThemeLoader.load]] for details how theme is loaded\n     */\n    theme?: string | Theme | Promise<Theme>;\n\n    /**\n     * Resolve `URI` referenced in `MapView` assets using this resolver.\n     *\n     * Use, to support application/deployment specific `URI`s into actual `URLs` that can be loaded\n     * with `fetch`.\n     *\n     * Example:\n     * ```\n     * uriResolver: new PrefixMapUriResolver({\n     *     \"local://poiMasterList\": \"/assets/poiMasterList.json\",\n     *        // will match only 'local//:poiMasterList' and\n     *        // resolve to `/assets/poiMasterList.json`\n     *     \"local://icons/\": \"/assets/icons/\"\n     *        // will match only 'local//:icons/ANYPATH' (and similar) and\n     *        // resolve to `/assets/icons/ANYPATH`\n     * })\n     * ```\n     *\n     * @see [[UriResolver]]\n     * @See [[PrefixMapUriResolver]]\n     */\n    uriResolver?: UriResolver;\n\n    /**\n     * The minimum zoom level; default is `1`.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Determines the minimum camera height, in meters.\n     */\n    minCameraHeight?: number;\n\n    /**\n     * The maximum zoom level. The default is `14`.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * User-defined camera clipping planes distance evaluator.\n     * If not defined, [[TiltViewClipPlanesEvaluator]] will be used by [[MapView]].\n     *\n     * @default [[TiltViewClipPlanesEvaluator]]\n     */\n    clipPlanesEvaluator?: ClipPlanesEvaluator;\n\n    /**\n     * Set to true to extend the frustum culling. This improves the rejection of some tiles, which\n     * normal frustum culling cannot detect. You can disable this property to measure performance.\n     *\n     * @default true\n     */\n    extendedFrustumCulling?: boolean;\n\n    /**\n     * The maximum number of tiles rendered from one data source at a time.\n     *\n     * @default See [[MapViewDefaults.maxVisibleDataSourceTiles]].\n     */\n    maxVisibleDataSourceTiles?: number;\n\n    /**\n     * Size of a tile cache for one data source.\n     *\n     * @default See [[MapViewDefaults.tileCacheSize]].\n     */\n    tileCacheSize?: number;\n\n    /**\n     * Specify if the cache should be counted in tiles or in megabytes.\n     *\n     * @see [[MapViewDefaults.resourceComputationType]].\n     */\n    resourceComputationType?: ResourceComputationType;\n\n    /**\n     * Limits the number of reduced zoom levels (lower detail) to be searched for fallback tiles.\n     *\n     * When zooming in, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in lower zoom levels. The tiles may be\n     * located shallower in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceUp]]\n     */\n    quadTreeSearchDistanceUp?: number;\n\n    /**\n     * Limits the number of higher zoom levels (more detailed) to be searched for fallback tiles.\n     *\n     * When zooming out, newly elected tiles may have not yet loaded. [[MapView]] searches through\n     * the tile cache for tiles ready to be displayed in higher zoom levels. These tiles may be\n     * located deeper in the quadtree.\n     *\n     * To disable a cache search, set the value to `0`.\n     *\n     * @default [[MapViewDefaults.quadTreeSearchDistanceDown]]\n     */\n    quadTreeSearchDistanceDown?: number;\n\n    /**\n     * Set to `true` to measure performance statistics.\n     */\n    enableStatistics?: boolean;\n\n    /**\n     * Preserve the buffers until they are cleared manually or overwritten.\n     *\n     * Set to `true` in order to copy [[MapView]] canvas contents to an image or another canvas.\n     *\n     * @default `false`.\n     * @see https://threejs.org/docs/#api/renderers/WebGLRenderer.preserveDrawingBuffer\n     */\n    preserveDrawingBuffer?: boolean;\n\n    /**\n     * Set to `true` to allow picking of roads. If set to `true`, additional memory is used to\n     * store road data.\n     */\n    enableRoadPicking?: boolean;\n\n    /**\n     * Set to `true` to allow picking of technique information associated with objects.\n     */\n    enablePickTechnique?: boolean;\n\n    /**\n     * An optional canvas element that renders 2D collision debug information.\n     */\n    collisionDebugCanvas?: HTMLCanvasElement;\n\n    /**\n     * Maximum timeout, in milliseconds, before a [[MOVEMENT_FINISHED_EVENT]] is sent after the\n     * latest frame with a camera movement. The default is 300ms.\n     */\n    movementThrottleTimeout?: number;\n\n    /**\n     * How to calculate the Field of View, if not specified, then\n     * [[DEFAULT_FOV_CALCULATION]] is used.\n     */\n    fovCalculation?: FovCalculation;\n\n    /*\n     * An array of ISO 639-1 language codes for data sources.\n     */\n    languages?: string[];\n\n    /**\n     * Set fixed pixel ratio for rendering. Useful when rendering on high resolution displays with\n     * low performance GPUs that may be fill-rate limited.\n     * @default `window.devicePixelRatio`\n     */\n    pixelRatio?: number;\n\n    /**\n     * Set fixed pixel ratio for rendering when the camera is moving or an animation is running.\n     * Useful when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    dynamicPixelRatio?: number;\n\n    /**\n     * Set maximum FPS (Frames Per Second). If VSync in enabled, the specified number may not be\n     * reached, but instead the next smaller number than `maxFps` that is equal to the refresh rate\n     * divided by an integer number.\n     *\n     * E.g.: If the monitors refresh rate is set to 60hz, and if `maxFps` is set to a value of `40`\n     * (60hz/1.5), the actual used FPS may be 30 (60hz/2). For displays that have a refresh rate of\n     * 60hz, good values for `maxFps` are 30, 20, 15, 12, 10, 6, 3 and 1. A value of `0` is ignored.\n     */\n    maxFps?: number;\n\n    /**\n     * Enable phased loading.\n     *\n     * Enabling this feature allows to minimize performance overhead by distributing geometry\n     * creation over multiple frames, thus decreasing CPU load at single frame for smoother\n     * application feedback and animations.\n     * If `false` or undefined, the geometry on a [[Tile]] is always being created in a single\n     * step, instead of (potentially) over multiple frames.\n     *\n     * @default `false`\n     */\n    enablePhasedLoading?: boolean;\n\n    /**\n     * Enable map repeat for planar projections.\n     * If `true`, map will be repeated in longitudinal direction continuously.\n     * If `false`, map will end on lon -180 & 180 deg.\n     *\n     * @default `true`\n     */\n    tileWrappingEnabled?: boolean;\n\n    /**\n     * Set tiling scheme for [[BackgroundDataSource]]\n     */\n    backgroundTilingScheme?: TilingScheme;\n\n    /**\n     * Should be the [[PolarTileDataSource]] used on spherical projection.\n     * Default is `true`.\n     */\n    enablePolarDataSource?: boolean;\n\n    /**\n     * The name of the [[StyleSet]] used by [[PolarTileDataSource]] to evaluate for the decoding.\n     * Default is `\"polar\"`.\n     */\n    polarStyleSetName?: string;\n\n    /**\n     * Storage level offset of regular tiles from reference datasource to align\n     * [[PolarTileDataSource]] tiles to.\n     * Default is `-1`.\n     */\n    polarGeometryLevelOffset?: number;\n\n    /**\n     * Hint for the WebGL implementation on which power mode to prefer.\n     */\n    powerPreference?: MapViewPowerPreference;\n\n    /**\n     * Set to `true` to allow rendering scene synchronously.\n     *\n     * By calling `renderSync()` scene draws immediately, opposite to default case when\n     * `update` method requests redraw and waits for the next animation frame.\n     *\n     * You need to set up your own render loop controller.\n     * Event `MapViewEventNames.Update` fired when [[MapView]] requests for an redraw.\n     * E.g.: When tiles loaded asynchronously and ready for rendering.\n     *\n     * @note Internal `maxFps` will be overridden and may not work properly as `renderSync`\n     * intended to be called from external render loop.\n     *\n     * @default false.\n     */\n    synchronousRendering?: boolean;\n\n    /**\n     * Set initial camera target in geo coordinates.\n     *\n     * Longitude values outside of -180 and +180 are acceptable.\n     * @default new GeoCoordinates(25, 0)\n     */\n    target?: GeoCoordLike;\n\n    /**\n     * Set initial zoom level.\n     *\n     * @default 12\n     */\n    zoomLevel?: number;\n\n    /**\n     * Set initial camera heading in degrees.\n     *\n     * @default 0\n     */\n    heading?: number;\n\n    /**\n     * Set initial camera tilt in degrees.\n     *\n     * @default 0\n     */\n    tilt?: number;\n\n    /**\n     * Set true to enable rendering mixed levels of detail (increases rendering performance).\n     * If not set will enable mixed levels of detail for spherical projection\n     * and disable for other projections.\n     *\n     * @default undefined\n     */\n    enableMixedLod?: boolean;\n}\n\n/**\n * Default settings used by [[MapView]] collected in one place.\n */\nexport const MapViewDefaults = {\n    projection: mercatorProjection,\n\n    maxVisibleDataSourceTiles: 100,\n    extendedFrustumCulling: true,\n\n    tileCacheSize: 200,\n    resourceComputationType: ResourceComputationType.EstimationInMb,\n    quadTreeSearchDistanceUp: 3,\n    quadTreeSearchDistanceDown: 2,\n\n    pixelRatio:\n        typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0,\n    geoCenter: new GeoCoordinates(25, 0, 30000000),\n    target: new GeoCoordinates(25, 0),\n    zoomLevel: 5,\n    tilt: 0,\n    heading: 0,\n    theme: {}\n};\n\n/**\n * The core class of the library to call in order to create a map visualization. It needs to be\n * linked to datasources.\n */\nexport class MapView extends THREE.EventDispatcher {\n    dumpNext = false;\n\n    /**\n     * The instance of [[MapRenderingManager]] managing the rendering of the map. It is a public\n     * property to allow access and modification of some parameters of the rendering process at\n     * runtime.\n     */\n    readonly mapRenderingManager: IMapRenderingManager;\n\n    private m_renderLabels: boolean = true;\n\n    private m_movementFinishedUpdateTimerId?: any;\n    private m_postEffects?: PostEffects;\n\n    private m_skyBackground?: SkyBackground;\n    private m_createdLights?: THREE.Light[];\n\n    private readonly m_screenProjector: ScreenProjector;\n    private readonly m_screenCollisions:\n        | ScreenCollisions\n        | ScreenCollisionsDebug = new ScreenCollisions();\n\n    private m_visibleTiles: VisibleTileSet;\n\n    private m_elevationRangeSource?: ElevationRangeSource;\n    private m_elevationProvider?: ElevationProvider;\n    private m_visibleTileSetLock: boolean = false;\n    private m_tileGeometryManager: TileGeometryManager;\n\n    private m_tileWrappingEnabled: boolean = true;\n\n    private m_zoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_minZoomLevel: number = DEFAULT_MIN_ZOOM_LEVEL;\n    private m_maxZoomLevel: number = DEFAULT_MAX_ZOOM_LEVEL;\n    private m_minCameraHeight: number = DEFAULT_MIN_CAMERA_HEIGHT;\n\n    private readonly m_screenCamera = new THREE.OrthographicCamera(-1, 1, 1, -1);\n\n    private readonly m_camera: THREE.PerspectiveCamera;\n\n    /**\n     * Relative to eye camera.\n     *\n     * This camera is internal camera used to improve precision\n     * when rendering geometries.\n     */\n    private readonly m_rteCamera = new THREE.PerspectiveCamera();\n\n    private m_focalLength: number;\n    private m_targetDistance: number;\n    private m_targetGeoPos = MapViewDefaults.target.clone();\n    // Focus point world coords may be calculated after setting projection, use dummy value here.\n    private m_targetWorldPos = new THREE.Vector3();\n    private readonly m_viewRanges: ViewRanges = {\n        near: DEFAULT_CAM_NEAR_PLANE,\n        far: DEFAULT_CAM_FAR_PLANE,\n        minimum: DEFAULT_CAM_NEAR_PLANE,\n        maximum: DEFAULT_CAM_FAR_PLANE\n    };\n    private m_pointOfView?: THREE.PerspectiveCamera;\n\n    private m_pixelToWorld?: number;\n    private m_pixelRatio?: number;\n\n    private readonly m_scene: THREE.Scene = new THREE.Scene();\n    private readonly m_fog: MapViewFog = new MapViewFog(this.m_scene);\n    private readonly m_mapTilesRoot = new THREE.Object3D();\n    private readonly m_mapAnchors = new THREE.Object3D();\n\n    private m_animationCount: number = 0;\n    private m_animationFrameHandle: number | undefined;\n    private m_drawing: boolean = false;\n    private m_updatePending: boolean = false;\n    private m_renderer: THREE.WebGLRenderer;\n    private m_frameNumber = 0;\n    private m_maxFps = 0;\n    private m_detectedFps: number = FALLBACK_FRAME_RATE;\n\n    private m_textElementsRenderer: TextElementsRenderer;\n\n    private m_forceCameraAspect: number | undefined = undefined;\n\n    //\n    // sources\n    //\n    private readonly m_tileDataSources: DataSource[] = [];\n    private readonly m_connectedDataSources = new Set<string>();\n    private readonly m_failedDataSources = new Set<string>();\n    private m_backgroundDataSource?: BackgroundDataSource;\n    private m_polarDataSource?: PolarTileDataSource;\n    private m_enablePolarDataSource: boolean = true;\n\n    // gestures\n    private readonly m_raycaster: PickingRaycaster;\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_sphere = new THREE.Sphere(undefined, EarthConstants.EQUATORIAL_RADIUS);\n\n    private readonly m_options: MapViewOptions;\n    private readonly m_visibleTileSetOptions: VisibleTileSetOptions;\n\n    private m_theme: Theme = {};\n    private m_uriResolver?: UriResolver;\n    private m_themeIsLoading: boolean = false;\n\n    private m_previousFrameTimeStamp?: number;\n    private m_firstFrameRendered = false;\n    private m_firstFrameComplete = false;\n    private m_initialTextPlacementDone = false;\n    private m_previousRequestAnimationTime?: number;\n    private m_targetRequestAnimationTime?: number;\n    private m_frameTimeIndex: number = 0;\n    private readonly m_frameTimeRing: number[] = [];\n\n    private handleRequestAnimationFrame: any;\n    private handlePostponedAnimationFrame: any;\n\n    private m_pickHandler: PickHandler;\n\n    private m_imageCache: MapViewImageCache = new MapViewImageCache(this);\n\n    private m_poiManager: PoiManager = new PoiManager(this);\n\n    private m_poiTableManager: PoiTableManager = new PoiTableManager(this);\n\n    private m_collisionDebugCanvas: HTMLCanvasElement | undefined;\n\n    // Detection of camera movement and scene change:\n    private m_movementDetector: CameraMovementDetector;\n\n    private m_thisFrameTilesChanged: boolean | undefined;\n    private m_lastTileIds: string = \"\";\n    private m_languages: string[] | undefined;\n    private m_copyrightInfo: CopyrightInfo[] = [];\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    private m_env: MapEnv = new MapEnv({});\n\n    private m_enableMixedLod: boolean | undefined;\n\n    /**\n     * Constructs a new `MapView` with the given options or canvas element.\n     *\n     * @param options The `MapView` options or the HTML canvas element used to display the map.\n     */\n    constructor(options: MapViewOptions) {\n        super();\n\n        // make a copy to avoid unwanted changes to the original options.\n        this.m_options = { ...options };\n\n        this.m_uriResolver = this.m_options.uriResolver;\n\n        if (this.m_options.minZoomLevel !== undefined) {\n            this.m_minZoomLevel = this.m_options.minZoomLevel;\n        }\n\n        if (this.m_options.maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = this.m_options.maxZoomLevel;\n        }\n\n        if (this.m_options.minCameraHeight !== undefined) {\n            this.m_minCameraHeight = this.m_options.minCameraHeight;\n        }\n\n        if (this.m_options.decoderUrl !== undefined) {\n            ConcurrentDecoderFacade.defaultScriptUrl = this.m_uriResolver\n                ? this.m_uriResolver.resolveUri(this.m_options.decoderUrl)\n                : this.m_options.decoderUrl;\n        }\n\n        if (this.m_options.decoderCount !== undefined) {\n            ConcurrentDecoderFacade.defaultWorkerCount = this.m_options.decoderCount;\n        }\n\n        this.m_visibleTileSetOptions = {\n            ...MapViewDefaults,\n            clipPlanesEvaluator:\n                options.clipPlanesEvaluator !== undefined\n                    ? options.clipPlanesEvaluator\n                    : createDefaultClipPlanesEvaluator()\n        };\n\n        if (options.projection !== undefined) {\n            this.m_visibleTileSetOptions.projection = options.projection;\n        }\n\n        if (options.extendedFrustumCulling !== undefined) {\n            this.m_visibleTileSetOptions.extendedFrustumCulling = options.extendedFrustumCulling;\n        }\n\n        if (options.maxVisibleDataSourceTiles !== undefined) {\n            this.m_visibleTileSetOptions.maxVisibleDataSourceTiles =\n                options.maxVisibleDataSourceTiles;\n        }\n\n        if (options.tileCacheSize !== undefined) {\n            this.m_visibleTileSetOptions.tileCacheSize = options.tileCacheSize;\n        }\n\n        if (options.resourceComputationType !== undefined) {\n            this.m_visibleTileSetOptions.resourceComputationType = options.resourceComputationType;\n        }\n\n        if (options.quadTreeSearchDistanceUp !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceUp =\n                options.quadTreeSearchDistanceUp;\n        }\n\n        if (options.quadTreeSearchDistanceDown !== undefined) {\n            this.m_visibleTileSetOptions.quadTreeSearchDistanceDown =\n                options.quadTreeSearchDistanceDown;\n        }\n\n        if (options.enablePolarDataSource !== undefined) {\n            this.m_enablePolarDataSource = options.enablePolarDataSource;\n        }\n\n        this.m_pixelRatio = options.pixelRatio;\n\n        if (options.maxFps !== undefined) {\n            this.m_maxFps = Math.max(0, options.maxFps);\n        }\n\n        this.m_options.enableStatistics = this.m_options.enableStatistics === true;\n\n        this.m_languages = this.m_options.languages;\n\n        if (\n            !isProduction &&\n            this.m_options.collisionDebugCanvas !== undefined &&\n            this.m_options.collisionDebugCanvas !== null\n        ) {\n            this.m_collisionDebugCanvas = this.m_options.collisionDebugCanvas;\n            this.m_screenCollisions = new ScreenCollisionsDebug(this.m_collisionDebugCanvas);\n        }\n\n        this.handleRequestAnimationFrame = this.renderFunc.bind(this);\n        this.handlePostponedAnimationFrame = this.postponedAnimationFrame.bind(this);\n        this.m_pickHandler = new PickHandler(\n            this,\n            this.m_rteCamera,\n            this.m_options.enableRoadPicking === true,\n            this.m_options.enablePickTechnique === true\n        );\n\n        if (this.m_options.tileWrappingEnabled !== undefined) {\n            this.m_tileWrappingEnabled = this.m_options.tileWrappingEnabled;\n        }\n\n        // Initialization of the stats\n        this.setupStats(this.m_options.enableStatistics);\n\n        this.canvas.addEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.addEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        // Initialization of the renderer\n        this.m_renderer = new THREE.WebGLRenderer({\n            canvas: this.canvas,\n            antialias: this.nativeWebglAntialiasEnabled,\n            alpha: this.m_options.alpha,\n            preserveDrawingBuffer: this.m_options.preserveDrawingBuffer === true,\n            powerPreference:\n                this.m_options.powerPreference === undefined\n                    ? MapViewPowerPreference.Default\n                    : this.m_options.powerPreference\n        });\n        this.m_renderer.autoClear = false;\n\n        // This is detailed at https://threejs.org/docs/#api/renderers/WebGLRenderer.info\n        // When using several WebGLRenderer#render calls per frame, it is the only way to get\n        // correct rendering data from ThreeJS.\n        this.m_renderer.info.autoReset = false;\n\n        this.setupRenderer();\n\n        this.m_options.fovCalculation =\n            this.m_options.fovCalculation === undefined\n                ? DEFAULT_FOV_CALCULATION\n                : this.m_options.fovCalculation;\n        this.m_options.fovCalculation.fov = THREE.Math.clamp(\n            this.m_options.fovCalculation!.fov,\n            MIN_FIELD_OF_VIEW,\n            MAX_FIELD_OF_VIEW\n        );\n        // Initialization of mCamera and mVisibleTiles\n        const { width, height } = this.getCanvasClientSize();\n        const aspect = width / height;\n        this.m_camera = new THREE.PerspectiveCamera(\n            this.m_options.fovCalculation.fov,\n            aspect,\n            DEFAULT_CAM_NEAR_PLANE,\n            DEFAULT_CAM_FAR_PLANE\n        );\n        this.m_camera.up.set(0, 0, 1);\n        this.projection.projectPoint(this.m_targetGeoPos, this.m_targetWorldPos);\n        this.m_focalLength = 0;\n        this.m_scene.add(this.m_camera); // ensure the camera is added to the scene.\n        this.m_screenProjector = new ScreenProjector(this.m_camera);\n\n        // setup camera with initial position\n        this.setupCamera(options);\n        this.m_targetDistance = this.m_camera.position.distanceTo(this.m_targetWorldPos);\n\n        this.m_raycaster = new PickingRaycaster(width, height);\n\n        this.m_movementDetector = new CameraMovementDetector(\n            this.m_options.movementThrottleTimeout,\n            () => this.movementStarted(),\n            () => this.movementFinished()\n        );\n\n        const mapPassAntialiasSettings = this.m_options.customAntialiasSettings;\n        this.mapRenderingManager = new MapRenderingManager(\n            width,\n            height,\n            this.m_options.dynamicPixelRatio,\n            mapPassAntialiasSettings\n        );\n\n        this.m_tileGeometryManager =\n            this.m_options.enablePhasedLoading === true\n                ? new PhasedTileGeometryManager(this)\n                : new SimpleTileGeometryManager(this);\n\n        if (options.enableMixedLod !== undefined) {\n            this.m_enableMixedLod = options.enableMixedLod;\n        }\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.m_animatedExtrusionHandler = new AnimatedExtrusionHandler(this);\n\n        this.m_backgroundDataSource = new BackgroundDataSource();\n        this.addDataSource(this.m_backgroundDataSource);\n\n        if (this.m_enablePolarDataSource) {\n            const styleSetName =\n                options.polarStyleSetName !== undefined\n                    ? options.polarStyleSetName\n                    : DEFAULT_POLAR_STYLE_SET_NAME;\n\n            this.m_polarDataSource = new PolarTileDataSource({\n                styleSetName,\n                geometryLevelOffset: options.polarGeometryLevelOffset\n            });\n\n            this.updatePolarDataSource();\n        }\n\n        if (options.backgroundTilingScheme !== undefined) {\n            this.m_backgroundDataSource.setTilingScheme(options.backgroundTilingScheme);\n        }\n\n        this.initTheme();\n\n        this.m_textElementsRenderer = this.createTextRenderer();\n\n        this.drawFrame();\n    }\n\n    /**\n     * @returns Whether label rendering is enabled.\n     */\n    get renderLabels() {\n        return this.m_renderLabels;\n    }\n\n    /**\n     * Enables or disables rendering of labels.\n     * @param value `true` to enable labels `false` to disable them.\n     */\n    set renderLabels(value: boolean) {\n        this.m_renderLabels = value;\n    }\n\n    /**\n     * @hidden\n     * The [[TextElementsRenderer]] select the visible [[TextElement]]s and renders them.\n     */\n    get textElementsRenderer(): TextElementsRenderer {\n        return this.m_textElementsRenderer;\n    }\n\n    /**\n     * @hidden\n     * The [[CameraMovementDetector]] detects camera movements. Made available for performance\n     * measurements.\n     */\n    get cameraMovementDetector(): CameraMovementDetector {\n        return this.m_movementDetector;\n    }\n\n    /**\n     * The [[AnimatedExtrusionHandler]] controls animated extrusion effect\n     * of the extruded objects in the [[Tile]]\n     */\n    get animatedExtrusionHandler(): AnimatedExtrusionHandler {\n        return this.m_animatedExtrusionHandler;\n    }\n\n    /**\n     * The [[TileGeometryManager]] manages geometry during loading and handles hiding geometry of\n     * specified [[GeometryKind]]s.\n     */\n    get tileGeometryManager(): TileGeometryManager | undefined {\n        return this.m_tileGeometryManager;\n    }\n\n    get enableMixedLod(): boolean | undefined {\n        return this.m_enableMixedLod;\n    }\n\n    set enableMixedLod(enableMixedLod: boolean | undefined) {\n        // Skip unnecessary update\n        if (this.m_enableMixedLod === enableMixedLod) {\n            return;\n        }\n\n        this.m_enableMixedLod = enableMixedLod;\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.resetTextRenderer();\n        this.update();\n    }\n\n    /**\n     * Disposes this `MapView`.\n     *\n     * This function cleans the resources that are managed manually including those that exist in\n     * shared caches.\n     *\n     * Note: This function does not try to clean objects that can be disposed off easily by\n     * TypeScript's garbage collecting mechanism. Consequently, if you need to perform a full\n     * cleanup, you must ensure that all references to this `MapView` are removed.\n     */\n    dispose() {\n        if (this.m_movementFinishedUpdateTimerId) {\n            clearTimeout(this.m_movementFinishedUpdateTimerId);\n            this.m_movementFinishedUpdateTimerId = undefined;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.canvas.removeEventListener(\"webglcontextlost\", this.onWebGLContextLost);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this.onWebGLContextRestored);\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.dispose();\n        }\n        this.m_visibleTiles.clearTileCache();\n        this.m_textElementsRenderer.clearRenderStates();\n        this.m_renderer.dispose();\n        this.m_imageCache.clear();\n\n        this.m_movementDetector.dispose();\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_visibleTiles.resourceComputationType;\n    }\n\n    set resourceComputationType(value: ResourceComputationType) {\n        this.m_visibleTiles.resourceComputationType = value;\n    }\n\n    /**\n     * Returns the cache size.\n     */\n    getCacheSize(): number {\n        return this.m_visibleTiles.getDataSourceCacheSize();\n    }\n\n    /**\n     * Sets the cache size in number of tiles.\n     *\n     * @param size The cache size in tiles.\n     * @param numVisibleTiles The number of tiles visible, which is size/2 by default.\n     */\n    setCacheSize(size: number, numVisibleTiles?: number): void {\n        this.m_visibleTiles.setDataSourceCacheSize(size);\n        numVisibleTiles = numVisibleTiles !== undefined ? numVisibleTiles : size / 2;\n        this.m_visibleTiles.setNumberOfVisibleTiles(Math.floor(numVisibleTiles));\n        this.updateImages();\n        this.updateLighting();\n\n        this.m_textElementsRenderer.invalidateCache();\n\n        this.updateSkyBackground();\n        this.update();\n    }\n\n    /**\n     * Specfies whether extended frustum culling is enabled or disabled.\n     */\n    get extendedFrustumCulling(): boolean {\n        return this.m_options.extendedFrustumCulling !== undefined\n            ? this.m_visibleTileSetOptions.extendedFrustumCulling\n            : true;\n    }\n\n    /**\n     * Enable of disable extended frustum culling.\n     */\n    set extendedFrustumCulling(value: boolean) {\n        this.m_visibleTileSetOptions.extendedFrustumCulling = value;\n    }\n\n    /**\n     * Returns the status of frustum culling after each update.\n     */\n    get lockVisibleTileSet(): boolean {\n        return this.m_visibleTileSetLock;\n    }\n\n    /**\n     * Enable of disable frustum culling after each update.\n     */\n    set lockVisibleTileSet(value: boolean) {\n        this.m_visibleTileSetLock = value;\n    }\n\n    /**\n     * Gets the optional camera used to render the scene.\n     */\n    get pointOfView(): THREE.PerspectiveCamera | undefined {\n        return this.m_pointOfView;\n    }\n\n    /**\n     * Sets the optional camera used to render the scene.\n     */\n    set pointOfView(pointOfView: THREE.PerspectiveCamera | undefined) {\n        this.m_pointOfView = pointOfView;\n        this.update();\n    }\n\n    /**\n     * Loads a post effects definition file.\n     *\n     * @param postEffectsFile File URL describing the post effects.\n     */\n    loadPostEffects(postEffectsFile: string) {\n        fetch(postEffectsFile)\n            .then(response => response.json())\n            .then((postEffects: PostEffects) => {\n                this.m_postEffects = postEffects;\n                this.setPostEffects();\n            });\n    }\n\n    /**\n     * The abstraction of the [[MapRenderingManager]] API for post effects.\n     */\n    get postEffects(): PostEffects | undefined {\n        return this.m_postEffects;\n    }\n\n    set postEffects(postEffects: PostEffects | undefined) {\n        this.m_postEffects = postEffects;\n        this.setPostEffects();\n    }\n\n    /**\n     * Gets the current `Theme` used by this `MapView` to style map elements.\n     */\n    get theme(): Theme {\n        return this.m_theme;\n    }\n\n    /**\n     * Changes the `Theme` used by this `MapView` to style map elements.\n     */\n    set theme(theme: Theme) {\n        if (!ThemeLoader.isThemeLoaded(theme)) {\n            this.m_themeIsLoading = true;\n            // If theme is not yet loaded, let's set theme asynchronously\n            ThemeLoader.load(theme, { uriResolver: this.m_uriResolver })\n                .then(loadedTheme => {\n                    this.m_themeIsLoading = false;\n                    this.theme = loadedTheme;\n                })\n                .catch(error => {\n                    this.m_themeIsLoading = false;\n                    logger.error(`failed to set theme: ${error}`, error);\n                });\n            return;\n        }\n\n        // Fog and sky.\n        this.m_theme.fog = theme.fog;\n        this.m_theme.sky = theme.sky;\n        this.updateSkyBackground();\n        this.m_fog.reset(this.m_theme);\n\n        this.m_theme.lights = theme.lights;\n        this.updateLighting();\n\n        // Clear color.\n        this.m_theme.clearColor = theme.clearColor;\n        this.renderer.setClearColor(new THREE.Color(theme.clearColor));\n\n        // Images.\n        this.m_theme.images = theme.images;\n        this.m_theme.imageTextures = theme.imageTextures;\n        this.updateImages();\n\n        // POI tables.\n        this.m_theme.poiTables = theme.poiTables;\n        this.loadPoiTables();\n\n        // Text.\n        this.m_theme.textStyles = theme.textStyles;\n        this.m_theme.defaultTextStyle = theme.defaultTextStyle;\n        this.m_theme.fontCatalogs = theme.fontCatalogs;\n\n        this.resetTextRenderer();\n\n        if (Array.isArray(theme.priorities)) {\n            this.m_theme.priorities = theme.priorities;\n        }\n\n        if (Array.isArray(theme.labelPriorities)) {\n            this.m_theme.labelPriorities = theme.labelPriorities;\n        }\n\n        if (this.m_theme.styles === undefined) {\n            this.m_theme.styles = {};\n        }\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.setTheme(this.m_theme);\n        }\n        this.m_theme.styles = theme.styles || {};\n        this.m_theme.definitions = theme.definitions;\n\n        for (const dataSource of this.m_tileDataSources) {\n            dataSource.setTheme(this.m_theme);\n        }\n        THEME_LOADED_EVENT.time = Date.now();\n        this.dispatchEvent(THEME_LOADED_EVENT);\n        this.update();\n    }\n\n    /**\n     * [[UriResolver]] used to resolve application/deployment specific `URI`s into actual `URLs`\n     * that can be loaded with `fetch`.\n     */\n    get uriResolver(): UriResolver | undefined {\n        return this.m_uriResolver;\n    }\n\n    /**\n     * Gets the value of the forced custom camera aspect.\n     * Every time a frame is rendered, `MapView` resets the camera aspect.\n     *\n     * You can disable this behavior by setting the value to `undefined`.\n     */\n    get forceCameraAspect(): number | undefined {\n        return this.m_forceCameraAspect;\n    }\n\n    /**\n     * Sets the custom forced camera aspect ratio to use while rendering.\n     */\n    set forceCameraAspect(aspect: number | undefined) {\n        this.m_forceCameraAspect = aspect;\n    }\n\n    /**\n     * Maximum FPS. If defined (and > 0) it is the maximum FPS that is used.\n     */\n    set maxFps(fps: number) {\n        this.m_maxFps = Math.max(0, fps);\n    }\n\n    get maxFps(): number {\n        return Math.max(0, this.m_maxFps);\n    }\n\n    /**\n     * Lists the ISO 639-1 language codes for DataSources to use.\n     */\n    get languages(): string[] | undefined {\n        return this.m_languages;\n    }\n\n    /**\n     * Sets the list of ISO 639-1 language codes for DataSources to use.\n     */\n    set languages(languages: string[] | undefined) {\n        this.m_languages = languages;\n        this.m_tileDataSources.forEach((dataSource: DataSource) => {\n            dataSource.setLanguages(this.m_languages);\n        });\n        this.update();\n    }\n\n    get copyrightInfo(): CopyrightInfo[] {\n        return this.m_copyrightInfo;\n    }\n\n    /**\n     * @hidden\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_textElementsRenderer.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_textElementsRenderer.disableFading;\n    }\n\n    /**\n     * @hidden\n     * Return current frame number.\n     */\n    get frameNumber(): number {\n        return this.m_frameNumber;\n    }\n\n    /**\n     * @hidden\n     * Reset the frame number to 0.\n     */\n    resetFrameNumber() {\n        this.m_frameNumber = 0;\n        this.m_previousFrameTimeStamp = undefined;\n    }\n\n    /**\n     * Adds an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * let frameCount = 0;\n     * mapView.addEventListener(MapViewEventNames.Render, () => {\n     *     ++frameCount;\n     * });\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    addEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    addEventListener(type: string, listener: any): void {\n        super.addEventListener(type, listener);\n    }\n\n    /**\n     * Removes an event listener. There are various events that are sent before or after a new frame\n     * is rendered.\n     *\n     * @see [[MapViewEventNames]].\n     *\n     * @example\n     * ```TypeScript\n     * mapView.removeEventListener(MapViewEventNames.Render, listener);\n     * ```\n     *\n     * @param type One of the [[MapViewEventNames]] strings.\n     * @param listener The callback invoked when the `MapView` needs to render a new frame.\n     */\n    removeEventListener(type: MapViewEventNames, listener: (event: RenderEvent) => void): void;\n\n    removeEventListener(type: string, listener: any): void {\n        super.removeEventListener(type, listener);\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get canvas(): HTMLCanvasElement {\n        return this.m_options.canvas;\n    }\n\n    /**\n     * The HTML canvas element used by this `MapView`.\n     */\n    get collisionDebugCanvas(): HTMLCanvasElement | undefined {\n        return this.m_collisionDebugCanvas;\n    }\n\n    /**\n     * The THREE.js scene used by this `MapView`.\n     */\n    get scene(): THREE.Scene {\n        return this.m_scene;\n    }\n\n    /**\n     * The THREE.js camera used by this `MapView` to render the main scene.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * The THREE.js `WebGLRenderer` used by this scene.\n     */\n    get renderer(): THREE.WebGLRenderer {\n        return this.m_renderer;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    get clearColor() {\n        const rendererClearColor = this.m_renderer.getClearColor();\n        return rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n    }\n\n    /**\n     * The color used to clear the view.\n     */\n    set clearColor(color: number) {\n        this.m_renderer.setClearColor(color);\n    }\n\n    /**\n     * The projection used to project geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.m_visibleTileSetOptions.projection;\n    }\n\n    /**\n     * Changes the projection at run time.\n     *\n     * @param projection The [[Projection]] instance to use.\n     */\n    set projection(projection: Projection) {\n        // The geo center must be reset when changing the projection, because the\n        // camera's position is based on the projected geo center.\n        let target = MapViewUtils.getWorldTargetFromCamera(this.camera, this.projection);\n        if (target === null) {\n            logger.warn(\n                \"MapView does not support a view pointing in the void, using last focus point.\"\n            );\n            target = this.worldTarget;\n        }\n        const targetCoordinates = this.projection.unprojectPoint(target);\n        const targetDistance = this.camera.position.distanceTo(target);\n        const attitude = MapViewUtils.extractAttitude(this, this.camera);\n        const pitchDeg = THREE.Math.radToDeg(attitude.pitch);\n        const headingDeg = -THREE.Math.radToDeg(attitude.yaw);\n\n        this.m_visibleTileSetOptions.projection = projection;\n        this.updatePolarDataSource();\n        this.clearTileCache();\n        this.textElementsRenderer.clearRenderStates();\n        this.m_visibleTiles = this.createVisibleTileSet();\n\n        this.lookAt(targetCoordinates, targetDistance, pitchDeg, headingDeg);\n    }\n\n    /**\n     * Get camera clipping planes evaluator used.\n     */\n    get clipPlanesEvaluator(): ClipPlanesEvaluator {\n        return this.m_visibleTileSetOptions.clipPlanesEvaluator;\n    }\n\n    /**\n     * Changes the clip planes evaluator at run time.\n     */\n    set clipPlanesEvaluator(clipPlanesEvaluator: ClipPlanesEvaluator) {\n        this.m_visibleTileSetOptions.clipPlanesEvaluator = clipPlanesEvaluator;\n    }\n\n    /**\n     * The distance (in pixels) between the screen and the camera.\n     */\n    get focalLength(): number {\n        return this.m_focalLength;\n    }\n\n    /** @internal\n     * Get geo coordinates of camera focus (target) point.\n     *\n     * @see worldTarget\n     *\n     * @returns geo coordinates of the camera focus point.\n     */\n    get target(): GeoCoordinates {\n        return this.m_targetGeoPos;\n    }\n\n    /** @internal\n     * Get world coordinates of camera focus point.\n     *\n     * @note The focus point coordinates are updated with each camera update so you don't need\n     * to re-calculate it, although if the camera started looking to the void, the last focus\n     * point is stored.\n     *\n     * @returns world coordinates of the camera focus point.\n     */\n    get worldTarget(): THREE.Vector3 {\n        return this.m_targetWorldPos;\n    }\n\n    /** @internal\n     * Get distance from camera to the point of focus in world units.\n     *\n     * @note If camera does not point to any ground anymore the last focus point distance is\n     * then returned.\n     *\n     * @returns Last known focus point distance.\n     */\n    get targetDistance(): number {\n        return this.m_targetDistance;\n    }\n\n    /**\n     * Get object describing frustum planes distances and min/max visibility range for actual\n     * camera setup.\n     * Near and far plane distance are self explanatory while minimum and maximum visibility range\n     * describes the extreme near/far planes distances that may be achieved with current camera\n     * settings, meaning at current zoom level (ground distance) and any possible orientation.\n     * @note Visibility is directly related to camera [[ClipPlaneEvaluator]] used and determines\n     * the maximum possible distance of camera far clipping plane regardless of tilt, but may change\n     * whenever zoom level changes. Distance is measured in world units which may be approximately\n     * equal to meters, but this depends on the distortion related to projection type used.\n     */\n    get viewRanges(): ViewRanges {\n        return this.m_viewRanges;\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     */\n    get geoCenter(): GeoCoordinates {\n        return this.projection.unprojectPoint(this.m_camera.position).normalized();\n    }\n\n    /**\n     * The position in geo coordinates of the center of the scene.\n     * Longitude values outside of -180 and +180 are acceptable.\n     */\n    set geoCenter(geoCenter: GeoCoordinates) {\n        if (geoCenter.altitude !== undefined) {\n            this.projection.projectPoint(geoCenter, this.m_camera.position);\n        } else {\n            // Preserve the current altitude\n            const altitude = this.geoCenter.altitude;\n\n            this.projection.projectPoint(\n                new GeoCoordinates(geoCenter.latitude, geoCenter.longitude, altitude),\n                this.m_camera.position\n            );\n        }\n\n        this.update();\n    }\n\n    /**\n     * The node in this MapView's scene containing the user [[MapAnchor]]s.\n     * All (first level) children of this node will be positioned in world space according to the\n     * [[MapAnchor.geoPosition]].\n     * Deeper level children can be used to position custom objects relative to the anchor node.\n     */\n    get mapAnchors(): THREE.Object3D {\n        return this.m_mapAnchors;\n    }\n\n    /**\n     * The position in world coordinates of the center of the scene.\n     */\n    get worldCenter(): THREE.Vector3 {\n        return this.m_camera.position;\n    }\n\n    /**\n     * The root object of the scene. Contains all `rootObjects` of the [[Tile]]s.\n     */\n    get worldRootObject(): THREE.Object3D {\n        return this.m_mapTilesRoot;\n    }\n\n    /**\n     * Get the [[PickHandler]] for this `mapView`.\n     */\n    get pickHandler(): PickHandler {\n        return this.m_pickHandler;\n    }\n\n    /**\n     * Get the [[ImageCache]] that belongs to this `MapView`.\n     */\n    get imageCache(): MapViewImageCache {\n        return this.m_imageCache;\n    }\n\n    /**\n     * @hidden\n     * Get the [[PoiManager]] that belongs to this `MapView`.\n     */\n    get poiManager(): PoiManager {\n        return this.m_poiManager;\n    }\n\n    /**\n     * @hidden\n     * Get the array of [[PoiTableManager]] that belongs to this `MapView`.\n     */\n    get poiTableManager(): PoiTableManager {\n        return this.m_poiTableManager;\n    }\n\n    /**\n     * The minimum camera height in meters.\n     */\n    get minCameraHeight(): number {\n        return this.m_minCameraHeight;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    /**\n     * The minimum zoom level.\n     */\n    set minZoomLevel(zoomLevel: number) {\n        this.m_minZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * The maximum zoom level. Default is 14.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    /**\n     * The maximum zoom level.\n     */\n    set maxZoomLevel(zoomLevel: number) {\n        this.m_maxZoomLevel = zoomLevel;\n        this.update();\n    }\n\n    /**\n     * Returns the zoom level for the given camera setup.\n     */\n    get zoomLevel(): number {\n        return this.m_zoomLevel;\n    }\n    set zoomLevel(zoomLevel: number) {\n        this.m_zoomLevel = THREE.Math.clamp(zoomLevel, this.m_minZoomLevel, this.m_maxZoomLevel);\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, this.m_zoomLevel);\n        this.update();\n    }\n\n    /**\n     * Environment used to evaluate dynamic scene expressions.\n     */\n    get env(): Env {\n        return this.m_env;\n    }\n\n    /**\n     * Returns the storage level for the given camera setup.\n     * Actual storage level of the rendered data also depends on [[DataSource.storageLevelOffset]].\n     */\n    get storageLevel(): number {\n        return THREE.Math.clamp(\n            Math.floor(this.m_zoomLevel),\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns height of the viewport in pixels.\n     */\n    get viewportHeight(): number {\n        return this.canvas.height;\n    }\n\n    /**\n     * Returns `true` if the native WebGL antialiasing is enabled.\n     *\n     * @default `true` for `pixelRatio` < `2.0`, `false` otherwise.\n     */\n    get nativeWebglAntialiasEnabled(): boolean {\n        return this.m_options.enableNativeWebglAntialias === undefined\n            ? this.pixelRatio < 2.0\n            : this.m_options.enableNativeWebglAntialias;\n    }\n\n    /**\n     * Returns 'true' if the phased loading is currently enabled.\n     *\n     * @default `false`.\n     */\n    get phasedLoadingEnabled(): boolean {\n        return this.m_options.enablePhasedLoading === true;\n    }\n\n    /**\n     * Returns [[DataSource]]s displayed by this `MapView`.\n     */\n    get dataSources(): DataSource[] {\n        return this.m_tileDataSources;\n    }\n\n    /**\n     * Set's the way in which the fov is calculated on the map view. Note, for\n     * this to take visual effect, the map should be rendered after calling this\n     * function.\n     * @param fovCalculation How the FOV is calculated.\n     */\n    setFovCalculation(fovCalculation: FovCalculation) {\n        this.m_options.fovCalculation = fovCalculation;\n        this.calculateFocalLength(this.m_renderer.getSize(cache.vector2[0]).height);\n        this.updateCameras();\n    }\n\n    /**\n     * Returns the unique [[DataSource]] matching the given name.\n     */\n    getDataSourceByName(dataSourceName: string): DataSource | undefined {\n        return this.m_tileDataSources.find(ds => ds.name === dataSourceName);\n    }\n\n    /**\n     * Returns the array of [[DataSource]]s referring to the same [[StyleSet]].\n     */\n    getDataSourcesByStyleSetName(styleSetName: string): DataSource[] {\n        return this.m_tileDataSources.filter(ds => ds.styleSetName === styleSetName);\n    }\n\n    /**\n     * Returns true if the specified [[DataSource]] is enabled.\n     */\n    isDataSourceEnabled(dataSource: DataSource): boolean {\n        return (\n            dataSource.enabled &&\n            dataSource.ready() &&\n            this.m_connectedDataSources.has(dataSource.name)\n        );\n    }\n\n    /**\n     * Adds a new [[DataSource]] to this `MapView`. `MapView` needs at least one [[DataSource]] to\n     * display something.\n     *\n     * @param dataSource The data source.\n     */\n    addDataSource(dataSource: DataSource): Promise<void> {\n        const twinDataSource = this.getDataSourceByName(dataSource.name);\n        if (twinDataSource !== undefined) {\n            throw new Error(\n                `A DataSource with the name \"${dataSource.name}\" already exists in this MapView.`\n            );\n        }\n\n        dataSource.attach(this);\n        dataSource.setEnableElevationOverlay(this.m_elevationProvider !== undefined);\n        this.m_tileDataSources.push(dataSource);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        return dataSource\n            .connect()\n            .then(() => {\n                return new Promise(resolve => {\n                    if (this.theme !== undefined && this.theme.styles !== undefined) {\n                        resolve();\n                        return;\n                    }\n\n                    const resolveOnce = () => {\n                        this.removeEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                        resolve();\n                    };\n\n                    this.addEventListener(MapViewEventNames.ThemeLoaded, resolveOnce);\n                });\n            })\n            .then(() => {\n                const alreadyRemoved = this.m_tileDataSources.indexOf(dataSource) === -1;\n                if (alreadyRemoved) {\n                    return;\n                }\n                dataSource.addEventListener(MapViewEventNames.Update, () => {\n                    this.update();\n                });\n\n                dataSource.setTheme(this.m_theme);\n\n                this.m_connectedDataSources.add(dataSource.name);\n\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name\n                });\n\n                this.update();\n            })\n            .catch(error => {\n                logger.error(\n                    `Failed to connect to datasource ${dataSource.name}: ${error.message}`\n                );\n\n                this.m_failedDataSources.add(dataSource.name);\n                this.dispatchEvent({\n                    type: MapViewEventNames.DataSourceConnect,\n                    dataSourceName: dataSource.name,\n                    error\n                });\n            });\n    }\n\n    /**\n     * Removes [[DataSource]] from this `MapView`.\n     *\n     * @param dataSource The data source to be removed\n     */\n    removeDataSource(dataSource: DataSource) {\n        const dsIndex = this.m_tileDataSources.indexOf(dataSource);\n        if (dsIndex === -1) {\n            return;\n        }\n        dataSource.detach(this);\n\n        this.m_visibleTiles.removeDataSource(dataSource);\n        this.m_tileDataSources.splice(dsIndex, 1);\n        this.m_connectedDataSources.delete(dataSource.name);\n        this.m_failedDataSources.delete(dataSource.name);\n\n        if (this.m_backgroundDataSource) {\n            this.m_backgroundDataSource.updateStorageLevelOffset();\n        }\n\n        this.update();\n    }\n\n    /**\n     * Access the `VisibleTileSet` to get access to all current datasources and their visible tiles.\n     */\n    get visibleTileSet(): VisibleTileSet {\n        return this.m_visibleTiles;\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        this.m_textElementsRenderer.addOverlayText(textElements);\n        this.update();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_textElementsRenderer.clearOverlayText();\n    }\n\n    /**\n     * The method that sets the camera to the desired angle (`tiltDeg`) and `distance` (in meters)\n     * to the `target` location, from a certain heading (`headingAngle`).\n     *\n     * @param target The location to look at.\n     * @param distance The distance of the camera to the target in meters.\n     * @param tiltDeg The camera tilt angle in degrees (0 is vertical), curbed below 89deg.\n     * @param headingDeg The camera heading angle in degrees and clockwise (as opposed to yaw),\n     * starting north.\n     */\n    lookAt(\n        target: GeoCoordinates,\n        distance: number,\n        tiltDeg: number = 0,\n        headingDeg: number = 0\n    ): void {\n        const limitedTilt = Math.min(MapViewUtils.MAX_TILT_DEG, tiltDeg);\n        // MapViewUtils#setRotation uses pitch, not tilt, which is different in sphere projection.\n        // But in sphere, in the tangent space of the target of the camera, pitch = tilt. So, put\n        // the camera on the target, so the tilt can be passed to getRotation as a pitch.\n        MapViewUtils.getCameraRotationAtTarget(\n            this.projection,\n            target,\n            -headingDeg,\n            limitedTilt,\n            this.camera.quaternion\n        );\n        MapViewUtils.getCameraPositionFromTargetCoordinates(\n            target,\n            distance,\n            -headingDeg,\n            limitedTilt,\n            this.projection,\n            this.camera.position\n        );\n        this.camera.updateMatrixWorld(true);\n        // TODO: Consider forcing entire cameras update, see: [[updateCameras]]\n        this.m_targetGeoPos.copy(target);\n        this.m_targetWorldPos.copy(this.projection.projectPoint(target));\n        this.m_targetDistance = distance;\n    }\n\n    /**\n     * Moves the camera to the specified [[GeoCoordinates]], sets the desired `zoomLevel` and\n     * adjusts the yaw and pitch. The pitch of the camera is always curbed so that the camera cannot\n     * look above the horizon. This paradigm is necessary in [[MapControls]], where the center of \\\n     * the screen is used for the orbiting interaction (3 fingers / right mouse button).\n     *\n     * @param geoPos Geolocation to move the camera to.\n     * @param zoomLevel Desired zoom level.\n     * @param yawDeg Camera yaw in degrees, counter-clockwise (as opposed to heading), starting\n     * north.\n     * @param pitchDeg Camera pitch in degrees.\n     */\n    setCameraGeolocationAndZoom(\n        geoPos: GeoCoordinates,\n        zoomLevel: number,\n        yawDeg: number = 0,\n        pitchDeg: number = 0\n    ): void {\n        this.geoCenter = geoPos;\n        let limitedPitch = Math.min(89, pitchDeg); // 90 leads to imprecision issues.\n        if (this.projection.type === ProjectionType.Spherical) {\n            const maxPitchRadWithCurvature = Math.asin(\n                EarthConstants.EQUATORIAL_RADIUS /\n                    (MapViewUtils.calculateDistanceToGroundFromZoomLevel(this, zoomLevel) +\n                        EarthConstants.EQUATORIAL_RADIUS)\n            );\n            const maxPitchDegWithCurvature = THREE.Math.radToDeg(maxPitchRadWithCurvature);\n            limitedPitch = Math.min(limitedPitch, maxPitchDegWithCurvature);\n        }\n        MapViewUtils.zoomOnTargetPosition(this, 0, 0, zoomLevel);\n        MapViewUtils.setRotation(this, yawDeg, limitedPitch);\n        this.update();\n    }\n\n    /**\n     * Returns `true` if this `MapView` is constantly redrawing the scene.\n     */\n    get animating(): boolean {\n        return this.m_animationCount > 0;\n    }\n\n    /**\n     * Begin animating the scene.\n     */\n    beginAnimation() {\n        if (this.m_animationCount++ === 0) {\n            if (!this.m_updatePending) {\n                this.m_updatePending = true;\n                this.drawFrame();\n            }\n            ANIMATION_STARTED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_STARTED_EVENT);\n        }\n    }\n\n    /**\n     * Stop animating the scene.\n     */\n    endAnimation() {\n        if (this.m_animationCount > 0) {\n            --this.m_animationCount;\n        }\n\n        if (this.m_animationCount === 0) {\n            ANIMATION_FINISHED_EVENT.time = Date.now();\n            this.dispatchEvent(ANIMATION_FINISHED_EVENT);\n        }\n    }\n\n    /**\n     * Returns `true` if the camera moved in the last frame.\n     */\n    get cameraIsMoving() {\n        return this.m_movementDetector.cameraIsMoving;\n    }\n\n    /**\n     * Returns `true` if the current frame will immediately be followed by another frame.\n     */\n    get isDynamicFrame(): boolean {\n        return (\n            this.cameraIsMoving ||\n            this.animating ||\n            this.m_updatePending ||\n            this.m_animatedExtrusionHandler.isAnimating\n        );\n    }\n\n    /**\n     * Returns the ratio between a pixel and a world unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get pixelToWorld(): number {\n        if (this.m_pixelToWorld === undefined) {\n            // At this point fov calculation should be always defined.\n            assert(this.m_options.fovCalculation !== undefined);\n            // NOTE: Look at distance is the distance to camera focus (and pivot) point.\n            // In screen space this point is located in the center of canvas.\n            // Given that zoom level is not modified (clamped by camera pitch), the following\n            // formulas are all equivalent:\n            // lookAtDistance = (EQUATORIAL_CIRCUMFERENCE * focalLength) / (256 * zoomLevel^2);\n            // lookAtDistance = abs(cameraPos.z) / cos(cameraPitch);\n            // Here we may use precalculated target distance (once pre frame):\n            const lookAtDistance = this.m_targetDistance;\n\n            // Find world space object size that corresponds to one pixel on screen.\n            this.m_pixelToWorld = MapViewUtils.calculateWorldSizeByFocalLength(\n                this.m_focalLength,\n                lookAtDistance,\n                1\n            );\n        }\n        return this.m_pixelToWorld;\n    }\n\n    /**\n     * Returns the ratio between a world and a pixel unit for the current camera (in the center of\n     * the camera projection).\n     */\n    get worldToPixel() {\n        return 1.0 / this.pixelToWorld;\n    }\n\n    get pixelRatio(): number {\n        if (this.m_pixelRatio !== undefined) {\n            return this.m_pixelRatio;\n        }\n        return typeof window !== \"undefined\" && window.devicePixelRatio !== undefined\n            ? window.devicePixelRatio\n            : 1.0;\n    }\n\n    /**\n     * PixelRatio in the WebGlRenderer. May contain values > 1.0 for high resolution screens\n     * (HiDPI).\n     *\n     * A value of `undefined` will make the getter return `window.devicePixelRatio`, setting a value\n     * of `1.0` will disable the use of HiDPI on all devices.\n     *\n     * @note Since the current pixelRatio may have been used in some calculations (e.g. the icons)\n     * they may appear in the wrong size now. To ensure proper display of data, a call to\n     * `clearTileCache()` is required if the pixelRatio is changed after tiles have been loaded.\n     *\n     * @memberof MapView\n     */\n    set pixelRatio(pixelRatio: number) {\n        this.m_pixelRatio = pixelRatio;\n        if (this.renderer.getPixelRatio() !== this.pixelRatio) {\n            this.renderer.setPixelRatio(this.pixelRatio);\n        }\n    }\n\n    /**\n     * PixelRatio ratio for rendering when the camera is moving or an animation is running. Useful\n     * when rendering on high resolution displays with low performance GPUs that may be\n     * fill-rate-limited.\n     *\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. Values between 0.5 and\n     * `window.devicePixelRatio` can be tried to give  good results. The value should not be larger\n     * than `window.devicePixelRatio`.\n     *\n     * @note Since no anti-aliasing is applied during dynamic rendering with `dynamicPixelRatio`\n     * defined, visual artifacts may occur, especially with thin lines..\n     *\n     * @note The resolution of icons and text labels is not affected.\n     *\n     * @default `undefined`\n     */\n    set dynamicPixelRatio(ratio: number | undefined) {\n        this.mapRenderingManager.lowResPixelRatio = ratio;\n    }\n\n    get dynamicPixelRatio(): number | undefined {\n        return this.mapRenderingManager.lowResPixelRatio;\n    }\n\n    /**\n     * Returns the screen position of the given geo coordinates.\n     *\n     * @param geoPos The geo coordinates.\n     * @returns The screen position in CSS/client coordinates (no pixel ratio applied) or\n     * `undefined`.\n     */\n    getScreenPosition(geoPos: GeoCoordinates): THREE.Vector2 | undefined {\n        this.projection.projectPoint(geoPos, cache.vector3[0]);\n        const p = this.m_screenProjector.project(cache.vector3[0]);\n        if (p !== undefined) {\n            const { width, height } = this.getCanvasClientSize();\n            p.x = p.x + width / 2;\n            p.y = height - (p.y + height / 2);\n        }\n        return p;\n    }\n\n    /**\n     * Returns a ray caster using the supplied screen positions.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     *\n     * @alpha\n     *\n     * @return Raycaster with origin at the camera and direction based on the supplied x / y screen\n     * points.\n     */\n    raycasterFromScreenPoint(x: number, y: number): THREE.Raycaster {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_rteCamera);\n        return this.m_raycaster;\n    }\n\n    /**\n     * Returns the world space position from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getWorldPositionAt(x: number, y: number): THREE.Vector3 | null {\n        this.m_raycaster.setFromCamera(this.getNormalizedScreenCoordinates(x, y), this.m_camera);\n        return this.projection.type === ProjectionType.Spherical\n            ? this.m_raycaster.ray.intersectSphere(this.m_sphere, cache.vector3[0])\n            : this.m_raycaster.ray.intersectPlane(this.m_plane, cache.vector3[0]);\n    }\n\n    /**\n     * Returns the [[GeoCoordinates]] from the given screen position. The return value can be\n     * `null`, in case the camera is facing the horizon and the given `(x, y)` value is not\n     * intersecting the ground plane.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getGeoCoordinatesAt(x: number, y: number): GeoCoordinates | null {\n        const worldPosition = this.getWorldPositionAt(x, y);\n        if (!worldPosition) {\n            return null;\n        }\n        return this.projection.unprojectPoint(worldPosition);\n    }\n\n    /**\n     * Returns the normalized screen coordinates from the given pixel position.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     */\n    getNormalizedScreenCoordinates(x: number, y: number): THREE.Vector3 {\n        // use clientWidth and clientHeight as it does not apply the pixelRatio and\n        // therefore supports also HiDPI devices\n        const { width, height } = this.getCanvasClientSize();\n        return new THREE.Vector3((x / width) * 2 - 1, -((y / height) * 2) + 1, 0);\n    }\n\n    /**\n     * Do a raycast on all objects in the scene. Useful for picking. Limited to objects that\n     * THREE.js can raycast, the solid lines that get their geometry in the shader cannot be tested\n     * for intersection.\n     *\n     * Note, if a [[DataSource]] adds an [[Object3D]] to a [[Tile]], it will be only pickable once\n     * [[MapView.render]] has been called, this is because [[MapView.render]] method creates the\n     * internal three.js root [[Object3D]] which is used in the [[PickHandler]] internally.\n     * This method will not test for intersection custom objects added to the scene by for\n     * example calling directly the [[scene.add]] method from THREE.\n     *\n     * @param x The X position in css/client coordinates (without applied display ratio).\n     * @param y The Y position in css/client coordinates (without applied display ratio).\n     * @returns The list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        return this.m_pickHandler.intersectMapObjects(x, y);\n    }\n\n    /**\n     * Resize the HTML canvas element and the THREE.js `WebGLRenderer`.\n     *\n     * @param width The new width.\n     * @param height The new height.\n     */\n    resize(width: number, height: number) {\n        this.m_renderer.setSize(width, height, false);\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        if (this.mapRenderingManager !== undefined) {\n            this.mapRenderingManager.setSize(width, height);\n        }\n\n        if (this.collisionDebugCanvas !== undefined) {\n            this.collisionDebugCanvas.width = width;\n            this.collisionDebugCanvas.height = height;\n        }\n\n        this.updateCameras();\n        this.update();\n\n        this.dispatchEvent({\n            type: MapViewEventNames.Resize,\n            size: {\n                width,\n                height\n            }\n        });\n    }\n\n    /**\n     * Redraws scene immediately\n     *\n     * @note Before using this method, set `synchronousRendering` to `true`\n     * in the [[MapViewOptions]]\n     */\n    renderSync() {\n        this.renderFunc(PerformanceTimer.now());\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     */\n    update() {\n        this.dispatchEvent(UPDATE);\n\n        if (this.m_updatePending) {\n            return;\n        } // compress the update request\n\n        this.m_updatePending = true;\n\n        if (this.animating) {\n            return;\n        } // nothing to do\n\n        this.drawFrame();\n    }\n\n    /**\n     * Returns `true` if an update has already been requested, such that after a currently rendering\n     * frame, the next frame will be rendered immediately.\n     */\n    get updatePending(): boolean {\n        return this.m_updatePending;\n    }\n\n    /**\n     * Requests a redraw of the scene.\n     * @deprecated Use the [[update]] method instead.\n     */\n    requestUpdateIfNeeded() {\n        this.update();\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]s. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSourceName?: string) {\n        if (dataSourceName !== undefined) {\n            const dataSource = this.getDataSourceByName(dataSourceName);\n            if (dataSource) {\n                this.m_visibleTiles.clearTileCache(dataSource);\n                dataSource.clearCache();\n            }\n        } else {\n            this.m_visibleTiles.clearTileCache();\n            this.m_tileDataSources.forEach(dataSource => dataSource.clearCache());\n        }\n\n        if (this.m_elevationProvider !== undefined) {\n            this.m_elevationProvider.clearCache();\n        }\n    }\n\n    /**\n     * Apply visitor to all visible tiles.\n     *\n     * @param fun Visitor function\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachVisibleTile(fun);\n    }\n\n    /**\n     * Apply a visitor function to all tiles in the cache.\n     *\n     * @param visitor Visitor function\n     */\n    forEachCachedTile(visitor: (tile: Tile) => void) {\n        this.m_visibleTiles.forEachCachedTile(visitor);\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     * If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        this.m_visibleTiles.markTilesDirty(dataSource);\n    }\n\n    /**\n     * Sets the DataSource which contains the elevations, the elevation range source, and the\n     * elevation provider. Only a single elevation source is possible per [[MapView]]\n     *\n     * If the terrain-datasource is merged with this repository, we could internally construct\n     * the [[ElevationRangeSource]] and the [[ElevationProvider]] and access would be granted to\n     * the application when it asks for it, to simplify the API.\n     *\n     * @param elevationSource The datasource containing the terrain tiles.\n     * @param elevationRangeSource Allows access to the elevation min / max per tile.\n     * @param elevationProvider Allows access to the elevation at a given location or a ray\n     *      from the camera.\n     */\n    setElevationSource(\n        elevationSource: DataSource,\n        elevationRangeSource: ElevationRangeSource,\n        elevationProvider: ElevationProvider\n    ) {\n        // Try to remove incase this method was already called, will do nothing if it doesn't exist.\n        this.removeDataSource(elevationSource);\n        this.addDataSource(elevationSource);\n        this.m_elevationRangeSource = elevationRangeSource;\n        this.m_elevationRangeSource.connect();\n        this.m_elevationProvider = elevationProvider;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(true);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback((tile: Tile) => {\n            overlayOnElevation(tile);\n        });\n        this.clearTileCache();\n    }\n\n    /**\n     * Clears any elevation sources and provider previously set.\n     * @param elevationSource The datasource to be cleared.\n     */\n    clearElevationSource(elevationSource: DataSource) {\n        this.removeDataSource(elevationSource);\n        this.m_elevationRangeSource = undefined;\n        this.m_elevationProvider = undefined;\n        this.dataSources.forEach(dataSource => {\n            dataSource.setEnableElevationOverlay(false);\n        });\n        this.m_tileGeometryManager.setTileUpdateCallback(undefined);\n        this.clearTileCache();\n    }\n\n    /**\n     * Public access to [[MapViewFog]] allowing to toggle it by setting its `enabled` property.\n     */\n    get fog(): MapViewFog {\n        return this.m_fog;\n    }\n\n    private setPostEffects() {\n        // First clear all the effects, then enable them from what is specified.\n        this.mapRenderingManager.bloom.enabled = false;\n        this.mapRenderingManager.outline.enabled = false;\n        this.mapRenderingManager.vignette.enabled = false;\n        this.mapRenderingManager.sepia.enabled = false;\n\n        if (this.m_postEffects !== undefined) {\n            if (this.m_postEffects.bloom !== undefined) {\n                this.mapRenderingManager.bloom = this.m_postEffects.bloom;\n            }\n            if (this.m_postEffects.outline !== undefined) {\n                this.mapRenderingManager.outline.enabled = this.m_postEffects.outline.enabled;\n                this.mapRenderingManager.updateOutline(this.m_postEffects.outline);\n            }\n            if (this.m_postEffects.vignette !== undefined) {\n                this.mapRenderingManager.vignette = this.m_postEffects.vignette;\n            }\n            if (this.m_postEffects.sepia !== undefined) {\n                this.mapRenderingManager.sepia = this.m_postEffects.sepia;\n            }\n        }\n    }\n\n    /**\n     * Returns the elevation provider.\n     */\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_elevationProvider;\n    }\n\n    /**\n     * Plug-in PolarTileDataSource for spherical projection and plug-out otherwise\n     */\n    private updatePolarDataSource() {\n        const dataSource = this.m_polarDataSource;\n        if (this.m_enablePolarDataSource === true && dataSource !== undefined) {\n            const twinDataSource = this.getDataSourceByName(dataSource.name);\n\n            if (this.projection.type === ProjectionType.Spherical) {\n                if (twinDataSource === undefined) {\n                    this.addDataSource(dataSource);\n                }\n            } else {\n                if (twinDataSource !== undefined) {\n                    this.removeDataSource(dataSource);\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates the camera and the projections and resets the screen collisions,\n     * note, setupCamera must be called before this is called.\n     * @param viewRanges optional parameter that supplies new view ranges, most importantly\n     * near/far clipping planes distance. If parameter is not provided view ranges will be\n     * calculated from [[ClipPlaneEvaluator]] used in [[VisibleTileSet]].\n     */\n    private updateCameras(viewRanges?: ViewRanges) {\n        const { width, height } = this.m_renderer.getSize(cache.vector2[0]);\n        this.m_camera.aspect =\n            this.m_forceCameraAspect !== undefined ? this.m_forceCameraAspect : width / height;\n        this.setFovOnCamera(this.m_options.fovCalculation!, height);\n\n        // When calculating clip planes account for the highest building on the earth,\n        // multiplying its height by projection scaling factor. This approach assumes\n        // constantHeight property of extruded polygon technique is set as default false,\n        // otherwise the near plane margins will be bigger then required, but still correct.\n        const projectionScale = this.projection.getScaleFactor(this.camera.position);\n        const maxGeometryHeightScaled =\n            projectionScale *\n            this.m_tileDataSources.reduce((r, ds) => Math.max(r, ds.maxGeometryHeight), 0);\n\n        // Copy all properties from new view ranges to our readonly object.\n        // This allows to keep all view ranges references valid and keeps up-to-date\n        // information within them. Works the same as copping all properties one-by-one.\n        Object.assign(\n            this.m_viewRanges,\n            viewRanges === undefined\n                ? this.m_visibleTiles.updateClipPlanes(maxGeometryHeightScaled)\n                : viewRanges\n        );\n        this.m_camera.near = this.m_viewRanges.near;\n        this.m_camera.far = this.m_viewRanges.far;\n\n        this.m_camera.updateProjectionMatrix();\n        this.m_camera.updateMatrixWorld(false);\n\n        // Update the \"relative to eye\" camera. Copy the public camera parameters\n        // and place the \"relative to eye\" at the world's origin.\n        this.m_rteCamera.copy(this.m_camera);\n        this.m_rteCamera.position.setScalar(0);\n        this.m_rteCamera.updateMatrixWorld(true);\n\n        this.m_screenCamera.left = width / -2;\n        this.m_screenCamera.right = width / 2;\n        this.m_screenCamera.bottom = height / -2;\n        this.m_screenCamera.top = height / 2;\n        this.m_screenCamera.updateProjectionMatrix();\n        this.m_screenCamera.updateMatrixWorld(false);\n\n        this.m_screenProjector.update(this.camera, width, height);\n        this.m_screenCollisions.update(width, height);\n\n        this.m_pixelToWorld = undefined;\n\n        const cameraPitch = MapViewUtils.extractAttitude(this, this.m_camera).pitch;\n        const cameraPosZ = this.getCameraHeightAboveTerrain(TERRAIN_ZOOM_LEVEL);\n        const zoomLevelDistance = cameraPosZ / Math.cos(Math.min(cameraPitch, Math.PI / 3));\n        this.m_zoomLevel = MapViewUtils.calculateZoomLevelFromDistance(this, zoomLevelDistance);\n        this.m_fog.update(this, this.m_viewRanges.maximum);\n\n        const target = MapViewUtils.getWorldTargetFromCamera(this.m_camera, this.projection);\n        if (target !== null) {\n            this.m_targetWorldPos.copy(target);\n            this.m_targetGeoPos = this.projection.unprojectPoint(target);\n            this.m_targetDistance = this.camera.position.distanceTo(target);\n        }\n    }\n\n    /**\n     * Update `Env` instance used for style `Expr` evaluations.\n     */\n    private updateEnv() {\n        this.m_env.entries.$zoom = this.m_zoomLevel;\n\n        // This one introduces unnecessary calculation of pixelToWorld, even if it's barely\n        // used in our styles.\n        this.m_env.entries.$pixelToMeters = this.pixelToWorld;\n\n        this.m_env.entries.$frameNumber = this.m_frameNumber;\n    }\n\n    /**\n     * Returns the height of the camera above the earths surface.\n     *\n     * If there is an ElevationProvider, this is used. Otherwise the projection is used to determine\n     * how high the camera is above the surface.\n     *\n     * @param level Which level to request the surface height from.\n     * @return Height in world units.\n     */\n    private getCameraHeightAboveTerrain(level?: number): number {\n        if (this.elevationProvider !== undefined) {\n            const heightAboveTerrain = this.elevationProvider.getHeight(this.geoCenter, level);\n            if (heightAboveTerrain !== undefined) {\n                const height =\n                    this.projection.unprojectAltitude(this.m_camera.position) - heightAboveTerrain;\n                return Math.max(height, 1);\n            }\n        }\n        return Math.abs(this.projection.groundDistance(this.m_camera.position));\n    }\n\n    private detectCurrentFps(now: number) {\n        // Skip the first frames, they are from not originated from requestAnimationFrame()\n        if (this.m_previousRequestAnimationTime !== undefined && this.m_frameNumber > 5) {\n            const currentFps = 1000 / (now - this.m_previousRequestAnimationTime);\n            this.m_frameTimeRing[this.m_frameTimeIndex % FRAME_RATE_RING_SIZE] = currentFps;\n            this.m_frameTimeIndex++;\n\n            const capturedFrames = Math.min(this.m_frameTimeIndex, FRAME_RATE_RING_SIZE);\n\n            let sum = 0;\n            for (let i = 0; i < capturedFrames; i++) {\n                sum += this.m_frameTimeRing[i];\n            }\n\n            this.m_detectedFps = sum / capturedFrames;\n        }\n        this.m_previousRequestAnimationTime = now;\n    }\n\n    /**\n     * Draw a new frame.\n     */\n    private drawFrame() {\n        if (this.m_drawing || this.m_options.synchronousRendering) {\n            return;\n        }\n        // Cancel an active requestAnimationFrame() cycle. Failure to do this may end up in\n        // rendering multiple times during a single frame.\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        if (this.m_maxFps <= 0) {\n            // Render at maximum FPS.\n            this.m_animationFrameHandle = requestAnimationFrame(this.handleRequestAnimationFrame);\n            return;\n        }\n\n        // Magic ingredient to compensate time flux.\n        const fudgeTimeInMs = 3;\n        const vSyncFrameTime = 1000 / this.m_detectedFps;\n        const frameInterval = 1000 / this.m_maxFps;\n\n        const previousFrameTime =\n            this.m_previousFrameTimeStamp === undefined ? 0 : this.m_previousFrameTimeStamp;\n\n        // Compute a practical value to compare against.\n        const targetTime = previousFrameTime + frameInterval - vSyncFrameTime - fudgeTimeInMs;\n\n        this.m_targetRequestAnimationTime = targetTime;\n        this.postponedAnimationFrame(previousFrameTime);\n    }\n\n    private postponedAnimationFrame(now: number) {\n        if (this.m_targetRequestAnimationTime === undefined) {\n            return;\n        }\n\n        if (this.m_animationFrameHandle !== undefined) {\n            cancelAnimationFrame(this.m_animationFrameHandle);\n            this.m_animationFrameHandle = undefined;\n        }\n\n        this.detectCurrentFps(now);\n\n        this.m_animationFrameHandle = requestAnimationFrame(\n            now > this.m_targetRequestAnimationTime\n                ? this.handleRequestAnimationFrame\n                : this.handlePostponedAnimationFrame\n        );\n    }\n\n    /**\n     * Draw a new frame.\n     */\n    private renderFunc(time: number) {\n        this.render(time);\n    }\n\n    /**\n     * Returns the list of the enabled data sources.\n     */\n    private getEnabledTileDataSources(): DataSource[] {\n        // ### build this list once decoders && datasources are ready\n\n        const enabledDataSources: DataSource[] = [];\n\n        for (const dataSource of this.m_tileDataSources) {\n            if (this.isDataSourceEnabled(dataSource)) {\n                enabledDataSources.push(dataSource);\n            }\n        }\n\n        return enabledDataSources;\n    }\n\n    /**\n     * Renders the current frame.\n     */\n    private render(time: number): void {\n        if (this.m_drawing) {\n            return;\n        }\n        ++this.m_frameNumber;\n\n        const stats = PerformanceStatistics.instance;\n        const gatherStatistics: boolean = stats.enabled;\n\n        const frameStartTime = time;\n\n        RENDER_EVENT.time = time;\n        this.dispatchEvent(RENDER_EVENT);\n\n        let currentFrameEvent: FrameStats | undefined;\n\n        if (gatherStatistics) {\n            currentFrameEvent = stats.currentFrame;\n            currentFrameEvent.setValue(\"renderCount.frameNumber\", this.m_frameNumber);\n\n            if (this.m_previousFrameTimeStamp !== undefined) {\n                const timeSincePreviousFrame = frameStartTime - this.m_previousFrameTimeStamp;\n                if (gatherStatistics) {\n                    currentFrameEvent.setValue(\"render.fullFrameTime\", timeSincePreviousFrame);\n                    // For convenience and easy readability\n                    currentFrameEvent.setValue(\"render.fps\", 1000 / timeSincePreviousFrame);\n                }\n            }\n        }\n\n        this.m_previousFrameTimeStamp = frameStartTime;\n\n        let setupTime: number | undefined;\n        let cullTime: number | undefined;\n        let textPlacementTime: number | undefined;\n        let drawTime: number | undefined;\n        let textDrawTime: number | undefined;\n        let endTime: number | undefined;\n\n        this.m_renderer.info.reset();\n\n        this.m_updatePending = false;\n        this.m_thisFrameTilesChanged = undefined;\n\n        this.m_drawing = true;\n\n        if (this.m_renderer.getPixelRatio() !== this.pixelRatio) {\n            this.m_renderer.setPixelRatio(this.pixelRatio);\n        }\n\n        this.updateCameras();\n        this.updateEnv();\n\n        this.m_renderer.clear();\n\n        // clear the scene\n        while (this.m_mapTilesRoot.children.length > 0) {\n            this.m_mapTilesRoot.remove(this.m_mapTilesRoot.children[0]);\n        }\n\n        if (gatherStatistics) {\n            setupTime = PerformanceTimer.now();\n        }\n\n        // TBD: Update renderList only any of its params (camera, etc...) has changed.\n        if (!this.lockVisibleTileSet) {\n            const viewRangesStatus = this.m_visibleTiles.updateRenderList(\n                this.storageLevel,\n                Math.floor(this.zoomLevel),\n                this.getEnabledTileDataSources(),\n                this.m_elevationRangeSource\n            );\n            // View ranges has changed due to features (with elevation) that affects clip planes\n            // positioning, update cameras with new clip planes positions.\n            if (viewRangesStatus.viewRangesChanged) {\n                this.updateCameras(viewRangesStatus.viewRanges);\n            }\n        }\n\n        if (gatherStatistics) {\n            cullTime = PerformanceTimer.now();\n        }\n\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        // no need to check everything if we're not going to create text renderer.\n        renderList.forEach(({ zoomLevel, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                this.renderTileObjects(tile, zoomLevel);\n\n                //We know that rendered tiles are visible (in the view frustum), so we update the\n                //frame number, note we don't do this for the visibleTiles because some may still be\n                //loading (and therefore aren't visible in the sense of being seen on the screen).\n                //Note also, this number isn't currently used anywhere so should be considered to be\n                //removed in the future (though could be good for debugging purposes).\n                tile.frameNumLastVisible = this.m_frameNumber;\n            });\n        });\n\n        // Check if this is the time to place the labels for the first time. Pretty much everything\n        // should have been loaded, and no animation should be running.\n        if (\n            !this.m_initialTextPlacementDone &&\n            !this.m_firstFrameComplete &&\n            !this.isDynamicFrame &&\n            !this.m_themeIsLoading &&\n            this.m_poiTableManager.finishedLoading &&\n            this.m_visibleTiles.allVisibleTilesLoaded &&\n            this.m_connectedDataSources.size + this.m_failedDataSources.size ===\n                this.m_tileDataSources.length &&\n            !this.m_textElementsRenderer.initializing &&\n            !this.m_textElementsRenderer.loading\n        ) {\n            this.m_initialTextPlacementDone = true;\n        }\n\n        this.m_mapAnchors.children.forEach((childObject: MapAnchor) => {\n            if (childObject.geoPosition === undefined) {\n                return;\n            }\n            this.projection.projectPoint(childObject.geoPosition, childObject.position);\n            childObject.position.sub(this.camera.position);\n        });\n\n        this.m_animatedExtrusionHandler.zoom = this.m_zoomLevel;\n\n        if (currentFrameEvent !== undefined) {\n            // Make sure the counters all have a value.\n            currentFrameEvent.addValue(\"renderCount.numTilesRendered\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesVisible\", 0);\n            currentFrameEvent.addValue(\"renderCount.numTilesLoading\", 0);\n\n            // Increment the counters for all data sources.\n            renderList.forEach(({ zoomLevel, renderedTiles, visibleTiles, numTilesLoading }) => {\n                currentFrameEvent!.addValue(\"renderCount.numTilesRendered\", renderedTiles.size);\n                currentFrameEvent!.addValue(\"renderCount.numTilesVisible\", visibleTiles.length);\n                currentFrameEvent!.addValue(\"renderCount.numTilesLoading\", numTilesLoading);\n            });\n        }\n\n        if (this.m_movementDetector.checkCameraMoved(this, time)) {\n            const { yaw, pitch, roll } = MapViewUtils.extractAttitude(this, this.camera);\n            const { latitude, longitude, altitude } = this.geoCenter;\n            this.dispatchEvent({\n                type: MapViewEventNames.CameraPositionChanged,\n                latitude,\n                longitude,\n                altitude,\n                yaw,\n                pitch,\n                roll,\n                zoom: this.zoomLevel\n            });\n        }\n\n        // The camera used to render the scene.\n        const camera = this.m_pointOfView !== undefined ? this.m_pointOfView : this.m_rteCamera;\n\n        if (this.renderLabels) {\n            this.prepareRenderTextElements(time);\n        }\n\n        if (gatherStatistics) {\n            textPlacementTime = PerformanceTimer.now();\n        }\n        if (this.m_skyBackground !== undefined && this.projection.type === ProjectionType.Planar) {\n            this.m_skyBackground.updateCamera(this.m_camera);\n        }\n\n        this.mapRenderingManager.render(\n            this.m_renderer,\n            this.m_scene,\n            camera,\n            !this.isDynamicFrame\n        );\n\n        if (gatherStatistics) {\n            drawTime = PerformanceTimer.now();\n        }\n\n        if (this.renderLabels) {\n            this.finishRenderTextElements();\n        }\n\n        if (gatherStatistics) {\n            textDrawTime = PerformanceTimer.now();\n        }\n\n        if (!this.m_firstFrameRendered) {\n            this.m_firstFrameRendered = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrame\", time);\n            }\n\n            FIRST_FRAME_EVENT.time = time;\n            this.dispatchEvent(FIRST_FRAME_EVENT);\n        }\n\n        this.m_visibleTiles.disposePendingTiles();\n\n        this.m_drawing = false;\n\n        if (this.animating || this.m_updatePending) {\n            this.drawFrame();\n        }\n\n        this.checkCopyrightUpdates();\n\n        if (currentFrameEvent !== undefined) {\n            endTime = PerformanceTimer.now();\n\n            currentFrameEvent.setValue(\"render.setupTime\", setupTime! - frameStartTime);\n            currentFrameEvent.setValue(\"render.cullTime\", cullTime! - setupTime!);\n            currentFrameEvent.setValue(\"render.textPlacementTime\", textPlacementTime! - cullTime!);\n            currentFrameEvent.setValue(\"render.drawTime\", drawTime! - textPlacementTime!);\n            currentFrameEvent.setValue(\"render.textDrawTime\", textDrawTime! - drawTime!);\n            currentFrameEvent.setValue(\"render.cleanupTime\", endTime - textDrawTime!);\n            currentFrameEvent.setValue(\"render.frameRenderTime\", endTime - frameStartTime);\n\n            PerformanceStatistics.instance.storeFrameInfo(this.m_renderer.info);\n        }\n\n        DID_RENDER_EVENT.time = time;\n        this.dispatchEvent(DID_RENDER_EVENT);\n\n        // After completely rendering this frame, it is checked if this frame was the first complete\n        // frame, with no more tiles, geometry and labels waiting to be added, and no animation\n        // running. The initial placement of text in this render call may have changed the loading\n        // state of the TextElementsRenderer, so this has to be checked again.\n        if (\n            !this.m_firstFrameComplete &&\n            this.m_initialTextPlacementDone &&\n            !this.isDynamicFrame &&\n            !this.textElementsRenderer.loading\n        ) {\n            this.m_firstFrameComplete = true;\n\n            if (gatherStatistics) {\n                stats.appResults.set(\"firstFrameComplete\", time);\n            }\n\n            FRAME_COMPLETE_EVENT.time = time;\n            this.dispatchEvent(FRAME_COMPLETE_EVENT);\n        }\n    }\n\n    private renderTileObjects(tile: Tile, zoomLevel: number) {\n        const worldOffsetX = tile.computeWorldOffsetX();\n        if (tile.willRender(zoomLevel)) {\n            for (const object of tile.objects) {\n                object.position.copy(tile.center);\n                if (object.displacement !== undefined) {\n                    object.position.add(object.displacement);\n                }\n                object.position.x += worldOffsetX;\n                object.position.sub(this.m_camera.position);\n                if (tile.localTangentSpace) {\n                    object.setRotationFromMatrix(tile.boundingBox.getRotationMatrix());\n                }\n                object.frustumCulled = false;\n                if (object._backupRenderOrder === undefined) {\n                    object._backupRenderOrder = object.renderOrder;\n                }\n\n                const isBuilding =\n                    object.userData !== undefined &&\n                    object.userData.kind !== undefined &&\n                    (object.userData.kind as GeometryKind[]).includes(GeometryKind.Building);\n\n                // When falling back to a parent tile (i.e. tile.levelOffset < 0) there will\n                // be overlaps with the already loaded tiles. Therefore all (flat) objects\n                // in a fallback tile must be shifted, such that their renderOrder is less\n                // than the groundPlane that each neighbouring Tile has (it has a renderOrder\n                // of -10000, see addGroundPlane in TileGeometryCreator), only then can we be\n                // sure that nothing of the parent will be rendered on top of the children,\n                // as such, we shift using the FALLBACK_RENDER_ORDER_OFFSET.\n                // This does not apply to buildings b/c they are 3d and the overlaps\n                // are resolved with a depth prepass. Note we set this always to ensure that if\n                // the Tile is used as a fallback, and then used normally, that we have the correct\n                // renderOrder.\n                object.renderOrder =\n                    object._backupRenderOrder +\n                    (!isBuilding && tile.levelOffset < 0\n                        ? FALLBACK_RENDER_ORDER_OFFSET * tile.levelOffset\n                        : 0);\n\n                this.m_mapTilesRoot.add(object);\n            }\n        }\n        tile.didRender();\n    }\n\n    private prepareRenderTextElements(time: number) {\n        // Disable rendering of text elements for debug camera. TextElements are rendered using an\n        // orthographic camera that covers the entire available screen space. Unfortunately, this\n        // particular camera set up is not compatible with the debug camera.\n        const debugCameraActive = this.m_pointOfView !== undefined;\n\n        if (debugCameraActive) {\n            return;\n        }\n\n        this.m_textElementsRenderer.placeText(this.m_visibleTiles.dataSourceTileList, time);\n    }\n\n    private finishRenderTextElements() {\n        const canRenderTextElements = this.m_pointOfView === undefined;\n\n        if (canRenderTextElements) {\n            // copy far value from scene camera, as the distance to the POIs matter now.\n            this.m_screenCamera.far = this.m_viewRanges.maximum;\n            this.m_textElementsRenderer.renderText(this.m_screenCamera);\n        }\n    }\n\n    private initTheme() {\n        const theme = getOptionValue(this.m_options.theme, MapViewDefaults.theme);\n\n        this.m_themeIsLoading = true;\n        Promise.resolve<string | Theme>(theme)\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => ThemeLoader.load(theme, { uriResolver: this.m_uriResolver }))\n            // tslint:disable-next-line: no-shadowed-variable\n            .then(theme => {\n                this.m_themeIsLoading = false;\n                this.theme = theme;\n            })\n            .catch(error => {\n                this.m_themeIsLoading = false;\n                const themeName =\n                    typeof this.m_options.theme === \"string\" ? ` from ${this.m_options.theme}` : \"\";\n                logger.error(`Failed to load theme${themeName}: ${error}`, error);\n            });\n    }\n\n    private setupCamera(options: MapViewOptions) {\n        const { width, height } = this.getCanvasClientSize();\n\n        const defaultGeoCenter = MapViewDefaults.geoCenter;\n\n        this.projection.projectPoint(defaultGeoCenter, this.m_camera.position);\n\n        if (this.projection.type === ProjectionType.Spherical) {\n            this.m_camera.lookAt(this.scene.position);\n        }\n\n        this.m_targetDistance = defaultGeoCenter.altitude!;\n\n        this.calculateFocalLength(height);\n        this.m_visibleTiles = this.createVisibleTileSet();\n        this.setInitialCameraPosition(options);\n\n        // ### move & customize\n        this.resize(width, height);\n\n        this.m_screenCamera.position.z = 1;\n        this.m_screenCamera.near = 0;\n    }\n\n    private setInitialCameraPosition(options: MapViewOptions) {\n        const target = GeoCoordinates.fromObject(\n            getOptionValue(options.target, MapViewDefaults.target)\n        );\n        target.altitude = 0; // ensure that look at target has height of 0\n        const zoomLevel = getOptionValue(options.zoomLevel, MapViewDefaults.zoomLevel);\n        const tilt = getOptionValue(options.tilt, MapViewDefaults.tilt);\n        const heading = getOptionValue(options.heading, MapViewDefaults.heading);\n\n        this.lookAt(target, 300000, tilt, heading);\n        this.zoomLevel = zoomLevel;\n    }\n\n    private createVisibleTileSet(): VisibleTileSet {\n        const enableMixedLod =\n            this.m_enableMixedLod === undefined\n                ? this.projection.type === ProjectionType.Spherical\n                : this.m_enableMixedLod;\n\n        return new VisibleTileSet(\n            new FrustumIntersection(\n                this.m_camera,\n                this,\n                this.m_visibleTileSetOptions.extendedFrustumCulling,\n                this.m_tileWrappingEnabled,\n                enableMixedLod\n            ),\n            this.m_tileGeometryManager,\n            this.m_visibleTileSetOptions\n        );\n    }\n\n    private updateSkyBackground() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n        const theme = this.m_theme;\n        if (this.m_skyBackground instanceof SkyBackground && theme.sky !== undefined) {\n            // there is a sky in the view and there is a sky option in the theme. Update the colors\n            this.updateSkyBackgroundColors(theme.sky, theme.clearColor);\n        } else if (this.m_skyBackground === undefined && theme.sky !== undefined) {\n            // there is no sky in the view but there is a sky option in the theme\n            this.addNewSkyBackground(theme.sky, theme.clearColor);\n            return;\n        } else if (this.m_skyBackground instanceof SkyBackground && theme.sky === undefined) {\n            // there is a sky in the view, but not in the theme\n            this.removeSkyBackGround();\n        }\n    }\n\n    private addNewSkyBackground(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        this.m_skyBackground = new SkyBackground(sky, this.projection.type, this.m_camera);\n        this.m_scene.background = this.m_skyBackground.texture;\n    }\n\n    private removeSkyBackGround() {\n        this.m_scene.background = null;\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.dispose();\n            this.m_skyBackground = undefined;\n        }\n    }\n\n    private updateSkyBackgroundColors(sky: Sky, clearColor: string | undefined) {\n        if (sky.type === \"gradient\" && (sky as GradientSky).groundColor === undefined) {\n            sky.groundColor = getOptionValue(clearColor, \"#000000\");\n        }\n        if (this.m_skyBackground !== undefined) {\n            this.m_skyBackground.updateTexture(sky, this.projection.type);\n        }\n    }\n\n    private updateLighting() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n        if (theme.clearColor !== undefined) {\n            this.m_renderer.setClearColor(new THREE.Color(theme.clearColor));\n        }\n\n        if (this.m_createdLights) {\n            this.m_createdLights.forEach((light: THREE.Light) => {\n                this.m_scene.remove(light);\n            });\n        }\n        if (theme.lights !== undefined) {\n            this.m_createdLights = [];\n            theme.lights.forEach((lightDescription: Light) => {\n                const light = createLight(lightDescription);\n                if (!light) {\n                    logger.warn(\n                        // tslint:disable-next-line: max-line-length\n                        `MapView: failed to create light ${lightDescription.name} of type ${lightDescription.type}`\n                    );\n                    return;\n                }\n                this.m_scene.add(light);\n                this.m_createdLights!.push(light);\n            });\n        }\n    }\n\n    private movementStarted() {\n        this.m_textElementsRenderer.movementStarted();\n\n        MOVEMENT_STARTED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_STARTED_EVENT);\n    }\n\n    private movementFinished() {\n        this.m_textElementsRenderer.movementFinished();\n\n        MOVEMENT_FINISHED_EVENT.time = Date.now();\n        this.dispatchEvent(MOVEMENT_FINISHED_EVENT);\n\n        // render at the next possible time.\n        if (!this.animating) {\n            if (this.m_movementFinishedUpdateTimerId !== undefined) {\n                clearTimeout(this.m_movementFinishedUpdateTimerId);\n            }\n            this.m_movementFinishedUpdateTimerId = setTimeout(() => {\n                this.m_movementFinishedUpdateTimerId = undefined;\n                this.update();\n            }, 0);\n        }\n    }\n\n    /**\n     * Check if the set of visible tiles changed since the last frame.\n     *\n     * May be called multiple times per frame.\n     *\n     * Equality is computed by creating a string containing the IDs of the tiles.\n     */\n    private checkIfTilesChanged() {\n        if (this.m_thisFrameTilesChanged !== undefined) {\n            return this.m_thisFrameTilesChanged;\n        }\n        const renderList = this.m_visibleTiles.dataSourceTileList;\n\n        const tileIdList: string[] = [];\n\n        tileIdList.length = 0;\n\n        renderList.forEach(({ dataSource, renderedTiles }) => {\n            renderedTiles.forEach(tile => {\n                tileIdList.push(dataSource.name + \"-\" + tile.tileKey.mortonCode());\n            });\n        });\n\n        tileIdList.sort();\n\n        const newTileIds = tileIdList.join(\"#\");\n\n        if (newTileIds !== this.m_lastTileIds) {\n            this.m_lastTileIds = newTileIds;\n            this.m_thisFrameTilesChanged = true;\n        } else {\n            this.m_thisFrameTilesChanged = false;\n        }\n\n        return this.m_thisFrameTilesChanged;\n    }\n\n    private checkCopyrightUpdates() {\n        if (!this.checkIfTilesChanged()) {\n            return;\n        }\n\n        const newCopyrightInfo = this.getRenderedTilesCopyrightInfo();\n        if (newCopyrightInfo === this.m_copyrightInfo) {\n            return;\n        }\n        if (newCopyrightInfo.length === this.m_copyrightInfo.length) {\n            let allEqual = true;\n            for (let i = 0; i < newCopyrightInfo.length; i++) {\n                const a = newCopyrightInfo[i];\n                const b = this.m_copyrightInfo[i];\n                if (a.label !== b.label) {\n                    allEqual = false;\n                    break;\n                }\n            }\n            if (allEqual) {\n                return;\n            }\n        }\n        this.m_copyrightInfo = newCopyrightInfo;\n        this.dispatchEvent(COPYRIGHT_CHANGED_EVENT);\n    }\n\n    private getRenderedTilesCopyrightInfo(): CopyrightInfo[] {\n        let result: CopyrightInfo[] = [];\n        for (const tileList of this.m_visibleTiles.dataSourceTileList) {\n            for (const tile of tileList.renderedTiles.values()) {\n                const tileCopyrightInfo = tile.copyrightInfo;\n                if (tileCopyrightInfo === undefined || tileCopyrightInfo.length === 0) {\n                    continue;\n                }\n                result = CopyrightInfo.mergeArrays(result, tileCopyrightInfo);\n            }\n        }\n        return result;\n    }\n\n    private updateImages() {\n        if (!this.m_theme) {\n            return;\n        }\n\n        const theme = this.m_theme as Theme;\n\n        this.m_imageCache.clear();\n        this.poiManager.clear();\n\n        if (theme.images !== undefined) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                this.m_imageCache.addImage(name, image.url, image.preload === true);\n                if (typeof image.atlas === \"string\") {\n                    this.poiManager.addTextureAtlas(name, image.atlas);\n                }\n            }\n        }\n\n        if (theme.imageTextures !== undefined) {\n            theme.imageTextures.forEach((imageTexture: ImageTexture) => {\n                this.poiManager.addImageTexture(imageTexture);\n            });\n        }\n    }\n\n    private loadPoiTables() {\n        if (this.m_theme === undefined) {\n            return;\n        }\n\n        this.poiTableManager.clear();\n\n        // Add the POI tables defined in the theme.\n        this.poiTableManager\n            .loadPoiTables(this.m_theme as Theme)\n            .then(() => this.update())\n            .catch(() => this.update());\n    }\n\n    private setupStats(enable: boolean) {\n        // tslint:disable-next-line:no-unused-expression\n        new PerformanceStatistics(enable, 1000);\n    }\n\n    private setupRenderer() {\n        this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n\n        this.m_scene.add(this.m_mapTilesRoot);\n        this.m_scene.add(this.m_mapAnchors);\n    }\n\n    private createTextRenderer(): TextElementsRenderer {\n        const updateCallback: ViewUpdateCallback = () => {\n            this.update();\n        };\n\n        return new TextElementsRenderer(\n            new MapViewState(this, this.checkIfTilesChanged.bind(this)),\n            this.m_camera,\n            updateCallback,\n            this.m_screenCollisions,\n            this.m_screenProjector,\n            new TextCanvasFactory(this.m_renderer),\n            this.m_poiManager,\n            new PoiRendererFactory(this),\n            new FontCatalogLoader(this.m_theme),\n            this.m_theme,\n            this.m_options\n        );\n    }\n\n    private resetTextRenderer(): void {\n        const overlayText = this.m_textElementsRenderer.overlayText;\n        this.m_textElementsRenderer = this.createTextRenderer();\n        if (overlayText !== undefined) {\n            this.m_textElementsRenderer.addOverlayText(overlayText);\n        }\n    }\n\n    /**\n     * Default handler for webglcontextlost event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextLost = (event: Event) => {\n        this.dispatchEvent(CONTEXT_LOST_EVENT);\n        logger.warn(\"WebGL context lost\", event);\n    };\n\n    /**\n     * Default handler for webglcontextrestored event.\n     *\n     * Note: The renderer `this.m_renderer` may not be initialized when this function is called.\n     */\n    private onWebGLContextRestored = (event: Event) => {\n        this.dispatchEvent(CONTEXT_RESTORED_EVENT);\n        if (this.m_renderer !== undefined) {\n            if (this.m_theme !== undefined && this.m_theme.clearColor !== undefined) {\n                this.m_renderer.setClearColor(new THREE.Color(this.m_theme.clearColor));\n            } else {\n                this.m_renderer.setClearColor(DEFAULT_CLEAR_COLOR);\n            }\n            this.update();\n        }\n        logger.warn(\"WebGL context restored\", event);\n    };\n\n    private limitFov(fov: number, aspect: number): number {\n        fov = THREE.Math.clamp(fov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n\n        let hFov = THREE.Math.radToDeg(\n            MapViewUtils.calculateHorizontalFovByVerticalFov(THREE.Math.degToRad(fov), aspect)\n        );\n\n        if (hFov > MAX_FIELD_OF_VIEW || hFov < MIN_FIELD_OF_VIEW) {\n            hFov = THREE.Math.clamp(hFov, MIN_FIELD_OF_VIEW, MAX_FIELD_OF_VIEW);\n            fov = THREE.Math.radToDeg(\n                MapViewUtils.calculateVerticalFovByHorizontalFov(THREE.Math.degToRad(hFov), aspect)\n            );\n        }\n        return fov as number;\n    }\n\n    /**\n     * Sets the field of view calculation, and applies it immediately to the camera.\n     *\n     * @param type How to calculate the FOV\n     */\n    private setFovOnCamera(fovCalculation: FovCalculation, height: number) {\n        let fov = 0;\n        if (fovCalculation.type === \"fixed\") {\n            this.calculateFocalLength(height);\n            fov = fovCalculation.fov;\n        } else {\n            assert(this.m_focalLength !== 0);\n            fov = MapViewUtils.calculateFovByFocalLength(this.m_focalLength, height);\n        }\n        this.m_camera.fov = this.limitFov(fov, this.m_camera.aspect);\n    }\n\n    /**\n     * Sets the focal length based on the supplied fov and the height of the canvas. This must be\n     * called at least once. This is necessary to be recalled when the [[FovCalculation]]'s type is\n     * fixed. In such cases, when the height changes, the focal length must be readjusted whereas\n     * the FOV stays the same. The opposite is true for the dynamic case, where the focal length is\n     * fixed but the FOV changes.\n     * @param height Height of the canvas in css / client pixels.\n     */\n    private calculateFocalLength(height: number) {\n        assert(this.m_options.fovCalculation !== undefined);\n        this.m_focalLength = MapViewUtils.calculateFocalLengthByVerticalFov(\n            THREE.Math.degToRad(this.m_options.fovCalculation!.fov),\n            height\n        );\n    }\n\n    /**\n     * Get canvas client size in css/client pixels.\n     *\n     * Supports canvases not attached to DOM, which have 0 as `clientWidth` and `clientHeight` by\n     * calculating it from actual canvas size and current pixel ratio.\n     */\n    private getCanvasClientSize(): { width: number; height: number } {\n        const { clientWidth, clientHeight } = this.canvas;\n        if (\n            clientWidth === 0 ||\n            clientHeight === 0 ||\n            typeof clientWidth !== \"number\" ||\n            typeof clientHeight !== \"number\"\n        ) {\n            const pixelRatio = this.m_renderer.getPixelRatio();\n            return {\n                width: Math.round(this.canvas.width / pixelRatio),\n                height: Math.round(this.canvas.height / pixelRatio)\n            };\n        } else {\n            return { width: clientWidth, height: clientHeight };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst SHIFT_TRANSPARENCY: number = 24;\nconst SHIFT_RED: number = 16;\nconst SHIFT_GREEN: number = 8;\nconst SHIFT_BLUE: number = 0;\n\n// tslint:disable: no-bitwise\n//    Allow bitwise operations for colors decoding\n\n// tslint:disable-next-line: no-bitwise\nconst HEX_FULL_CHANNEL: number = 0xff;\nconst HEX_RGB_MASK: number = 0xffffff;\nconst HEX_TRGB_MASK: number = 0xffffffff;\n\nconst tmpColor = new THREE.Color();\n\n/**\n * Utilities to convert RGBA colors encoded in custom number (hex) format to THREE.Color objects.\n *\n * The functions provided allows for conversion from and to our custom number based color format,\n * which contains transparency, red, green and blue color channels in a way that each channel\n * occupies 8 bits of resulting number (color format 0xTTRRGGBB).\n * In order to preserve compatibility with THREE.Color class and its hexadecimal color\n * representation, we do not store __alpha__ channel in encoded color's number, but replace it\n * with __transparency__ channel, which is simply opposite to alpha:\n * ```transparency = 0xFF - alpha```\n * Such channel value is stored on the oldest bits (octet) in the integral color (numeric) value,\n * so it is fully compatible with THREE.Color numerical representation (@see [[THREE.Color.getHex]],\n * [[THREE.Color.setHex]]).\n * See also [[getHexFromRgba]] and [[getRgbaFromHex]] for more info about conversion.\n */\nexport namespace ColorUtils {\n    /**\n     * Encodes RGBA channels in custom number coded format (represented in hex as 0xTTRRGGBB).\n     *\n     * We do not use direct alpha channel mapping to hex in order to preserve compatibility\n     * with THREE.js color format (0xRRGGBB). This is done by encoding transparency\n     * (255 - alpha) instead of alpha on the oldest bits, shifted by [[SHIFT_TRANSPARENCY]].\n     * This way simple 0xRRGGBB color is equal to 0x00RRGGBB without transparency and\n     * color defining transparency (alpha < 255) is always recognizable by the oldest\n     * bit set:\n     * ```typescript\n     * (color >> SHIFT_TRANSPARENCY) !== 0.\n     * ```\n     * @note All input components are floating points in <0, 1> range (inclusively).\n     * @note Although method encodes transparency channel in single number value, it is still\n     * compatible with THREE.js number based color coding (0xRRGGBB), so you may pass this value to\n     * [[THREE.Color]] c-tor, but keep in mind that transparency will be silently ignored.\n     */\n    export function getHexFromRgba(r: number, g: number, b: number, a: number): number {\n        assert(a >= 0 && a <= 1);\n        const t = HEX_FULL_CHANNEL - Math.floor(a * HEX_FULL_CHANNEL);\n        return (\n            (t << SHIFT_TRANSPARENCY) ^\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encodes RGB all color channels in single number with format 0xRRGGBB.\n     *\n     * All input channels should be in <0, 1> range (inclusively).\n     * See also [[getHexFromRgba]] for more information about [[THREE.Color]] compatibility.\n     *\n     * @note This method is fully compatible with THREE.js color encoding, so\n     * you may pass this value directly to THREE.Color c-tor.\n     */\n    export function getHexFromRgb(r: number, g: number, b: number): number {\n        assert(r >= 0 && r <= 1);\n        assert(g >= 0 && g <= 1);\n        assert(b >= 0 && b <= 1);\n        return (\n            ((r * HEX_FULL_CHANNEL) << SHIFT_RED) ^\n            ((g * HEX_FULL_CHANNEL) << SHIFT_GREEN) ^\n            ((b * HEX_FULL_CHANNEL) << SHIFT_BLUE)\n        );\n    }\n\n    /**\n     * Encode and convert HSL value to number coded color format (0xRRGGBB).\n     *\n     * @see getHexFromRgb.\n     * @param h Hue component value between 0 and 1.\n     * @param s Saturation value between 0 and 1.\n     * @param l Lightness channel between 0 and 1.\n     */\n    export function getHexFromHsl(h: number, s: number, l: number): number {\n        assert(h >= 0 && h <= 1);\n        assert(s >= 0 && s <= 1);\n        assert(l >= 0 && l <= 1);\n        return tmpColor.setHSL(h, s, l).getHex();\n    }\n\n    /**\n     * Retrieve RGBA channels separately from number encoded custom color format.\n     *\n     * Provides an easy way for channels extraction (r, g, b, a) from custom number coded color\n     * format.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns r, g, b, a channels in simple object, where each channel value is saved as floating\n     * point from 0 to 1 inclusively.\n     */\n    export function getRgbaFromHex(hex: number): { r: number; g: number; b: number; a: number } {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return {\n            r: ((hex >> SHIFT_RED) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            g: ((hex >> SHIFT_GREEN) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            b: ((hex >> SHIFT_BLUE) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL,\n            a:\n                (HEX_FULL_CHANNEL - ((hex >> SHIFT_TRANSPARENCY) & HEX_FULL_CHANNEL)) /\n                HEX_FULL_CHANNEL\n        };\n    }\n\n    /**\n     * Determines if number encoded color contains alpha (opacity) defined and different then 255.\n     *\n     * @param hex The number encoded color (0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns True if color has transparency defined.\n     */\n    export function hasAlphaInHex(hex: number): boolean {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex >> SHIFT_TRANSPARENCY !== 0;\n    }\n\n    /**\n     * Retrieves alpha color channel from hex encoded color value.\n     *\n     * @see getHexFromRgba.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns The floating point alpha component in <0, 1> range.\n     */\n    export function getAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return (\n            ((HEX_FULL_CHANNEL - (hex >> SHIFT_TRANSPARENCY)) & HEX_FULL_CHANNEL) / HEX_FULL_CHANNEL\n        );\n    }\n\n    /**\n     * Remove transparency info from the number coded color, makes it compatible with external libs.\n     *\n     * @see getAlphaFromHex.\n     * @param hex The number encoded color value (representable as 0xRRGGBB or 0xTTRRGGBB in hex).\n     * @returns number coded color value representable as 0xRRGGBB in hex.\n     */\n    export function removeAlphaFromHex(hex: number): number {\n        assert((hex & ~HEX_TRGB_MASK) === 0, \"Wrong hex format\");\n        return hex & HEX_RGB_MASK;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Namespace containing useful information when dealing with Unicode's code points.\n */\nexport namespace UnicodeUtils {\n    /**\n     * Range of Unicode code points considered as white space.\n     * https://en.wikipedia.org/wiki/Whitespace_character\n     */\n    export const whiteSpaceRanges = [\n        [0x0009, 0x0009],\n        [0x0020, 0x0020],\n        [0x1680, 0x1680],\n        [0x2000, 0x2006],\n        [0x2008, 0x200a],\n        [0x205f, 0x3000],\n        [0x180e, 0x180e],\n        [0x200b, 0x200d]\n    ];\n\n    /**\n     * Checks if a character should be considered as a white space.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isWhiteSpace(codePoint: number) {\n        for (const range of whiteSpaceRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as `NewLine`.\n     * https://en.wikipedia.org/wiki/Newline#Unicode\n     */\n    export const newLineRanges = [\n        [0x000a, 0x000d],\n        [0x0085, 0x0085],\n        [0x2028, 0x2029]\n    ];\n\n    /**\n     * Checks if a character should be considered as a new line.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isNewLine(codePoint: number) {\n        for (const range of newLineRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Range of Unicode code points considered as non-printable.\n     * https://en.wikipedia.org/wiki/Unicode_control_characters\n     */\n    export const nonPrintableRanges = [\n        [0x0000, 0x001f],\n        [0x007f, 0x009f]\n    ];\n\n    /**\n     * Checks if a character's can be printed (rendered).\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isPrintable(codePoint: number) {\n        for (const range of nonPrintableRanges) {\n            if (codePoint >= range[0] && codePoint <= range[1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Unicode code point direction.\n     */\n    export enum Direction {\n        Neutral = 0.0,\n        Weak = 0.5,\n        LTR = 1.0,\n        RTL = -1.0\n    }\n\n    // TODO: Review/Remove/Add any additional needed blocks (HARP-3330).\n    /**\n     * Unicode Blocks which have inherent RTL direction.\n     * These blocks correspond to the scripts described here:\n     * https://en.wikipedia.org/wiki/Right-to-left#List_of_RTL_scripts\n     */\n    export const rtlBlocks: string[] = [\n        \"Hebrew\",\n        \"Alphabetic Presentation Forms\",\n        \"Arabic\",\n        \"Arabic Supplement\",\n        \"Arabic Extended-A\",\n        \"Arabic Presentation Forms-A\",\n        \"Arabic Presentation Forms-B\",\n        \"Arabic Mathematical Alphabetic Symbols\",\n        \"Indic Siyaq Numbers\",\n        \"Rumi Numeral Symbols\",\n        \"Syriac\",\n        \"Syriac Supplement\",\n        \"Samaritan\",\n        \"Mandaic\",\n        \"Thaana\",\n        \"Mende Kikakui\",\n        \"NKo\",\n        \"Adlam\",\n        \"Hanifi Rohingya\"\n    ];\n\n    /**\n     * ASCII punctuation is considered to have neutral direction:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const neutralBidirectionalRanges = [\n        [0x0020, 0x002f],\n        [0x003a, 0x0040],\n        [0x005b, 0x0060],\n        [0x007b, 0x007e]\n    ];\n\n    /**\n     * Latin and arabic numerals are considered to have weak directionality:\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     * https://en.wikipedia.org/wiki/Arabic_(Unicode_block)#Block\n     */\n    export const weakBidirectionalRanges = [\n        [0x0030, 0x0039],\n        [0x0660, 0x0669],\n        [0x06f0, 0x06f9]\n    ];\n\n    /**\n     * Returns the Unicode's character direction.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param block Character's Unicode block.\n     *\n     * @returns Character's direction.\n     */\n    export function getDirection(codePoint: number, block: string): Direction {\n        // Test for neutral and weak code points first (they're inside LTR/RTL ranges).\n        for (const weakRange of weakBidirectionalRanges) {\n            if (codePoint >= weakRange[0] && codePoint <= weakRange[1]) {\n                return Direction.Weak;\n            }\n        }\n        for (const neutralRange of neutralBidirectionalRanges) {\n            if (codePoint >= neutralRange[0] && codePoint <= neutralRange[1]) {\n                return Direction.Neutral;\n            }\n        }\n\n        // Check for RTL/LTR.\n        const rtl = rtlBlocks.find(element => {\n            return element === block;\n        });\n        if (rtl !== undefined) {\n            return Direction.RTL;\n        } else {\n            return Direction.LTR;\n        }\n    }\n\n    /**\n     * Some punctuation characters (like: (, ), <, >, [,], {, }) need to be mirrored when rendering\n     * a RTL string to preserve their intrinsic meaning.\n     * https://en.wikipedia.org/wiki/Basic_Latin_(Unicode_block)#Table_of_characters\n     */\n    export const rtlMirroredCodePoints = [\n        0x0028,\n        0x0029,\n        0x003c,\n        0x003e,\n        0x005b,\n        0x005d,\n        0x007b,\n        0x007d\n    ];\n\n    /**\n     * Checks if a character should be mirrored on an RTL run.\n     *\n     * @param codePoint Character's Unicode code point.\n     *\n     * @returns Result of the test.\n     */\n    export function isRtlMirrored(codePoint: number): boolean {\n        return (\n            rtlMirroredCodePoints.find(element => {\n                return element === codePoint;\n            }) !== undefined\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeometryKind,\n    GeometryKindSet,\n    ImageTexture,\n    LineMarkerTechnique,\n    PoiStackMode,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport {\n    GlyphData,\n    TextBufferObject,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\nimport * as THREE from \"three\";\n\nimport { ImageItem } from \"../image/Image\";\nimport { PickResult } from \"../PickHandler\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * Additional information for an icon that is to be rendered along with a [[TextElement]].\n */\nexport interface PoiInfo {\n    /**\n     * Technique defining the POI or LineMarker\n     */\n    technique: PoiTechnique | LineMarkerTechnique;\n\n    /**\n     * Name of the [[ImageTexture]].\n     */\n    imageTextureName: string;\n\n    /**\n     * Name of the POI table [[PoiTable]].\n     */\n    poiTableName?: string;\n\n    /**\n     * Name of the POI description in the [[PoiTable]].\n     */\n    poiName?: string;\n\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n\n    /**\n     * If true, the text icon will appear even if the text part is blocked by other labels. Defaults\n     * to `false`.\n     */\n    textIsOptional?: boolean;\n\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, icon will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If isValid is `false`, the icon will no longer be placed or rendered. The reason may be a\n     * missing resource.\n     */\n    isValid?: boolean;\n\n    /**\n     * ID to identify the (POI) icon.\n     */\n    featureId?: number;\n\n    /**\n     * Reference back to owning [[TextElement]].\n     */\n    textElement: TextElement;\n\n    /**\n     * @hidden\n     * If false, text will not be rendered during camera movements. Defaults to `true`;\n     */\n    renderTextDuringMovements?: boolean;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageItem]] once it is resolved.\n     */\n    imageItem?: ImageItem;\n\n    /**\n     * @hidden\n     * Direct access to [[ImageTexture]] once it is resolved.\n     */\n    imageTexture?: ImageTexture;\n\n    /**\n     * @hidden\n     * Layout help: A shield group is for all [[LineMarker]]s that have the same icon and text,\n     * making them the same road shield icon.\n     */\n    shieldGroupIndex?: number;\n\n    /**\n     * @hidden\n     * Internal reference to a render batch, made up of all icons that use the same Material.\n     */\n    poiRenderBatch?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedWidth?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    computedHeight?: number;\n\n    /**\n     * @hidden\n     * Should be computed during loading/initializing of `ImageTexture`.\n     */\n    uvBox?: Math2D.UvBox;\n\n    /**\n     * @hidden\n     * Computed from owning [[TextElement]]. Value is set when `PoiInfo` is assigned to\n     * [[TextElement]].\n     */\n    renderOrder?: number;\n}\n\n/**\n * Return 'true' if the POI has been successfully prepared for rendering.\n *\n * @param poiInfo PoiInfo containing information for rendering the POI icon.\n */\nexport function poiIsRenderable(poiInfo: PoiInfo): boolean {\n    return poiInfo.poiRenderBatch !== undefined;\n}\n\nexport interface TextPickResult extends PickResult {\n    /**\n     * Text of the picked [[TextElement]]\n     */\n    text?: string;\n}\n\n/**\n * State of loading.\n */\nexport enum LoadingState {\n    Requested,\n    Loaded,\n    Initialized\n}\n\n/**\n * `TextElement` is used to create 2D text elements (for example, labels).\n */\nexport class TextElement {\n    /**\n     * Determines visibility. If set to `false`, it will not be rendered.\n     */\n    visible: boolean = true;\n\n    /**\n     * Determines minimum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    minZoomLevel?: number;\n    /**\n     * Determines maximum zoom level for visibility. Can be used to reduce the number of visible\n     * `TextElement`s based on zoom level.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * If `true`, label is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n\n    /**\n     * If `true`, label will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels, the\n     * render order is undefined;\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n\n    /**\n     * Ignore distance limit. Used for label in labeled-icons.\n     */\n    ignoreDistance?: boolean;\n\n    /**\n     * Scaling factor of text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale: number = 0.5;\n\n    /**\n     * Optional user data. Will be retrieved during picking.\n     */\n    userData?: any;\n\n    /**\n     * If specified, determines the render order between `TextElement`s. The number different\n     * renderOrders should be as small as possible, because every specific `renderOrder` may result\n     * in one or more draw calls.\n     *\n     * TextElements with the same integer `renderOrder` will be rendered in the same batch.\n     *\n     * The `renderOrder` of `TextElement`s are only relative to other `TextElement`s, and not other\n     * map elements.\n     *\n     * A `TextElement` with a higher `renderOrder` will be rendered after a `TextElement` with a\n     * lower `renderOrder`.\n     */\n    renderOrder?: number = 0;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    loadingState?: LoadingState;\n\n    /**\n     * If set to `true` the geometry has been already overlaid on elevation.\n     */\n    elevated: boolean = false;\n\n    /**\n     * @hidden\n     * Array storing the style [[GlyphData]] for this `TextElement` to speed up label placement in\n     * [[TextElementsRenderer]]. Valid after `loadingState` is `Initialized`.\n     */\n    glyphs?: GlyphData[];\n\n    /**\n     * @hidden\n     * Array storing the casing (`true`: uppercase, `false`: lowercase) for this `TextElement`.\n     * Used by labels in [[TextElementsRenderer]] to support `SmallCaps`. Valid after `loadingState`\n     * is `Initialized`.\n     */\n    glyphCaseArray?: boolean[];\n\n    /**\n     * Screen space bounds for this `TextElement`. Used by point labels in [[TextElementsRenderer]].\n     * Valid after `loadingState` is `Initialized`.\n     */\n    bounds?: THREE.Box2;\n\n    /**\n     * @hidden\n     * Pre-computed text vertex buffer. Used by point labels in [[TextElementsRenderer]]. Valid\n     * after label becomes visible for the first time.\n     */\n    textBufferObject?: TextBufferObject;\n\n    /**\n     * @hidden\n     * If `true`, the estimated bounding box of the path is too small for the label to fit, so it is\n     * being ignored for rendering in the latest frame.\n     */\n    dbgPathTooSmall?: boolean;\n\n    pathLengthSqr?: number;\n\n    type: TextElementType;\n\n    private m_poiInfo?: PoiInfo;\n\n    private m_renderStyle?: TextRenderStyle;\n\n    private m_layoutStyle?: TextLayoutStyle;\n\n    /**\n     * Creates a new `TextElement`.\n     *\n     * @param text The text to display.\n     * @param points The position or a list of points for a curved text, both in world space.\n     * @param renderParams `TextElement` text rendering parameters.\n     * @param layoutParams `TextElement` text layout parameters.\n     * @param priority The priority of the `TextElement. Elements with the highest priority get\n     *              placed first, elements with priority of `0` are placed last, elements with a\n     *              negative value are always rendered, ignoring priorities and allowing\n     *              overrides.\n     * @param xOffset Optional X offset of this `TextElement` in screen coordinates.\n     * @param yOffset Optional Y offset of this `TextElement` in screen coordinates.\n     * @param featureId Optional number to identify feature (originated from `OmvDataSource`).\n     * @param fadeNear Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label starts fading out (opacity decreases).\n     * @param fadeFar Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the\n     *              label becomes transparent. A value of <= 0.0 disables fading.\n     */\n    constructor(\n        readonly text: string,\n        readonly points: THREE.Vector3[] | THREE.Vector3,\n        readonly renderParams: TextRenderParameters | TextRenderStyle,\n        readonly layoutParams: TextLayoutParameters | TextLayoutStyle,\n        public priority = 0,\n        public xOffset: number = 0,\n        public yOffset: number = 0,\n        public featureId?: number,\n        public style?: string,\n        public fadeNear?: number,\n        public fadeFar?: number,\n        readonly tileOffset?: number\n    ) {\n        if (renderParams instanceof TextRenderStyle) {\n            this.renderStyle = renderParams;\n        }\n        if (layoutParams instanceof TextLayoutStyle) {\n            this.layoutStyle = layoutParams;\n        }\n\n        this.type =\n            points instanceof THREE.Vector3 ? TextElementType.PoiLabel : TextElementType.PathLabel;\n    }\n\n    /**\n     * The text element position or the first point of the path used to render a curved text, both\n     * in world space.\n     */\n    get position(): THREE.Vector3 {\n        if (this.points instanceof Array) {\n            const p = this.points[0];\n            return p;\n        }\n        return this.points as THREE.Vector3;\n    }\n\n    /**\n     * The list of points in world space used to render the text along a path or `undefined`.\n     */\n    get path(): THREE.Vector3[] | undefined {\n        if (this.points instanceof Array) {\n            return this.points;\n        }\n        return undefined;\n    }\n\n    /**\n     * If `true`, `TextElement` is allowed to overlap other labels or icons of lower priority.\n     *\n     * @default `false`\n     */\n    get textMayOverlap(): boolean {\n        return this.mayOverlap === true;\n    }\n\n    set textMayOverlap(mayOverlap: boolean) {\n        this.mayOverlap = mayOverlap;\n    }\n\n    /**\n     * If `true`, `TextElement` will reserve screen space, other markers of lower priority will not\n     * be able to overlap.\n     *\n     * @default `true`\n     */\n    get textReservesSpace(): boolean {\n        return this.reserveSpace !== false;\n    }\n\n    set textReservesSpace(reserveSpace: boolean) {\n        this.reserveSpace = reserveSpace;\n    }\n\n    /**\n     * Contains additional information about icon to be rendered along with text.\n     */\n    get poiInfo(): PoiInfo | undefined {\n        return this.m_poiInfo;\n    }\n\n    set poiInfo(poiInfo: PoiInfo | undefined) {\n        this.m_poiInfo = poiInfo;\n        if (poiInfo !== undefined) {\n            if (this.path !== undefined) {\n                this.type = TextElementType.LineMarker;\n            }\n            const poiRenderOrder = this.renderOrder !== undefined ? this.renderOrder : 0;\n            poiInfo.renderOrder = poiRenderOrder;\n        }\n    }\n\n    /**\n     * @returns The style used to render this text element, undefined if not set yet.\n     */\n    get renderStyle(): TextRenderStyle | undefined {\n        return this.m_renderStyle;\n    }\n\n    /**\n     * Sets style used for text rendering.\n     * @param style The style to use.\n     */\n    set renderStyle(style: TextRenderStyle | undefined) {\n        this.m_renderStyle = style;\n    }\n\n    /**\n     * @returns The style used to layout this text element, undefined if not set yet.\n     */\n    get layoutStyle(): TextLayoutStyle | undefined {\n        return this.m_layoutStyle;\n    }\n\n    /**\n     * Sets the style used for text layout.\n     * @param style The style to use.\n     */\n    set layoutStyle(style: TextLayoutStyle | undefined) {\n        this.m_layoutStyle = style;\n    }\n\n    hasFeatureId(): boolean {\n        return this.featureId !== undefined && this.featureId !== 0;\n    }\n\n    /**\n     * Update the minZoomLevel and maxZoomLevel from the values set in [[PoiInfo]].\n     * Selects the smaller/larger one of the two min/max values for icon and text, because the\n     * TextElement is a container for both.\n     */\n    updateMinMaxZoomLevelsFromPoiInfo() {\n        if (this.poiInfo !== undefined) {\n            if (this.minZoomLevel === undefined) {\n                this.minZoomLevel = MathUtils.min2(\n                    this.poiInfo.iconMinZoomLevel,\n                    this.poiInfo.textMinZoomLevel\n                );\n            }\n            if (this.maxZoomLevel === undefined) {\n                this.maxZoomLevel = MathUtils.max2(\n                    this.poiInfo.iconMaxZoomLevel,\n                    this.poiInfo.textMaxZoomLevel\n                );\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Types of text elements.\n */\nexport enum TextElementType {\n    PoiLabel,\n    PathLabel,\n    LineMarker\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LoggerManager, PerformanceTimer } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"Statistics\");\n\n/**\n * A simple ring buffer to store the last `n` values of the timer. The buffer works on\n * a First-In-First-Out (FIFO) basis.\n */\nexport class RingBuffer<T> {\n    buffer: T[];\n    size: number;\n    head: number;\n    tail: number;\n\n    /**\n     * Sets up the ring buffer.\n     *\n     * @param capacity The buffer's capacity.\n     */\n    constructor(readonly capacity: number) {\n        this.buffer = new Array(capacity);\n        this.capacity = capacity;\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Clears the contents, removes all elements.\n     */\n    clear(): void {\n        this.head = this.tail = this.size = 0;\n    }\n\n    /**\n     * Adds a single element to the ring buffer.\n     *\n     * @param data Data element.\n     */\n    enqOne(data: T): void {\n        let next = this.head + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size < this.capacity) {\n            this.size++;\n        }\n\n        this.buffer[this.head] = data;\n        this.head = next;\n\n        if (this.size === this.capacity) {\n            this.tail = this.head;\n        }\n    }\n\n    /**\n     * Adds one or more elements.\n     *\n     * @param data The elements to add.\n     */\n    enq(...data: T[]): void {\n        for (const v of data) {\n            this.enqOne(v);\n        }\n    }\n\n    /**\n     * Obtains the oldest element (FIFO). May throw an exception if a buffer underrun occurs.\n     * Before calling this method, make sure that `size > 0`.\n     */\n    deq(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        const data = this.buffer[this.tail];\n        let next = this.tail + 1;\n        if (next >= this.capacity) {\n            next = 0;\n        }\n        if (this.size > 0) {\n            this.size--;\n        }\n\n        this.tail = next;\n        return data;\n    }\n\n    /**\n     * Obtains the oldest element (FIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get top(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        return this.buffer[this.tail];\n    }\n\n    /**\n     * Obtains the latest element (LIFO) without removing it. Throws an exception if a buffer is\n     * empty. Before calling this method, make sure that `size > 0`.\n     */\n    get bottom(): T {\n        if (this.size === 0) {\n            throw new Error(\"Ringbuffer underrun\");\n        }\n\n        let previous = this.head - 1;\n        if (previous < 0) {\n            previous = this.capacity - 1;\n        }\n        return this.buffer[previous];\n    }\n\n    /**\n     * Creates an iterator for the buffer.\n     */\n    iterator(): RingBuffer.Iterator<T> {\n        return new RingBuffer.Iterator<T>(this);\n    }\n\n    /**\n     * Returns a copy of the buffer, where the elements are properly sorted from oldest to newest.\n     */\n    asArray(): T[] {\n        const array = new Array<T>();\n        for (let i = 0; i < this.size; i++) {\n            array.push(this.buffer[(this.tail + i) % this.capacity]);\n        }\n        return array;\n    }\n}\n\nexport namespace RingBuffer {\n    /**\n     * A local class for RingBuffer<T>\n     */\n    export class Iterator<T> {\n        /**\n         * Creates an iterator for the ring buffer.\n         *\n         * @param m_buffer `Ringbuffer` to iterate over.\n         * @param m_index Start index.\n         */\n        constructor(private m_buffer: RingBuffer<T>, private m_index: number = 0) {}\n\n        /**\n         * Gets the iterator's current value. This function does not fail even if an overrun occurs.\n         * To detect an overrun, watch the result for [[next]].\n         */\n        get value(): T {\n            return this.m_buffer.buffer[\n                (this.m_buffer.tail + this.m_index) % this.m_buffer.capacity\n            ];\n        }\n\n        /**\n         * Advances the iterator to the next element.\n         *\n         * @returns `true` if the iterator is still valid; `false` if an overrun occurs.\n         */\n        next(): boolean {\n            this.m_index++;\n            return this.m_index < this.m_buffer.size;\n        }\n    }\n}\n\n/**\n * An interface for a Timer class, that abstracts the basic functions of a Timer. Implemented\n * by SimpleTimer, SampledTimer, and MultiStageTimer.\n */\nexport interface Timer {\n    readonly name: string;\n    readonly value?: number;\n\n    /**\n     * Resets value to be able to start again.\n     */\n    reset(): void;\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number;\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number;\n\n    /**\n     * Samples the timer. Requires that the timer has started. This function does not modify\n     * the timer's internal state.\n     *\n     * @returns Current timer value. `-1` if statistics are disabled.\n     */\n    now(): number;\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined): void;\n}\n\n/**\n * A simple timer that stores only the latest measurement.\n */\nexport class SimpleTimer implements Timer {\n    /** `true` if timer has been started. */\n    running = false;\n\n    private m_currentValue?: number;\n\n    constructor(public statistics: Statistics, readonly name: string) {}\n\n    /**\n     * Gets the latest measurement. This function may return `undefined` if no measurement\n     * was done.\n     */\n    get value(): number | undefined {\n        return this.m_currentValue;\n    }\n\n    /**\n     * Sets the measurement value for the amount of time that has elapsed from start() to stop().\n     * Use this function to override the timer's duration.\n     *\n     * @param val The timer's duration.\n     */\n    setValue(val: number | undefined) {\n        this.m_currentValue = val;\n    }\n\n    /**\n     * Resets the value to be able to start again.\n     */\n    reset() {\n        this.m_currentValue = undefined;\n    }\n\n    /**\n     * Starts the timer. Returns the current time, based on `Performance.now()`.\n     */\n    start(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' is already running\");\n        }\n        this.running = true;\n        return (this.m_currentValue = PerformanceTimer.now());\n    }\n\n    /**\n     * Stops the timer. Requires that the timer has started.\n     */\n    stop(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            // this.currentValue is a number now!\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            this.m_currentValue = t;\n            this.setValue(t);\n            this.running = false;\n            return t;\n        }\n    }\n\n    /**\n     * Samples the timer. Requires that the timer has started.\n     *\n     * @returns the current timer value; `-1` if statistics are disabled.\n     */\n    now(): number {\n        if (!this.statistics.enabled) {\n            return -1;\n        }\n        if (!this.running) {\n            throw new Error(\"Timer '\" + this.name + \"' has not been started\");\n        } else {\n            const t = PerformanceTimer.now() - (this.m_currentValue || 0);\n            return t;\n        }\n    }\n}\n\n/**\n * Simple statistics about the values in an array.\n */\nexport interface Stats {\n    /**\n     * The lowest value in the array.\n     */\n    min: number;\n\n    /**\n     * The highest value in the array.\n     */\n    max: number;\n\n    /**\n     * The average duration of all values in the array.\n     */\n    avg: number;\n\n    /**\n     * The median duration of all values in the array.\n     */\n    median: number;\n\n    /**\n     * The 75th percentile median of all values in the array.\n     */\n    median75: number;\n\n    /**\n     * The 90th percentile median of all values in the array.\n     */\n    median90: number;\n\n    /**\n     * The 95th percentile median of all values in the array.\n     */\n    median95: number;\n\n    /**\n     * The 97th percentile median of all values in the array.\n     */\n    median97: number;\n\n    /**\n     * The 99th percentile median of all values in the array.\n     */\n    median99: number;\n\n    /**\n     * The 99.9th percentile median of all values in the array.\n     */\n    median999: number;\n\n    /**\n     * The number of values in the array.\n     */\n    numSamples: number;\n}\n\n/**\n * A timer that stores the last `n` samples in a ring buffer.\n */\nexport class SampledTimer extends SimpleTimer {\n    /**\n     * The number of times the timer has reset.\n     */\n    numResets = 0;\n\n    /**\n     * Maximum samples until the statistics are reset and updated, which may destroy a median\n     * computation.\n     */\n    maxNumSamples = 1000;\n\n    /**\n     * The array of sampled values, its length cannot exceed `maxNumSamples`.\n     */\n    samples = new RingBuffer<number>(this.maxNumSamples);\n\n    /**\n     * Creates a `SampledTimer` instance. Must still be added to statistics if it should be logged!\n     *\n     * @param statistics Statistics to use for management.\n     * @param name Name of the timer. Use colons to build a hierarchy.\n     */\n    constructor(public statistics: Statistics, readonly name: string) {\n        super(statistics, name);\n    }\n\n    /**\n     * Resets the timer and clears all of its historical values.\n     * @override\n     */\n    reset() {\n        super.reset();\n        this.getStats();\n        this.samples.clear();\n        this.numResets++;\n    }\n\n    /**\n     * Add a single measurement to the sample.\n     *\n     * @param val A measurement to add.\n     * @override\n     */\n    setValue(val: number | undefined) {\n        super.setValue(val);\n\n        if (val !== undefined) {\n            this.samples.enqOne(val);\n        }\n    }\n\n    /**\n     * Updates the `min`, `max`, `avg`, and `median` values. Currently, this function is expensive,\n     * as it requires a copy of the sampled values.\n     */\n    getStats(): Stats | undefined {\n        return computeArrayStats(this.samples.asArray());\n    }\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the [[ArrayStats]] for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values. Will be modified (!) by sorting the\n *      entries.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayStats(samples: number[]): Stats | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    samples.sort((a: number, b: number) => {\n        return a - b;\n    });\n\n    const min: number = samples[0];\n    const max: number = samples[samples.length - 1];\n    let median: number;\n    let median75: number;\n    let median90: number;\n    let median95: number;\n    let median97: number;\n    let median99: number;\n    let median999: number;\n\n    if (samples.length === 1) {\n        median75 = median90 = median95 = median97 = median99 = median999 = median = samples[0];\n    } else if (samples.length === 2) {\n        median = samples[0] * 0.5 + samples[1] * 0.5;\n        median75 = median90 = median95 = median97 = median99 = median999 = samples[1];\n    } else {\n        const mid = Math.floor(samples.length / 2);\n        median =\n            samples.length % 2 === 0 ? samples[mid - 1] * 0.5 + samples[mid] * 0.5 : samples[mid];\n\n        const mid75 = Math.round(samples.length * 0.75) - 1;\n        median75 = samples[mid75];\n        const mid90 = Math.round(samples.length * 0.9) - 1;\n        median90 = samples[mid90];\n        const mid95 = Math.round(samples.length * 0.95) - 1;\n        median95 = samples[mid95];\n        const mid97 = Math.round(samples.length * 0.97) - 1;\n        median97 = samples[mid97];\n        const mid99 = Math.round(samples.length * 0.99) - 1;\n        median99 = samples[mid99];\n        const mid999 = Math.round(samples.length * 0.999) - 1;\n        median999 = samples[mid999];\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return {\n        min,\n        max,\n        avg,\n        median,\n        median75,\n        median90,\n        median95,\n        median97,\n        median99,\n        median999,\n        numSamples: samples.length\n    };\n}\n\n/**\n * Only exported for testing\n * @ignore\n *\n * Compute the averages for the passed in array of numbers.\n *\n * @param {number[]} samples Array containing sampled values.\n * @returns {(Stats | undefined)}\n */\nexport function computeArrayAverage(samples: number[]): number | undefined {\n    if (samples.length === 0) {\n        return undefined;\n    }\n\n    let sum = 0;\n\n    for (let i = 0, l = samples.length; i < l; i++) {\n        sum += samples[i];\n    }\n\n    const avg = sum / samples.length;\n\n    return avg;\n}\n\n/**\n * Measures a sequence of connected events, such as multiple processing stages in a function.\n * Each stage is identified with a timer name, that must be a valid timer in the statistics\n * object. Additionally, all timers within a `MultiStageTimer` must be unique.\n *\n * Internally, the `MultiStageTimer` manages a list of timers where at the end of each stage,\n * one timer stops and the next timer starts.\n */\nexport class MultiStageTimer {\n    private currentStage: string | undefined;\n\n    /**\n     * Defines the `MultiStageTimer` with a list of timer names that represent its stages.\n     *\n     * @param statistics The statistics object that manages the timers.\n     * @param name Name of this `MultiStageTimer`.\n     * @param stages List of timer names.\n     */\n    constructor(private statistics: Statistics, readonly name: string, public stages: string[]) {\n        if (stages.length < 1) {\n            throw new Error(\"MultiStageTimer needs stages\");\n        }\n\n        stages.forEach(stage => {\n            if (!statistics.hasTimer(stage)) {\n                throw new Error(\"Unknown timer: \" + stage);\n            }\n        });\n    }\n\n    /**\n     * Gets the timer value for the last stage. If the `MultiStageTimer` did not finish its\n     * last stage, the value is `undefined`.\n     */\n    get value(): number | undefined {\n        return this.statistics.getTimer(this.stages[this.stages.length - 1]).value;\n    }\n\n    /**\n     * Resets the timers across all stages.\n     */\n    reset(): void {\n        if (!this.statistics.enabled) {\n            return;\n        }\n        this.stages.forEach(stage => {\n            this.statistics.getTimer(stage).reset();\n        });\n    }\n\n    /**\n     * Starts the `MultiStageTimer` at its first stage.\n     */\n    start(): number {\n        this.stage = this.stages[0];\n\n        return this.statistics.getTimer(this.stages[0]).value || -1;\n    }\n\n    /**\n     * Stops the `MultiStageTimer`. Returns the measurement of the last stage, which may be\n     * `undefined` if not all stages started.\n     */\n    stop(): number {\n        this.stage = undefined;\n        return this.value !== undefined ? this.value : -1;\n    }\n\n    /**\n     * Gets the current stage.\n     */\n    get stage(): string | undefined {\n        return this.currentStage;\n    }\n\n    /**\n     * Sets the current stage. If a new stage is provided, the current timer (if available) is\n     * stopped, and the next timer is started. If the timer in the next stage is `undefined`,\n     * this is equivalent to calling `stop` on the `MultiStageTimer`.\n     *\n     * @param stage The next stage to start.\n     */\n    set stage(stage: string | undefined) {\n        if (this.currentStage === stage) {\n            return;\n        }\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).stop();\n        }\n\n        this.currentStage = stage;\n\n        if (this.statistics.enabled && this.currentStage !== undefined) {\n            this.statistics.getTimer(this.currentStage).start();\n        }\n    }\n}\n\n/**\n * Manages a set of timers. The main objective of `Statistics` is to log these timers. You can\n * disable statistics to minimize their impact on performance.\n */\nexport class Statistics {\n    private timers: Map<string, Timer>;\n\n    private nullTimer: Timer;\n\n    /**\n     * Sets up a group of timers.\n     *\n     * @param name The statistics name, for logging purposes.\n     * @param enabled If `false`, the timers do not measure the performance.\n     */\n    constructor(public name?: string, public enabled = false) {\n        this.timers = new Map<string, Timer>();\n        this.nullTimer = new SimpleTimer(this, \"<null>\");\n    }\n\n    /**\n     * Adds a timer, based on the name specified.\n     *\n     * @param name The timer's name; must be unique.\n     */\n    createTimer(name: string, keepSamples = true): Timer {\n        const timer = keepSamples ? new SampledTimer(this, name) : new SimpleTimer(this, name);\n\n        return this.addTimer(timer);\n    }\n\n    /**\n     * Adds the timer specified.\n     *\n     * @param timer The timer's name, which must be unique within this statistics object.\n     */\n    addTimer(timer: Timer): Timer {\n        if (this.timers.get(timer.name) !== undefined) {\n            throw new Error(\"Duplicate timer name: '\" + timer.name + \"'\");\n        }\n\n        this.timers.set(timer.name, timer);\n\n        return timer;\n    }\n\n    /**\n     * Gets a timer by name.\n     *\n     * @param name The timer's name.\n     */\n    getTimer(name: string): Timer {\n        if (!this.enabled) {\n            return this.nullTimer;\n        }\n\n        const t = this.timers.get(name);\n        return t === undefined ? this.nullTimer : t;\n    }\n\n    /**\n     * Checks if a timer with the specified name already exists.\n     *\n     * @param name The timer's name.\n     * @returns `true` if a timer with `name` already exists; `false` otherwise.\n     */\n    hasTimer(name: string): boolean {\n        const t = this.timers.get(name);\n        return t !== undefined;\n    }\n\n    /**\n     * Resets all timers.\n     */\n    reset() {\n        this.timers.forEach((timer: Timer) => {\n            timer.reset();\n        });\n    }\n\n    /**\n     * Prints all values to the console.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        if (header !== undefined || this.name !== undefined) {\n            logger.log(header !== undefined ? header : this.name);\n        }\n\n        let maxNameLength = 0;\n\n        this.timers.forEach((timer: Timer) => {\n            maxNameLength = Math.max(maxNameLength, timer.name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.timers.forEach((timer: Timer) => {\n            let s = timer.name + \": \" + \" \".repeat(maxNameLength - timer.name.length);\n            s += print(timer.value);\n\n            // sampled timers also update their stats and log them\n            if (timer instanceof SampledTimer) {\n                const simpleStats = timer.getStats();\n                if (simpleStats !== undefined) {\n                    s +=\n                        `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                        `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                        `med95=${print(simpleStats.median95)}, med99=${print(\n                            simpleStats.median99\n                        )}, ` +\n                        `N=${print(simpleStats.numSamples)} ]`;\n                }\n            }\n            logger.log(s);\n        });\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n}\n\n/**\n * Class containing all counters, timers and events of the current frame.\n */\nexport class FrameStats {\n    readonly entries: Map<string, number> = new Map();\n    messages?: string[] = undefined;\n\n    /**\n     * Retrieve the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @returns The value of the performance number or `undefined` if it has not been declared by\n     *      `setValue` before.\n     */\n    getValue(name: string): number | undefined {\n        return this.entries.get(name);\n    }\n\n    /**\n     * Set the value of the performance number.\n     *\n     * @param name Name of the performance number.\n     * @param name New value of the performance number.\n     */\n    setValue(name: string, value: number) {\n        this.entries.set(name, value);\n    }\n\n    /**\n     * Add a value to the current value of the performance number. If the performance is not known,\n     * it will be initialized with `value`.\n     *\n     * @param name Name of the performance number.\n     * @param name Value to be added to the performance number.\n     */\n    addValue(name: string, value: number) {\n        const oldValue = this.entries.get(name);\n        this.entries.set(name, value + (oldValue === undefined ? 0 : oldValue));\n    }\n\n    /**\n     * Add a text message to the frame, like \"Font XYZ has been loaded\"\n     *\n     * @param message The message to add.\n     */\n    addMessage(message: string) {\n        if (this.messages === undefined) {\n            this.messages = [];\n        }\n        this.messages.push(message);\n    }\n\n    /**\n     * Reset all known performance values to `0` and the messages to `undefined`.\n     */\n    reset() {\n        this.entries.forEach((value: number, name: string) => {\n            this.entries.set(name, 0);\n        });\n\n        this.messages = undefined;\n    }\n}\n\n/**\n * @ignore\n * Only exported for testing.\n *\n * Instead of passing around an array of objects, we store the frame statistics as an object of\n * arrays. This allows convenient computations from [[RingBuffer]],\n */\nexport class FrameStatsArray {\n    readonly frameEntries: Map<string, RingBuffer<number>> = new Map();\n    readonly messages: RingBuffer<string[] | undefined>;\n\n    constructor(readonly capacity: number = 0) {\n        this.messages = new RingBuffer<string[] | undefined>(capacity);\n    }\n\n    get length(): number {\n        return this.messages.size;\n    }\n\n    reset() {\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            buffer.clear();\n        });\n        this.messages.clear();\n    }\n\n    addFrame(frameStats: FrameStats) {\n        const currentSize = this.length;\n        const frameEntries = this.frameEntries;\n\n        frameStats.entries.forEach((value: number, name: string) => {\n            let buffer = frameEntries.get(name);\n\n            if (buffer === undefined) {\n                // If there is a buffer that has not been known before, add it to the known buffers,\n                // fill it up with with 0 to the size of all the other buffers to make them of equal\n                // size to make PerfViz happy.\n                buffer = new RingBuffer<number>(this.capacity);\n                for (let i = 0; i < currentSize; i++) {\n                    buffer.enqOne(0);\n                }\n                this.frameEntries.set(name, buffer);\n            }\n            buffer.enqOne(value);\n        });\n\n        this.messages.enq(frameStats.messages);\n    }\n\n    /**\n     * Prints all values to the console.\n     */\n    log() {\n        let maxNameLength = 0;\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            maxNameLength = Math.max(maxNameLength, name.length);\n        });\n\n        // simple printing function for number limits the number of decimal points.\n        const print = (v: number | undefined) => {\n            return v !== undefined ? v.toFixed(5) : \"?\";\n        };\n\n        this.frameEntries.forEach((buffer: RingBuffer<number>, name: string) => {\n            let s = name + \": \" + \" \".repeat(maxNameLength - name.length);\n\n            const simpleStats = computeArrayStats(buffer.asArray());\n            if (simpleStats !== undefined) {\n                s +=\n                    `  [ min=${print(simpleStats.min)}, max=${print(simpleStats.max)}, ` +\n                    `avg=${print(simpleStats.avg)}, med=${print(simpleStats.median)}, ` +\n                    `med95=${print(simpleStats.median95)}, med99=${print(simpleStats.median99)}, ` +\n                    `N=${print(simpleStats.numSamples)} ]`;\n            }\n            logger.log(s);\n        });\n    }\n}\n\n/**\n * Chrome's MemoryInfo interface.\n */\ninterface ChromeMemoryInfo {\n    totalJSHeapSize: number;\n    usedJSHeapSize: number;\n    jsHeapSizeLimit: number;\n}\n\nexport interface SimpleFrameStatistics {\n    configs: Map<string, string>;\n    appResults: Map<string, number>;\n    frames: Map<string, number | number[]>;\n    messages: Array<string[] | undefined>;\n    frameStats?: Map<string, Stats | undefined>;\n    zoomLevelLabels?: string[];\n    zoomLevelData?: Map<string, number | number[]>;\n}\n\n/**\n * Performance measurement central. Maintains the current [[FrameStats]], which holds all individual\n * performance numbers.\n *\n * Implemented as an instance for easy access.\n */\nexport class PerformanceStatistics {\n    /**\n     * Returns `true` when the maximum number of storable frames is reached.\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof PerformanceStatistics\n     */\n    get isFull(): boolean {\n        return this.m_frameEvents.length >= this.maxNumFrames;\n    }\n    /**\n     * Global instance to the instance. The current instance can be overridden by creating a new\n     * `PerformanceStatistics`.\n     */\n    static get instance(): PerformanceStatistics {\n        if (PerformanceStatistics.m_instance === undefined) {\n            PerformanceStatistics.m_instance = new PerformanceStatistics(false, 0);\n        }\n        return PerformanceStatistics.m_instance;\n    }\n\n    private static m_instance?: PerformanceStatistics = undefined;\n\n    /**\n     * Current frame statistics. Contains all values for the current frame. Will be cleared when\n     * [[PerformanceStatistics#storeFrameInfo]] is called.\n     *\n     * @type {FrameStats}\n     * @memberof PerformanceStatistics\n     */\n    readonly currentFrame: FrameStats = new FrameStats();\n\n    /**\n     * @ignore\n     * Only exported for testing.\n     *\n     * Return the array of frame events.\n     */\n    get frameEvents(): FrameStatsArray {\n        return this.m_frameEvents;\n    }\n\n    /**\n     * Additional results stored for the current application run, not per frame. Only the last value\n     * is stored.\n     *\n     * @type {(Map<string, number>)}\n     */\n    readonly appResults: Map<string, number> = new Map();\n\n    /**\n     * Additional configuration values stored for the current application run, not per frame. Only\n     * the last value is stored.\n     *\n     * @type {(Map<string, string>)}\n     * @memberof PerformanceStatistics\n     */\n    readonly configs: Map<string, string> = new Map();\n\n    // Current array of frame events.\n    private m_frameEvents: FrameStatsArray;\n\n    /**\n     * Creates an instance of PerformanceStatistics. Overrides the current `instance`.\n     *\n     * @param {boolean} [enabled=true] If `false` the performance values will not be stored.\n     * @param {number} [maxNumFrames=1000] The maximum number of frames that are to be stored.\n     * @memberof PerformanceStatistics\n     */\n    constructor(public enabled = true, public maxNumFrames = 1000) {\n        PerformanceStatistics.m_instance = this;\n        this.m_frameEvents = new FrameStatsArray(maxNumFrames);\n    }\n\n    /**\n     * Clears all settings, all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clear() {\n        this.clearFrames();\n        this.configs.clear();\n        this.appResults.clear();\n    }\n\n    /**\n     * Clears only all stored frame events as well as the current frame values.\n     *\n     * @memberof PerformanceStatistics\n     */\n    clearFrames() {\n        this.m_frameEvents.reset();\n        this.currentFrame.reset();\n    }\n\n    /**\n     * Stores the current frame events into the array of events. Uses [[THREE.WebGLInfo]] to add the\n     * render state information to the current frame.\n     *\n     * @param {THREE.WebGLInfo} webGlInfo\n     * @returns {boolean} Returns `false` if the maximum number of storable frames has been reached.\n     * @memberof PerformanceStatistics\n     */\n    storeFrameInfo(webGlInfo?: THREE.WebGLInfo): boolean {\n        if (this.m_frameEvents.length >= this.maxNumFrames) {\n            return false;\n        }\n\n        if (webGlInfo !== undefined) {\n            if (webGlInfo.render !== undefined) {\n                this.currentFrame.setValue(\n                    \"gl.numCalls\",\n                    webGlInfo.render.calls === null ? 0 : webGlInfo.render.calls\n                );\n                this.currentFrame.setValue(\n                    \"gl.numPoints\",\n                    webGlInfo.render.points === null ? 0 : webGlInfo.render.points\n                );\n                this.currentFrame.setValue(\n                    \"gl.numLines\",\n                    webGlInfo.render.lines === null ? 0 : webGlInfo.render.lines\n                );\n                this.currentFrame.setValue(\n                    \"gl.numTriangles\",\n                    webGlInfo.render.triangles === null ? 0 : webGlInfo.render.triangles\n                );\n            }\n            if (webGlInfo.memory !== undefined) {\n                this.currentFrame.setValue(\n                    \"gl.numGeometries\",\n                    webGlInfo.memory.geometries === null ? 0 : webGlInfo.memory.geometries\n                );\n                this.currentFrame.setValue(\n                    \"gl.numTextures\",\n                    webGlInfo.memory.textures === null ? 0 : webGlInfo.memory.textures\n                );\n            }\n            if (webGlInfo.programs !== undefined) {\n                this.currentFrame.setValue(\n                    \"gl.numPrograms\",\n                    webGlInfo.programs === null ? 0 : webGlInfo.programs.length\n                );\n            }\n        }\n\n        if (window !== undefined && window.performance !== undefined) {\n            const memory = (window.performance as any).memory as ChromeMemoryInfo;\n            if (memory !== undefined) {\n                this.currentFrame.setValue(\"memory.totalJSHeapSize\", memory.totalJSHeapSize);\n                this.currentFrame.setValue(\"memory.usedJSHeapSize\", memory.usedJSHeapSize);\n                this.currentFrame.setValue(\"memory.jsHeapSizeLimit\", memory.jsHeapSizeLimit);\n            }\n        }\n\n        this.m_frameEvents.addFrame(this.currentFrame);\n\n        this.currentFrame.reset();\n        return true;\n    }\n\n    /**\n     * Logs all values to the logger.\n     *\n     * @param header Optional header line.\n     * @param footer Optional footer line.\n     */\n    log(header?: string, footer?: string) {\n        logger.log(header !== undefined ? header : \"PerformanceStatistics\");\n\n        const appResults = this.appResults;\n        appResults.forEach((value: number, name: string) => {\n            logger.log(name, value);\n        });\n        const configs = this.configs;\n        configs.forEach((value: string, name: string) => {\n            logger.log(name, value);\n        });\n        this.m_frameEvents.log();\n\n        if (footer !== undefined) {\n            logger.log(footer);\n        }\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsPlainObject(onlyLastFrame: boolean = false): any {\n        const appResults: any = {};\n        const configs: any = {};\n        const frames: any = {};\n        const plainObject: any = {\n            configs,\n            appResults,\n            frames\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults[name] = value;\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs[name] = value;\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.bottom;\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames[name] = buffer.asArray();\n            }\n        }\n        plainObject.messages = this.m_frameEvents.messages.asArray();\n        return plainObject;\n    }\n\n    /**\n     * Convert the last frame values to a plain object that can be serialized. Required to copy the\n     * test results over to nightwatch.\n     */\n    getLastFrameStatistics(): any {\n        return this.getAsPlainObject(true);\n    }\n\n    /**\n     * Convert to a plain object that can be serialized. Required to copy the test results over to\n     * nightwatch.\n     */\n    getAsSimpleFrameStatistics(onlyLastFrame: boolean = false): SimpleFrameStatistics {\n        const configs: Map<string, string> = new Map();\n        const appResults: Map<string, number> = new Map();\n        const frames: Map<string, number | number[]> = new Map();\n\n        const simpleStatistics: SimpleFrameStatistics = {\n            configs,\n            appResults,\n            frames,\n            messages: this.m_frameEvents.messages.asArray()\n        };\n\n        const appResultValues = this.appResults;\n        appResultValues.forEach((value: number, name: string) => {\n            appResults.set(name, value);\n        });\n\n        const configValues = this.configs;\n        configValues.forEach((value: string, name: string) => {\n            configs.set(name, value);\n        });\n\n        if (onlyLastFrame) {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.bottom);\n            }\n        } else {\n            for (const [name, buffer] of this.m_frameEvents.frameEntries) {\n                frames.set(name, buffer.asArray());\n            }\n        }\n        return simpleStatistics;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The interface for the [[Pass]] class.\n */\nexport interface IPass {\n    /**\n     * Whether the [[Pass]] instance is active or not.\n     * @default `true`.\n     */\n    enabled: boolean;\n\n    /**\n     * Whether the render method should target a WebGLRenderTarget instance, or the frame buffer.\n     * @default `false`.\n     */\n    renderToScreen: boolean;\n\n    /**\n     * The resize method to extend in [[Pass]] implementations. It resizes the render targets. Call\n     * on resize events.\n     *\n     * @param width Width to resize to.\n     * @param height Height to resize to.\n     */\n    setSize(width: number, height: number): void;\n\n    /**\n     * The render method to extend in [[Pass]] implementations. This is the place where the desired\n     * effects or render operations are executed.\n     *\n     * @param renderer The WebGLRenderer instance in use.\n     * @param scene The scene to render.\n     * @param camera The camera to render the scene through.\n     * @param writeBuffer The optional WebGLRenderTarget instance to write to.\n     * @param readBuffer The optional WebGLRenderTarget instance of a previous pass to write onto.\n     * @param delta The time argument from the requestAnimationFrame.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ): void;\n}\n\n/**\n * The base class to extend for further passes in [[MapView]], like the [[MSAARenderPass]], possibly\n * a text pass, an AO effect etc. `Pass` provides the core logic for both :\n * - render passes (proper scene renders),\n * - and shader passes (quad renders, i.e. effects added on top of the render output as a\n * postprocess).\n *\n * Even some shader passes still actually fall within the render pass category as they need to\n * re-render the scene to then deduce an effect, such as masking, AO, DoF etc. Others just need the\n * previous input image to apply a shader on top of it, as for bloom or NVIDIA's FXAA for example.\n * These only are proper shader passes.\n */\nexport class Pass implements IPass {\n    enabled: boolean = false;\n    renderToScreen: boolean = false;\n    // tslint:disable-next-line:no-unused-variable\n    setSize(width: number, height: number) {\n        // Implemented in sub-classes.\n    }\n    // tslint:disable:no-unused-variable\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null,\n        delta?: number\n    ) {\n        // Implemented in sub-classes.\n    }\n    // tslint:enable:no-unused-variable\n}\n\n/**\n * The pass that does a default normal scene rendering for further post-effects.\n */\nexport class RenderPass extends Pass {\n    constructor() {\n        super();\n    }\n\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget | null\n    ) {\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.render(scene, camera);\n    }\n}\n\n/**\n * The base class to extend for post-effects on the final render (like Vignette, Sepia, color\n * correction...)\n */\nexport class ShaderPass extends Pass {\n    uniforms: { [uniform: string]: THREE.IUniform };\n    material: THREE.Material;\n    fsQuad: FullScreenQuad;\n    constructor(shader: THREE.Shader, private textureID: string = \"tDiffuse\") {\n        super();\n        if (shader instanceof THREE.ShaderMaterial) {\n            this.uniforms = shader.uniforms;\n            this.material = shader;\n        } else {\n            this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n            this.material = new THREE.ShaderMaterial({\n                defines: { ...(shader as any).defines },\n                uniforms: this.uniforms,\n                vertexShader: shader.vertexShader,\n                fragmentShader: shader.fragmentShader\n            });\n        }\n        this.fsQuad = new FullScreenQuad(this.material);\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget,\n        readBuffer: THREE.WebGLRenderTarget,\n        delta?: number\n    ) {\n        if (this.uniforms[this.textureID]) {\n            this.uniforms[this.textureID].value = readBuffer.texture;\n        }\n        this.fsQuad.material = this.material;\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        this.fsQuad.render(renderer);\n    }\n}\n\nclass FullScreenQuad {\n    private m_mesh: THREE.Mesh;\n    private m_camera: THREE.Camera;\n    constructor(material: THREE.Material) {\n        this.m_camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n        const geometry = new THREE.PlaneBufferGeometry(2, 2);\n        this.m_mesh = new THREE.Mesh(geometry, material);\n    }\n    get material(): THREE.Material {\n        return this.m_mesh.material as THREE.Material;\n    }\n    set material(value: THREE.Material) {\n        this.m_mesh.material = value;\n    }\n    render(renderer: THREE.WebGLRenderer) {\n        renderer.render((this.m_mesh as any) as THREE.Scene, this.m_camera);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nclass MercatorProjection extends Projection {\n    protected static clamp(val: number, min: number, max: number): number {\n        return Math.min(Math.max(min, val), max);\n    }\n\n    protected static latitudeClamp(latitude: number): number {\n        return MercatorProjection.clamp(\n            latitude,\n            -MercatorConstants.MAXIMUM_LATITUDE,\n            MercatorConstants.MAXIMUM_LATITUDE\n        );\n    }\n\n    private static latitudeProject(latitude: number): number {\n        return Math.log(Math.tan(Math.PI * 0.25 + latitude * 0.5)) / Math.PI;\n    }\n\n    private static latitudeClampProject(latitude: number): number {\n        return MercatorProjection.latitudeProject(MercatorProjection.latitudeClamp(latitude));\n    }\n\n    private static unprojectLatitude(y: number): number {\n        return 2.0 * Math.atan(Math.exp(Math.PI * y)) - Math.PI * 0.5;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh(2 * Math.PI * (worldPoint.y / this.unitScale - 0.5));\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        result.y =\n            (MercatorProjection.latitudeClampProject(geoPoint.latitudeInRadians) * 0.5 + 0.5) *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            MercatorProjection.unprojectLatitude((worldPoint.y / this.unitScale - 0.5) * 2.0),\n            (worldPoint.x / this.unitScale) * 2 * Math.PI - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(geoBox.center);\n        const worldNorth =\n            (MercatorProjection.latitudeClampProject(geoBox.northEast.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldSouth =\n            (MercatorProjection.latitudeClampProject(geoBox.southWest.latitudeInRadians) * 0.5 +\n                0.5) *\n            this.unitScale;\n        const worldYCenter = (worldNorth + worldSouth) * 0.5;\n\n        worldCenter.y = worldYCenter;\n\n        const latitudeSpan = worldNorth - worldSouth;\n        const longitudeSpan = (geoBox.longitudeSpan / 360) * this.unitScale;\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - longitudeSpan * 0.5;\n            result.min.y = worldCenter.y - latitudeSpan * 0.5;\n            result.max.x = worldCenter.x + longitudeSpan * 0.5;\n            result.max.y = worldCenter.y + latitudeSpan * 0.5;\n            const altitudeSpan = geoBox.altitudeSpan;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = longitudeSpan * 0.5;\n            result.extents.y = latitudeSpan * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (geoBox.altitudeSpan || 0) * 0.5);\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        // this implementation of [[reprojectPoint]] supports both\n        // [[WebMercatorProjection]] and [[MercatorProjection]]. The only\n        // difference betweeen these two variants of WEB Mercator\n        // is in the orientation of the Y axis, so we just flip Y coordinates\n        // when reprojecting between them.\n        if (\n            sourceProjection !== this &&\n            (sourceProjection === webMercatorProjection || sourceProjection === mercatorProjection)\n        ) {\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = worldPos.x;\n            result.y = this.unitScale - worldPos.y;\n            result.z = worldPos.z;\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n}\n\nclass WebMercatorProjection extends MercatorProjection {\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPointLike: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        let geoPoint: GeoCoordinates;\n\n        if (geoPointLike instanceof GeoCoordinates) {\n            geoPoint = geoPointLike;\n        } else {\n            geoPoint = new GeoCoordinates(\n                geoPointLike.latitude,\n                geoPointLike.longitude,\n                geoPointLike.altitude\n            );\n        }\n\n        /*\n         * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n         * might be a concrete class which is not available at runtime.\n         * Consider the following example:\n         *\n         *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n         *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n         *\n         * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n         */\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        result.x = ((geoPoint.longitude + 180) / 360) * this.unitScale;\n        const sy = Math.sin(MercatorProjection.latitudeClamp(geoPoint.latitudeInRadians));\n        result.y = (0.5 - Math.log((1 + sy) / (1 - sy)) / (4 * Math.PI)) * this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const x = worldPoint.x / this.unitScale - 0.5;\n        const y = 0.5 - worldPoint.y / this.unitScale;\n\n        const longitude = 360 * x;\n        const latitude = 90 - (360 * Math.atan(Math.exp(-y * 2 * Math.PI))) / Math.PI;\n\n        return new GeoCoordinates(latitude, longitude, worldPoint.z);\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const r = super.projectBox(geoBox, result);\n        if (isBox3Like(r)) {\n            // Invert the y axis for web mercator, this means that max => min & min => max\n            const maxY = r.max.y;\n            r.max.y = this.unitScale - r.min.y;\n            r.min.y = this.unitScale - maxY;\n        } else if (isOrientedBox3Like(r)) {\n            MathUtils.newVector3(1, 0, 0, r.xAxis);\n            MathUtils.newVector3(0, -1, 0, r.yAxis);\n            MathUtils.newVector3(0, 0, -1, r.zAxis);\n            r.position.y = this.unitScale - r.position.y;\n        }\n        return r;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        const geoBox = new GeoBox(\n            new GeoCoordinates(maxGeo.latitude, minGeo.longitude, minGeo.altitude),\n            new GeoCoordinates(minGeo.latitude, maxGeo.longitude, maxGeo.altitude)\n        );\n        return geoBox;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        this.projectPoint(geoPoint, result.position);\n        MathUtils.newVector3(1, 0, 0, result.xAxis);\n        MathUtils.newVector3(0, -1, 0, result.yAxis);\n        MathUtils.newVector3(0, 0, -1, result.zAxis);\n        return result;\n    }\n}\n\nexport class MercatorConstants {\n    // Math.atan(Math.sinh(Math.PI))\n    static readonly MAXIMUM_LATITUDE: number = 1.4844222297453323;\n}\n\n/**\n * Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const mercatorProjection: Projection = new MercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n\n/**\n * Web Mercator [[Projection]] used to convert geo coordinates to world coordinates and vice versa.\n */\nexport const webMercatorProjection: Projection = new WebMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass QuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(): number {\n        return 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n}\n\n/**\n * [[SubdivisionScheme]] representing a quadtree.\n */\nexport const quadTreeSubdivisionScheme: SubdivisionScheme = new QuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nconst powerOfTwo = [\n    0x1,\n    0x2,\n    0x4,\n    0x8,\n    0x10,\n    0x20,\n    0x40,\n    0x80,\n    0x100,\n    0x200,\n    0x400,\n    0x800,\n    0x1000,\n    0x2000,\n    0x4000,\n    0x8000,\n    0x10000,\n    0x20000,\n    0x40000,\n    0x80000,\n    0x100000,\n    0x200000,\n    0x400000,\n    0x800000,\n    0x1000000,\n    0x2000000,\n    0x4000000,\n    0x8000000,\n    0x10000000,\n    0x20000000,\n    0x40000000,\n    0x80000000,\n    0x100000000,\n    0x200000000,\n    0x400000000,\n    0x800000000,\n    0x1000000000,\n    0x2000000000,\n    0x4000000000,\n    0x8000000000,\n    0x10000000000,\n    0x20000000000,\n    0x40000000000,\n    0x80000000000,\n    0x100000000000,\n    0x200000000000,\n    0x400000000000,\n    0x800000000000,\n    0x1000000000000,\n    0x2000000000000,\n    0x4000000000000,\n    0x8000000000000,\n    0x10000000000000 // Math.pow(2, 52), highest bit that can be set correctly.\n];\n\n/**\n * The `TileKey` instances are used to address a tile in a quadtree.\n *\n * A tile key is defined by a row, a column, and a level. The tree has a root at level 0, with one\n * single tile. On every level, each tile is divided into four children (therefore the name\n * quadtree).\n *\n * Within each [[level]], any particular tile is addressed with [[row]] and [[column]]. The number\n * of rows and columns in each level is 2 to the power of the level. This means: On level 0, only\n * one tile exists, [[columnsAtLevel]]() and [[rowsAtLevel]]() are both 1. On level 1, 4 tiles\n * exist, in 2 rows and 2 columns. On level 2 we have 16 tiles, in 4 rows and 4 columns. And so on.\n *\n * A tile key is usually created using [[fromRowColumnLevel]]() method.\n *\n * `TileKey` instances are immutable, all members return new instances of `TileKey` and do not\n * modify the original object.\n *\n * Utility functions like [[parent]](), [[changedLevelBy]](), and [[changedLevelTo]]() allow for\n * easy vertical navigation of the tree. The number of available rows and columns in the tile's\n * level is given with [[rowCount]]() and [[columnCount]]().\n *\n * Tile keys can be created from and converted into various alternative formats:\n *\n *  - [[toQuadKey]]() / [[fromQuadKey]]() - string representation 4-based\n *  - [[toHereTile]]() / [[fromHereTile]]() - string representation 10-based\n *  - [[mortonCode]]() / [[fromMortonCode]]() - number representation\n *\n * Note - as JavaScript's number type can hold 53 bits in its mantissa, only levels up to 26 can be\n * represented in the number representation returned by [[mortonCode]]().\n */\nexport class TileKey {\n    /**\n     * Creates a tile key.\n     *\n     * @param row The requested row. Must be less than 2 to the power of level.\n     * @param column The requested column. Must be less than 2 to the power of level.\n     * @param level The requested level.\n     */\n    static fromRowColumnLevel(row: number, column: number, level: number): TileKey {\n        return new TileKey(row, column, level);\n    }\n\n    /**\n     * Creates a tile key from a quad string.\n     *\n     * The quad string can be created with [[toQuadKey]].\n     *\n     * @param quadkey The quadkey to convert.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromQuadKey(quadkey: string): TileKey {\n        const level = quadkey.length;\n        let row = 0;\n        let column = 0;\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < quadkey.length; ++i) {\n            const mask = 1 << i;\n            const d = parseInt(quadkey.charAt(level - i - 1), 10);\n            if (d & 0x1) {\n                column |= mask;\n            }\n            if (d & 0x2) {\n                row |= mask;\n            }\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n    /**\n     * Creates a tile key from a numeric Morton code representation.\n     *\n     * You can convert a tile key into a numeric Morton code with [[mortonCode]].\n     *\n     * @param quadKey64 The Morton code to be converted.\n     * @returns A new instance of [[TileKey]].\n     */\n    static fromMortonCode(quadKey64: number): TileKey {\n        let level = 0;\n        let row = 0;\n        let column = 0;\n        let quadKey = quadKey64;\n        // tslint:disable:no-bitwise\n        while (quadKey > 1) {\n            const mask: number = 1 << level;\n\n            if (quadKey & 0x1) {\n                column |= mask;\n            }\n            if (quadKey & 0x2) {\n                row |= mask;\n            }\n\n            level++;\n            quadKey = (quadKey - (quadKey & 0x3)) / 4;\n        }\n        // tslint:enable:no-bitwise\n        const result = TileKey.fromRowColumnLevel(row, column, level);\n        result.m_mortonCode = quadKey64;\n        return result;\n    }\n\n    /**\n     * Creates a tile key from a heretile code string.\n     *\n     * The string can be created with [[toHereTile]].\n     *\n     * @param quadkey64 The string representation of the HERE tile key.\n     * @returns A new instance of `TileKey`.\n     */\n    static fromHereTile(quadkey64: string): TileKey {\n        const result = TileKey.fromMortonCode(parseInt(quadkey64, 10));\n        result.m_hereTile = quadkey64;\n        return result;\n    }\n\n    /**\n     * Returns the number of available columns at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of columns.\n     * @returns The available columns at the given level.\n     */\n    static columnsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the number of available rows at a given level.\n     *\n     * This is 2 to the power of the level.\n     *\n     * @param level The level for which to return the number of rows.\n     * @returns The available rows at the given level.\n     */\n    static rowsAtLevel(level: number): number {\n        return Math.pow(2, level);\n    }\n\n    /**\n     * Returns the closest matching `TileKey` in a cartesian coordinate system.\n     *\n     * @param level The level for the tile key.\n     * @param coordX The X coordinate.\n     * @param coordY The Y coordinate.\n     * @param totalWidth The maximum X coordinate.\n     * @param totalHeight The maximum Y coordinate.\n     * @returns A new tile key at the given level that includes the given coordinates.\n     */\n    static atCoords(\n        level: number,\n        coordX: number,\n        coordY: number,\n        totalWidth: number,\n        totalHeight: number\n    ): TileKey {\n        return TileKey.fromRowColumnLevel(\n            Math.floor(coordY / (totalHeight / TileKey.rowsAtLevel(level))),\n            Math.floor(coordX / (totalWidth / TileKey.columnsAtLevel(level))),\n            level\n        );\n    }\n\n    /**\n     * Computes the Morton code of the parent tile key of the given Morton code.\n     *\n     * Note: The parent key of the root key is the root key itself.\n     *\n     * @param mortonCode A Morton code, for example, obtained from [[mortonCode]].\n     * @returns The Morton code of the parent tile.\n     */\n    static parentMortonCode(mortonCode: number): number {\n        return Math.floor(mortonCode / 4);\n    }\n\n    private m_mortonCode?: number;\n    private m_hereTile?: string;\n\n    /**\n     * Constructs a new immutable instance of a `TileKey`.\n     *\n     * For the better readability, [[TileKey.fromRowColumnLevel]] should be preferred.\n     *\n     * Note - row and column must not be greater than the maximum rows/columns for the given level.\n     *\n     * @param row Represents the row in the quadtree.\n     * @param column Represents the column in the quadtree.\n     * @param level Represents the level in the quadtree.\n     */\n    constructor(readonly row: number, readonly column: number, readonly level: number) {}\n\n    /**\n     * Returns a tile key representing the parent of the tile addressed by this tile key.\n     *\n     * Throws an exception is this tile is already the root.\n     */\n    parent(): TileKey {\n        if (this.level === 0) {\n            throw new Error(\"Cannot get the parent of the root tile key\");\n        }\n        // tslint:disable-next-line:no-bitwise\n        return TileKey.fromRowColumnLevel(this.row >>> 1, this.column >>> 1, this.level - 1);\n    }\n\n    /**\n     * Returns a new tile key at a level that differs from this tile's level by delta.\n     *\n     * Equivalent to `changedLevelTo(level() + delta)`.\n     *\n     * Note - root key is returned if `delta` is smaller than the level of this tile key.\n     *\n     * @param delta The numeric difference between the current level and the requested level.\n     */\n    changedLevelBy(delta: number): TileKey {\n        const level = Math.max(0, this.level + delta);\n        let row = this.row;\n        let column = this.column;\n\n        // tslint:disable:no-bitwise\n        if (delta >= 0) {\n            row <<= delta;\n            column <<= delta;\n        } else {\n            row >>>= -delta;\n            column >>>= -delta;\n        }\n        // tslint:enable:no-bitwise\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    /**\n     * Returns a new tile key at the requested level.\n     *\n     * If the requested level is smaller than the tile's level, then the key of an ancestor of this\n     * tile is returned. If the requested level is larger than the tile's level, then the key of\n     * first child or grandchild of this tile is returned, for example, the child with the lowest\n     * row and column number. If the requested level equals this tile's level, then the tile key\n     * itself is returned. If the requested level is negative, the root tile key is returned.\n     *\n     * @param level The requested level.\n     */\n    changedLevelTo(level: number): TileKey {\n        return this.changedLevelBy(level - this.level);\n    }\n\n    /**\n     * Converts the tile key to a numeric code representation.\n     *\n     * You can create a tile key from a numeric Morton code with [[fromMortonCode]].\n     *\n     * Note - only levels <= 26 are supported.\n     */\n    mortonCode(): number {\n        if (this.m_mortonCode === undefined) {\n            let column = this.column;\n            let row = this.row;\n\n            // tslint:disable:no-bitwise\n            let result = powerOfTwo[this.level << 1];\n            for (let i = 0; i < this.level; ++i) {\n                if (column & 0x1) {\n                    result += powerOfTwo[2 * i];\n                }\n                if (row & 0x1) {\n                    result += powerOfTwo[2 * i + 1];\n                }\n                column >>>= 1;\n                row >>>= 1;\n            }\n            // tslint:enable:no-bitwise\n\n            this.m_mortonCode = result;\n        }\n        return this.m_mortonCode;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * The string is a quadkey Morton code representation as a string.\n     *\n     * You can convert back from a quadkey string with [[fromHereTile]].\n     */\n    toHereTile(): string {\n        if (this.m_hereTile === undefined) {\n            this.m_hereTile = this.mortonCode().toString();\n        }\n        return this.m_hereTile;\n    }\n\n    /**\n     * Converts the tile key into a string for using in REST API calls.\n     *\n     * If the tile is the root tile, the quadkey is '-'. Otherwise the string is a number to the\n     * base of 4, but without the leading 1, with the following properties:\n     *  1. the number of digits equals the level.\n     *  2. removing the last digit gives the parent tile's quadkey string, i.e. appending 0,1,2,3\n     *     to a quadkey string gives the tiles's children.\n     *\n     * You can convert back from a quadkey string with [[fromQuadKey]].\n     */\n    toQuadKey(): string {\n        let result: string = \"\";\n\n        // tslint:disable:no-bitwise\n        for (let i = this.level; i > 0; --i) {\n            const mask = 1 << (i - 1);\n\n            const col = (this.column & mask) !== 0;\n            const row = (this.row & mask) !== 0;\n\n            if (col && row) {\n                result += \"3\";\n            } else if (row) {\n                result += \"2\";\n            } else if (col) {\n                result += \"1\";\n            } else {\n                result += \"0\";\n            }\n        }\n        // tslint:enable:no-bitwise\n\n        return result;\n    }\n\n    /**\n     * Equality operator.\n     *\n     * @param qnr The tile key to compare to.\n     * @returns `true` if this tile key has identical row, column and level, `false` otherwise.\n     */\n    equals(qnr: TileKey): boolean {\n        return this.row === qnr.row && this.column === qnr.column && this.level === qnr.level;\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub quadkey.\n     *\n     * @param sub The sub key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubKey(sub: string): TileKey {\n        const subQuad = TileKey.fromQuadKey(sub.length === 0 ? \"-\" : sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns the absolute quadkey that is constructed from its sub HERE tile key.\n     *\n     * @param sub The sub HERE key.\n     * @returns The absolute tile key in the quadtree.\n     */\n    addedSubHereTile(sub: string): TileKey {\n        const subQuad = TileKey.fromHereTile(sub);\n        const child = this.changedLevelBy(subQuad.level);\n        return TileKey.fromRowColumnLevel(\n            child.row + subQuad.row,\n            child.column + subQuad.column,\n            child.level\n        );\n    }\n\n    /**\n     * Returns a sub quadkey that is relative to its parent.\n     *\n     * This function can be used to generate sub keys that are relative to a parent that is delta\n     * levels up in the quadtree.\n     *\n     * This function can be used to create shortened keys for quads on lower levels if the parent is\n     * known.\n     *\n     * Note - the sub quadkeys fit in a 16-bit unsigned integer if the `delta` is smaller than 8. If\n     * `delta` is smaller than 16, the sub quadkey fits into an unsigned 32-bit integer.\n     *\n     * Deltas larger than 16 are not supported.\n     *\n     * @param delta The number of levels relative to its parent quadkey. Must be greater or equal to\n     * 0 and smaller than 16.\n     * @returns The quadkey relative to its parent that is `delta` levels up the tree.\n     */\n    getSubHereTile(delta: number): string {\n        const key = this.mortonCode();\n        // tslint:disable-next-line:no-bitwise\n        const msb = 1 << (delta * 2);\n        const mask = msb - 1;\n        // tslint:disable-next-line:no-bitwise\n        const result = (key & mask) | msb;\n        return result.toString();\n    }\n\n    /**\n     * Returns the number of available rows in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    rowCount(): number {\n        return TileKey.rowsAtLevel(this.level);\n    }\n\n    /**\n     * Returns the number of available columns in the tile's [[level]].\n     *\n     * This is 2 to the power of the level.\n     */\n    columnCount(): number {\n        return TileKey.columnsAtLevel(this.level);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace ExtrusionFeatureDefs {\n    /**\n     * Minimum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MIN: number = 0.0;\n    /**\n     * Maximum ratio value for extrusion effect\n     */\n    export const DEFAULT_RATIO_MAX: number = 1;\n\n    /**\n     * Buildings height used whenever no height-data is present or height is very small.\n     *\n     * Used to avoid z-fighting between ground plane and building.\n     */\n    export const MIN_BUILDING_HEIGHT = 0.01;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { StringEncodedNumeralType } from \"./StringEncodedNumeral\";\n\n/**\n * Interpolation mode used when computing a [[InterpolatedProperty]] value for a given zoom level.\n */\nexport enum InterpolationMode {\n    Discrete,\n    Linear,\n    Cubic,\n    Exponential\n}\n\n/**\n * Interpolated property could have its value (some initial value should be provided) changed\n * according to an interpolation type.\n *\n * Here is an example of an interpolated property from a map style:\n * \"lineWidth\": {\n *  \"interpolation\": \"Linear\",\n *  \"zoomLevels\": [13, 14, 15],\n *  \"values\": [ 1.5, 1.2, 0.9]\n * }\n */\nexport interface InterpolatedPropertyDefinition<T> {\n    interpolation?: \"Discrete\" | \"Linear\" | \"Cubic\" | \"Exponential\";\n    zoomLevels: number[];\n    values: T[];\n    exponent?: number;\n}\n\n/**\n * Property which value is interpolated across different zoom levels.\n */\nexport interface InterpolatedProperty {\n    /**\n     * Interpolation mode that should be used for this property.\n     */\n    interpolationMode: InterpolationMode;\n\n    /**\n     * Zoom level keys array.\n     */\n    zoomLevels: Float32Array;\n\n    /**\n     * Property values array.\n     */\n    values: ArrayLike<any>;\n\n    /**\n     * Exponent used in interpolation. Only valid with `Exponential` [[InterpolationMode]].\n     */\n    exponent?: number;\n\n    /**\n     * @hidden\n     * [[StringEncodedNumeral]] type needed to interpret interpolated values back to numbers.\n     */\n    _stringEncodedNumeralType?: StringEncodedNumeralType;\n\n    /**\n     * @hidden\n     * Array of `0` and `1`mask values used to modify the interpolation behaviour of some\n     * [[StringEncodedNumeral]]s.\n     */\n    _stringEncodedNumeralDynamicMask?: Float32Array;\n}\n\n/**\n * Converts an [[InterpolatedPropertyDefinition]] to a [[JsonExpr]].\n *\n * @param property A valid [[InterpolatedPropertyDefinition]]\n */\nexport function interpolatedPropertyDefinitionToJsonExpr(\n    property: InterpolatedPropertyDefinition<any>\n): JsonExpr {\n    if (property.interpolation === undefined || property.interpolation === \"Discrete\") {\n        const step: JsonExpr = [\"step\", [\"zoom\"], property.values[0]];\n        for (let i = 1; i < property.zoomLevels.length; ++i) {\n            step.push(property.zoomLevels[i], property.values[i]);\n        }\n        return step;\n    }\n    const interpolation: JsonExpr = [\"interpolate\"];\n    switch (property.interpolation) {\n        case \"Linear\":\n            interpolation.push([\"linear\"]);\n            break;\n        case \"Cubic\":\n            interpolation.push([\"cubic\"]);\n            break;\n        case \"Exponential\":\n            interpolation.push([\n                \"exponential\",\n                property.exponent !== undefined ? property.exponent : 2\n            ]);\n            break;\n        default:\n            throw new Error(`interpolation mode '${property.interpolation}' is not supported`);\n    } //switch\n    interpolation.push([\"zoom\"]);\n    for (let i = 0; i < property.zoomLevels.length; ++i) {\n        interpolation.push(property.zoomLevels[i], property.values[i]);\n    }\n    return interpolation;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils/lib/math/Vector3Like\";\nimport { isJsonExpr, JsonExpr } from \"./Expr\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedProperty\";\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    DynamicProperty,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams\n} from \"./TechniqueParams\";\n\n/**\n * Map theme is used to define what features are shown and how the map is styled, for example\n * which lightning is used or whether fog should be displayed.\n */\nexport interface Theme {\n    /**\n     * The URI of the JSON schema describing themes.\n     */\n    $schema?: string;\n\n    /**\n     * The base `Theme`s or `theme` URLs to extend.\n     *\n     * If used, base themes are loaded first, and then all the properties from inherited theme\n     * overwrite these defined in base theme.\n     */\n    extends?: string | Theme | Array<string | Theme>;\n\n    /**\n     * Actual URL the theme has been loaded from.\n     */\n    url?: string;\n\n    /**\n     * Color to be used as a clear background - no map objects.\n     * @format color-hex\n     */\n    clearColor?: string;\n\n    /**\n     * Define the default text style for styling labels and texts.\n     */\n    defaultTextStyle?: TextStyleDefinition;\n\n    /**\n     * Define the lightning available on the three.js scene.\n     */\n    lights?: Light[];\n\n    /**\n     * Define the style of the sky presented in the map scene.\n     */\n    sky?: Sky;\n\n    /**\n     * Define the fog used in the map scene.\n     */\n    fog?: Fog;\n\n    /**\n     * The definitions exported by these theme.\n     */\n    definitions?: Definitions;\n\n    /**\n     * Map styles available for datasources used to render the map.\n     */\n    styles?: Styles;\n\n    /**\n     * Define the style to render different types of text used on the map.\n     */\n    textStyles?: TextStyleDefinition[];\n\n    /**\n     * List available fonts to be used while rendering text.\n     */\n    fontCatalogs?: FontCatalogConfig[];\n\n    /**\n     * Optional images to be rendered on the map view.\n     */\n    images?: ImageDefinitions;\n\n    /**\n     * Image textures to be used while rendering geometries on the map view.\n     */\n    imageTextures?: ImageTexture[];\n\n    /**\n     * Optional list of [[ThemePoiTableDef]]s.\n     */\n    poiTables?: PoiTableRef[];\n\n    /**\n     * Optional list of symbolic priorities for the object\n     * created using this [[Theme]].\n     *\n     * The attribute `styleSet` and `category` of the [[Technique]]\n     * are used together with [[Theme.priorities]] to sort\n     * the objects created using this [[Theme]], for example:\n     *\n     * ```json\n     * {\n     *      \"priorities\": [\n     *          { \"group\": \"tilezen\", \"category\": \"outline-1\" }\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"solid-line\",\n     *              \"styleSet\": \"tilezen\",\n     *              \"category\": \"outline-1\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    priorities?: StylePriority[];\n\n    /**\n     * Optional list of priorities for the screen-space\n     * objects created using this style.\n     *\n     * The name of the `category` attribute of the screen-space\n     * technique (e.g. `\"text\"`) must match on the strings\n     * defined by this [[Theme.labelPriorities]], for example:\n     *\n     * ```json\n     * {\n     *      \"labelPriorities\": [\n     *          \"continent-labels\",\n     *          \"country-labels\",\n     *          \"state-labels\"\n     *      ],\n     *      \"styles\": [\n     *          {\n     *              \"technique\": \"text\",\n     *              \"category\": \"state-labels\"\n     *          }\n     *      ]\n     * }\n     * ```\n     */\n    labelPriorities?: string[];\n}\n\n/**\n * A type representing symbolic render orders.\n */\nexport interface StylePriority {\n    /**\n     * The group of this [[StylePriority]].\n     */\n    group: string;\n\n    /**\n     * The category of this [[StylePriority]].\n     */\n    category?: string;\n}\n\n/**\n * A type representing HARP themes with all the styleset declarations\n * grouped in one [[Array]].\n *\n * @internal This type will merge with [[Theme]].\n */\nexport type FlatTheme = Omit<Theme, \"styles\"> & {\n    /**\n     * The style rules used to render the map.\n     */\n    styles?: StyleSet;\n};\n\n/**\n * Checks if the given definition implements the [[BoxedDefinition]] interface.\n */\nexport function isBoxedDefinition(def: Definition): def is BoxedDefinition {\n    const bdef = def as BoxedDefinition;\n    return (\n        typeof bdef === \"object\" &&\n        bdef !== null &&\n        (typeof bdef.type === \"string\" || typeof bdef.type === \"undefined\") &&\n        (typeof bdef.value === \"string\" ||\n            typeof bdef.value === \"number\" ||\n            typeof bdef.value === \"boolean\" ||\n            isInterpolatedPropertyDefinition(bdef.value) ||\n            isJsonExpr(bdef.value))\n    );\n}\n\nexport function isLiteralDefinition(def: Definition): def is LiteralValue {\n    return typeof def === \"string\" || typeof def === \"number\" || typeof def === \"boolean\";\n}\n\n/**\n * Value definition commons.\n */\nexport interface BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type?: string;\n\n    /**\n     * The description of the definition.\n     */\n    description?: string;\n}\n\n/**\n * Possible types of unboxed literal values carried by [[Definition]].\n */\nexport type LiteralValue = string | number | boolean;\n\n/**\n * Boxed definition without type.\n */\nexport interface BoxedAnyDefinition extends BaseValueDefinition {\n    /**\n     * The value of the definition.\n     */\n    value: LiteralValue | JsonExpr;\n}\n\n/**\n * A boxed boolean value definition.\n */\nexport interface BoxedBooleanDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"boolean\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<boolean>;\n}\n\n/**\n * A boxed numerical value definition.\n */\nexport interface BoxedNumericDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"number\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<number>;\n}\n\n/**\n * A boxed string value definition.\n */\nexport interface BoxedStringDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"string\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed color value definition.\n */\nexport interface BoxedColorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"color\";\n\n    /**\n     * The value of the definition.\n     */\n    value: DynamicProperty<string>;\n}\n\n/**\n * A boxed selector value definition.\n */\nexport interface BoxedSelectorDefinition extends BaseValueDefinition {\n    /**\n     * The type of the definition.\n     */\n    type: \"selector\";\n\n    /**\n     * The value of the definition.\n     *\n     * See [[BaseStyle.when]].\n     */\n    value: string | JsonExpr;\n}\n\n/**\n * A boxed value definition.\n */\nexport type BoxedDefinition =\n    | BoxedAnyDefinition\n    | BoxedBooleanDefinition\n    | BoxedNumericDefinition\n    | BoxedStringDefinition\n    | BoxedColorDefinition\n    | BoxedSelectorDefinition;\n\n/**\n * Possible values for `definitions` element of [Theme].\n */\nexport type Definition = LiteralValue | JsonExpr | BoxedDefinition | StyleDeclaration;\n\n/**\n * An array of [[Definition]]s.\n */\nexport interface Definitions {\n    [name: string]: Definition;\n}\n\n/**\n * Base [StyleSelector] attributes required to match [Style] object against given feature.\n *\n * Contains [Style]'s members related to feature matching in [[StyleSetEvaluator]].\n */\nexport interface StyleSelector {\n    /**\n     * Condition that is applied to feature properties to check if given [[Style]] this feature\n     * should emit geometry of this style.\n     *\n     * Conditions are defined using [[Array]]s describing literals, built-in symbols and function\n     * calls:\n     *  - `[\"has\", string]` returns `true` if the given property exists.\n     *  - `[\"get\", string]` returns the value of the given feature property with the given name.\n     *  - `[\"all\", expressions...]` returns `true` if all the sub expressions evaluate to true.\n     *  - `[\"any\", expressions...]` returns `true` if any sub expression evaluates to true.\n     *  - `[\"in\", expression, [literals...]]` returns `true` if the result of evaluating the first\n     *    expression is included in the given `Array` of literals.\n     *  - `[\"!\", expression]` returns `false` if the sub expression evaluates to `true`.\n     *  - `[\"<\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than the result of evaluating the second expression.\n     *  - `[\">\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than the result of evaluating the second expression.\n     *  - `[\"<=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is less than or equal the result of evaluating the second expression.\n     *  - `[\">=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is greater than or equal the result of evaluating the second expression.\n     *  - `[\"==\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is equal the result of evaluating the second expression.\n     *  - `[\"!=\", expression, expression]` returns `true` if the result of evaluating the first\n     *    expression is not equal to the result of evaluating the second expression.\n     *  - `[\"length\", expression]` returns the length of the given expression if it evaluates to\n     *    a `string` or an `Array`; otherwise, returns `undefined`.\n     *  - `[\"~=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression contains the `string` obtained from the\n     *    second expression; otherwise, returns `undefined`.\n     *  - `[\"^=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression starts with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     *  - `[\"$=\", expression, expression]` if the expressions evaluate to `string`, returns `true`\n     *    if the `string` obtained from the first expression ends with the `string` obtained from\n     *    the second expression; otherwise, returns `undefined`.\n     */\n    when: string | JsonExpr;\n\n    /**\n     * The layer containing the carto features processed by this style rule.\n     */\n    layer?: string;\n\n    /**\n     * Optional. If `true`, no more matching styles will be evaluated.\n     */\n    final?: boolean;\n}\n\nexport type JsonExprReference = [\"ref\", string];\n\n/**\n * Checks if the given value is a reference to a definition.\n *\n * @param value The value of a technique property.\n */\nexport function isJsonExprReference(value: any): value is JsonExprReference {\n    return (\n        Array.isArray(value) &&\n        value.length === 2 &&\n        value[0] === \"ref\" &&\n        typeof value[1] === \"string\"\n    );\n}\n\n/**\n * Like [[StyleDeclaration]], but without [[Reference]] type.\n */\nexport type ResolvedStyleDeclaration = Style & StyleSelector;\n\n/**\n * Like [[StyleSet]], but without [[Reference]] type.\n */\nexport type ResolvedStyleSet = ResolvedStyleDeclaration[];\n\n/**\n * Compound type that merges all raw [Style] with selector arguments from [BaseSelector], optionally\n * a [[Reference]].\n */\nexport type StyleDeclaration = (Style & StyleSelector) | JsonExpr;\n\nexport function isActualSelectorDefinition(def: Definition): def is Style & StyleSelector {\n    const styleDef = def as StyleDeclaration;\n    return (\n        typeof styleDef === \"object\" &&\n        styleDef !== null &&\n        !Array.isArray(styleDef) &&\n        typeof styleDef.technique === \"string\"\n    );\n}\n\n/**\n * An array of [[StyleSelector]]s that are used together to define how a [[DataSource]] should be\n * rendered. `StyleSet`s are applied to sources providing vector tiles via their method\n * `setStyleSet`. This is also handle internally when a whole theme is passed to a [[MapView]] via\n * `mapview.theme`.\n */\nexport type StyleSet = StyleDeclaration[];\n\n/**\n * The object that defines what way an item of a [[DataSource]] should be decoded to assemble a\n * tile. [[Style]] is describing which features are shown on a map and in what way they are being\n * shown.\n */\nexport interface BaseStyle {\n    /**\n     * Human readable description.\n     */\n    description?: string;\n\n    /**\n     * The style set referenced by this styling rule.\n     */\n    styleSet?: string;\n\n    /**\n     * The category of this style.\n     */\n    category?: string | JsonExpr;\n\n    /**\n     * Technique name. See the classes extending from this class to determine what possible\n     * techniques are possible, includes `\"line\"`, `\"fill\"`, `\"solid-line\"`, `\"extruded-line\"`,\n     * `\"extruded-polygon\"`, `\"text\"`, `\"none\"`.\n     */\n    technique?: string;\n\n    /**\n     * Specify `renderOrder` of value.\n     *\n     * @default If not specified in style file, `renderOrder` will be assigned with monotonically\n     * increasing values according to style position in file.\n     */\n    renderOrder?: number | JsonExpr;\n\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number | JsonExpr;\n\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number | JsonExpr;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this style creates. Default is\n     * `false`.\n     */\n    transient?: boolean;\n\n    /**\n     * Optional: If `true`, the objects with matching `when` statement will be printed to the\n     * console.\n     */\n    debug?: boolean;\n\n    // TODO: Make pixel units default.\n    /**\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     *\n     * @deprecated use \"string encoded numerals\" as documented in TODO, wher eis the doc ?\n     */\n    metricUnit?: \"Meter\" | \"Pixel\";\n\n    /**\n     * XYZ defines the property to display as text label of a feature in the styles.\n     */\n    labelProperty?: string;\n}\n\n/**\n *\n * @defaultSnippets [\n *     {\n *         \"label\": \"New solid-line\",\n *         \"description\": \"Add a new 'solid-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"secondaryColor\": \"#$4ddd\",\n *                 \"secondaryWidth\": \"^${5:2}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New dashed-line\",\n *         \"description\": \"Add a new 'dashed-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"solid-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\",\n *                 \"gapSize\": \"^${4:10}\",\n *                 \"dashSize\": \"^${5:10}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New fill\",\n *         \"description\": \"Add a new 'fill' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"fill\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:0}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New text\",\n *         \"description\": \"Add a new 'text' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"text\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New labeled-icon\",\n *         \"description\": \"Add a new 'labeled-icon' marker styling\",\n *         \"body\": {\n *             \"technique\": \"labeled-icon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line-marker\",\n *         \"description\": \"Add a new 'line-marker' marker styling\",\n *         \"body\": {\n *             \"technique\": \"line-marker\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"size\": \"^${2:24}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"backgroundSize\": \"^${4:32}\",\n *                 \"backgroundColor\": \"#${5:aaa}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New line\",\n *         \"description\": \"Add a new 'line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New segments\",\n *         \"description\": \"Add a new 'segments' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"segments\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"lineWidth\": \"^${3:1}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New standard\",\n *         \"description\": \"Add a new 'standard' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"standard\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-line\",\n *         \"description\": \"Add a new 'extruded-line' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-line\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"shading\": \"${2:standard}\",\n *                 \"color\": \"#${3:fff}\",\n *                 \"lineWidth\": \"^${4:1}\",\n *                 \"caps\": \"${5:Circle}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New extruded-polygon\",\n *         \"description\": \"Add a new 'extruded-polygon' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"extruded-polygon\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"roughness\": \"^${3:0.5}\",\n *                 \"metalness\": \"^${4:0.5}\",\n *                 \"emissive\": \"#${5:c44}\",\n *                 \"emissiveIntensity\": \"^${6:0.8}\",\n *                 \"lineWidth\": \"^${7:1}\",\n *                 \"lineColor\": \"#${8:c0f}\",\n *                 \"defaultHeight\": \"^${9:20}\",\n *                 \"animateExtrusion\": \"^${10:true}\",\n *                 \"animateExtrusionDuration\": \"^${11:300}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New none\",\n *         \"description\": \"Add a new 'none' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"none\",\n *             \"when\": \"$1\",\n *             \"attr\": {}\n *         }\n *     },\n *     {\n *         \"label\": \"New shader\",\n *         \"description\": \"Add a new 'shader' Styling Rule\",\n *         \"body\": {\n *             \"technique\": \"shader\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"primitive\": \"${2:mesh}\",\n *                 \"params\": {}\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New squares\",\n *         \"description\": \"Add a new 'squares' point styling\",\n *         \"body\": {\n *             \"technique\": \"squares\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     },\n *     {\n *         \"label\": \"New circles\",\n *         \"description\": \"Add a new 'circles' point styling\",\n *         \"body\": {\n *             \"technique\": \"circles\",\n *             \"when\": \"$1\",\n *             \"attr\": {\n *                 \"color\": \"#${2:fff}\",\n *                 \"size\": \"^${3:32}\",\n *                 \"texture\": \"${4:url}\",\n *                 \"enablePicking\": \"^${5:true}\"\n *             }\n *         }\n *     }\n * ]\n *\n */\nexport type AllStyles =\n    | SquaresStyle\n    | CirclesStyle\n    | PoiStyle\n    | LineMarkerStyle\n    | LineStyle\n    | SegmentsStyle\n    | SolidLineStyle\n    | LabelRejectionLineStyle\n    | FillStyle\n    | StandardStyle\n    | BasicExtrudedLineStyle\n    | StandardExtrudedLineStyle\n    | ExtrudedPolygonStyle\n    | ShaderStyle\n    | TerrainStyle\n    | TextTechniqueStyle\n    | NoneStyle;\n\nexport type Style = AllStyles;\n/**\n * A dictionary of [[StyleSet]]s.\n */\nexport interface Styles {\n    [styleSetName: string]: StyleSet;\n}\n\n/**\n * A reference to a style definition.\n *\n * Use as value `attrs` to reference value from `definitions`.\n *\n * Example of usage:\n * ```json\n * {\n *   \"definitions\": {\n *     \"roadColor\": { \"type\": \"color\", \"value\": \"#f00\" }\n *   },\n *   \"styles\": { \"tilezen\": [\n *      {\n *       \"when\": \"kind == 'road\",\n *       \"technique\": \"solid-line\",\n *       \"attr\": {\n *         \"lineColor\": { \"$ref\": \"roadColor\" }\n *       }\n *     }\n *   ] }\n * }\n * ```\n */\n\n/**\n * The attributes of a technique.\n */\nexport type Attr<T> = { [P in keyof T]?: T[P] | JsonExpr };\n\n/**\n * Render feature as set of squares rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface SquaresStyle extends BaseStyle {\n    technique: \"squares\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as set of circles rendered in screen space.\n *\n * @see [[PointTechniqueParams]].\n */\nexport interface CirclesStyle extends BaseStyle {\n    technique: \"circles\";\n    attr?: Attr<PointTechniqueParams>;\n}\n\n/**\n * Render feature as POIs (icons and text) rendered in screen space.\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface PoiStyle extends BaseStyle {\n    technique: \"labeled-icon\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line markers, which is a recurring marker along a line (usually road).\n *\n * @see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerStyle extends BaseStyle {\n    technique: \"line-marker\";\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as line.\n */\nexport interface LineStyle extends BaseStyle {\n    technique: \"line\";\n    secondaryRenderOrder?: number;\n    secondaryCategory?: string;\n    attr?: Attr<MarkerTechniqueParams>;\n}\n\n/**\n * Render feature as segments.\n */\nexport interface SegmentsStyle extends BaseStyle {\n    technique: \"segments\";\n    attr?: Attr<SegmentsTechniqueParams>;\n}\n\nexport interface SolidLineStyle extends BaseStyle {\n    technique: \"solid-line\" | \"dashed-line\";\n    secondaryRenderOrder?: number;\n    secondaryCategory?: string;\n    attr?: Attr<SolidLineTechniqueParams>;\n}\n\nexport interface LabelRejectionLineStyle extends BaseStyle {\n    technique: \"label-rejection-line\";\n    attr?: Attr<BaseTechniqueParams>;\n}\n\nexport interface FillStyle extends BaseStyle {\n    technique: \"fill\";\n    attr?: Attr<FillTechniqueParams>;\n}\n\nexport interface StandardStyle extends BaseStyle {\n    technique: \"standard\";\n    attr?: Attr<StandardTechniqueParams>;\n}\n\nexport interface TerrainStyle extends BaseStyle {\n    technique: \"terrain\";\n    attr?: Attr<TerrainTechniqueParams>;\n}\n\nexport interface BasicExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading?: \"basic\";\n    attr?: Attr<BasicExtrudedLineTechniqueParams>;\n}\n\nexport interface StandardExtrudedLineStyle extends BaseStyle {\n    technique: \"extruded-line\";\n    shading: \"standard\";\n    attr?: Attr<StandardExtrudedLineTechniqueParams>;\n}\n\n/**\n * Style used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonStyle extends BaseStyle {\n    technique: \"extruded-polygon\";\n    attr?: Attr<ExtrudedPolygonTechniqueParams>;\n}\n\nexport interface ShaderStyle extends BaseStyle {\n    technique: \"shader\";\n    attr?: Attr<ShaderTechniqueParams>;\n}\n\nexport interface TextTechniqueStyle extends BaseStyle {\n    technique: \"text\";\n    attr?: Attr<TextTechniqueParams>;\n}\n\nexport interface NoneStyle extends BaseStyle {\n    technique: \"none\";\n    attr?: {\n        [name: string]: any;\n    };\n}\n\n/**\n * Possible lights used for light the map.\n */\nexport type Light = AmbientLight | DirectionalLight;\n\nexport interface BaseLight {\n    type: string;\n    name: string;\n}\n\n/**\n * Light type: ambient.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Ambient Light\",\n *         \"description\": \"Adds a new Ambient Light\",\n *         \"body\": {\n *             \"type\": \"ambient\",\n *             \"name\": \"${1:ambient light}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\"\n *         }\n *     }\n * ]\n */\nexport interface AmbientLight extends BaseLight {\n    type: \"ambient\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity?: number;\n}\n\n/**\n * Light type: directional.\n * @defaultSnippets [\n *     {\n *         \"label\": \"New Directional Light\",\n *         \"description\": \"Adds a new Directional Light\",\n *         \"body\": {\n *             \"type\": \"directional\",\n *             \"name\": \"${1:directional-light$:1}\",\n *             \"color\": \"#${2:fff}\",\n *             \"intensity\": \"^${3:1}\",\n *             \"direction\": {\n *                 \"x\": \"^${4:1}\",\n *                 \"y\": \"^${5:0}\",\n *                 \"z\": \"^${6:0}\"\n *             }\n *         }\n *     }\n * ]\n */\nexport interface DirectionalLight extends BaseLight {\n    type: \"directional\";\n    /**\n     * @format color-hex\n     */\n    color: string;\n    intensity: number;\n    direction: Vector3Like;\n    castShadow?: boolean;\n}\n\n/**\n * Various text styles used with labels and texts.\n */\nexport interface TextStyleDefinition {\n    name?: string;\n    fontCatalogName?: string;\n\n    fontName?: string;\n    size?: number;\n    backgroundSize?: number;\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    rotation?: number;\n    /**\n     * @format color-hex\n     */\n    color?: string;\n    /**\n     * @format color-hex\n     */\n    backgroundColor?: string;\n    opacity?: number;\n    backgroundOpacity?: number;\n\n    tracking?: number;\n    leading?: number;\n    maxLines?: number;\n    lineWidth?: number;\n    canvasRotation?: number;\n    lineRotation?: number;\n    wrappingMode?: \"None\" | \"Character\" | \"Word\";\n    hAlignment?: \"Left\" | \"Center\" | \"Right\";\n    vAlignment?: \"Above\" | \"Center\" | \"Below\";\n}\n\n/**\n * Interface that defines a procedural gradient sky.\n */\nexport interface GradientSky {\n    /** Sky type. */\n    type: \"gradient\";\n    /**\n     * Color of the upper part of the gradient.\n     * @format color-hex\n     */\n    topColor: string;\n    /**\n     * Color of bottom part of the gradient.\n     * @format color-hex\n     */\n    bottomColor: string;\n    /**\n     * Color of the ground plane.\n     * @format color-hex\n     */\n    groundColor: string;\n    /** Texture's gradient power. */\n    monomialPower?: number;\n}\n\n/**\n * Interface that defines a cubemap sky.\n */\nexport interface CubemapSky {\n    /** Sky type. */\n    type: \"cubemap\";\n    /** Positive X cube map face. */\n    positiveX: string;\n    /** Negative X cube map face. */\n    negativeX: string;\n    /** Positive Y cube map face. */\n    positiveY: string;\n    /** Negative Y cube map face. */\n    negativeY: string;\n    /** Positive Z cube map face. */\n    positiveZ: string;\n    /** Negative Z cube map face. */\n    negativeZ: string;\n}\n\n/**\n * Interface that defines the options to configure the sky.\n */\nexport type Sky = GradientSky | CubemapSky;\n\n/**\n * Interface that defines the options to configure fog.\n */\nexport interface Fog {\n    /** Fog's color. */\n    color: string;\n    /** Distance ratio to far plane at which the linear fog begins. */\n    startRatio: number;\n}\n\n/**\n * Define an image (e.g. icon).\n */\nexport interface ImageDefinition {\n    /** Url to load content from. */\n    url: string;\n    /** `true` to start loading at init tile, `false` to lazily wait until required. */\n    preload: boolean;\n    /** Url of JSON file containing the texture atlas */\n    atlas?: string;\n}\n\nexport interface ImageDefinitions {\n    /** Name of Image. */\n    [name: string]: ImageDefinition;\n}\n\n/**\n * Can be used to create a texture atlas.\n */\nexport interface ImageTexture {\n    /** Name of ImageTexture. Used to reference texture in the styles. */\n    name: string;\n    /** Name of ImageDefinition to use. */\n    image: string;\n    /** Origin of image, defaults to \"topleft\" */\n    origin?: string;\n    /** Specify sub-region: Defaults to 0. */\n    xOffset?: number;\n    /** Specify sub-region: Defaults to 0. */\n    yOffset?: number;\n    /** Specify sub-region:  Defaults to 0, meaning width is taken from loaded image. */\n    width?: number;\n    /** Specify sub-region:  Defaults to 0, meaning height is taken from loaded image. */\n    height?: number;\n    /** Defaults to false. */\n    flipH?: boolean;\n    /** Defaults to false. */\n    flipV?: boolean;\n    /** Defaults to 1. */\n    opacity?: number;\n}\n\n/**\n * Definition for a [[PoiTable]] reference as part of the [[Theme]] object.\n */\nexport interface PoiTableRef {\n    /** Required name of the [[PoiTable]] for later reference. */\n    name: string;\n    /**\n     * Required URL from where to load [[PoiTable]].\n     *\n     * Should refer to JSON that is matched [[PoiTableDef]] interface.\n     */\n    url: string;\n    /**\n     * If set to `true`, the list of values in the field \"altNames\" will be used as names for this\n     * POI.\n     */\n    useAltNamesForKey: boolean;\n}\n\n/**\n * Interface for the JSON description of the [[PoiTable]]. It is being implemented in [[PoiTable]].\n */\nexport interface PoiTableDef {\n    /** Name of the `PoiTable`. Must be unique. */\n    name?: string;\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    poiList?: PoiTableEntryDef[];\n}\n\n/**\n * Interface for the JSON description of the [[PoiTableEntry]]. The interface is being implemented\n * as [[PoiTableEntry]].\n */\nexport interface PoiTableEntryDef {\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: string;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n}\n\n/**\n * Fonts used for all text related rendering.\n */\nexport interface FontCatalogConfig {\n    url: string;\n    name: string;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    BaseTechniqueParams,\n    BufferAttribute,\n    DecodedTile,\n    Env,\n    Expr,\n    ExtrudedPolygonTechnique,\n    FillTechnique,\n    Geometry,\n    GeometryKind,\n    GeometryKindSet,\n    getArrayConstructor,\n    getFeatureId,\n    getPropertyValue,\n    IndexedTechnique,\n    isCirclesTechnique,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isSquaresTechnique,\n    isTerrainTechnique,\n    isTextTechnique,\n    MakeTechniqueAttrs,\n    MapEnv,\n    needsVertexNormals,\n    SolidLineTechnique,\n    StandardExtrudedLineTechnique,\n    Technique,\n    TerrainTechnique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\n// tslint:disable:max-line-length\nimport { SphericalGeometrySubdivisionModifier } from \"@here/harp-geometry/lib/SphericalGeometrySubdivisionModifier\";\nimport { EarthConstants, GeoCoordinates, ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    EdgeMaterial,\n    EdgeMaterialParameters,\n    FadingFeature,\n    isHighPrecisionLineMaterial,\n    MapMeshBasicMaterial,\n    MapMeshStandardMaterial,\n    setShaderMaterialDefine,\n    SolidLineMaterial\n} from \"@here/harp-materials\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { AnimatedExtrusionTileHandler } from \"../AnimatedExtrusionHandler\";\nimport {\n    applyBaseColorToMaterial,\n    applySecondaryColorToMaterial,\n    compileTechniques,\n    createMaterial,\n    getBufferAttribute,\n    getObjectConstructor\n} from \"../DecodedTileHelpers\";\nimport {\n    createDepthPrePassMesh,\n    isRenderDepthPrePassEnabled,\n    setDepthPrePassStencil\n} from \"../DepthPrePass\";\nimport { DisplacementMap, TileDisplacementMap } from \"../DisplacementMap\";\nimport { FALLBACK_RENDER_ORDER_OFFSET } from \"../MapView\";\nimport { MapViewPoints } from \"../MapViewPoints\";\nimport { PathBlockingElement } from \"../PathBlockingElement\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometryCreator\");\nconst tmpVector3 = new THREE.Vector3();\nconst tmpVector2 = new THREE.Vector2();\n\n/**\n * Parameters that control fading.\n */\nexport interface FadingParameters {\n    fadeNear?: number;\n    fadeFar?: number;\n}\n\n/**\n * Parameters that control fading for extruded buildings with fading edges.\n */\nexport interface PolygonFadingParameters extends FadingParameters {\n    color?: string | number;\n    colorMix?: number;\n    lineFadeNear?: number;\n    lineFadeFar?: number;\n}\n\n/**\n * Support class to create geometry for a [[Tile]] from a [[DecodedTile]].\n */\nexport class TileGeometryCreator {\n    private static m_instance: TileGeometryCreator;\n\n    /**\n     * The `instance` of the `TileGeometryCreator`.\n     *\n     * @returns TileGeometryCreator\n     */\n    static get instance(): TileGeometryCreator {\n        return this.m_instance || (this.m_instance = new TileGeometryCreator());\n    }\n\n    /**\n     *  Creates an instance of TileGeometryCreator. Access is allowed only through `instance`.\n     */\n    private constructor() {\n        //\n    }\n\n    /**\n     * Apply `enabledKinds` and `disabledKinds` to all techniques in the `decodedTile`. If a\n     * technique is identified as disabled, its property `enabled` is set to `false`.\n     *\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     * @param enabledKinds Optional [[GeometryKindSet]] used to specify which object kinds should be\n     *      created.\n     * @param disabledKinds Optional [[GeometryKindSet]] used to filter objects that should not be\n     *      created.\n     */\n    initDecodedTile(\n        decodedTile: DecodedTile,\n        enabledKinds?: GeometryKindSet | undefined,\n        disabledKinds?: GeometryKindSet | undefined\n    ) {\n        for (const technique of decodedTile.techniques) {\n            // Already processed\n            if (technique.enabled !== undefined) {\n                continue;\n            }\n\n            // Turn technique.kind from the style, which may be a string or an array of strings,\n            // into a GeometryKindSet.\n            if (technique.kind !== undefined) {\n                if (Array.isArray(technique.kind)) {\n                    technique.kind = new GeometryKindSet(technique.kind);\n                } else if (typeof technique.kind !== \"string\") {\n                    logger.warn(\"Technique has unknown type of kind:\", technique);\n                    technique.kind = undefined;\n                }\n            }\n\n            // No info about kind, no way to filter it.\n            if (\n                technique.kind === undefined ||\n                (technique.kind instanceof Set && (technique.kind as GeometryKindSet).size === 0)\n            ) {\n                technique.enabled = true;\n                continue;\n            }\n\n            // Technique is enabled only if enabledKinds is defined and technique belongs to that set or\n            // if that's not the case, disabledKinds must be undefined or technique does not belong to it.\n            technique.enabled =\n                !(disabledKinds !== undefined && disabledKinds.hasOrIntersects(technique.kind)) ||\n                (enabledKinds !== undefined && enabledKinds.hasOrIntersects(technique.kind));\n        }\n        for (const srcGeometry of decodedTile.geometries) {\n            for (const group of srcGeometry.groups) {\n                group.createdOffsets = [];\n            }\n        }\n\n        // compile the dynamic expressions.\n        compileTechniques(decodedTile.techniques);\n    }\n\n    /**\n     * Called after the `Tile` has been decoded. It is required to call `initDecodedTile` before\n     * calling this method.\n     *\n     * @see [[TileGeometryCreator#initDecodedTile]]\n     *\n     * @param tile The [[Tile]] to process.\n     * @param decodedTile The decodedTile containing the actual tile map data.\n     */\n    createAllGeometries(tile: Tile, decodedTile: DecodedTile) {\n        const filter = (technique: Technique): boolean => {\n            return technique.enabled !== false;\n        };\n\n        if (decodedTile.maxGeometryHeight !== undefined) {\n            tile.maxGeometryHeight = decodedTile.maxGeometryHeight;\n        }\n        this.createObjects(tile, decodedTile, filter);\n\n        this.preparePois(tile, decodedTile);\n\n        // TextElements do not get their geometry created by Tile, but are managed on a\n        // higher level.\n        const textFilter = (technique: Technique): boolean => {\n            if (\n                !isPoiTechnique(technique) &&\n                !isLineMarkerTechnique(technique) &&\n                !isTextTechnique(technique)\n            ) {\n                return false;\n            }\n            return filter(technique);\n        };\n        this.createTextElements(tile, decodedTile, textFilter);\n\n        this.createLabelRejectionElements(tile, decodedTile);\n\n        // HARP-7899, disable ground plane for globe\n        if (tile.dataSource.addGroundPlane && tile.projection.type === ProjectionType.Planar) {\n            // The ground plane is required for when we change the zoom back and we fall back to the\n            // parent, in that case we reduce the renderOrder of the parent tile and this ground\n            // place ensures that parent doesn't come through. This value must be above the\n            // renderOrder of all objects in the fallback tile, otherwise there won't be a proper\n            // covering of the parent tile by the children, hence dividing by 2. To put a bit more\n            // concretely, we assume all objects are rendered with a renderOrder between 0 and\n            // FALLBACK_RENDER_ORDER_OFFSET / 2, i.e. 10000. The ground plane is put at -10000, and\n            // the fallback tiles have their renderOrder set between -20000 and -10000\n            TileGeometryCreator.instance.addGroundPlane(tile, -FALLBACK_RENDER_ORDER_OFFSET / 2);\n        }\n    }\n\n    createLabelRejectionElements(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.pathGeometries === undefined) {\n            return;\n        }\n        for (const path of decodedTile.pathGeometries) {\n            tile.addBlockingElement(new PathBlockingElement(path.path));\n        }\n    }\n\n    /**\n     * Processes the given tile and assign default values for geometry kinds,\n     * render orders and label priorities.\n     *\n     * @param {Tile} tile\n     * @param {(GeometryKindSet | undefined)} enabledKinds\n     * @param {(GeometryKindSet | undefined)} disabledKinds\n     */\n    processTechniques(\n        tile: Tile,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        this.processPriorities(tile);\n\n        for (const technique of decodedTile.techniques) {\n            // Make sure that all technique have their geometryKind set, either from the Theme or\n            // their default value.\n            if (technique.kind === undefined) {\n                TileGeometryLoader.setDefaultGeometryKind(technique);\n            }\n        }\n\n        // Speedup and simplify following code: Test all techniques if they intersect with\n        // enabledKinds and disabledKinds, in which case they are flagged. The disabledKinds can be\n        // ignored hereafter.\n        this.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n    }\n\n    /**\n     * Adds a THREE object to the root of the tile. Sets the owning tiles datasource.name and the\n     * tileKey in the `userData` property of the object, such that the tile it belongs to can be\n     * identified during picking.\n     *\n     * @param tile The [[Tile]] to add the object to.\n     * @param object The object to add to the root of the tile.\n     * @param geometryKind The kind of object. Can be used for filtering.\n     */\n    registerTileObject(\n        tile: Tile,\n        object: THREE.Object3D,\n        geometryKind: GeometryKind | GeometryKindSet | undefined\n    ) {\n        if (object.userData === undefined) {\n            object.userData = {};\n        }\n        const userData = object.userData;\n        userData.tileKey = tile.tileKey;\n        userData.dataSource = tile.dataSource.name;\n\n        userData.kind =\n            geometryKind instanceof Set\n                ? Array.from((geometryKind as GeometryKindSet).values())\n                : Array.isArray(geometryKind)\n                ? geometryKind\n                : [geometryKind];\n\n        // Force a visibility check of all objects.\n        tile.resetVisibilityCounter();\n    }\n\n    /**\n     * Splits the text paths that contain sharp corners.\n     *\n     * @param tile The [[Tile]] to process paths on.\n     * @param textPathGeometries The original path geometries that may have defects.\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    prepareTextPaths(\n        textPathGeometries: TextPathGeometry[],\n        decodedTile: DecodedTile,\n        textFilter?: (technique: Technique) => boolean\n    ): TextPathGeometry[] {\n        const processedPaths = new Array<TextPathGeometry>();\n        const newPaths = textPathGeometries.slice();\n\n        while (newPaths.length > 0) {\n            const textPath = newPaths.pop();\n\n            if (textPath === undefined) {\n                break;\n            }\n\n            const technique = decodedTile.techniques[textPath.technique];\n            if (\n                !isTextTechnique(technique) ||\n                (textFilter !== undefined && !textFilter(technique))\n            ) {\n                continue;\n            }\n\n            processedPaths.push(textPath);\n        }\n        return processedPaths;\n    }\n\n    /**\n     * Creates [[TextElement]] objects from the decoded tile and list of materials specified. The\n     * priorities of the [[TextElement]]s are updated to simplify label placement.\n     *\n     * @param tile The [[Tile]] to create the testElements on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param textFilter: Optional filter. Should return true for any text technique that is\n     *      applicable.\n     */\n    createTextElements(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        textFilter?: (technique: Technique) => boolean\n    ) {\n        const mapView = tile.mapView;\n        const textElementsRenderer = mapView.textElementsRenderer;\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            const textPathGeometries = this.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile,\n                textFilter\n            );\n\n            for (const textPath of textPathGeometries) {\n                const technique = decodedTile.techniques[textPath.technique];\n\n                if (\n                    technique.enabled === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const path: THREE.Vector3[] = [];\n                for (let i = 0; i < textPath.path.length; i += 3) {\n                    path.push(\n                        new THREE.Vector3(\n                            textPath.path[i] + worldOffsetX,\n                            textPath.path[i + 1],\n                            textPath.path[i + 2]\n                        )\n                    );\n                }\n\n                // Make sorting stable.\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n                const userData = textPath.objInfos;\n                const featureId = getFeatureId(userData);\n                const textElement = new TextElement(\n                    ContextualArabicConverter.instance.convert(textPath.text),\n                    path,\n                    textElementsRenderer.styleCache.getRenderStyle(tile, technique),\n                    textElementsRenderer.styleCache.getLayoutStyle(tile, technique),\n                    priority,\n                    technique.xOffset !== undefined ? technique.xOffset : 0.0,\n                    technique.yOffset !== undefined ? technique.yOffset : 0.0,\n                    featureId,\n                    technique.style,\n                    fadeNear,\n                    fadeFar,\n                    tile.offset\n                );\n                textElement.pathLengthSqr = textPath.pathLengthSqr;\n                textElement.minZoomLevel =\n                    technique.minZoomLevel !== undefined\n                        ? technique.minZoomLevel\n                        : mapView.minZoomLevel;\n                textElement.maxZoomLevel =\n                    technique.maxZoomLevel !== undefined\n                        ? technique.maxZoomLevel\n                        : mapView.maxZoomLevel;\n                textElement.distanceScale =\n                    technique.distanceScale !== undefined\n                        ? technique.distanceScale\n                        : DEFAULT_TEXT_DISTANCE_SCALE;\n                textElement.mayOverlap = technique.mayOverlap === true;\n                textElement.reserveSpace = technique.reserveSpace !== false;\n                textElement.kind = technique.kind;\n                // Get the userData for text element picking.\n                textElement.userData = textPath.objInfos;\n\n                tile.addTextElement(textElement);\n            }\n        }\n\n        if (decodedTile.textGeometries !== undefined) {\n            for (const text of decodedTile.textGeometries) {\n                if (text.technique === undefined || text.stringCatalog === undefined) {\n                    continue;\n                }\n\n                const technique = decodedTile.techniques[text.technique];\n\n                if (\n                    technique.enabled === false ||\n                    !isTextTechnique(technique) ||\n                    (textFilter !== undefined && !textFilter(technique))\n                ) {\n                    continue;\n                }\n\n                const positions = new THREE.BufferAttribute(\n                    new Float32Array(text.positions.buffer),\n                    text.positions.itemCount\n                );\n\n                const numPositions = positions.count;\n                if (numPositions < 1) {\n                    continue;\n                }\n\n                const priority =\n                    technique.priority !== undefined\n                        ? getPropertyValue(technique.priority, discreteZoomEnv)\n                        : 0;\n                const fadeNear =\n                    technique.fadeNear !== undefined\n                        ? getPropertyValue(technique.fadeNear, discreteZoomEnv)\n                        : technique.fadeNear;\n                const fadeFar =\n                    technique.fadeFar !== undefined\n                        ? getPropertyValue(technique.fadeFar, discreteZoomEnv)\n                        : technique.fadeFar;\n\n                for (let i = 0; i < numPositions; ++i) {\n                    const x = positions.getX(i) + worldOffsetX;\n                    const y = positions.getY(i);\n                    const z = positions.getZ(i);\n                    const label = text.stringCatalog[text.texts[i]];\n                    if (label === undefined) {\n                        // skip missing labels\n                        continue;\n                    }\n\n                    const userData = text.objInfos !== undefined ? text.objInfos[i] : undefined;\n                    const featureId = getFeatureId(userData);\n\n                    const textElement = new TextElement(\n                        ContextualArabicConverter.instance.convert(label!),\n                        new THREE.Vector3(x, y, z),\n                        textElementsRenderer.styleCache.getRenderStyle(tile, technique),\n                        textElementsRenderer.styleCache.getLayoutStyle(tile, technique),\n                        priority,\n                        technique.xOffset || 0.0,\n                        technique.yOffset || 0.0,\n                        featureId,\n                        technique.style,\n                        undefined,\n                        undefined,\n                        tile.offset\n                    );\n\n                    textElement.minZoomLevel =\n                        technique.minZoomLevel !== undefined\n                            ? technique.minZoomLevel\n                            : mapView.minZoomLevel;\n                    textElement.maxZoomLevel =\n                        technique.maxZoomLevel !== undefined\n                            ? technique.maxZoomLevel\n                            : mapView.maxZoomLevel;\n                    textElement.mayOverlap = technique.mayOverlap === true;\n                    textElement.reserveSpace = technique.reserveSpace !== false;\n                    textElement.kind = technique.kind;\n\n                    textElement.fadeNear = fadeNear;\n                    textElement.fadeFar = fadeFar;\n\n                    // Get the userData for text element picking.\n                    textElement.userData = userData;\n\n                    tile.addTextElement(textElement);\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates `Tile` objects from the decoded tile and list of materials specified.\n     *\n     * @param tile The [[Tile]] to create the geometry on.\n     * @param decodedTile The [[DecodedTile]].\n     * @param techniqueFilter: Optional filter. Should return true for any technique that is\n     *      applicable.\n     */\n    createObjects(\n        tile: Tile,\n        decodedTile: DecodedTile,\n        techniqueFilter?: (technique: Technique) => boolean\n    ) {\n        const materials: THREE.Material[] = [];\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const discreteZoomLevel = Math.floor(mapView.zoomLevel);\n        const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n        const objects = tile.objects;\n        const viewRanges = mapView.viewRanges;\n\n        for (const srcGeometry of decodedTile.geometries) {\n            const groups = srcGeometry.groups;\n            const groupCount = groups.length;\n\n            for (let groupIndex = 0; groupIndex < groupCount; ) {\n                const group = groups[groupIndex++];\n                const start = group.start;\n                const techniqueIndex = group.technique;\n                const technique = decodedTile.techniques[techniqueIndex];\n\n                if (\n                    group.createdOffsets!.indexOf(tile.offset) !== -1 ||\n                    technique.enabled === false ||\n                    (techniqueFilter !== undefined && !techniqueFilter(technique))\n                ) {\n                    continue;\n                }\n\n                let count = group.count;\n                group.createdOffsets!.push(tile.offset);\n\n                // compress consecutive groups\n                for (\n                    ;\n                    groupIndex < groupCount && groups[groupIndex].technique === techniqueIndex;\n                    ++groupIndex\n                ) {\n                    if (start + count !== groups[groupIndex].start) {\n                        break;\n                    }\n\n                    count += groups[groupIndex].count;\n\n                    // Mark this group as created, so it does not get processed again.\n                    groups[groupIndex].createdOffsets!.push(tile.offset);\n                }\n\n                const ObjectCtor = getObjectConstructor(technique);\n\n                if (ObjectCtor === undefined) {\n                    continue;\n                }\n\n                let material: THREE.Material | undefined = materials[techniqueIndex];\n\n                if (material === undefined) {\n                    const onMaterialUpdated = (texture: THREE.Texture) => {\n                        dataSource.requestUpdate();\n                        if (texture !== undefined) {\n                            tile.addOwnedTexture(texture);\n                        }\n                    };\n                    material = createMaterial(\n                        {\n                            technique,\n                            env: mapView.env,\n                            fog: mapView.scene.fog !== null\n                        },\n                        onMaterialUpdated\n                    );\n                    if (material === undefined) {\n                        continue;\n                    }\n                    materials[techniqueIndex] = material;\n                }\n\n                // Modify the standard textured shader to support height-based coloring.\n                if (isTerrainTechnique(technique)) {\n                    this.setupTerrainMaterial(technique, material, tile.mapView.clearColor);\n                }\n\n                const bufferGeometry = new THREE.BufferGeometry();\n\n                srcGeometry.vertexAttributes.forEach((vertexAttribute: BufferAttribute) => {\n                    const buffer = getBufferAttribute(vertexAttribute);\n                    bufferGeometry.setAttribute(vertexAttribute.name, buffer);\n                });\n\n                if (srcGeometry.interleavedVertexAttributes !== undefined) {\n                    srcGeometry.interleavedVertexAttributes.forEach(\n                        (attr: {\n                            type: any;\n                            buffer: any;\n                            stride: any;\n                            attributes: {\n                                forEach: (\n                                    arg0: (interleavedAttr: {\n                                        itemSize: any;\n                                        offset: any;\n                                        name: any;\n                                    }) => void\n                                ) => void;\n                            };\n                        }) => {\n                            const ArrayCtor = getArrayConstructor(attr.type);\n                            const buffer = new THREE.InterleavedBuffer(\n                                new ArrayCtor(attr.buffer),\n                                attr.stride\n                            );\n                            attr.attributes.forEach(\n                                (interleavedAttr: { itemSize: any; offset: any; name: any }) => {\n                                    const attribute = new THREE.InterleavedBufferAttribute(\n                                        buffer,\n                                        interleavedAttr.itemSize,\n                                        interleavedAttr.offset,\n                                        false\n                                    );\n                                    bufferGeometry.setAttribute(interleavedAttr.name, attribute);\n                                }\n                            );\n                        }\n                    );\n                }\n\n                if (srcGeometry.index) {\n                    bufferGeometry.setIndex(getBufferAttribute(srcGeometry.index));\n                }\n\n                if (!bufferGeometry.getAttribute(\"normal\") && needsVertexNormals(technique)) {\n                    bufferGeometry.computeVertexNormals();\n                }\n\n                bufferGeometry.addGroup(start, count);\n\n                if (isSolidLineTechnique(technique)) {\n                    // TODO: Unify access to shader defines via SolidLineMaterial setters\n                    assert(!isHighPrecisionLineMaterial(material));\n                    const lineMaterial = material as SolidLineMaterial;\n                    if (\n                        technique.clipping !== false &&\n                        tile.projection.type === ProjectionType.Planar\n                    ) {\n                        tile.boundingBox.getSize(tmpVector3);\n                        tmpVector2.set(tmpVector3.x, tmpVector3.y);\n                        lineMaterial.clipTileSize = tmpVector2;\n                    }\n\n                    if (bufferGeometry.getAttribute(\"color\")) {\n                        setShaderMaterialDefine(lineMaterial, \"USE_COLOR\", true);\n                    }\n                }\n\n                // Add the solid line outlines as a separate object.\n                const hasSolidLinesOutlines: boolean =\n                    isSolidLineTechnique(technique) && technique.secondaryWidth !== undefined;\n\n                const object = new ObjectCtor(bufferGeometry, material);\n                object.renderOrder = technique.renderOrder!;\n\n                if (group.renderOrderOffset !== undefined) {\n                    object.renderOrder += group.renderOrderOffset;\n                }\n\n                if (srcGeometry.uuid !== undefined) {\n                    object.userData.geometryId = srcGeometry.uuid;\n                }\n\n                if (\n                    (isCirclesTechnique(technique) || isSquaresTechnique(technique)) &&\n                    technique.enablePicking !== undefined\n                ) {\n                    // tslint:disable-next-line:max-line-length\n                    (object as MapViewPoints).enableRayTesting = technique.enablePicking!;\n                }\n\n                if (isLineTechnique(technique) || isSegmentsTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        hasDynamicColor\n                            ? (renderer, mat) => {\n                                  const lineMaterial = mat as THREE.LineBasicMaterial;\n                                  applyBaseColorToMaterial(\n                                      lineMaterial,\n                                      lineMaterial.color,\n                                      technique,\n                                      technique.color,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n                }\n\n                if (isSolidLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n\n                    FadingFeature.addRenderHelper(\n                        object,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n                            const unitFactor =\n                                technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n\n                            if (hasDynamicColor) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    technique,\n                                    technique.color,\n                                    mapView.env\n                                );\n                            }\n\n                            lineMaterial.lineWidth =\n                                getPropertyValue(technique.lineWidth, mapView.env) *\n                                unitFactor *\n                                0.5;\n\n                            if (technique.outlineWidth !== undefined) {\n                                lineMaterial.outlineWidth =\n                                    getPropertyValue(technique.outlineWidth, mapView.env) *\n                                    unitFactor;\n                            }\n\n                            if (technique.dashSize !== undefined) {\n                                lineMaterial.dashSize =\n                                    getPropertyValue(technique.dashSize, mapView.env) *\n                                    unitFactor *\n                                    0.5;\n                            }\n\n                            if (technique.gapSize !== undefined) {\n                                lineMaterial.gapSize =\n                                    getPropertyValue(technique.gapSize, mapView.env) *\n                                    unitFactor *\n                                    0.5;\n                            }\n                        }\n                    );\n                }\n\n                if (isExtrudedLineTechnique(technique)) {\n                    const hasDynamicColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    // extruded lines are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(\n                            mapView.env,\n                            technique as StandardExtrudedLineTechnique\n                        );\n\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const extrudedMaterial = mat as\n                                          | MapMeshStandardMaterial\n                                          | MapMeshBasicMaterial;\n\n                                      applyBaseColorToMaterial(\n                                          extrudedMaterial,\n                                          extrudedMaterial.color,\n                                          technique,\n                                          technique.color!,\n                                          mapView.env\n                                      );\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                this.addUserData(tile, srcGeometry, technique, object);\n\n                if (isExtrudedPolygonTechnique(technique) || isFillTechnique(technique)) {\n                    // filled polygons are normal meshes, and need transparency only when fading or\n                    // dynamic properties is defined.\n                    const hasDynamicPrimaryColor =\n                        Expr.isExpr(technique.color) || Expr.isExpr(technique.opacity);\n                    const hasDynamicSecondaryColor =\n                        isExtrudedPolygonTechnique(technique) && Expr.isExpr(technique.emissive);\n                    const hasDynamicColor = hasDynamicPrimaryColor || hasDynamicSecondaryColor;\n\n                    if (technique.fadeFar !== undefined || hasDynamicColor) {\n                        const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                        FadingFeature.addRenderHelper(\n                            object,\n                            viewRanges,\n                            fadingParams.fadeNear,\n                            fadingParams.fadeFar,\n                            true,\n                            hasDynamicColor\n                                ? (renderer, mat) => {\n                                      const polygonMaterial = mat as\n                                          | MapMeshBasicMaterial\n                                          | MapMeshStandardMaterial;\n\n                                      if (hasDynamicPrimaryColor) {\n                                          applyBaseColorToMaterial(\n                                              polygonMaterial,\n                                              polygonMaterial.color,\n                                              technique,\n                                              technique.color!,\n                                              mapView.env\n                                          );\n                                      }\n\n                                      if (\n                                          hasDynamicSecondaryColor &&\n                                          // Just to omit compiler warnings\n                                          isExtrudedPolygonTechnique(technique)\n                                      ) {\n                                          const standardMat = mat as MapMeshStandardMaterial;\n\n                                          applySecondaryColorToMaterial(\n                                              standardMat.emissive,\n                                              technique.emissive!,\n                                              mapView.env\n                                          );\n                                      }\n                                  }\n                                : undefined\n                        );\n                    }\n                }\n\n                const extrudedObjects: Array<{\n                    object: THREE.Object3D;\n                    /**\n                     * If set to `true`, an [[ExtrusionFeature]] that injects extrusion shader\n                     * chunk will be applied to the material. Otherwise, extrusion should\n                     * be added in the material's shader manually.\n                     */\n                    materialFeature: boolean;\n                }> = [];\n\n                const animatedExtrusionHandler = mapView.animatedExtrusionHandler;\n\n                let extrusionAnimationEnabled: boolean | undefined = false;\n\n                if (\n                    isExtrudedPolygonTechnique(technique) &&\n                    animatedExtrusionHandler !== undefined\n                ) {\n                    let animateExtrusionValue = getPropertyValue(\n                        technique.animateExtrusion,\n                        discreteZoomEnv\n                    );\n                    if (animateExtrusionValue !== undefined) {\n                        animateExtrusionValue =\n                            typeof animateExtrusionValue === \"boolean\"\n                                ? animateExtrusionValue\n                                : typeof animateExtrusionValue === \"number\"\n                                ? animateExtrusionValue !== 0\n                                : false;\n                    }\n                    extrusionAnimationEnabled =\n                        animateExtrusionValue !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? animateExtrusionValue\n                            : animatedExtrusionHandler.enabled;\n                }\n\n                const renderDepthPrePass =\n                    isExtrudedPolygonTechnique(technique) && isRenderDepthPrePassEnabled(technique);\n\n                if (renderDepthPrePass) {\n                    const depthPassMesh = createDepthPrePassMesh(object as THREE.Mesh);\n                    // Set geometry kind for depth pass mesh so that it gets the displacement map\n                    // for elevation overlay.\n                    this.registerTileObject(tile, depthPassMesh, technique.kind);\n                    objects.push(depthPassMesh);\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: depthPassMesh,\n                            materialFeature: true\n                        });\n                    }\n\n                    setDepthPrePassStencil(depthPassMesh, object as THREE.Mesh);\n                }\n\n                this.registerTileObject(tile, object, technique.kind);\n                objects.push(object);\n\n                // Add the extruded building edges as a separate geometry.\n                if (isExtrudedPolygonTechnique(technique) && srcGeometry.edgeIndex !== undefined) {\n                    const edgeGeometry = new THREE.BufferGeometry();\n                    edgeGeometry.setAttribute(\"position\", bufferGeometry.getAttribute(\"position\"));\n\n                    const colorAttribute = bufferGeometry.getAttribute(\"color\");\n                    if (colorAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"color\", colorAttribute);\n                    }\n\n                    const extrusionAttribute = bufferGeometry.getAttribute(\"extrusionAxis\");\n                    if (extrusionAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"extrusionAxis\", extrusionAttribute);\n                    }\n\n                    const normalAttribute = bufferGeometry.getAttribute(\"normal\");\n                    if (normalAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"normal\", normalAttribute);\n                    }\n\n                    const uvAttribute = bufferGeometry.getAttribute(\"uv\");\n                    if (uvAttribute !== undefined) {\n                        edgeGeometry.setAttribute(\"uv\", uvAttribute);\n                    }\n\n                    edgeGeometry.setIndex(\n                        getBufferAttribute(srcGeometry.edgeIndex! as BufferAttribute)\n                    );\n\n                    // Read the uniforms from the technique values (and apply the default values).\n                    const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(\n                        discreteZoomEnv,\n                        extrudedPolygonTechnique\n                    );\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const edgeMaterial = new EdgeMaterial(materialParams);\n                    const edgeObj = new THREE.LineSegments(edgeGeometry, edgeMaterial);\n\n                    // Set the correct render order.\n                    edgeObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        edgeObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        extrudedPolygonTechnique.lineColor !== undefined &&\n                            Expr.isExpr(extrudedPolygonTechnique.lineColor)\n                            ? () => {\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      extrudedPolygonTechnique,\n                                      extrudedPolygonTechnique.lineColor!,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    if (extrusionAnimationEnabled) {\n                        extrudedObjects.push({\n                            object: edgeObj,\n                            materialFeature: false\n                        });\n                    }\n\n                    this.registerTileObject(tile, edgeObj, technique.kind);\n                    objects.push(edgeObj);\n                }\n\n                // animate the extrusion of buildings\n                if (isExtrudedPolygonTechnique(technique) && extrusionAnimationEnabled) {\n                    extrudedObjects.push({\n                        object,\n                        materialFeature: true\n                    });\n\n                    const extrusionAnimationDuration =\n                        technique.animateExtrusionDuration !== undefined &&\n                        animatedExtrusionHandler.forceEnabled === false\n                            ? technique.animateExtrusionDuration\n                            : animatedExtrusionHandler.duration;\n\n                    tile.animatedExtrusionTileHandler = new AnimatedExtrusionTileHandler(\n                        tile,\n                        extrudedObjects,\n                        extrusionAnimationDuration\n                    );\n                    mapView.animatedExtrusionHandler.add(tile.animatedExtrusionTileHandler);\n                }\n\n                // Add the fill area edges as a separate geometry.\n\n                if (isFillTechnique(technique) && srcGeometry.edgeIndex !== undefined) {\n                    const outlineGeometry = new THREE.BufferGeometry();\n                    outlineGeometry.setAttribute(\n                        \"position\",\n                        bufferGeometry.getAttribute(\"position\")\n                    );\n                    outlineGeometry.setIndex(getBufferAttribute(srcGeometry.edgeIndex!));\n\n                    const fillTechnique = technique as FillTechnique;\n\n                    const fadingParams = this.getPolygonFadingParams(mapView.env, fillTechnique);\n\n                    // Configure the edge material based on the theme values.\n                    const materialParams: EdgeMaterialParameters = {\n                        color: fadingParams.color,\n                        colorMix: fadingParams.colorMix,\n                        fadeNear: fadingParams.lineFadeNear,\n                        fadeFar: fadingParams.lineFadeFar\n                    };\n                    const outlineMaterial = new EdgeMaterial(materialParams);\n                    const outlineObj = new THREE.LineSegments(outlineGeometry, outlineMaterial);\n                    outlineObj.renderOrder = object.renderOrder + 0.1;\n\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.lineFadeNear,\n                        fadingParams.lineFadeFar,\n                        false,\n                        fillTechnique.lineColor !== undefined &&\n                            Expr.isExpr(fillTechnique.lineColor)\n                            ? (renderer, mat) => {\n                                  const edgeMaterial = mat as EdgeMaterial;\n                                  applyBaseColorToMaterial(\n                                      edgeMaterial,\n                                      edgeMaterial.color,\n                                      fillTechnique,\n                                      fillTechnique.lineColor!,\n                                      mapView.env\n                                  );\n                              }\n                            : undefined\n                    );\n\n                    this.registerTileObject(tile, outlineObj, technique.kind);\n                    objects.push(outlineObj);\n                }\n\n                // Add the fill area edges as a separate geometry.\n                if (hasSolidLinesOutlines) {\n                    const outlineTechnique = technique as SolidLineTechnique;\n                    const outlineMaterial = material.clone() as SolidLineMaterial;\n                    applyBaseColorToMaterial(\n                        outlineMaterial,\n                        outlineMaterial.color,\n                        outlineTechnique,\n                        outlineTechnique.secondaryColor ?? 0x000000,\n                        discreteZoomEnv\n                    );\n                    if (outlineTechnique.secondaryCaps !== undefined) {\n                        outlineMaterial.caps = outlineTechnique.secondaryCaps;\n                    }\n                    const outlineObj = new ObjectCtor(bufferGeometry, outlineMaterial);\n\n                    outlineObj.renderOrder =\n                        outlineTechnique.secondaryRenderOrder !== undefined\n                            ? outlineTechnique.secondaryRenderOrder\n                            : technique.renderOrder - 0.0000001;\n\n                    if (group.renderOrderOffset !== undefined) {\n                        outlineObj.renderOrder += group.renderOrderOffset;\n                    }\n\n                    const fadingParams = this.getFadingParams(discreteZoomEnv, technique);\n                    FadingFeature.addRenderHelper(\n                        outlineObj,\n                        viewRanges,\n                        fadingParams.fadeNear,\n                        fadingParams.fadeFar,\n                        false,\n                        (renderer, mat) => {\n                            const lineMaterial = mat as SolidLineMaterial;\n\n                            const unitFactor =\n                                outlineTechnique.metricUnit === \"Pixel\"\n                                    ? mapView.pixelToWorld\n                                    : 1.0;\n\n                            if (outlineTechnique.secondaryColor !== undefined) {\n                                applyBaseColorToMaterial(\n                                    lineMaterial,\n                                    lineMaterial.color,\n                                    outlineTechnique,\n                                    outlineTechnique.secondaryColor,\n                                    mapView.env\n                                );\n                            }\n\n                            if (outlineTechnique.secondaryWidth !== undefined) {\n                                const techniqueLineWidth = getPropertyValue(\n                                    outlineTechnique.lineWidth!,\n                                    mapView.env\n                                );\n                                const techniqueSecondaryWidth = getPropertyValue(\n                                    outlineTechnique.secondaryWidth!,\n                                    mapView.env\n                                );\n                                const techniqueOpacity = getPropertyValue(\n                                    outlineTechnique.opacity,\n                                    mapView.env\n                                );\n                                // hide outline when it's equal or smaller then line to avoid subpixel contour\n                                const lineWidth =\n                                    techniqueSecondaryWidth <= techniqueLineWidth &&\n                                    (techniqueOpacity === undefined || techniqueOpacity === 1)\n                                        ? 0\n                                        : techniqueSecondaryWidth;\n                                lineMaterial.lineWidth = lineWidth * unitFactor * 0.5;\n                            }\n                        }\n                    );\n\n                    this.registerTileObject(tile, outlineObj, technique.kind);\n                    objects.push(outlineObj);\n                }\n            }\n        }\n    }\n\n    /**\n     * Prepare the [[Tile]]s pois. Uses the [[PoiManager]] in [[MapView]].\n     */\n    preparePois(tile: Tile, decodedTile: DecodedTile) {\n        if (decodedTile.poiGeometries !== undefined) {\n            tile.mapView.poiManager.addPois(tile, decodedTile);\n        }\n    }\n\n    /**\n     * Creates and add a background plane for the tile.\n     */\n    addGroundPlane(tile: Tile, renderOrder: number) {\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const projection = tile.projection;\n\n        const color = mapView.clearColor;\n        const tmpV = new THREE.Vector3();\n\n        if (tile.projection.type === ProjectionType.Spherical) {\n            const { east, west, north, south } = tile.geoBox;\n            const sourceProjection = dataSource.getTilingScheme().projection;\n            const g = new THREE.BufferGeometry();\n            const posAttr = new THREE.BufferAttribute(\n                new Float32Array([\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(south, west), tmpV)\n                        .toArray(),\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(south, east), tmpV)\n                        .toArray(),\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(north, west), tmpV)\n                        .toArray(),\n                    ...sourceProjection\n                        .projectPoint(new GeoCoordinates(north, east), tmpV)\n                        .toArray()\n                ]),\n                3\n            );\n            g.setAttribute(\"position\", posAttr);\n            g.setIndex(new THREE.BufferAttribute(new Uint16Array([0, 1, 2, 2, 1, 3]), 1));\n            const modifier = new SphericalGeometrySubdivisionModifier(\n                THREE.Math.degToRad(10),\n                sourceProjection\n            );\n            modifier.modify(g);\n\n            for (let i = 0; i < posAttr.array.length; i += 3) {\n                tmpV.set(posAttr.array[i], posAttr.array[i + 1], posAttr.array[i + 2]);\n                projection.reprojectPoint(sourceProjection, tmpV, tmpV);\n                tmpV.sub(tile.center);\n                (posAttr.array as Float32Array)[i] = tmpV.x;\n                (posAttr.array as Float32Array)[i + 1] = tmpV.y;\n                (posAttr.array as Float32Array)[i + 2] = tmpV.z;\n            }\n            posAttr.needsUpdate = true;\n\n            const material = new MapMeshBasicMaterial({\n                color,\n                visible: true,\n                depthWrite: true\n            });\n            const mesh = new THREE.Mesh(g, material);\n            mesh.renderOrder = renderOrder;\n            this.registerTileObject(tile, mesh, GeometryKind.Background);\n            tile.objects.push(mesh);\n        } else {\n            // Add a ground plane to the tile.\n            tile.boundingBox.getSize(tmpV);\n            const groundPlane = this.createPlane(\n                tmpV.x,\n                tmpV.y,\n                tile.center,\n                color,\n                true,\n                renderOrder\n            );\n\n            this.registerTileObject(tile, groundPlane, GeometryKind.Background);\n            tile.objects.push(groundPlane);\n        }\n    }\n\n    /**\n     * Process the given [[Tile]] and assign default values to render orders\n     * and label priorities.\n     *\n     * @param tile The [[Tile]] to process.\n     */\n    private processPriorities(tile: Tile) {\n        const decodedTile = tile.decodedTile;\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        const theme = tile.mapView;\n\n        if (!theme) {\n            return;\n        }\n\n        const { priorities, labelPriorities } = tile.mapView.theme;\n\n        decodedTile.techniques.forEach(technique => {\n            const indexedTechnique = technique as IndexedTechnique;\n\n            if (\n                isTextTechnique(technique) ||\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique)\n            ) {\n                // for screen-space techniques the `category` is used to assign\n                // priorities.\n                if (labelPriorities && typeof indexedTechnique._category === \"string\") {\n                    // override the `priority` when the technique uses `category`.\n                    const priority = labelPriorities.indexOf(indexedTechnique._category);\n                    if (priority !== -1) {\n                        technique.priority = labelPriorities.length - priority;\n                    }\n                }\n            } else if (priorities && indexedTechnique._styleSet !== undefined) {\n                // Compute the render order based on the style category and styleSet.\n                const computeRenderOrder = (category: string): number | undefined => {\n                    const priority = priorities?.findIndex(\n                        entry =>\n                            entry.group === indexedTechnique._styleSet &&\n                            entry.category === category\n                    );\n\n                    return priority !== undefined && priority !== -1\n                        ? (priority + 1) * 10\n                        : undefined;\n                };\n\n                if (typeof indexedTechnique._category === \"string\") {\n                    // override the renderOrder when the technique is using categories.\n                    const renderOrder = computeRenderOrder(indexedTechnique._category);\n\n                    if (renderOrder !== undefined) {\n                        technique.renderOrder = renderOrder;\n                    }\n                }\n\n                if (typeof indexedTechnique._secondaryCategory === \"string\") {\n                    // override the secondaryRenderOrder when the technique is using categories.\n                    const secondaryRenderOrder = computeRenderOrder(\n                        indexedTechnique._secondaryCategory\n                    );\n\n                    if (secondaryRenderOrder !== undefined) {\n                        (technique as any).secondaryRenderOrder = secondaryRenderOrder;\n                    }\n                }\n            }\n        });\n    }\n\n    private setupTerrainMaterial(\n        technique: TerrainTechnique,\n        material: THREE.Material,\n        terrainColor: number\n    ) {\n        if (technique.displacementMap === undefined) {\n            // Render terrain using the given color.\n            const stdMaterial = material as MapMeshStandardMaterial;\n            stdMaterial.color.set(terrainColor);\n            return;\n        }\n\n        // Render terrain using height-based colors.\n        (material as any).onBeforeCompile = (shader: THREE.Shader) => {\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_pars_fragment>\",\n                `#include <map_pars_fragment>\n    uniform sampler2D displacementMap;\n    uniform float displacementScale;\n    uniform float displacementBias;`\n            );\n            shader.fragmentShader = shader.fragmentShader.replace(\n                \"#include <map_fragment>\",\n                `#ifdef USE_MAP\n    float minElevation = ${EarthConstants.MIN_ELEVATION.toFixed(1)};\n    float maxElevation = ${EarthConstants.MAX_ELEVATION.toFixed(1)};\n    float elevationRange = maxElevation - minElevation;\n\n    float disp = texture2D( displacementMap, vUv ).x * displacementScale + displacementBias;\n    vec4 texelColor = texture2D( map, vec2((disp - minElevation) / elevationRange, 0.0) );\n    texelColor = mapTexelToLinear( texelColor );\n    diffuseColor *= texelColor;\n#endif`\n            );\n            // We remove the displacement map from manipulating the vertices, it is\n            // however still required for the pixel shader, so it can't be directly\n            // removed.\n            shader.vertexShader = shader.vertexShader.replace(\n                \"#include <displacementmap_vertex>\",\n                \"\"\n            );\n        };\n        (material as MapMeshStandardMaterial).displacementMap!.needsUpdate = true;\n    }\n\n    /**\n     * Create a simple flat plane for a [[Tile]].\n     *\n     * @param {number} width Width of plane.\n     * @param {number} height Height of plane.\n     * @param {THREE.Vector3} planeCenter Center of plane.\n     * @param {number} colorHex Color of the plane mesh.\n     * @param {boolean} isVisible `True` to make the mesh visible.\n     * @returns {THREE.Mesh} The created plane.\n     */\n    private createPlane(\n        width: number,\n        height: number,\n        planeCenter: THREE.Vector3,\n        colorHex: number,\n        isVisible: boolean,\n        renderOrder: number\n    ): THREE.Mesh {\n        const geometry = new THREE.PlaneGeometry(width, height, 1);\n        // TODO cache the material HARP-4207\n        const material = new MapMeshBasicMaterial({\n            color: colorHex,\n            visible: isVisible,\n            depthWrite: false\n        });\n        const plane = new THREE.Mesh(geometry, material);\n        plane.position.copy(planeCenter);\n        // Render before everything else\n        plane.renderOrder = renderOrder;\n        return plane;\n    }\n\n    private addUserData(\n        tile: Tile,\n        srcGeometry: Geometry,\n        technique: Technique,\n        object: THREE.Object3D\n    ) {\n        if ((srcGeometry.objInfos?.length ?? 0) === 0) {\n            return;\n        }\n\n        if (isTerrainTechnique(technique)) {\n            assert(\n                Object.keys(object.userData).length === 0,\n                \"Unexpected user data in terrain object\"\n            );\n\n            assert(\n                typeof srcGeometry.objInfos![0] === \"object\",\n                \"Wrong attribute map type for terrain geometry\"\n            );\n\n            const displacementMap = (srcGeometry.objInfos as DisplacementMap[])[0];\n            const tileDisplacementMap: TileDisplacementMap = {\n                tileKey: tile.tileKey,\n                texture: new THREE.DataTexture(\n                    displacementMap.buffer,\n                    displacementMap.xCountVertices,\n                    displacementMap.yCountVertices,\n                    THREE.LuminanceFormat,\n                    THREE.FloatType\n                ),\n                displacementMap,\n                geoBox: tile.geoBox\n            };\n            object.userData = tileDisplacementMap;\n        } else if (isSolidLineTechnique(technique)) {\n            object.userData = srcGeometry.objInfos!;\n        } else {\n            // Set the feature data for picking with `MapView.intersectMapObjects()` except for\n            // solid-line which uses tile-based picking.\n            const featureData: TileFeatureData = {\n                geometryType: srcGeometry.type,\n                starts: srcGeometry.featureStarts,\n                objInfos: srcGeometry.objInfos\n            };\n            object.userData.feature = featureData;\n            object.userData.technique = technique;\n        }\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getFadingParams(\n        env: Env,\n        technique: MakeTechniqueAttrs<BaseTechniqueParams>\n    ): FadingParameters {\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n        return {\n            fadeNear,\n            fadeFar\n        };\n    }\n\n    /**\n     * Gets the fading parameters for several kinds of objects.\n     */\n    private getPolygonFadingParams(\n        env: Env,\n        technique: FillTechnique | ExtrudedPolygonTechnique\n    ): PolygonFadingParameters {\n        let color: string | number | undefined;\n        let colorMix = EdgeMaterial.DEFAULT_COLOR_MIX;\n\n        if (technique.lineColor !== undefined) {\n            color = getPropertyValue(technique.lineColor, env);\n            if (isExtrudedPolygonTechnique(technique)) {\n                const extrudedPolygonTechnique = technique as ExtrudedPolygonTechnique;\n                colorMix =\n                    extrudedPolygonTechnique.lineColorMix !== undefined\n                        ? extrudedPolygonTechnique.lineColorMix\n                        : EdgeMaterial.DEFAULT_COLOR_MIX;\n            }\n        }\n\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : FadingFeature.DEFAULT_FADE_NEAR;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : FadingFeature.DEFAULT_FADE_FAR;\n\n        const lineFadeNear =\n            technique.lineFadeNear !== undefined\n                ? getPropertyValue(technique.lineFadeNear, env)\n                : fadeNear;\n        const lineFadeFar =\n            technique.lineFadeFar !== undefined\n                ? getPropertyValue(technique.lineFadeFar, env)\n                : fadeFar;\n\n        if (color === undefined) {\n            color = EdgeMaterial.DEFAULT_COLOR;\n        }\n\n        return {\n            color,\n            colorMix,\n            fadeNear,\n            fadeFar,\n            lineFadeNear,\n            lineFadeFar\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { LineMarkerTechnique, Theme } from \"@here/harp-datasource-protocol\";\nimport {\n    AdditionParameters,\n    DEFAULT_TEXT_CANVAS_LAYER,\n    FontCatalog,\n    TextBufferAdditionParameters,\n    TextBufferCreationParameters,\n    TextCanvas,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport {\n    assert,\n    LoggerManager,\n    LogLevel,\n    Math2D,\n    MathUtils,\n    PerformanceTimer\n} from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource } from \"../DataSource\";\nimport { debugContext } from \"../DebugContext\";\nimport { overlayTextElement } from \"../geometry/overlayOnElevation\";\nimport { PickObjectType, PickResult } from \"../PickHandler\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { PoiRendererFactory } from \"../poi/PoiRendererFactory\";\nimport { IBox, LineWithBound, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { Tile } from \"../Tile\";\nimport { MapViewUtils } from \"../Utils\";\nimport { DataSourceTileList } from \"../VisibleTileSet\";\nimport { FontCatalogLoader } from \"./FontCatalogLoader\";\nimport {\n    checkReadyForPlacement,\n    computeViewDistance,\n    getMaxViewDistance,\n    isPathLabelTooSmall,\n    placeIcon,\n    PlacementResult,\n    placePathLabel,\n    placePointLabel,\n    PrePlacementResult\n} from \"./Placement\";\nimport { PlacementStats } from \"./PlacementStats\";\nimport { RenderState } from \"./RenderState\";\nimport { SimpleLineCurve, SimplePath } from \"./SimplePath\";\nimport { TextCanvasFactory } from \"./TextCanvasFactory\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\nimport { LoadingState, TextElement, TextPickResult } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport {\n    initializeDefaultOptions,\n    TextElementsRendererOptions\n} from \"./TextElementsRendererOptions\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementStateCache } from \"./TextElementStateCache\";\nimport { TextElementType } from \"./TextElementType\";\nimport { TextElementStyle, TextStyleCache } from \"./TextStyleCache\";\nimport { UpdateStats } from \"./UpdateStats\";\nimport { ViewState } from \"./ViewState\";\n\ninterface RenderParams {\n    numRenderedTextElements: number;\n    // TODO: HARP-7373. Move to update() method at the end of the frame.\n    fadeAnimationRunning: boolean;\n    time: number;\n}\n\nenum Pass {\n    PersistentLabels,\n    NewLabels\n}\n\n/**\n * Default distance scale. Will be applied if distanceScale is not defined in the technique.\n * Defines the scale that will be applied to labeled icons (icon and text) in the distance.\n */\nexport const DEFAULT_TEXT_DISTANCE_SCALE = 0.5;\n\n/**\n * Maximum number of recommended labels. If more labels are encountered, the \"overloaded\" mode is\n * set, which modifies the behavior of label placement and rendering, trying to keep delivering an\n * interactive performance. The overloaded mode should not be activated if the [[MapView]] is\n * rendering a static image (camera not moving and no animation running).\n */\nconst OVERLOAD_LABEL_LIMIT = 20000;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Default number of labels/POIs updated in a frame. They are rendered only if they fit. If the\n * camera is not moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATED_LABEL_LIMIT = 100;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for placement. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_UPDATE_TIME_LIMIT = 5;\n\n/**\n * If \"overloaded\" is `true`:\n *\n * Maximum time in milliseconds available for rendering. If value is <= 0, or if the camera is not\n * moving, it is ignored. See [[TextElementsRenderer.isDynamicFrame]].\n */\nconst OVERLOAD_PLACE_TIME_LIMIT = 10;\n\nconst logger = LoggerManager.instance.create(\"TextElementsRenderer\", { level: LogLevel.Log });\n\n// Development flag: Enable debug print.\nconst PRINT_LABEL_DEBUG_INFO: boolean = false;\nconst updateStats = PRINT_LABEL_DEBUG_INFO ? new UpdateStats(logger) : undefined;\nconst placementStats = PRINT_LABEL_DEBUG_INFO ? new PlacementStats(logger) : undefined;\n\nconst tempPosition = new THREE.Vector3();\nconst tempScreenPosition = new THREE.Vector2();\nconst tempScreenPoints: THREE.Vector2[] = [];\nconst tempPoiScreenPosition = new THREE.Vector2();\nconst tmpTextBufferCreationParams: TextBufferCreationParameters = {};\nconst tmpAdditionParams: AdditionParameters = {};\nconst tmpBufferAdditionParams: TextBufferAdditionParameters = {};\n\nclass TileTextElements {\n    constructor(readonly tile: Tile, readonly group: TextElementGroup) {}\n}\n\nclass TextElementLists {\n    constructor(readonly lists: TileTextElements[]) {}\n\n    get priority() {\n        assert(this.lists.length > 0);\n        // All text element lists here have the same priority.\n        return this.lists[0].group.priority;\n    }\n    /**\n     * Sum up the number of elements in all lists.\n     */\n    count(): number {\n        let n = 0;\n        for (const list of this.lists) {\n            n += list.group.elements.length;\n        }\n        return n;\n    }\n}\n\nfunction checkIfTextElementsChanged(dataSourceTileList: DataSourceTileList[]) {\n    let textElementsChanged = false;\n\n    dataSourceTileList.forEach(({ renderedTiles }) => {\n        renderedTiles.forEach(tile => {\n            if (tile.textElementsChanged) {\n                tile.textElementsChanged = false;\n                textElementsChanged = true;\n            }\n        });\n    });\n\n    return textElementsChanged;\n}\n\nfunction addTextToCanvas(\n    textElement: TextElement,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    path?: THREE.Path,\n    pathOverflow?: boolean\n) {\n    tmpAdditionParams.path = path;\n    tmpAdditionParams.pathOverflow = pathOverflow;\n    tmpAdditionParams.layer = textElement.renderOrder;\n    tmpAdditionParams.letterCaseArray = textElement.glyphCaseArray;\n    tmpAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addText(textElement.glyphs!, screenPosition, tmpAdditionParams);\n}\n\nfunction addTextBufferToCanvas(\n    textElementState: TextElementState,\n    canvas: TextCanvas,\n    screenPosition: THREE.Vector3,\n    fadeFactor: number,\n    scaleFactor: number\n): boolean {\n    const textElement = textElementState.element;\n    const textRenderState = textElementState.textRenderState;\n    const opacity = textRenderState!.opacity * fadeFactor * textElement.renderStyle!.opacity;\n\n    if (opacity === 0) {\n        return false;\n    }\n\n    // Compute the TextBufferObject when we know we're gonna render this label.\n    tmpTextBufferCreationParams.letterCaseArray = textElement.glyphCaseArray;\n    if (textElement.textBufferObject === undefined) {\n        textElement.textBufferObject = canvas.createTextBufferObject(\n            textElement.glyphs!,\n            tmpTextBufferCreationParams\n        );\n    }\n    const backgroundIsVisible =\n        textElement.renderStyle!.backgroundOpacity > 0 &&\n        canvas.textRenderStyle.fontSize.backgroundSize > 0;\n\n    tmpBufferAdditionParams.layer = textElement.renderOrder;\n    tmpBufferAdditionParams.position = screenPosition;\n    tmpBufferAdditionParams.scale = scaleFactor;\n    tmpBufferAdditionParams.opacity = opacity;\n    tmpBufferAdditionParams.backgroundOpacity = backgroundIsVisible\n        ? tmpBufferAdditionParams.opacity * textElement.renderStyle!.backgroundOpacity\n        : 0.0;\n    tmpBufferAdditionParams.pickingData = textElement.userData ? textElement : undefined;\n    canvas.addTextBufferObject(textElement.textBufferObject!, tmpBufferAdditionParams);\n    return true;\n}\n\nfunction shouldRenderPointText(\n    labelState: TextElementState,\n    viewState: ViewState,\n    options: TextElementsRendererOptions\n): boolean {\n    const textRenderState: RenderState | undefined = labelState.textRenderState;\n    const label = labelState.element;\n    const poiInfo = label.poiInfo;\n\n    assert(label.type !== TextElementType.PathLabel);\n\n    const hasText = textRenderState !== undefined && label.text !== \"\";\n    if (!hasText) {\n        return false;\n    }\n\n    const visibleInZoomLevel =\n        poiInfo === undefined ||\n        viewState.zoomLevel === undefined ||\n        MathUtils.isClamped(\n            viewState.zoomLevel,\n            poiInfo.iconMinZoomLevel,\n            poiInfo.iconMaxZoomLevel\n        );\n    if (!visibleInZoomLevel) {\n        return false;\n    }\n\n    const poiTextMaxDistance = getMaxViewDistance(viewState, options.maxDistanceRatioForPoiLabels!);\n    const visibleAtDistance =\n        label.ignoreDistance === true ||\n        labelState.viewDistance === undefined ||\n        labelState.viewDistance < poiTextMaxDistance;\n    if (!visibleAtDistance) {\n        return false;\n    }\n\n    // Do not render text if POI cannot be rendered and is not optional.\n    return poiInfo === undefined || poiInfo.isValid === true || poiInfo.iconIsOptional !== false;\n}\n\nfunction shouldRenderPoiText(labelState: TextElementState, viewState: ViewState) {\n    // Do not actually render (just allocate space) if camera is moving and\n    // renderTextDuringMovements is not true.\n    const poiInfo = labelState.element.poiInfo;\n\n    return (\n        !viewState.cameraIsMoving ||\n        poiInfo === undefined ||\n        poiInfo.renderTextDuringMovements === true\n    );\n}\n\nexport type ViewUpdateCallback = () => void;\n\nfunction isPlacementTimeExceeded(startTime: number | undefined): boolean {\n    // startTime is set in overload mode.\n    if (startTime === undefined || OVERLOAD_PLACE_TIME_LIMIT <= 0) {\n        return false;\n    }\n    const endTime = PerformanceTimer.now();\n    const elapsedTime = endTime - startTime;\n    if (elapsedTime > OVERLOAD_PLACE_TIME_LIMIT) {\n        logger.debug(\"Placement time limit exceeded.\");\n        return true;\n    }\n    return false;\n}\n\n/**\n *\n * Internal class to manage all text rendering.\n */\nexport class TextElementsRenderer {\n    private m_initialized: boolean = false;\n    private m_initPromise: Promise<void> | undefined;\n    private m_glyphLoadingCount: number = 0;\n    private m_loadPromise: Promise<any> | undefined;\n    private readonly m_options: TextElementsRendererOptions;\n\n    private readonly m_textStyleCache: TextStyleCache;\n    private m_textRenderers: TextCanvasRenderer[] = [];\n\n    private m_overlayTextElements?: TextElement[];\n\n    // TODO: Replace this for an array of textures when more fonts are in use.\n    private m_debugGlyphTextureCacheMesh?: THREE.Mesh;\n    private m_debugGlyphTextureCacheWireMesh?: THREE.LineSegments;\n\n    private m_tmpVector = new THREE.Vector2();\n    private m_overloaded: boolean = false;\n    private m_cacheInvalidated: boolean = false;\n    private m_forceNewLabelsPass: boolean = false;\n\n    private readonly m_textElementStateCache: TextElementStateCache = new TextElementStateCache();\n\n    /**\n     * Create the `TextElementsRenderer` which selects which labels should be placed on screen as\n     * a preprocessing step, which is not done every frame, and also renders the placed\n     * [[TextElement]]s every frame.\n     *\n     * @param m_viewState State of the view for which this renderer will draw text.\n     * @param m_viewCamera Camera used by the view for which this renderer will draw text.\n     * @param m_viewUpdateCallback To be called whenever the view needs to be updated.\n     * @param m_screenCollisions General 2D screen occlusion management, may be shared between\n     *     instances.\n     * @param m_screenProjector Projects 3D coordinates into screen space.\n     * @param m_textCanvasFactory To create TextCanvas instances.\n     * @param m_poiRendererFactory To create PoiRenderer instances.\n     * @param m_poiManager To prepare pois for rendering.\n     * @param m_fontCatalogLoader To load font catalogs.\n     * @param m_theme Theme defining  text styles.\n     * @param options Configuration options for the text renderer. See\n     * [[TextElementsRendererOptions]].\n     */\n    constructor(\n        private m_viewState: ViewState,\n        private m_viewCamera: THREE.Camera,\n        private m_viewUpdateCallback: ViewUpdateCallback,\n        private m_screenCollisions: ScreenCollisions,\n        private m_screenProjector: ScreenProjector,\n        private m_textCanvasFactory: TextCanvasFactory,\n        private m_poiManager: PoiManager,\n        private m_poiRendererFactory: PoiRendererFactory,\n        private m_fontCatalogLoader: FontCatalogLoader,\n        private m_theme: Theme,\n        options: TextElementsRendererOptions\n    ) {\n        this.m_textStyleCache = new TextStyleCache(this.m_theme);\n\n        this.m_options = { ...options };\n        initializeDefaultOptions(this.m_options);\n\n        this.m_textCanvasFactory.setGlyphCountLimits(\n            this.m_options.minNumGlyphs!,\n            this.m_options.maxNumGlyphs!\n        );\n    }\n\n    /**\n     * Disable all fading animations (for debugging and performance measurement). Defaults to\n     * `false`.\n     */\n    set disableFading(disable: boolean) {\n        this.m_options.disableFading = disable;\n    }\n\n    get disableFading(): boolean {\n        return this.m_options.disableFading === true;\n    }\n\n    get styleCache() {\n        return this.m_textStyleCache;\n    }\n\n    /**\n     * Render the text using the specified camera into the current canvas.\n     *\n     * @param camera Orthographic camera to use.\n     */\n    renderText(camera: THREE.OrthographicCamera) {\n        if (!this.initialized) {\n            return;\n        }\n\n        this.updateGlyphDebugMesh();\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.render(camera);\n        }\n    }\n\n    /**\n     * Forces update of text elements in the next call to [[placeText]].\n     */\n    invalidateCache() {\n        this.m_cacheInvalidated = true;\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has started a movement.\n     */\n    movementStarted() {\n        // Nothing to do (yet)\n    }\n\n    /**\n     * Notify `TextElementsRenderer` that the camera has finished its movement.\n     */\n    movementFinished() {\n        this.invalidateCache();\n    }\n\n    /**\n     * Is `true` if number of [[TextElement]]s in visible tiles is larger than the recommended\n     * number `OVERLOAD_LABEL_LIMIT`.\n     */\n    get overloaded(): boolean {\n        return this.m_overloaded;\n    }\n\n    /**\n     * Places text elements for the current frame.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     * @param time Current frame time.\n     * @param elevationProvider\n     */\n    placeText(dataSourceTileList: DataSourceTileList[], time: number) {\n        const tileTextElementsChanged = checkIfTextElementsChanged(dataSourceTileList);\n\n        const textElementsAvailable = this.hasOverlayText() || tileTextElementsChanged;\n        if (!this.initialize(textElementsAvailable)) {\n            return;\n        }\n\n        const updateTextElements =\n            this.m_cacheInvalidated ||\n            tileTextElementsChanged ||\n            this.m_viewState.renderedTilesChanged;\n\n        logger.debug(\n            `FRAME: ${this.m_viewState.frameNumber}, ZOOM LEVEL: ${this.m_viewState.zoomLevel}`\n        );\n\n        if (updateTextElements) {\n            this.m_textElementStateCache.clearVisited();\n            this.updateTextElements(dataSourceTileList);\n        }\n        const findReplacements = updateTextElements;\n        const anyTextGroupEvicted = this.m_textElementStateCache.update(\n            time,\n            this.m_options.disableFading!,\n            findReplacements,\n            this.m_viewState.zoomLevel\n        );\n\n        this.reset();\n        this.prepopulateScreenWithBlockingElements(dataSourceTileList);\n\n        // New text elements must be placed either if text elements were updated in this frame\n        // or if any text element group was evicted. The second case happens when the group is not\n        // visited anymore and all it's elements just became invisible, which means there's newly\n        // available screen space where new text elements could be placed. A common scenario where\n        // this happens is zooming in/out: text groups from the old level may still be fading out\n        // after all groups in the new level were updated.\n        const placeNewTextElements = updateTextElements || anyTextGroupEvicted;\n        this.placeTextElements(time, placeNewTextElements);\n        this.placeOverlayTextElements();\n        this.updateTextRenderers();\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    addOverlayText(textElements: TextElement[]): void {\n        if (textElements.length === 0) {\n            return;\n        }\n        this.m_overlayTextElements =\n            this.m_overlayTextElements === undefined\n                ? textElements.slice()\n                : this.m_overlayTextElements.concat(textElements);\n    }\n\n    /**\n     * Adds new overlay text elements to this `MapView`.\n     *\n     * @param textElements Array of [[TextElement]] to be added.\n     */\n    clearOverlayText(): void {\n        this.m_overlayTextElements = [];\n    }\n\n    /**\n     * @returns Whether there's overlay text to be rendered.\n     */\n    hasOverlayText(): boolean {\n        return this.m_overlayTextElements !== undefined && this.m_overlayTextElements.length > 0;\n    }\n\n    get overlayText(): TextElement[] | undefined {\n        return this.m_overlayTextElements;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[TextElement]]s are found, the order of the results is unspecified.\n     *\n     * Note: [[TextElement]]s with identical `featureId` or identical `userData` will only appear\n     * once in the list `pickResults`.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickResults Array filled with pick results.\n     */\n    pickTextElements(screenPosition: THREE.Vector2, pickResults: PickResult[]) {\n        const pickHandler = (pickData: any | undefined, pickObjectType: PickObjectType) => {\n            const textElement = pickData as TextElement;\n\n            if (textElement === undefined) {\n                return;\n            }\n\n            let isDuplicate = false;\n\n            if (textElement.featureId !== undefined) {\n                isDuplicate = pickResults.some(pickResult => {\n                    return (\n                        pickResult !== undefined &&\n                        pickObjectType === pickResult.type &&\n                        ((pickResult.featureId !== undefined &&\n                            pickResult.featureId === textElement.featureId) ||\n                            (pickResult.userData !== undefined &&\n                                pickResult.userData === textElement.userData))\n                    );\n                });\n\n                if (!isDuplicate) {\n                    const pickResult: TextPickResult = {\n                        type: pickObjectType,\n                        point: screenPosition,\n                        distance: 0,\n                        featureId: textElement.featureId,\n                        userData: textElement.userData,\n                        text: textElement.text\n                    };\n\n                    pickResults.push(pickResult);\n                }\n            }\n        };\n\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.pickText(screenPosition, (pickData: any | undefined) => {\n                pickHandler(pickData, PickObjectType.Text);\n            });\n            textRenderer.poiRenderer.pickTextElements(\n                screenPosition,\n                (pickData: any | undefined) => {\n                    pickHandler(pickData, PickObjectType.Icon);\n                }\n            );\n        }\n    }\n\n    /**\n     * `true` if any resource used by any `FontCatalog` is still loading.\n     */\n    get loading(): boolean {\n        return this.m_fontCatalogLoader.loading || this.m_glyphLoadingCount > 0;\n    }\n\n    /**\n     * Waits till all pending resources from any `FontCatalog` are loaded.\n     */\n    async waitLoaded(): Promise<boolean> {\n        const initialized = await this.waitInitialized();\n        if (!initialized) {\n            return false;\n        }\n        if (this.m_loadPromise === undefined) {\n            return false;\n        }\n        await this.m_loadPromise;\n        return true;\n    }\n\n    /**\n     * Reset the current text render states of all visible tiles. All [[TextElement]]s will fade in\n     * after that as if they have just been added.\n     */\n    clearRenderStates() {\n        this.m_textElementStateCache.clear();\n    }\n\n    /**\n     * Return memory used by all objects managed by `TextElementsRenderer`.\n     *\n     * @returns `MemoryUsage` Heap and GPU memory used by this `TextElementsRenderer`.\n     */\n    getMemoryUsage(): MapViewUtils.MemoryUsage {\n        const memoryUsage = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        for (const renderer of this.m_textRenderers) {\n            renderer.textCanvas.getMemoryUsage(memoryUsage);\n            renderer.poiRenderer.getMemoryUsage(memoryUsage);\n        }\n\n        return memoryUsage;\n    }\n\n    get initialized(): boolean {\n        return this.m_initialized;\n    }\n\n    get initializing(): boolean {\n        return this.m_initPromise !== undefined;\n    }\n\n    /**\n     * Waits until initialization is done.\n     * @returns Promise resolved to true if initialization was done, false otherwise.\n     */\n    async waitInitialized(): Promise<boolean> {\n        if (this.initialized) {\n            return true;\n        }\n\n        if (!this.initializing) {\n            return false;\n        }\n        await this.m_initPromise;\n        return true;\n    }\n\n    /**\n     * Initializes the text renderer once there's any text element available for rendering.\n     * @param textElementsAvailable Indicates whether there's any text element to be rendered.\n     * @returns Whether the text renderer is initialized.\n     */\n    private initialize(textElementsAvailable: boolean): boolean {\n        if (!this.initialized && !this.initializing && textElementsAvailable) {\n            this.initializeDefaultAssets();\n            this.m_initPromise = this.initializeTextCanvases().then(() => {\n                this.m_initialized = true;\n                this.m_initPromise = undefined;\n                this.invalidateCache(); // Force cache update after initialization.\n                this.m_viewUpdateCallback();\n            });\n        }\n        return this.initialized;\n    }\n\n    /**\n     * Reset internal state at the beginning of a frame.\n     */\n    private reset() {\n        this.m_screenCollisions.reset();\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.textCanvas.clear();\n            textRenderer.poiRenderer.reset();\n        }\n    }\n\n    /**\n     * Update state at the end of a frame.\n     */\n    private updateTextRenderers() {\n        for (const textRenderer of this.m_textRenderers) {\n            textRenderer.poiRenderer.update();\n        }\n    }\n\n    /**\n     * Fills the screen with lines projected from world space, see [[Tile.blockingElements]].\n     * @note These boxes have highest priority, so will block all other labels.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private prepopulateScreenWithBlockingElements(dataSourceTileList: DataSourceTileList[]) {\n        const boxes: IBox[] = [];\n        dataSourceTileList.forEach(renderListEntry => {\n            const startLinePointProj = new THREE.Vector3();\n            const endLinePointProj = new THREE.Vector3();\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                for (const pathBlockingElement of tile.blockingElements) {\n                    if (pathBlockingElement.points.length < 2) {\n                        continue;\n                    }\n                    this.m_screenProjector.project3(\n                        pathBlockingElement.points[0],\n                        startLinePointProj\n                    );\n                    for (let i = 1; i < pathBlockingElement.points.length; i++) {\n                        this.m_screenProjector.project3(\n                            pathBlockingElement.points[i],\n                            endLinePointProj\n                        );\n                        const line = pathBlockingElement.screenSpaceLines[i - 1];\n                        line.start.copy(startLinePointProj);\n                        line.end.copy(endLinePointProj);\n                        const lineWithBound: LineWithBound = {\n                            minX: Math.min(startLinePointProj.x, endLinePointProj.x),\n                            maxX: Math.max(startLinePointProj.x, endLinePointProj.x),\n                            minY: Math.min(startLinePointProj.y, endLinePointProj.y),\n                            maxY: Math.max(startLinePointProj.y, endLinePointProj.y),\n                            line\n                        };\n                        boxes.push(lineWithBound);\n                        startLinePointProj.copy(endLinePointProj);\n                    }\n                }\n            }\n        });\n        this.m_screenCollisions.allocateIBoxes(boxes);\n    }\n\n    /**\n     * @returns True if whole group was processed for placement,\n     * false otherwise (e.g. placement limit reached).\n     */\n    private placeTextElementGroup(\n        groupState: TextElementGroupState,\n        renderParams: RenderParams,\n        maxNumPlacedLabels: number,\n        pass: Pass\n    ): boolean {\n        // Unvisited text elements are never placed.\n        assert(groupState.visited);\n\n        if (this.m_textRenderers.length === 0) {\n            logger.warn(\"No text renderers initialized.\");\n            return false;\n        }\n\n        const shieldGroups: number[][] = [];\n        const hiddenKinds = this.m_viewState.hiddenGeometryKinds;\n        const projection = this.m_viewState.projection;\n        const elevationProvider = this.m_viewState.elevationProvider;\n        const elevationMap = elevationProvider?.getDisplacementMap(groupState.tileKey);\n\n        for (const textElementState of groupState.textElementStates) {\n            if (pass === Pass.PersistentLabels) {\n                if (placementStats) {\n                    ++placementStats.total;\n                }\n            }\n            if (\n                maxNumPlacedLabels >= 0 &&\n                renderParams.numRenderedTextElements >= maxNumPlacedLabels\n            ) {\n                logger.debug(\"Placement label limit exceeded.\");\n                return false;\n            }\n\n            // Skip all labels that are not initialized (didn't pass early placement tests)\n            // or don't belong to this pass.\n            if (!textElementState.initialized) {\n                if (placementStats) {\n                    ++placementStats.uninitialized;\n                }\n                continue;\n            }\n            if (textElementState.viewDistance === undefined) {\n                if (placementStats) {\n                    ++placementStats.tooFar;\n                }\n                continue;\n            }\n\n            const elementVisible = textElementState.visible;\n            if (\n                (pass === Pass.PersistentLabels && !elementVisible) ||\n                (pass === Pass.NewLabels && elementVisible)\n            ) {\n                continue;\n            }\n\n            const textElement = textElementState.element;\n\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            const poiRenderer = textElementStyle.poiRenderer;\n            if (textCanvas === undefined || poiRenderer === undefined) {\n                logger.warn(\"Text canvas or poi renderer not ready.\");\n                continue;\n            }\n\n            // TODO: HARP-7648. Discard hidden kinds sooner, before placement.\n            // Check if the label should be hidden.\n            if (\n                hiddenKinds !== undefined &&\n                textElement.kind !== undefined &&\n                hiddenKinds.hasOrIntersects(textElement.kind)\n            ) {\n                continue;\n            }\n\n            if (elevationProvider !== undefined && !textElement.elevated) {\n                if (!elevationMap) {\n                    this.m_viewUpdateCallback(); // Update view until elevation is loaded.\n                    this.m_forceNewLabelsPass = true;\n                    continue;\n                }\n                overlayTextElement(textElement, elevationProvider, elevationMap, projection);\n            }\n            const elementType = textElement.type;\n            const isPathLabel = elementType === TextElementType.PathLabel;\n\n            // For paths, check if the label may fit.\n            if (isPathLabel) {\n                if (isPathLabelTooSmall(textElement, this.m_screenProjector, tempScreenPoints)) {\n                    if (placementStats) {\n                        placementStats.numNotVisible++;\n                    }\n                    if (textElement.dbgPathTooSmall === true) {\n                        if (placementStats) {\n                            placementStats.numPathTooSmall++;\n                        }\n                    }\n                    textElementState.textRenderState!.reset();\n                    continue;\n                }\n            }\n\n            const forceNewPassOnLoaded = true;\n            if (!this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded)) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    if (placementStats) {\n                        ++placementStats.numCannotAdd;\n                    }\n                    logger.warn(\"layer glyph storage capacity exceeded.\");\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            switch (elementType) {\n                case TextElementType.PoiLabel:\n                    this.addPoiLabel(textElementState, poiRenderer, textCanvas, renderParams);\n                    break;\n                case TextElementType.LineMarker:\n                    this.addLineMarkerLabel(\n                        textElementState,\n                        poiRenderer,\n                        shieldGroups,\n                        textCanvas,\n                        renderParams\n                    );\n                    break;\n                case TextElementType.PathLabel:\n                    this.addPathLabel(textElementState, tempScreenPoints, textCanvas, renderParams);\n            }\n        }\n        return true;\n    }\n\n    private initializeGlyphs(\n        textElement: TextElement,\n        textElementStyle: TextElementStyle,\n        forceNewPassOnLoaded: boolean\n    ): boolean {\n        // Trigger the glyph load if needed.\n        if (textElement.loadingState === LoadingState.Initialized) {\n            return true;\n        }\n\n        assert(textElementStyle.textCanvas !== undefined);\n        const textCanvas = textElementStyle.textCanvas!;\n\n        if (textElement.loadingState === undefined) {\n            textElement.loadingState = LoadingState.Requested;\n\n            if (textElement.renderStyle === undefined) {\n                textElement.renderStyle = new TextRenderStyle({\n                    ...textElementStyle.renderParams,\n                    ...textElement.renderParams\n                });\n            }\n            if (textElement.layoutStyle === undefined) {\n                textElement.layoutStyle = new TextLayoutStyle({\n                    ...textElementStyle.layoutParams,\n                    ...textElement.layoutParams\n                });\n            }\n\n            if (textElement.text === \"\") {\n                textElement.loadingState = LoadingState.Loaded;\n            } else {\n                const newLoadPromise = textCanvas.fontCatalog\n                    .loadCharset(textElement.text, textElement.renderStyle)\n                    .then(() => {\n                        --this.m_glyphLoadingCount;\n                        textElement.loadingState = LoadingState.Loaded;\n                        // Ensure that text elements still loading glyphs get a chance to\n                        // be rendered if there's no text element updates in the next frames.\n                        this.m_forceNewLabelsPass =\n                            this.m_forceNewLabelsPass || forceNewPassOnLoaded;\n                        this.m_viewUpdateCallback();\n                    });\n                if (this.m_glyphLoadingCount === 0) {\n                    this.m_loadPromise = undefined;\n                }\n                ++this.m_glyphLoadingCount;\n\n                this.m_loadPromise =\n                    this.m_loadPromise === undefined\n                        ? newLoadPromise\n                        : Promise.all([this.m_loadPromise, newLoadPromise]);\n            }\n        }\n        if (textElement.loadingState === LoadingState.Loaded) {\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n            textElement.glyphCaseArray = [];\n            textElement.bounds = undefined;\n            textElement.glyphs = textCanvas.fontCatalog.getGlyphs(\n                textElement.text,\n                textCanvas.textRenderStyle,\n                textElement.glyphCaseArray\n            );\n            textElement.loadingState = LoadingState.Initialized;\n        }\n        // Return true as soon as a text element has some glyphs assigned so that it's rendered.\n        // The glyphs may be either the final ones or some temporal glyphs inherited from a\n        // predecessor as part of the text element replacement process.\n        // See TextElementState.replace().\n        return textElement.glyphs !== undefined;\n    }\n\n    private initializeDefaultAssets(): void {\n        const defaultFontCatalogName = this.m_fontCatalogLoader.initialize(\n            this.m_options.fontCatalog!\n        );\n        this.m_textStyleCache.initializeDefaultTextElementStyle(defaultFontCatalogName);\n    }\n\n    private async initializeTextCanvases(): Promise<void> {\n        const catalogCallback = (name: string, catalog: FontCatalog) => {\n            const loadedTextCanvas = this.m_textCanvasFactory.createTextCanvas(catalog);\n\n            this.m_textRenderers.push({\n                fontCatalog: name,\n                textCanvas: loadedTextCanvas,\n                poiRenderer: this.m_poiRendererFactory.createPoiRenderer(loadedTextCanvas)\n            });\n        };\n\n        return this.m_fontCatalogLoader.loadCatalogs(catalogCallback).then(() => {\n            // Find the default TextCanvas and PoiRenderer.\n            let defaultTextCanvas: TextCanvas | undefined;\n            this.m_textRenderers.forEach(textRenderer => {\n                if (defaultTextCanvas === undefined) {\n                    defaultTextCanvas = textRenderer.textCanvas;\n                }\n            });\n            const defaultPoiRenderer = this.m_poiRendererFactory.createPoiRenderer(\n                defaultTextCanvas!\n            );\n\n            this.m_textStyleCache.initializeTextElementStyles(\n                defaultPoiRenderer,\n                defaultTextCanvas!,\n                this.m_textRenderers\n            );\n        });\n    }\n\n    private updateGlyphDebugMesh() {\n        const debugGlyphs = debugContext.getValue(\"DEBUG_GLYPHS\");\n        if (debugGlyphs === undefined) {\n            return;\n        }\n\n        if (debugGlyphs && this.m_debugGlyphTextureCacheMesh === undefined) {\n            this.initializeGlyphDebugMesh();\n        }\n        assert(this.m_debugGlyphTextureCacheMesh !== undefined);\n        assert(this.m_debugGlyphTextureCacheWireMesh !== undefined);\n\n        this.m_debugGlyphTextureCacheMesh!.visible = debugGlyphs;\n        this.m_debugGlyphTextureCacheWireMesh!.visible = debugGlyphs;\n    }\n\n    private initializeGlyphDebugMesh() {\n        const defaultFontCatalog = this.m_textRenderers[0].textCanvas.fontCatalog;\n\n        // Initialize glyph-debugging mesh.\n        const planeGeometry = new THREE.PlaneGeometry(\n            defaultFontCatalog.textureSize.width / 2.5,\n            defaultFontCatalog.textureSize.height / 2.5,\n            defaultFontCatalog.textureSize.width / defaultFontCatalog.maxWidth,\n            defaultFontCatalog.textureSize.height / defaultFontCatalog.maxHeight\n        );\n        const material = new THREE.MeshBasicMaterial({\n            transparent: true,\n            depthWrite: false,\n            depthTest: false,\n            map: defaultFontCatalog.texture\n        });\n        this.m_debugGlyphTextureCacheMesh = new THREE.Mesh(planeGeometry, material);\n        this.m_debugGlyphTextureCacheMesh.renderOrder = 10000;\n        this.m_debugGlyphTextureCacheMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheMesh.name = \"glyphDebug\";\n\n        const wireframe = new THREE.WireframeGeometry(planeGeometry);\n        const wireframeMaterial = new THREE.LineBasicMaterial({\n            transparent: true,\n            color: 0x999999,\n            depthWrite: false,\n            depthTest: false\n        });\n        this.m_debugGlyphTextureCacheWireMesh = new THREE.LineSegments(\n            wireframe,\n            wireframeMaterial\n        );\n        this.m_debugGlyphTextureCacheWireMesh.renderOrder = 9999;\n        this.m_debugGlyphTextureCacheWireMesh.visible = false;\n\n        this.m_debugGlyphTextureCacheWireMesh.name = \"glyphDebug\";\n\n        this.m_textRenderers[0].textCanvas\n            .getLayer(DEFAULT_TEXT_CANVAS_LAYER)!\n            .storage.scene.add(\n                this.m_debugGlyphTextureCacheMesh,\n                this.m_debugGlyphTextureCacheWireMesh\n            );\n    }\n\n    /**\n     * Visit all visible tiles and add/ their text elements to cache. The update of\n     * [[TextElement]]s is a time consuming process, and cannot be done every frame, but should only\n     * be done when the camera moved (a lot) of whenever the set of visible tiles change.\n     *\n     * The actually rendered [[TextElement]]s are stored internally until the next update is done\n     * to speed up rendering when no camera movement was detected.\n     * @param dataSourceTileList List of tiles to be rendered for each data source.\n     */\n    private updateTextElements(dataSourceTileList: DataSourceTileList[]) {\n        logger.debug(\"updateTextElements\");\n\n        if (updateStats) {\n            updateStats.clear();\n        }\n\n        this.m_textElementStateCache.clearTextCache();\n        this.m_cacheInvalidated = false;\n\n        this.checkIfOverloaded(dataSourceTileList);\n\n        // Used with tile offset to compute the x coordinate offset for tiles.\n        const updateStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        // TODO: HARP-7648. Skip all data sources that won't contain text.\n        // TODO: HARP-7651. Higher priority labels should be updated before lower priority ones\n        // across all data sources.\n        // TODO: HARP-7373. Use rendered tiles (tiles currently rendered to cover the view,\n        // including fallbacks if necessary) instead of visible tiles (target tiles that might not\n        // be decoded yet).\n        // Otherwise labels persistent when crossing a zoom level boundary will flicker (fade out\n        // and back in) due to the delay in decoding the visible tiles.\n        dataSourceTileList.forEach(tileList => {\n            this.updateTextElementsFromSource(\n                tileList.dataSource,\n                tileList.storageLevel,\n                Array.from(tileList.renderedTiles.values()),\n                updateStartTime\n            );\n        });\n\n        if (updateStats) {\n            updateStats.log();\n        }\n    }\n\n    private updateTextElementsFromSource(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        visibleTiles: Tile[],\n        updateStartTime: number | undefined\n    ) {\n        if (updateStats) {\n            updateStats.tiles += visibleTiles.length;\n        }\n        const sortedTiles = visibleTiles;\n\n        // TODO: HARP-7648. Really needed? Should it be done here or in VisibleTileSet?\n        sortedTiles.sort((a: Tile, b: Tile) => {\n            return a.tileKey.mortonCode() - b.tileKey.mortonCode();\n        });\n\n        // Prepare user text elements.\n        for (const tile of sortedTiles) {\n            this.prepareTextElementGroup(tile.userTextElements, tile.tileKey);\n        }\n\n        const sortedGroups: TextElementLists[] = [];\n        this.createSortedGroupsForSorting(tileDataSource, storageLevel, sortedTiles, sortedGroups);\n\n        let numTextElementsUpdated = 0;\n\n        for (const textElementLists of sortedGroups) {\n            this.selectTextElementsToUpdateByDistance(textElementLists);\n\n            // The value of updateStartTime is set if this.overloaded is true.\n            if (updateStartTime !== undefined) {\n                // If overloaded and all time is used up, exit early.\n                if (OVERLOAD_UPDATE_TIME_LIMIT > 0) {\n                    const endTime = PerformanceTimer.now();\n                    const elapsedTime = endTime - updateStartTime;\n                    if (elapsedTime > OVERLOAD_UPDATE_TIME_LIMIT) {\n                        logger.debug(\"Update time limit exceeded.\");\n                        break;\n                    }\n                }\n\n                // Try not to update too many elements. They will be checked for visibility each\n                // frame.\n                numTextElementsUpdated += textElementLists.count();\n                if (numTextElementsUpdated >= OVERLOAD_UPDATED_LABEL_LIMIT) {\n                    logger.debug(\"Update label limit exceeded.\");\n                    break;\n                }\n            }\n        }\n    }\n\n    private prepareTextElementGroup(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        maxViewDistance?: number\n    ) {\n        if (textElementGroup.elements.length === 0) {\n            return;\n        }\n\n        const textElementSelection: TextElementFilter = (\n            textElementState: TextElementState\n        ): number | undefined => {\n            let { result, viewDistance } = checkReadyForPlacement(\n                textElementState.element,\n                this.m_viewState,\n                this.m_viewCamera,\n                this.m_poiManager,\n                maxViewDistance\n            );\n\n            if (\n                result === PrePlacementResult.Ok &&\n                !this.m_textElementStateCache.deduplicateElement(\n                    this.m_viewState.zoomLevel,\n                    textElementState\n                )\n            ) {\n                result = PrePlacementResult.Duplicate;\n                viewDistance = undefined;\n            }\n\n            if (updateStats) {\n                updateStats.totalLabels++;\n                updateStats.results[result]++;\n            }\n            return viewDistance;\n        };\n\n        const [, found] = this.m_textElementStateCache.getOrSet(\n            textElementGroup,\n            tileKey,\n            textElementSelection\n        );\n\n        if (updateStats) {\n            ++updateStats.totalGroups;\n            if (!found) {\n                ++updateStats.newGroups;\n            }\n        }\n    }\n\n    private createSortedGroupsForSorting(\n        tileDataSource: DataSource,\n        storageLevel: number,\n        sortedTiles: Tile[],\n        sortedGroups: TextElementLists[]\n    ) {\n        if (sortedTiles.length === 0) {\n            return;\n        }\n\n        const tilesToRender: Tile[] = [];\n\n        for (const tile of sortedTiles) {\n            if (tileDataSource.shouldRenderText(storageLevel, tile.tileKey)) {\n                tilesToRender.push(tile);\n            }\n        }\n\n        const groupedPriorityLists: Map<number, TextElementLists> = new Map();\n\n        for (const tile of tilesToRender) {\n            for (const group of tile.textElementGroups.groups.values()) {\n                if (group.elements.length === 0) {\n                    continue;\n                }\n\n                const foundGroup = groupedPriorityLists.get(group.priority);\n                if (foundGroup === undefined) {\n                    groupedPriorityLists.set(\n                        group.priority,\n                        new TextElementLists([new TileTextElements(tile, group)])\n                    );\n                } else {\n                    foundGroup.lists.push(new TileTextElements(tile, group));\n                }\n            }\n        }\n\n        if (groupedPriorityLists.size === 0) {\n            return;\n        }\n\n        for (const g of groupedPriorityLists) {\n            const lists = g[1];\n            sortedGroups.push(lists);\n        }\n\n        sortedGroups.sort((a: TextElementLists, b: TextElementLists) => {\n            return b.priority - a.priority;\n        });\n\n        const printTextInfo = false;\n\n        if (PRINT_LABEL_DEBUG_INFO && printTextInfo) {\n            let outString = \"\";\n            for (const textElementLists of sortedGroups) {\n                let size = 0;\n                for (const tileTextElements of textElementLists.lists) {\n                    size += tileTextElements.group.elements.length;\n                }\n                outString += `priority ${textElementLists.priority} size: ${size}\\n`;\n            }\n            logger.log(outString);\n        }\n    }\n\n    private selectTextElementsToUpdateByDistance(textElementLists: TextElementLists) {\n        const farDistanceLimitRatio = Math.max(\n            this.m_options.maxDistanceRatioForTextLabels!,\n            this.m_options.maxDistanceRatioForPoiLabels!\n        );\n        const maxViewDistance = getMaxViewDistance(this.m_viewState, farDistanceLimitRatio);\n\n        for (const tileTextElements of textElementLists.lists) {\n            this.prepareTextElementGroup(\n                tileTextElements.group,\n                tileTextElements.tile.tileKey,\n                maxViewDistance\n            );\n        }\n    }\n\n    private placeTextElements(time: number, placeNewTextElements: boolean) {\n        const renderParams: RenderParams = {\n            numRenderedTextElements: 0,\n            fadeAnimationRunning: false,\n            time\n        };\n\n        const placeStartTime =\n            this.overloaded && this.m_viewState.isDynamic ? PerformanceTimer.now() : undefined;\n\n        if (placementStats) {\n            placementStats.clear();\n        }\n\n        if (this.m_textElementStateCache.size === 0) {\n            logger.debug(\"Text element cache empty.\");\n            return;\n        }\n\n        const placeNew = this.m_forceNewLabelsPass || placeNewTextElements;\n        if (this.m_forceNewLabelsPass) {\n            if (!placeNewTextElements) {\n                logger.debug(\"Force new label pass\");\n            }\n            this.m_forceNewLabelsPass = false;\n        }\n        const maxNumPlacedTextElements = this.m_options.maxNumVisibleLabels!;\n\n        // TODO: HARP-7648. Potential performance improvement. Place persistent labels + rejected\n        // candidates from previous frame if there's been no placement in this one.\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        let currentPriority: number = groupStates[0].priority;\n        let currentPriorityBegin: number = 0;\n\n        for (let i = 0; i < groupStates.length; ++i) {\n            const textElementGroupState = groupStates[i];\n            if (placementStats) {\n                ++placementStats.totalGroups;\n            }\n\n            const newPriority = textElementGroupState.priority;\n            if (placeNew && currentPriority !== newPriority) {\n                // Place all new labels of the previous priority before placing the persistent\n                // labels of this priority.\n                this.placeNewTextElements(currentPriorityBegin, i, renderParams);\n                if (isPlacementTimeExceeded(placeStartTime)) {\n                    break;\n                }\n                currentPriority = newPriority;\n                currentPriorityBegin = i;\n            }\n            if (\n                !this.placeTextElementGroup(\n                    textElementGroupState,\n                    renderParams,\n                    maxNumPlacedTextElements,\n                    Pass.PersistentLabels\n                )\n            ) {\n                break;\n            }\n\n            if (isPlacementTimeExceeded(placeStartTime)) {\n                break;\n            }\n        }\n\n        if (placeNew) {\n            // Place new text elements of the last priority.\n            this.placeNewTextElements(currentPriorityBegin, groupStates.length, renderParams);\n        }\n\n        if (placementStats) {\n            placementStats.numRenderedTextElements = renderParams.numRenderedTextElements;\n            placementStats.log();\n        }\n\n        if (!this.m_options.disableFading && renderParams.fadeAnimationRunning) {\n            this.m_viewUpdateCallback();\n        }\n    }\n\n    private placeNewTextElements(\n        beginGroupIndex: number,\n        endGroupIndex: number,\n        renderParams: RenderParams\n    ) {\n        const groupStates = this.m_textElementStateCache.sortedGroupStates;\n        for (let i = beginGroupIndex; i < endGroupIndex; ++i) {\n            if (\n                !this.placeTextElementGroup(\n                    groupStates[i],\n                    renderParams,\n                    this.m_options.maxNumVisibleLabels!,\n                    Pass.NewLabels\n                )\n            ) {\n                break;\n            }\n        }\n    }\n\n    private placeOverlayTextElements() {\n        if (this.m_overlayTextElements === undefined || this.m_overlayTextElements.length === 0) {\n            return;\n        }\n\n        const screenSize = this.m_tmpVector.set(\n            this.m_screenProjector.width,\n            this.m_screenProjector.height\n        );\n        const screenXOrigin = -screenSize.width / 2.0;\n        const screenYOrigin = screenSize.height / 2.0;\n\n        // Place text elements one by one.\n        for (const textElement of this.m_overlayTextElements!) {\n            // Get the TextElementStyle.\n            const textElementStyle = this.m_textStyleCache.getTextElementStyle(textElement.style);\n            const textCanvas = textElementStyle.textCanvas;\n            if (textCanvas === undefined) {\n                continue;\n            }\n\n            const forceNewPassOnLoaded = false;\n            this.initializeGlyphs(textElement, textElementStyle, forceNewPassOnLoaded);\n\n            if (textElement.loadingState !== LoadingState.Initialized) {\n                continue;\n            }\n\n            const layer = textCanvas.getLayer(textElement.renderOrder || DEFAULT_TEXT_CANVAS_LAYER);\n\n            // Move onto the next TextElement if we cannot continue adding glyphs to this layer.\n            if (layer !== undefined) {\n                if (layer.storage.drawCount + textElement.glyphs!.length > layer.storage.capacity) {\n                    continue;\n                }\n            }\n\n            // Set the current style for the canvas.\n            textCanvas.textRenderStyle = textElement.renderStyle!;\n            textCanvas.textLayoutStyle = textElement.layoutStyle!;\n\n            // Place text.\n            let textPath;\n            if (!(textElement.type === TextElementType.PathLabel)) {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin + textElement.position.x * screenSize.width;\n                tempScreenPosition.y = screenYOrigin - textElement.position.y * screenSize.height;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                tempPosition.x = tempScreenPosition.x;\n                tempPosition.y = tempScreenPosition.y;\n                tempPosition.z = 0.0;\n                addTextToCanvas(textElement, textCanvas, tempPosition);\n            } else {\n                // Adjust the label positioning.\n                tempScreenPosition.x = screenXOrigin;\n                tempScreenPosition.y = screenYOrigin;\n                if (textElement.xOffset !== undefined) {\n                    tempScreenPosition.x += textElement.xOffset;\n                }\n                if (textElement.yOffset !== undefined) {\n                    tempScreenPosition.y -= textElement.yOffset;\n                }\n\n                // Get the screen points that define the label's segments and create a path with\n                // them.\n                // TODO: HARP-7648. Optimize array allocations.\n                const screenPoints: THREE.Vector2[] = [];\n                for (const pt of textElement.path!) {\n                    const pX = tempScreenPosition.x + pt.x * screenSize.width;\n                    const pY = tempScreenPosition.y - pt.y * screenSize.height;\n                    screenPoints.push(new THREE.Vector2(pX, pY));\n                }\n                textPath = new SimplePath();\n                for (let i = 0; i < screenPoints.length - 1; ++i) {\n                    textPath.add(new THREE.LineCurve(screenPoints[i], screenPoints[i + 1]));\n                }\n                addTextToCanvas(textElement, textCanvas, tempPosition, textPath, true);\n            }\n        }\n    }\n\n    private getDistanceScalingFactor(\n        label: TextElement,\n        distance: number,\n        lookAtDistance: number\n    ): number {\n        // Distance scale is based on relation between camera focus point distance and\n        // the actual label distance. For labels close to camera look at point the scale\n        // remains unchanged, the farther is label from that point the smaller size it is\n        // rendered in screen space. This method is unaffected by near and far clipping planes\n        // distances, but may be improved by taking FOV into equation or customizing the\n        // focus point screen position based on horizont, actual ground, tilt ets.\n        let factor = lookAtDistance / distance;\n        // The label.distanceScale property defines the influence ratio at which\n        // distance affects the final scaling of label.\n        factor = 1.0 + (factor - 1.0) * label.distanceScale;\n        // Preserve the constraints\n        factor = Math.max(factor, this.m_options.labelDistanceScaleMin!);\n        factor = Math.min(factor, this.m_options.labelDistanceScaleMax!);\n        return factor;\n    }\n\n    private getDistanceFadingFactor(\n        label: TextElement,\n        state: TextElementState,\n        maxVisibilityDist: number\n    ): number {\n        let distanceFadeValue = 1.0;\n        const textDistance = state.viewDistance;\n\n        if (textDistance !== undefined && label.fadeFar !== undefined && label.fadeFar > 0.0) {\n            const fadeNear = label.fadeNear === undefined ? 0.0 : label.fadeNear;\n            const fadeFar = label.fadeFar;\n            if (fadeFar > fadeNear) {\n                distanceFadeValue =\n                    1.0 -\n                    THREE.Math.clamp(\n                        (textDistance / maxVisibilityDist - fadeNear) / (fadeFar - fadeNear),\n                        0.0,\n                        1.0\n                    );\n            }\n        }\n        return distanceFadeValue;\n    }\n\n    private addPointLabel(\n        labelState: TextElementState,\n        position: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams,\n        iconIndex?: number\n    ): boolean {\n        const pointLabel: TextElement = labelState.element;\n        const textRenderState: RenderState | undefined = labelState.textRenderState;\n\n        assert(iconIndex === undefined || labelState.iconRenderStates !== undefined);\n        const iconRenderState: RenderState =\n            iconIndex !== undefined\n                ? labelState.iconRenderStates![iconIndex]\n                : labelState.iconRenderState!;\n        assert(iconRenderState !== undefined);\n\n        // Find the label's original position.\n        tempScreenPosition.x = tempPoiScreenPosition.x = screenPosition.x;\n        tempScreenPosition.y = tempPoiScreenPosition.y = screenPosition.y;\n\n        // Scale the text depending on the label's distance to the camera.\n        const textDistance = this.m_viewState.worldCenter.distanceTo(position);\n        if (\n            pointLabel.fadeFar !== undefined &&\n            (pointLabel.fadeFar <= 0.0 ||\n                pointLabel.fadeFar * this.m_viewState.maxVisibilityDist < textDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent.\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            return false;\n        }\n        labelState.setViewDistance(textDistance);\n\n        // Check if there is need to check for screen space for the label's icon.\n        const poiInfo = pointLabel.poiInfo;\n        let iconRejected = false;\n\n        // Check if icon should be rendered at this zoomLevel\n        const renderIcon =\n            poiInfo !== undefined &&\n            MathUtils.isClamped(\n                this.m_viewState.zoomLevel,\n                poiInfo.iconMinZoomLevel,\n                poiInfo.iconMaxZoomLevel\n            ) &&\n            poiInfo!.isValid !== false;\n\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pointLabel,\n            textDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const iconReady = renderIcon && poiRenderer.prepareRender(pointLabel, this.m_viewState.env);\n\n        if (iconReady) {\n            const result = placeIcon(\n                iconRenderState,\n                poiInfo!,\n                tempPoiScreenPosition,\n                distanceScaleFactor,\n                this.m_viewState.env,\n                this.m_screenCollisions\n            );\n            if (result === PlacementResult.Invisible) {\n                iconRenderState.reset();\n\n                if (placementStats) {\n                    ++placementStats.numNotVisible;\n                }\n                return false;\n            }\n            iconRejected = result === PlacementResult.Rejected;\n        } else if (renderIcon && poiInfo!.isValid !== false) {\n            // Ensure that text elements still loading icons get a chance to be rendered if\n            // there's no text element updates in the next frames.\n            this.m_forceNewLabelsPass = true;\n        }\n\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pointLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        const renderText = shouldRenderPointText(labelState, this.m_viewState, this.m_options);\n\n        // Render the label's text...\n        // textRenderState is always defined at this point.\n        if (renderText) {\n            const placeResult = placePointLabel(\n                labelState,\n                tempScreenPosition,\n                distanceScaleFactor,\n                textCanvas,\n                this.m_screenCollisions,\n                iconRejected,\n                tempPosition\n            );\n            if (placeResult === PlacementResult.Invisible) {\n                if (placementStats) {\n                    placementStats.numPoiTextsInvisible++;\n                }\n                labelState.reset();\n                return false;\n            }\n\n            const textRejected = placeResult === PlacementResult.Rejected;\n            if (!iconRejected) {\n                const textIsOptional: boolean =\n                    pointLabel.poiInfo !== undefined && pointLabel.poiInfo.textIsOptional === true;\n                iconRejected = textRejected && !textIsOptional;\n            }\n\n            if (textRejected) {\n                textRenderState!.startFadeOut(renderParams.time);\n            }\n\n            const textNeedsDraw =\n                (!textRejected && shouldRenderPoiText(labelState, this.m_viewState)) ||\n                textRenderState!.isFading();\n\n            if (textNeedsDraw) {\n                if (!textRejected) {\n                    textRenderState!.startFadeIn(renderParams.time);\n                }\n                renderParams.fadeAnimationRunning =\n                    renderParams.fadeAnimationRunning || textRenderState!.isFading();\n                if (\n                    addTextBufferToCanvas(\n                        labelState,\n                        textCanvas,\n                        tempPosition,\n                        distanceFadeFactor,\n                        distanceScaleFactor\n                    ) &&\n                    placementStats\n                ) {\n                    placementStats.numRenderedPoiTexts++;\n                }\n            }\n        }\n        // ... and render the icon (if any).\n        if (iconReady) {\n            if (iconRejected) {\n                iconRenderState!.startFadeOut(renderParams.time);\n            } else {\n                iconRenderState!.startFadeIn(renderParams.time);\n            }\n\n            renderParams.fadeAnimationRunning =\n                renderParams.fadeAnimationRunning || iconRenderState!.isFading();\n\n            const opacity = iconRenderState.opacity * distanceFadeFactor;\n            if (opacity > 0) {\n                // Same as for text, don't allocate screen space for an icon that's fading out so\n                // that any label blocked by it gets a chance to be placed as soon as any other\n                // surrounding new labels.\n                const allocateSpace = poiInfo!.reserveSpace !== false && !iconRejected;\n                poiRenderer.renderPoi(\n                    poiInfo!,\n                    tempPoiScreenPosition,\n                    this.m_screenCollisions,\n                    labelState.renderDistance,\n                    distanceScaleFactor,\n                    allocateSpace,\n                    opacity,\n                    this.m_viewState.env\n                );\n\n                if (placementStats) {\n                    placementStats.numRenderedPoiIcons++;\n                }\n            }\n        }\n        renderParams.numRenderedTextElements++;\n        return true;\n    }\n\n    private addPoiLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        const poiLabel = labelState.element;\n        const worldPosition = poiLabel.points as THREE.Vector3;\n\n        // Only process labels frustum-clipped labels\n        if (this.m_screenProjector.project(worldPosition, tempScreenPosition) === undefined) {\n            return false;\n        }\n        // Add this POI as a point label.\n        return this.addPointLabel(\n            labelState,\n            worldPosition,\n            tempScreenPosition,\n            poiRenderer,\n            textCanvas,\n            renderParams\n        );\n    }\n\n    private addLineMarkerLabel(\n        labelState: TextElementState,\n        poiRenderer: PoiRenderer,\n        shieldGroups: number[][],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): void {\n        const lineMarkerLabel = labelState.element;\n        const path = lineMarkerLabel.points as THREE.Vector3[];\n\n        // Early exit if the line marker doesn't have the necessary data.\n        const poiInfo = lineMarkerLabel.poiInfo!;\n        if (\n            path.length === 0 ||\n            !poiRenderer.prepareRender(lineMarkerLabel, this.m_viewState.env)\n        ) {\n            return;\n        }\n\n        // Initialize the shield group for this lineMarker.\n        let shieldGroup: number[] | undefined;\n        if (poiInfo.shieldGroupIndex !== undefined) {\n            shieldGroup = shieldGroups[poiInfo.shieldGroupIndex];\n            if (shieldGroup === undefined) {\n                shieldGroup = [];\n                shieldGroups[poiInfo.shieldGroupIndex] = shieldGroup;\n            }\n        }\n\n        const lineTechnique = poiInfo.technique as LineMarkerTechnique;\n        const minDistanceSqr =\n            lineTechnique.minDistance !== undefined\n                ? lineTechnique.minDistance * lineTechnique.minDistance\n                : 0;\n\n        // Process markers (with shield groups).\n        if (minDistanceSqr > 0 && shieldGroup !== undefined) {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    // Find a suitable location for the lineMarker to be placed at.\n                    let tooClose = false;\n                    for (let j = 0; j < shieldGroup.length; j += 2) {\n                        const distanceSqr = Math2D.distSquared(\n                            shieldGroup[j],\n                            shieldGroup[j + 1],\n                            tempScreenPosition.x,\n                            tempScreenPosition.y\n                        );\n                        tooClose = distanceSqr < minDistanceSqr;\n                        if (tooClose) {\n                            break;\n                        }\n                    }\n\n                    // Place it as a point label if it's not to close to other marker in the\n                    // same shield group.\n                    if (!tooClose) {\n                        if (\n                            this.addPointLabel(\n                                labelState,\n                                point,\n                                tempScreenPosition,\n                                poiRenderer,\n                                textCanvas,\n                                renderParams,\n                                pointIndex\n                            )\n                        ) {\n                            shieldGroup.push(tempScreenPosition.x, tempScreenPosition.y);\n                        }\n                    }\n                }\n            }\n        }\n        // Process markers (without shield groups).\n        else {\n            for (let pointIndex = 0; pointIndex < path.length; ++pointIndex) {\n                const point = path[pointIndex];\n                // Only process labels frustum-clipped labels\n                if (this.m_screenProjector.project(point, tempScreenPosition) !== undefined) {\n                    this.addPointLabel(\n                        labelState,\n                        point,\n                        tempScreenPosition,\n                        poiRenderer,\n                        textCanvas,\n                        renderParams,\n                        pointIndex\n                    );\n                }\n            }\n        }\n    }\n\n    private addPathLabel(\n        labelState: TextElementState,\n        screenPoints: THREE.Vector2[],\n        textCanvas: TextCanvas,\n        renderParams: RenderParams\n    ): boolean {\n        // TODO: HARP-7649. Add fade out transitions for path labels.\n        const textMaxDistance = getMaxViewDistance(\n            this.m_viewState,\n            this.m_options.maxDistanceRatioForTextLabels!\n        );\n        const pathLabel = labelState.element;\n\n        // Limit the text rendering of path labels in the far distance.\n        if (\n            !(\n                pathLabel.ignoreDistance === true ||\n                labelState.viewDistance === undefined ||\n                labelState.viewDistance < textMaxDistance\n            )\n        ) {\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        if (\n            pathLabel.fadeFar !== undefined &&\n            (pathLabel.fadeFar <= 0.0 ||\n                pathLabel.fadeFar * this.m_viewState.maxVisibilityDist < labelState.renderDistance)\n        ) {\n            // The label is farther away than fadeFar value, which means it is totally\n            // transparent\n            if (placementStats) {\n                ++placementStats.tooFar;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        // Get the screen points that define the label's segments and create a path with\n        // them.\n        let textPath = new THREE.Path();\n        tempScreenPosition.copy(screenPoints[0]);\n        for (let i = 0; i < screenPoints.length - 1; ++i) {\n            textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i + 1]));\n        }\n        // Flip the path if the label is gonna be rendered downwards.\n        if (textPath.getPoint(0.5).x - textPath.getPoint(0.51).x > 0) {\n            tempScreenPosition.copy(screenPoints[screenPoints.length - 1]);\n            textPath = new THREE.Path();\n            for (let i = screenPoints.length - 1; i > 0; --i) {\n                textPath.add(new SimpleLineCurve(screenPoints[i], screenPoints[i - 1]));\n            }\n        }\n\n        // Update the real rendering distance to have smooth fading and scaling\n        labelState.setViewDistance(computeViewDistance(this.m_viewState.worldCenter, pathLabel));\n        const textRenderDistance = -labelState.renderDistance;\n\n        // Scale the text depending on the label's distance to the camera.\n        const distanceScaleFactor = this.getDistanceScalingFactor(\n            pathLabel,\n            textRenderDistance,\n            this.m_viewState.lookAtDistance\n        );\n        const prevSize = textCanvas.textRenderStyle.fontSize.size;\n        textCanvas.textRenderStyle.fontSize.size *= distanceScaleFactor;\n\n        if (\n            placePathLabel(\n                labelState,\n                textPath,\n                tempScreenPosition,\n                textCanvas,\n                this.m_screenCollisions\n            ) !== PlacementResult.Ok\n        ) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            if (placementStats) {\n                ++placementStats.numNotVisible;\n            }\n            labelState.textRenderState!.reset();\n            return false;\n        }\n\n        labelState.textRenderState!.startFadeIn(renderParams.time);\n\n        let opacity = pathLabel.renderStyle!.opacity;\n\n        if (labelState.textRenderState!.isFading()) {\n            opacity *= labelState.textRenderState!.opacity;\n            renderParams.fadeAnimationRunning = true;\n        }\n\n        if (labelState.textRenderState!.opacity === 0) {\n            textCanvas.textRenderStyle.fontSize.size = prevSize;\n            return false;\n        }\n\n        const prevOpacity = textCanvas.textRenderStyle.opacity;\n        const prevBgOpacity = textCanvas.textRenderStyle.backgroundOpacity;\n        const distanceFadeFactor = this.getDistanceFadingFactor(\n            pathLabel,\n            labelState,\n            this.m_viewState.maxVisibilityDist\n        );\n        textCanvas.textRenderStyle.opacity = opacity * distanceFadeFactor;\n        textCanvas.textRenderStyle.backgroundOpacity =\n            textCanvas.textRenderStyle.opacity * pathLabel.renderStyle!.backgroundOpacity;\n\n        tempPosition.z = labelState.renderDistance;\n\n        addTextToCanvas(pathLabel, textCanvas, tempPosition, textPath);\n        renderParams.numRenderedTextElements++;\n\n        // Restore previous style values for text elements using the same style.\n        textCanvas.textRenderStyle.fontSize.size = prevSize;\n        textCanvas.textRenderStyle.opacity = prevOpacity;\n        textCanvas.textRenderStyle.backgroundOpacity = prevBgOpacity;\n        return true;\n    }\n\n    private checkIfOverloaded(dataSourceTileList: DataSourceTileList[]): boolean {\n        // Count the number of TextElements in the scene to see if we have to switch to\n        // \"overloadMode\".\n        let numTextElementsInScene = 0;\n\n        dataSourceTileList.forEach(renderListEntry => {\n            for (const tile of renderListEntry.renderedTiles.values()) {\n                numTextElementsInScene += tile.textElementGroups.count();\n                numTextElementsInScene += tile.userTextElements.elements.length;\n            }\n        });\n        const newOverloaded = numTextElementsInScene > OVERLOAD_LABEL_LIMIT;\n\n        if (newOverloaded && !this.m_overloaded) {\n            logger.debug(\"Overloaded Mode enabled.\");\n        }\n        this.m_overloaded = newOverloaded;\n        return this.m_overloaded;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryType, getFeatureId, Technique } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewPoints } from \"./MapViewPoints\";\nimport { RoadPicker } from \"./RoadPicker\";\nimport { RoadIntersectionData, Tile, TileFeatureData } from \"./Tile\";\n\n/**\n * Describes the general type of a picked object.\n */\nexport enum PickObjectType {\n    /**\n     * Unspecified.\n     */\n    Unspecified = 0,\n\n    /**\n     * A point object.\n     */\n    Point,\n\n    /**\n     * A line object.\n     */\n    Line,\n\n    /**\n     * An area object.\n     */\n    Area,\n\n    /**\n     * The text part of a [[TextElement]]\n     */\n    Text,\n\n    /**\n     * The Icon of a [[TextElement]].\n     */\n    Icon,\n\n    /**\n     * Any general 3D object, for example, a landmark.\n     */\n    Object3D\n}\n\n/**\n * A general pick result. You can access the details of a picked geometry from the property\n * `intersection`, which is available if a geometry was hit. If a road was hit, a [[RoadPickResult]]\n * is returned, which has additional information, but no `intersection`.\n */\nexport interface PickResult {\n    /**\n     * General type of object.\n     */\n    type: PickObjectType;\n\n    /**\n     * A 2D point in screen coordinates, or a 3D point in world coordinates.\n     */\n    point: THREE.Vector2 | THREE.Vector3;\n\n    /**\n     * Distance from the camera to the picking point; used to determine the closest object.\n     */\n    distance: number;\n\n    /**\n     * An optional feature ID of the picked object; typically applies to the Optimized Map\n     * Vector (OMV) format.\n     */\n    featureId?: number;\n\n    /**\n     * Defined for geometry only.\n     */\n    intersection?: THREE.Intersection;\n\n    /**\n     * Defined for roads or if `enableTechniqueInfo` option is enabled.\n     */\n    technique?: Technique;\n\n    /**\n     * Optional user data that has been defined in the picked object. This object points directly to\n     * information contained in the original [[TileFeatureData]] stored in [[MapView]], and should\n     * not be modified.\n     */\n    userData?: any;\n}\n\n/**\n * Handles the picking of scene geometry and roads.\n */\nexport class PickHandler {\n    private readonly m_plane = new THREE.Plane(new THREE.Vector3(0, 0, 1));\n    private readonly m_roadPicker?: RoadPicker;\n\n    constructor(\n        readonly mapView: MapView,\n        readonly camera: THREE.Camera,\n        public enableRoadPicking = true,\n        public enablePickTechnique = false\n    ) {\n        if (enableRoadPicking) {\n            this.m_roadPicker = new RoadPicker(mapView);\n        }\n    }\n\n    /**\n     * The `RoadPicker` class manages picking of roads, which may not be pickable in THREE.js,\n     * since their geometry is generated in the vertex shader. The `RoadPicker` requires that\n     * all [[Tile]]s are registered before they can be picked successfully.\n     */\n    registerTile(tile: Tile): RoadIntersectionData | undefined {\n        return this.m_roadPicker !== undefined ? this.m_roadPicker.registerTile(tile) : undefined;\n    }\n\n    /**\n     * Does a raycast on all objects in the scene; useful for picking. This function is Limited to\n     * objects that THREE.js can raycast. However, any solid lines that have their geometry in the\n     * shader cannot be tested for intersection.\n     *\n     * @param x The X position in CSS/client coordinates, without the applied display ratio.\n     * @param y The Y position in CSS/client coordinates, without the applied display ratio.\n     * @returns the list of intersection results.\n     */\n    intersectMapObjects(x: number, y: number): PickResult[] {\n        const worldPos = this.mapView.getNormalizedScreenCoordinates(x, y);\n\n        const rayCaster = this.mapView.raycasterFromScreenPoint(x, y);\n        const pickResults: PickResult[] = [];\n\n        if (this.mapView.textElementsRenderer !== undefined) {\n            const { clientWidth, clientHeight } = this.mapView.canvas;\n            const screenX = worldPos.x * clientWidth * 0.5 * this.mapView.pixelRatio;\n            const screenY = worldPos.y * clientHeight * 0.5 * this.mapView.pixelRatio;\n            const scenePosition = new THREE.Vector2(screenX, screenY);\n            this.mapView.textElementsRenderer.pickTextElements(scenePosition, pickResults);\n        }\n\n        // calculate objects intersecting the picking ray\n        const intersects = rayCaster.intersectObjects(this.mapView.worldRootObject.children, true);\n        for (const intersect of intersects) {\n            const pickResult: PickResult = {\n                type: PickObjectType.Unspecified,\n                point: intersect.point,\n                distance: intersect.distance,\n                intersection: intersect\n            };\n\n            if (\n                intersect.object.userData === undefined ||\n                intersect.object.userData.feature === undefined\n            ) {\n                pickResults.push(pickResult);\n                continue;\n            }\n\n            const featureData: TileFeatureData = intersect.object.userData.feature;\n            if (this.enablePickTechnique) {\n                pickResult.technique = intersect.object.userData.technique;\n            }\n\n            this.addObjInfo(featureData, intersect, pickResult);\n\n            if (featureData.objInfos !== undefined) {\n                const featureId =\n                    featureData.objInfos.length === 1\n                        ? getFeatureId(featureData.objInfos[0])\n                        : undefined;\n                pickResult.featureId = featureId;\n            }\n\n            let pickObjectType: PickObjectType;\n\n            switch (featureData.geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    pickObjectType = PickObjectType.Point;\n                    break;\n                case GeometryType.Line:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.SolidLine:\n                case GeometryType.TextPath:\n                    pickObjectType = PickObjectType.Line;\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    pickObjectType = PickObjectType.Area;\n                    break;\n                case GeometryType.Object3D:\n                    pickObjectType = PickObjectType.Object3D;\n                    break;\n                default:\n                    pickObjectType = PickObjectType.Unspecified;\n            }\n\n            pickResult.type = pickObjectType;\n            pickResults.push(pickResult);\n        }\n\n        if (this.enableRoadPicking) {\n            const planeIntersectPosition = new THREE.Vector3();\n            const cameraPos = this.mapView.camera.position.clone();\n\n            rayCaster.setFromCamera(worldPos, this.mapView.camera);\n            rayCaster.ray.intersectPlane(this.m_plane, planeIntersectPosition);\n\n            this.mapView.forEachVisibleTile(tile => {\n                this.m_roadPicker!.intersectRoads(\n                    tile,\n                    cameraPos,\n                    planeIntersectPosition,\n                    pickResults\n                );\n            });\n        }\n\n        pickResults.sort((a: PickResult, b: PickResult) => {\n            return a.distance - b.distance;\n        });\n\n        return pickResults;\n    }\n\n    private addObjInfo(\n        featureData: TileFeatureData,\n        intersect: THREE.Intersection,\n        pickResult: PickResult\n    ) {\n        if (pickResult.intersection!.object instanceof MapViewPoints) {\n            pickResult.userData = featureData.objInfos![intersect.index!];\n            return;\n        } else if (\n            featureData.objInfos === undefined ||\n            featureData.starts === undefined ||\n            intersect.faceIndex === undefined\n        ) {\n            return;\n        }\n\n        if (featureData.starts.length > 1) {\n            let objInfosIndex = 0;\n            for (const polygonStartFace of featureData.starts) {\n                if (polygonStartFace > intersect.faceIndex * 3) {\n                    break;\n                }\n                objInfosIndex++;\n            }\n            pickResult.userData = featureData.objInfos[objInfosIndex - 1];\n        } else {\n            pickResult.userData = featureData.objInfos[0];\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryType,\n    Technique,\n    TextPathGeometry\n} from \"@here/harp-datasource-protocol\";\nimport { GeoBox, OrientedBox3, Projection, TileKey } from \"@here/harp-geoutils\";\nimport { assert, CachedResource, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { AnimatedExtrusionTileHandler } from \"./AnimatedExtrusionHandler\";\nimport { CopyrightInfo } from \"./copyrights/CopyrightInfo\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryLoader } from \"./geometry/TileGeometryLoader\";\nimport { MapView } from \"./MapView\";\nimport { PathBlockingElement } from \"./PathBlockingElement\";\nimport { PerformanceStatistics } from \"./Statistics\";\nimport { TextElement } from \"./text/TextElement\";\nimport { TextElementGroup } from \"./text/TextElementGroup\";\nimport { TextElementGroupPriorityList } from \"./text/TextElementGroupPriorityList\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst logger = LoggerManager.instance.create(\"Tile\");\n\nexport type TileObject = THREE.Object3D & {\n    /**\n     * Distance of this object from the [[Tile]]'s center.\n     */\n    displacement?: THREE.Vector3;\n\n    /**\n     * This stores the THREE.Object3D renderOrder property, we need to back it up because we need to\n     * reduce it if the tile is used as fall back. When it is used normally, the renderOrder needs\n     * to be reset.\n     * @hidden\n     */\n    _backupRenderOrder?: number;\n};\n\ninterface DisposableObject {\n    geometry?: THREE.BufferGeometry | THREE.Geometry;\n    material?: THREE.Material[] | THREE.Material;\n}\n\n/**\n * An interface for optional feature data that is saved in a `THREE.Object3D`'s `userData`\n * property.\n */\nexport interface TileFeatureData {\n    /**\n     * The original type of geometry.\n     */\n    geometryType?: GeometryType;\n\n    /**\n     * An optional array of indices into geometry where the feature starts. The lists of IDs\n     * and starting indices (starts) must have the same size.\n     */\n    starts?: number[];\n\n    /**\n     * An optional object containing properties defined by the developer. It has the same size as\n     * the list of IDs and the starting indices (starts).\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION = 16;\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Compute the memory footprint of `TileFeatureData`.\n */\nexport function getFeatureDataSize(featureData: TileFeatureData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    if (featureData.starts !== undefined) {\n        numBytes += featureData.starts.length * 8;\n    }\n    if (featureData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += featureData.objInfos.length * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Contains data that describes the road on a `tile`. The `RoadIntersectionData` is generated by\n * the [[RoadPicker]] class.\n *\n * @see [[RoadPicker]]\n */\nexport interface RoadIntersectionData {\n    /**\n     * Optional array of feature IDs.\n     */\n    ids: Array<number | undefined>;\n\n    /**\n     * An array of indices into the technique catalog. The lists of `techniqueIndex` and `starts`\n     * have the same size.\n     */\n    techniqueIndex: number[];\n\n    /**\n     * An array of the indices into geometry where the feature starts. The lists of IDs and\n     * starting indices (starts) have the same size.\n     */\n    starts: number[];\n\n    /**\n     * An array of widths of the roads. The lists of IDs and widths have the same size.\n     */\n    widths: Array<number | (() => number)>;\n\n    /**\n     * An array of 2D numbers that make up the road geometry.\n     */\n    positions: number[];\n\n    /**\n     * A catalog of [[Technique]]s for road lines. Allows to reconstruct the visual appearance of\n     * the identified line.\n     */\n    techniques: Technique[];\n    /**\n     * An optional object that contains properties defined by the developer. This object has the\n     * same size as the list of IDs and the starts.\n     */\n    objInfos?: Array<{} | undefined>;\n}\n\n/**\n * Compute the memory footprint of `RoadIntersectionData`.\n */\nfunction getRoadIntersectionDataSize(intersectionData: RoadIntersectionData): number {\n    let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n    // 8 bytes per techniqueIndex\n    // 8 bytes per start\n    // 8 bytes per width\n    // 8 bytes per position\n    // 100 (estimated) bytes per technique\n    const bytesPerEntry = 8 + 8 + 8 + 8 + MINIMUM_OBJECT_SIZE_ESTIMATION;\n    const numEntries = intersectionData.techniqueIndex.length;\n    numBytes += intersectionData.techniqueIndex.length * bytesPerEntry;\n\n    if (intersectionData.ids !== undefined) {\n        numBytes += numEntries * 8;\n    }\n\n    if (intersectionData.objInfos !== undefined) {\n        // 16 (estimated) bytes per objInfos\n        numBytes += numEntries * MINIMUM_SMALL_OBJECT_SIZE_ESTIMATION;\n    }\n\n    return numBytes;\n}\n\n/**\n * Missing Typedoc\n */\nexport enum TileLoaderState {\n    Initialized,\n    Loading,\n    Loaded,\n    Decoding,\n    Ready,\n    Canceled,\n    Failed\n}\n\nexport interface ITileLoader {\n    state: TileLoaderState;\n    payload?: ArrayBufferLike | {};\n    decodedTile?: DecodedTile;\n\n    isFinished: boolean;\n\n    loadAndDecode(): Promise<TileLoaderState>;\n    waitSettled(): Promise<TileLoaderState>;\n\n    updatePriority(area: number): void;\n\n    cancel(): void;\n}\n\n/**\n * An object that contains information about resources used by a tile.\n */\nexport interface TileResourceUsage {\n    /**\n     * The estimated memory usage, in bytes.\n     */\n    estimatedMemoryUsage: number;\n    /**\n     * The amount of vertices used by a tile.\n     */\n    numVertices: number;\n    /**\n     * The amount of colors used by a tile.\n     */\n    numColors: number;\n    /**\n     * The amount of objects used by a tile.\n     */\n    numObjects: number;\n    /**\n     * The amount of geometries used by a tile.\n     */\n    numGeometries: number;\n    /**\n     * The amount of materials used by a tile.\n     */\n    numMaterials: number;\n}\n\n/**\n * Simple information about resource usage by the [[Tile]]. Heap and GPU information are\n * estimations.\n */\nexport interface TileResourceInfo {\n    /**\n     * Estimated number of bytes used on the heap.\n     */\n    heapSize: number;\n    /**\n     * Estimated number of bytes used on the GPU.\n     */\n    gpuSize: number;\n    /**\n     * Number of [[THREE.Object3D]] in this tile.\n     */\n    num3dObjects: number;\n    /**\n     * Number of [[TextElement]]s in this tile.\n     */\n    numTextElements: number;\n    /**\n     * Number of user [[TextElement]]s in this tile.\n     */\n    numUserTextElements: number;\n}\n\nexport interface TextElementIndex {\n    groupIndex: number;\n    elementIndex: number;\n}\n\n/**\n * The class that holds the tiled data for a [[DataSource]].\n */\nexport class Tile implements CachedResource {\n    /**\n     * A list of the THREE.js objects stored in this `Tile`.\n     */\n    readonly objects: TileObject[] = [];\n\n    /**\n     * The optional list of HERE TileKeys of tiles with geometries that cross\n     * the boundaries of this `Tile`.\n     */\n    readonly dependencies: string[] = new Array<string>();\n\n    /**\n     * The bounding box of this `Tile` in geocoordinates.\n     */\n    readonly geoBox: GeoBox;\n\n    /**\n     * The bounding box of this `Tile` in world coordinates.\n     */\n    readonly boundingBox = new OrientedBox3();\n\n    /**\n     * Maximum height of geometry on this tile above ground level.\n     */\n    maxGeometryHeight: number = 0;\n\n    /**\n     * A record of road data that cannot be intersected with THREE.JS, because the geometry is\n     * created in the vertex shader.\n     */\n    roadIntersectionData?: RoadIntersectionData;\n\n    /**\n     * Copyright information of this `Tile`'s data.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Keeping some stats for the individual [[Tile]]s to analyze caching behavior.\n     *\n     * The frame the [[Tile]] was last requested. This is required to know when the given [[Tile]]\n     * can be removed from the cache.\n     */\n    frameNumLastRequested: number = -1;\n\n    /**\n     * The frame the `Tile` was first visible.\n     */\n    frameNumVisible: number = -1;\n\n    /**\n     * The last frame this `Tile` has been rendered (or was in the visible set). Used to determine\n     * visibility of `Tile` at the end of a frame, if the number is the current frame number, it is\n     * visible.\n     */\n    frameNumLastVisible: number = -1;\n\n    /**\n     * After removing from cache, this is the number of frames the `Tile` was visible.\n     */\n    numFramesVisible: number = 0;\n\n    /**\n     * Version stamp of the visibility set in the [[TileManager]]. If the counter is different, the\n     * visibility of the Tile's objects has to be calculated. Optimization to reduce overhead of\n     * computing visibility.\n     */\n    visibilityCounter: number = -1;\n\n    /**\n     * @hidden\n     *\n     * Prepared text geometries optimized for display.\n     */\n    preparedTextPaths: TextPathGeometry[] | undefined;\n\n    /**\n     * @hidden\n     *\n     * Used to tell if the Tile is used temporarily as a fallback tile.\n     *\n     * levelOffset is in in the range [-quadTreeSearchDistanceUp,\n     * quadTreeSearchDistanceDown], where these values come from the\n     * [[VisibleTileSetOptions]]\n     */\n    levelOffset: number = 0;\n\n    private m_disposed: boolean = false;\n    private m_localTangentSpace = false;\n\n    private m_forceHasGeometry: boolean | undefined = undefined;\n\n    private m_tileLoader?: ITileLoader;\n    private m_decodedTile?: DecodedTile;\n    private m_tileGeometryLoader?: TileGeometryLoader;\n\n    // TODO: Delay construction of text element groups until first text element is added.\n\n    // Used for [[TextElement]]s which the developer defines. Group created with maximum priority\n    // so that user text elements are placed before others.\n    private m_userTextElements = new TextElementGroup(Number.MAX_SAFE_INTEGER);\n\n    // Used for [[TextElement]]s that are stored in the data, and that are placed explicitly,\n    // fading in and out.\n    private readonly m_textElementGroups = new TextElementGroupPriorityList();\n\n    // Blocks other labels from showing.\n    private readonly m_pathBlockingElements: PathBlockingElement[] = [];\n\n    // If `true`, the text content of the [[Tile]] changed after the last time it was rendered.\n    // It's `Undefined` when no text content has been added yet.\n    private m_textElementsChanged: boolean | undefined;\n\n    private m_visibleArea: number = 0;\n    private m_minElevation: number = 0;\n    private m_maxElevation: number = 0;\n\n    private m_resourceInfo: TileResourceInfo | undefined;\n\n    // List of owned textures for disposal\n    private m_ownedTextures: WeakSet<THREE.Texture> = new WeakSet();\n\n    private m_animatedExtrusionTileHandler: AnimatedExtrusionTileHandler | undefined;\n\n    /**\n     * Creates a new [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] that created this [[Tile]].\n     * @param tileKey The unique identifier for this [[Tile]]. Currently only up to level 24 is\n     * supported, because of the use of the upper bits for the offset.\n     * @param offset The optional offset, this is an integer which represents what multiple of 360\n     * degrees to shift, only useful for flat projections, hence optional.\n     * @param localTangentSpace Whether the tile geometry is in local tangent space or not.\n     */\n    constructor(\n        readonly dataSource: DataSource,\n        readonly tileKey: TileKey,\n        public offset: number = 0,\n        localTangentSpace?: boolean\n    ) {\n        this.geoBox = this.dataSource.getTilingScheme().getGeoBox(this.tileKey);\n        this.projection.projectBox(this.geoBox, this.boundingBox);\n        this.m_localTangentSpace = localTangentSpace !== undefined ? localTangentSpace : false;\n    }\n\n    /**\n     * The visibility status of the [[Tile]]. It is actually visible or planned to become visible.\n     */\n    get isVisible(): boolean {\n        // Tiles are not evaluated as invisible until the second frame they aren't requested.\n        // This happens in order to prevent that, during [[VisibleTileSet]] visibility evaluation,\n        // visible tiles that haven't yet been evaluated for the current frame are preemptively\n        // removed from [[DataSourceCache]].\n        return this.frameNumLastRequested >= this.dataSource.mapView.frameNumber - 1;\n    }\n\n    set isVisible(visible: boolean) {\n        this.frameNumLastRequested = visible ? this.dataSource.mapView.frameNumber : -1;\n    }\n\n    /**\n     * The [[Projection]] currently used by the [[MapView]].\n     */\n    get projection(): Projection {\n        return this.dataSource.projection;\n    }\n\n    /**\n     * The [[MapView]] this `Tile` belongs to.\n     */\n    get mapView(): MapView {\n        return this.dataSource.mapView;\n    }\n\n    /**\n     * Whether the data of this tile is in local tangent space or not.\n     * If the data is in local tangent space (i.e. up vector is (0,0,1) for high zoomlevels) then\n     * [[MapView]] will rotate the objects before rendering using the rotation matrix of the\n     * oriented [[boundingBox]].\n     */\n    get localTangentSpace(): boolean {\n        return this.m_localTangentSpace;\n    }\n\n    /*\n     * The size of this Tile in system memory.\n     */\n    get memoryUsage(): number {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!.heapSize;\n    }\n\n    /**\n     * The center of this `Tile` in world coordinates.\n     */\n    get center(): THREE.Vector3 {\n        return this.boundingBox.position;\n    }\n\n    /**\n     * Compute [[TileResourceInfo]] of this `Tile`. May be using a cached value. The method\n     * `invalidateResourceInfo` can be called beforehand to force a recalculation.\n     *\n     * @returns `TileResourceInfo` for this `Tile`.\n     */\n    getResourceInfo(): TileResourceInfo {\n        if (this.m_resourceInfo === undefined) {\n            this.computeResourceInfo();\n        }\n        return this.m_resourceInfo!;\n    }\n\n    /**\n     * Force invalidation of the cached [[TileResourceInfo]]. Useful after the `Tile` has been\n     * modified.\n     */\n    invalidateResourceInfo(): void {\n        this.m_resourceInfo = undefined;\n    }\n\n    /**\n     * Add ownership of a texture to this tile. The texture will be disposed if the `Tile` is\n     * disposed.\n     * @param texture Texture to be owned by the `Tile`\n     */\n    addOwnedTexture(texture: THREE.Texture): void {\n        this.m_ownedTextures.add(texture);\n    }\n\n    /**\n     * Gets the list of developer-defined [[TextElement]] in this `Tile`. This list is always\n     * rendered first.\n     */\n    get userTextElements(): TextElementGroup {\n        return this.m_userTextElements;\n    }\n\n    /**\n     * Adds a developer-defined [[TextElement]] to this `Tile`. The [[TextElement]] is always\n     * visible, if it's in the map's currently visible area.\n     *\n     * @param textElement The Text element to add.\n     */\n    addUserTextElement(textElement: TextElement) {\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Text content in the tile is about to change, but it has already been\n            // rendered at least once (otherwise m_textElementsChanged would be undefined). Clone\n            // the text element group so that it's handled as a new group by TextElementsRenderer\n            // and it doesn't reuse the same state stored for the old one.\n            // TODO: HARP-8910 Deprecate user text elements.\n            this.m_userTextElements = this.m_userTextElements.clone();\n        }\n\n        this.m_userTextElements.elements.push(textElement);\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Removes a developer-defined [[TextElement]] from this `Tile`.\n     *\n     * @param textElement A developer-defined TextElement to remove.\n     * @returns `true` if the element has been removed successfully; `false` otherwise.\n     */\n    removeUserTextElement(textElement: TextElement): boolean {\n        const foundIndex = this.m_userTextElements.elements.indexOf(textElement);\n        if (foundIndex === -1) {\n            return false;\n        }\n\n        if (this.m_textElementsChanged === false) {\n            // HARP-8733: Text content in the tile is about to change, but it has already been\n            // rendered at least once (otherwise m_textElementsChanged would be undefined). Clone\n            // the text element group so that it's handled as a new group by TextElementsRenderer\n            // and it doesn't reuse the same state stored for the old one.\n            // TODO: HARP-8910 Deprecate user text elements.\n            this.m_userTextElements = this.m_userTextElements.clone();\n        }\n        this.m_userTextElements.elements.splice(foundIndex, 1);\n        this.textElementsChanged = true;\n        return true;\n    }\n\n    /**\n     * Adds a [[TextElement]] to this `Tile`, which is added to the visible set of\n     * [[TextElement]]s based on the capacity and visibility. The [[TextElement]]'s priority\n     * controls if or when it becomes visible.\n     *\n     * To ensure that a TextElement is visible, use a high value for its priority, such as\n     * `Number.MAX_SAFE_INTEGER`. Since the number of visible TextElements is limited by the\n     * screen space, not all TextElements are visible at all times.\n     *\n     * @param textElement The TextElement to add.\n     */\n    addTextElement(textElement: TextElement) {\n        this.textElementGroups.add(textElement);\n        this.textElementsChanged = true;\n    }\n\n    /**\n     * Adds a [[PathBlockingElement]] to this `Tile`. This path has the highest priority and blocks\n     * all other labels. There maybe in future a use case to give it a priority, but as that isn't\n     * yet required, it is left to be implemented later if required.\n     * @param blockingElement Element which should block all other labels.\n     */\n    addBlockingElement(blockingElement: PathBlockingElement) {\n        this.m_pathBlockingElements.push(blockingElement);\n    }\n\n    /**\n     * Removes a [[TextElement]] from this `Tile`. For the element to be removed successfully, the\n     * priority of the [[TextElement]] has to be equal to its priority when it was added.\n     *\n     * @param textElement The TextElement to remove.\n     * @returns `true` if the TextElement has been removed successfully; `false` otherwise.\n     */\n    removeTextElement(textElement: TextElement): boolean {\n        if (this.textElementGroups.remove(textElement)) {\n            this.textElementsChanged = true;\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Gets the current [[GroupedPriorityList]] which contains a list of all [[TextElement]]s to be\n     * selected and placed for rendering.\n     */\n    get textElementGroups(): TextElementGroupPriorityList {\n        return this.m_textElementGroups;\n    }\n\n    /**\n     * Gets the current modification state for the list of [[TextElement]]s in the `Tile`. If the\n     * value is `true` the TextElement is placed for rendering during the next frame.\n     */\n    get textElementsChanged(): boolean {\n        return this.m_textElementsChanged ?? false;\n    }\n\n    set textElementsChanged(changed: boolean) {\n        this.m_textElementsChanged = changed;\n    }\n\n    /**\n     * Returns true if the `Tile` has any text elements to render.\n     */\n    hasTextElements(): boolean {\n        return this.m_textElementGroups.count() > 0 || this.m_userTextElements.elements.length > 0;\n    }\n\n    /**\n     * Get the current blocking elements.\n     */\n    get blockingElements(): PathBlockingElement[] {\n        return this.m_pathBlockingElements;\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare its road\n     * geometry for picking.\n     */\n    prepareTileInfo() {\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.m_decodedTile === undefined || this.m_disposed || !this.isVisible) {\n            return;\n        }\n\n        if (this.m_decodedTile.tileInfo !== undefined) {\n            this.roadIntersectionData = this.dataSource.mapView.pickHandler.registerTile(this);\n        }\n    }\n\n    /**\n     * Called before [[MapView]] starts rendering this `Tile`.\n     *\n     * @param zoomLevel The current zoom level.\n     * @returns Returns `true` if this `Tile` should be rendered.\n     */\n    willRender(_zoomLevel: number): boolean {\n        return true;\n    }\n\n    /**\n     * Called after [[MapView]] has rendered this `Tile`.\n     */\n    didRender(): void {\n        // to be overridden by subclasses\n    }\n\n    /**\n     * Estimated visible area of tile used for sorting the priorities during loading.\n     */\n    get visibleArea(): number {\n        return this.m_visibleArea;\n    }\n\n    set visibleArea(area: number) {\n        this.m_visibleArea = area;\n        if (this.tileLoader !== undefined) {\n            this.tileLoader.updatePriority(area);\n        }\n    }\n\n    /**\n     * Estimated tile's minimum elevation above the sea level.\n     * @note Negative values indicates depressions.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n    }\n\n    /**\n     * Estimated maximum ground elevation above the sea level that may be found on tile.\n     * @note Negative values indicates depressions.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n    }\n\n    /**\n     * Gets the decoded tile; it is removed after geometry handling.\n     */\n    get decodedTile(): DecodedTile | undefined {\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Applies the decoded tile to the tile.\n     * If the geometry is empty, then the tile's forceHasGeometry flag is set.\n     * Map is updated.\n     * @param decodedTile The decoded tile to set.\n     */\n    set decodedTile(decodedTile: DecodedTile | undefined) {\n        this.m_decodedTile = decodedTile;\n        this.invalidateResourceInfo();\n\n        if (decodedTile === undefined) {\n            return;\n        }\n\n        if (decodedTile.geometries.length === 0) {\n            this.forceHasGeometry(true);\n        }\n\n        if (decodedTile.boundingBox !== undefined) {\n            // If the decoder provides a more accurate bounding box than the one we computed from\n            // the flat geo box we take it instead.\n            this.boundingBox.copy(decodedTile.boundingBox);\n        }\n\n        const stats = PerformanceStatistics.instance;\n        if (stats.enabled && decodedTile.decodeTime !== undefined) {\n            stats.currentFrame.addValue(\"decode.decodingTime\", decodedTile.decodeTime);\n            stats.currentFrame.addValue(\"decode.decodedTiles\", 1);\n        }\n\n        if (decodedTile.copyrightHolderIds !== undefined) {\n            this.copyrightInfo = decodedTile.copyrightHolderIds.map(id => ({ id }));\n        }\n\n        this.dataSource.requestUpdate();\n    }\n\n    /**\n     * Remove the decodedTile when no longer needed.\n     */\n    removeDecodedTile() {\n        this.m_decodedTile = undefined;\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Called by the [[TileLoader]] after the `Tile` has finished loading its map data. Can be used\n     * to add content to the `Tile`. The [[DecodedTile]] should still be available.\n     */\n    loadingFinished() {\n        // To be used in subclasses.\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free the geometry of a `Tile` object.\n     *\n     * @param object The object that references the geometry.\n     * @returns `true` if the geometry can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectGeometry(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a `Tile` object's material.\n     *\n     * @param object The object referencing the geometry.\n     * @returns `true` if the material can be disposed.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldDisposeObjectMaterial(object: TileObject): boolean {\n        return true;\n    }\n\n    /**\n     * Called when the default implementation of `dispose()` needs\n     * to free a Texture that is part of a `Tile` object's material.\n     *\n     * @param texture The texture about to be disposed.\n     * @returns `true` if the texture can be disposed.\n     */\n    shouldDisposeTexture(texture: THREE.Texture): boolean {\n        return this.m_ownedTextures.has(texture);\n    }\n\n    /**\n     * Returns `true` if this `Tile` has been disposed.\n     */\n    get disposed(): boolean {\n        return this.m_disposed;\n    }\n\n    /**\n     * Gets the [[TileGeometryLoader]] that manages this tile.\n     */\n    get tileGeometryLoader(): TileGeometryLoader | undefined {\n        return this.m_tileGeometryLoader;\n    }\n\n    /**\n     * Sets the [[TileGeometryLoader]] to manage this tile.\n     *\n     * @param tileGeometryLoader A [[TileGeometryLoader]] instance to manage the geometry creation\n     *      for this tile.\n     */\n    set tileGeometryLoader(tileGeometryLoader: TileGeometryLoader | undefined) {\n        this.m_tileGeometryLoader = tileGeometryLoader;\n    }\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    get basicGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.basicGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.m_tileGeometryLoader === undefined\n            ? this.hasGeometry\n            : this.m_tileGeometryLoader.allGeometryLoaded || this.m_tileGeometryLoader.isFinished;\n    }\n\n    /**\n     * MapView checks if this `Tile` is ready to be rendered while culling.\n     *\n     * By default, MapView checks if the [[objects]] list is not empty. However, you can override\n     * this check by manually setting this property.\n     */\n    get hasGeometry(): boolean {\n        if (this.m_forceHasGeometry === undefined) {\n            return this.objects.length !== 0;\n        } else {\n            return this.m_forceHasGeometry;\n        }\n    }\n\n    /**\n     * Overrides the default value for [[hasGeometry]] if value is not `undefined`.\n     *\n     * @param value A new value for the [[hasGeometry]] flag.\n     */\n    forceHasGeometry(value: boolean | undefined) {\n        this.m_forceHasGeometry = value;\n    }\n\n    /**\n     * Reset the visibility counter. This will force the visibility check to be rerun on all objects\n     * in this `Tile`.\n     */\n    resetVisibilityCounter(): void {\n        this.visibilityCounter = -1;\n    }\n\n    /**\n     * Gets the [[ITileLoader]] that manages this tile.\n     */\n    get tileLoader(): ITileLoader | undefined {\n        return this.m_tileLoader;\n    }\n\n    /**\n     * Sets the [[ITileLoader]] to manage this tile.\n     *\n     * @param tileLoader A [[ITileLoader]] instance to manage the loading process for this tile.\n     */\n    set tileLoader(tileLoader: ITileLoader | undefined) {\n        this.m_tileLoader = tileLoader;\n    }\n\n    /**\n     * Loads this `Tile` geometry.\n     */\n    load() {\n        const tileLoader = this.tileLoader;\n        if (tileLoader === undefined) {\n            return;\n        }\n\n        tileLoader\n            .loadAndDecode()\n            .then(tileLoaderState => {\n                assert(tileLoaderState === TileLoaderState.Ready);\n                const decodedTile = tileLoader.decodedTile;\n                this.decodedTile = decodedTile;\n            })\n            .catch(tileLoaderState => {\n                if (\n                    tileLoaderState !== TileLoaderState.Canceled &&\n                    tileLoaderState !== TileLoaderState.Failed\n                ) {\n                    logger.error(\"Unknown error\" + tileLoaderState);\n                }\n            });\n    }\n\n    /**\n     * Handler for animation of `Tile` geometries.\n     */\n    get animatedExtrusionTileHandler(): AnimatedExtrusionTileHandler | undefined {\n        return this.m_animatedExtrusionTileHandler;\n    }\n\n    set animatedExtrusionTileHandler(handler: AnimatedExtrusionTileHandler | undefined) {\n        this.m_animatedExtrusionTileHandler = handler;\n    }\n\n    /**\n     * Frees the rendering resources allocated by this `Tile`.\n     *\n     * The default implementation of this method frees the geometries and the materials for all the\n     * reachable objects.\n     * Textures are freed if they are owned by this `Tile` (i.e. if they where created by this\n     * `Tile`or if the ownership was explicitely set to this `Tile` by [[addOwnedTexture]]).\n     */\n    clear() {\n        const disposeMaterial = (material: THREE.Material) => {\n            Object.getOwnPropertyNames(material).forEach((property: string) => {\n                const materialProperty = (material as any)[property];\n                if (materialProperty !== undefined && materialProperty instanceof THREE.Texture) {\n                    const texture = materialProperty;\n                    if (this.shouldDisposeTexture(texture)) {\n                        texture.dispose();\n                    }\n                }\n            });\n            material.dispose();\n        };\n\n        const disposeObject = (object: TileObject & DisposableObject) => {\n            if (object.geometry !== undefined && this.shouldDisposeObjectGeometry(object)) {\n                object.geometry.dispose();\n            }\n\n            if (object.material !== undefined && this.shouldDisposeObjectMaterial(object)) {\n                if (object.material instanceof Array) {\n                    object.material.forEach((material: THREE.Material | undefined) => {\n                        if (material !== undefined) {\n                            disposeMaterial(material);\n                        }\n                    });\n                } else {\n                    disposeMaterial(object.material);\n                }\n            }\n        };\n\n        this.objects.forEach((rootObject: TileObject & DisposableObject) => {\n            rootObject.traverse((object: TileObject & DisposableObject) => {\n                disposeObject(object);\n            });\n\n            disposeObject(rootObject);\n        });\n        this.objects.length = 0;\n\n        if (this.preparedTextPaths) {\n            this.preparedTextPaths = [];\n        }\n\n        if (this.m_animatedExtrusionTileHandler !== undefined) {\n            this.m_animatedExtrusionTileHandler.dispose();\n        }\n\n        this.clearTextElements();\n        this.invalidateResourceInfo();\n    }\n\n    /**\n     * Removes all [[TextElement]] from the tile.\n     */\n    clearTextElements() {\n        this.textElementsChanged = this.hasTextElements();\n        this.m_pathBlockingElements.splice(0);\n        this.textElementGroups.clear();\n        this.userTextElements.elements.length = 0;\n    }\n\n    /**\n     * Disposes this `Tile`, freeing all geometries and materials for the reachable objects.\n     */\n    dispose() {\n        if (this.m_disposed) {\n            return;\n        }\n        if (this.m_tileLoader) {\n            this.m_tileLoader.cancel();\n            this.m_tileLoader = undefined;\n        }\n        if (this.m_tileGeometryLoader !== undefined) {\n            this.m_tileGeometryLoader.dispose();\n            this.m_tileGeometryLoader = undefined;\n        }\n        this.clear();\n        this.userTextElements.elements.length = 0;\n        this.m_disposed = true;\n        // Ensure that tile is removable from tile cache.\n        this.frameNumLastRequested = 0;\n    }\n\n    /**\n     * Computes the offset in the x world coordinates corresponding to this tile, based on\n     * its [[offset]].\n     * @returns The x offset.\n     */\n    computeWorldOffsetX(): number {\n        return this.projection.worldExtent(0, 0).max.x * this.offset;\n    }\n\n    private computeResourceInfo(): void {\n        let heapSize = 0;\n        let num3dObjects = 0;\n        let numTextElements = 0;\n        let numUserTextElements = 0;\n\n        const aggregatedObjSize = {\n            heapSize: 0,\n            gpuSize: 0\n        };\n\n        // Keep a map of the uuids of the larger objects, like Geometries, Materials and Attributes.\n        // They should be counted only once even if they are shared.\n        const visitedObjects: Map<string, boolean> = new Map();\n\n        for (const object of this.objects) {\n            if (object.visible) {\n                num3dObjects++;\n            }\n            MapViewUtils.estimateObject3dSize(object, aggregatedObjSize, visitedObjects);\n        }\n\n        for (const group of this.textElementGroups.groups) {\n            numTextElements += group[1].elements.length;\n        }\n        numUserTextElements = this.userTextElements.elements.length;\n\n        // 216 was the shallow size of a single TextElement last time it has been checked, 312 bytes\n        // was the minimum retained size of a TextElement that was not being rendered. If a\n        // TextElement is actually rendered, the size may be _much_ bigger.\n        heapSize += (numTextElements + numUserTextElements) * 312;\n\n        if (this.m_decodedTile !== undefined && this.m_decodedTile.tileInfo !== undefined) {\n            aggregatedObjSize.heapSize += this.m_decodedTile.tileInfo.numBytes;\n        }\n\n        if (this.roadIntersectionData !== undefined) {\n            heapSize += getRoadIntersectionDataSize(this.roadIntersectionData);\n        }\n\n        this.m_resourceInfo = {\n            heapSize: aggregatedObjSize.heapSize + heapSize,\n            gpuSize: aggregatedObjSize.gpuSize,\n            num3dObjects,\n            numTextElements,\n            numUserTextElements\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ExtrusionFeature, ExtrusionFeatureDefs } from \"@here/harp-materials\";\nimport { MathUtils } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames, RenderEvent } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nimport * as THREE from \"three\";\n\n/**\n * Animation states for extrusion effect\n */\nexport enum AnimatedExtrusionState {\n    None,\n    Started,\n    Playing,\n    Finished\n}\n\n/**\n * Handles animated extrusion effect of the buildings in [[MapView]].\n */\nexport class AnimatedExtrusionHandler {\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    enabled: boolean = true;\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    duration: number = 750;\n    /**\n     * If `forceEnabled` is set to `true` then `animateExtrusion` and `animateExtrusionDuration`\n     * values from [[extrudedPolygonTechnique]] will be ignored in [[Tile]] and\n     * `AnimatedExtrusionHandler.enabled` with `AnimatedExtrusionHandler.duration` will be used\n     */\n    forceEnabled: boolean = false;\n\n    private m_zoomLevelPrevious: number;\n    private m_tileHandlerMap: Map<Tile, AnimatedExtrusionTileHandler> = new Map();\n    private m_zoomDirection: number = 0;\n    private m_forceAnimatedExtrusion: boolean | undefined;\n    private m_forceAnimatedExtrusionDuration: number | undefined;\n\n    /**\n     * Creates an [[AnimatedExtrusionHandler]] in [[MapView]].\n     *\n     * @param m_mapView Instance of [[MapView]] that passes `zoomLevel`\n     * through the `zoom` property update\n     */\n    constructor(private m_mapView: MapView) {\n        this.m_zoomLevelPrevious = this.m_mapView.zoomLevel;\n    }\n\n    /**\n     * Returns direction of the last zoom event.\n     * Zoom in - positive value, zoom out - negative value\n     */\n    get zoomDirection(): number {\n        return this.m_zoomDirection;\n    }\n\n    /**\n     * [[MapView]] updates zoom level. Then [[AnimatedExtrusionTileHandler]] calculates actual\n     * extrusion ratio and trigger animation\n     */\n    set zoom(zoomLevel: number) {\n        // if zoomLevel has been changed since last render\n        if (this.m_zoomLevelPrevious !== zoomLevel) {\n            this.m_tileHandlerMap.forEach(tileHandler => {\n                if (\n                    this.m_mapView.getDataSourceByName(tileHandler.tile.dataSource.name) !==\n                    undefined\n                ) {\n                    this.m_zoomDirection = zoomLevel > this.m_zoomLevelPrevious ? 1 : -1;\n                    tileHandler.zoomLevelChanged(this.m_zoomDirection);\n                }\n            });\n            this.m_zoomLevelPrevious = zoomLevel;\n        }\n    }\n\n    /**\n     * Checks whether animated extrusion effect was forcibly turned off/on in [[MapView]]\n     */\n    get forceAnimatedExtrusion(): boolean | undefined {\n        return this.m_forceAnimatedExtrusion;\n    }\n\n    /**\n     * If set to `true` it will force the animation extrusion effect to run.\n     * In case it was set to `false` animation extrusion effect will be switched off.\n     */\n    set forceAnimatedExtrusion(animatedExtrusion: boolean | undefined) {\n        this.m_forceAnimatedExtrusion = animatedExtrusion;\n    }\n\n    /**\n     * Returns `animatedExtrusionDuration` value that was set in [[MapView]].\n     */\n    get forceAnimatedExtrusionDuration(): number | undefined {\n        return this.m_forceAnimatedExtrusionDuration;\n    }\n\n    /**\n     * If value is set, it will overlap in [[Tile]] with\n     * `animatedExtrusionDuration` property from [[ExtrudedPolygonTechnique]]\n     * and `DEFAULT_DURATION` from [[AnimatedExtrusionTileHandler]].\n     */\n    set forceAnimatedExtrusionDuration(extrusionDuration: number | undefined) {\n        this.m_forceAnimatedExtrusionDuration = extrusionDuration;\n    }\n\n    /**\n     * Adds an [[AnimatedExtrusionTileHandler]] to [[AnimatedExtrusionHandler]]\n     */\n    add(tileHandler: AnimatedExtrusionTileHandler): void {\n        this.m_tileHandlerMap.set(tileHandler.tile, tileHandler);\n    }\n\n    /**\n     * Removes tile from the list subscribed for extrusion ratio updates\n     */\n    removeTile(tile: Tile): void {\n        this.m_tileHandlerMap.delete(tile);\n    }\n\n    /**\n     * Returns first [[AnimatedExtrusionTileHandler]] existed from the list of [[Tile]]s\n     */\n    find(tileKeys: Array<TileKey | undefined>): AnimatedExtrusionTileHandler | undefined {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            for (const tileKey of tileKeys) {\n                if (\n                    tileKey !== undefined &&\n                    tileHandler[0].tileKey.mortonCode() === tileKey.mortonCode()\n                ) {\n                    return tileHandler[1];\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Is `true` if any extrusion handlers are currently animating.\n     */\n    get isAnimating(): boolean {\n        for (const tileHandler of this.m_tileHandlerMap) {\n            if (tileHandler[1].isAnimating) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Implements animated extrusion effect for the extruded objects in the [[Tile]]\n */\nexport class AnimatedExtrusionTileHandler {\n    private m_extrudedObjects: THREE.Object3D[] = [];\n    private m_animatedExtrusionRatio: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    private m_animatedExtrusionState: AnimatedExtrusionState = AnimatedExtrusionState.None;\n    private m_animatedExtrusionStartTime: number | undefined = undefined;\n    private m_mapView: MapView;\n    private m_animatedExtrusionHandler: AnimatedExtrusionHandler;\n\n    constructor(\n        private m_tile: Tile,\n        extrudedObjects: Array<{ object: THREE.Object3D; materialFeature: boolean }>,\n        private m_animatedExtrusionDuration: number\n    ) {\n        this.m_mapView = m_tile.mapView;\n        this.m_animatedExtrusionHandler = this.m_mapView.animatedExtrusionHandler;\n\n        extrudedObjects.forEach(extrudedObject => {\n            this.m_extrudedObjects.push(extrudedObject.object);\n        });\n\n        this.startExtrusionAnimationIfNeeded(this.m_animatedExtrusionHandler.zoomDirection);\n    }\n\n    /**\n     * Set an extrusion ratio value for the materials [[MapMeshBasicMaterial]]\n     * and [[EdgeMaterial]]. Controlled by [[AnimatedExtrusionHandler]]\n     * for extrusion animation effect.\n     */\n    set extrusionRatio(value: number) {\n        this.m_animatedExtrusionRatio = value;\n\n        this.m_extrudedObjects.forEach(object => {\n            const material = (object as THREE.Mesh | THREE.LineSegments)\n                .material as ExtrusionFeature;\n            material.extrusionRatio = this.m_animatedExtrusionRatio;\n        });\n    }\n\n    /**\n     * Returns the [[Tile]] related to [[AnimatedExtrusionTileHandler]]\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * Return the current state of animated extrusion effect\n     */\n    get animationState(): AnimatedExtrusionState {\n        return this.m_animatedExtrusionState;\n    }\n\n    /**\n     * Is `true` if this handler is currently animating.\n     */\n    get isAnimating(): boolean {\n        return this.m_animatedExtrusionState !== AnimatedExtrusionState.Finished;\n    }\n\n    /**\n     * Cancel animation and remove from [[AnimatedExtrusionHandler]]\n     */\n    dispose() {\n        this.stopExtrusionAnimation();\n        this.m_animatedExtrusionHandler.removeTile(this.m_tile);\n    }\n\n    /**\n     * Start / Stop extrusion animation if zoom level was changed\n     */\n    zoomLevelChanged(zoomDirection: number) {\n        if (\n            this.m_tile.isVisible === false &&\n            this.m_animatedExtrusionState !== AnimatedExtrusionState.None\n        ) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.None;\n            this.stopExtrusionAnimation();\n        }\n\n        if (\n            this.m_tile.isVisible === true &&\n            this.m_animatedExtrusionState === AnimatedExtrusionState.None\n        ) {\n            this.startExtrusionAnimationIfNeeded(zoomDirection);\n        }\n    }\n\n    private getChildTiles(tileKeys: TileKey[]) {\n        const result: TileKey[] = [];\n\n        tileKeys.forEach(tileKey => {\n            const childTileKeys = this.tile.dataSource.getTilingScheme().getSubTileKeys(tileKey);\n\n            for (const childTileKey of childTileKeys) {\n                result.push(childTileKey);\n            }\n        });\n        return result;\n    }\n\n    // search for the [[Tile]] with extrusion animation started\n    private startExtrusionAnimationIfNeeded(zoomDirection?: number) {\n        const {\n            quadTreeSearchDistanceUp,\n            quadTreeSearchDistanceDown\n        } = this.tile.mapView.visibleTileSet.options;\n        const tile = this.m_tile;\n        let extrusionStartTime: number | undefined;\n\n        if (zoomDirection !== undefined) {\n            let tileHandler;\n\n            // if zoom out, go down and look for a child tile\n            if (zoomDirection < 0) {\n                let nextLevelDiff = 0;\n                let tileKeys = [tile.tileKey];\n                while (\n                    quadTreeSearchDistanceDown > nextLevelDiff &&\n                    extrusionStartTime === undefined\n                ) {\n                    const childTileKeys = this.getChildTiles(tileKeys);\n                    if (childTileKeys !== undefined) {\n                        tileHandler = this.m_animatedExtrusionHandler.find(childTileKeys);\n                        if (tileHandler !== undefined) {\n                            extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                            break;\n                        }\n                        tileKeys = childTileKeys;\n                    }\n                    nextLevelDiff++;\n                }\n            }\n            // if zoom in, go up and get the parent tile\n            if (zoomDirection > 0) {\n                let nextLevelDiff = 0;\n                let tileKey = tile.tileKey;\n                while (\n                    quadTreeSearchDistanceUp > nextLevelDiff &&\n                    extrusionStartTime === undefined &&\n                    tileKey.level !== 0\n                ) {\n                    const parentTileKey = tileKey.parent();\n                    tileHandler = this.m_animatedExtrusionHandler.find([parentTileKey]);\n                    if (tileHandler !== undefined) {\n                        extrusionStartTime = tileHandler.m_animatedExtrusionStartTime;\n                        break;\n                    }\n                    tileKey = parentTileKey;\n                    nextLevelDiff++;\n                }\n            }\n        }\n        this.startExtrusionAnimation(extrusionStartTime);\n    }\n\n    private startExtrusionAnimation(startTime?: number): void {\n        this.m_animatedExtrusionState = AnimatedExtrusionState.Started;\n        this.m_animatedExtrusionStartTime = startTime;\n        this.animateExtrusion();\n        this.m_mapView.addEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private stopExtrusionAnimation(): void {\n        this.m_mapView.removeEventListener(MapViewEventNames.AfterRender, this.animateExtrusion);\n    }\n\n    private animateExtrusion = (event?: RenderEvent) => {\n        if (this.m_animatedExtrusionState !== AnimatedExtrusionState.Playing) {\n            if (this.m_animatedExtrusionState === AnimatedExtrusionState.Started) {\n                this.m_animatedExtrusionState = AnimatedExtrusionState.Playing;\n            } else {\n                return;\n            }\n        }\n\n        const currentTime = Date.now();\n        if (\n            this.m_animatedExtrusionStartTime === undefined ||\n            this.m_animatedExtrusionStartTime <= 0\n        ) {\n            this.m_animatedExtrusionStartTime = currentTime;\n        }\n\n        const timeProgress = Math.min(\n            currentTime - this.m_animatedExtrusionStartTime,\n            this.m_animatedExtrusionDuration\n        );\n\n        this.extrusionRatio = MathUtils.easeInOutCubic(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MIN,\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX,\n            timeProgress / this.m_animatedExtrusionDuration\n        );\n\n        if (timeProgress >= this.m_animatedExtrusionDuration) {\n            this.m_animatedExtrusionState = AnimatedExtrusionState.Finished;\n            this.stopExtrusionAnimation();\n        }\n\n        this.m_tile.dataSource.requestUpdate();\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Enum log levels\n */\nexport enum LogLevel {\n    Trace,\n    Debug,\n    Log,\n    Info,\n    Warn,\n    Error\n}\n\n/**\n * Logger options to configure logger\n */\nexport class LoggerOptions {\n    enabled?: boolean;\n    level?: LogLevel;\n}\n\n/**\n * Public interface for Logger class.\n */\nexport interface ILogger extends IChannel {\n    readonly name: string;\n\n    enabled: boolean;\n\n    level: LogLevel;\n\n    /**\n     * Update logger options\n     *\n     * @param  {LoggerOptions} options Set logger options and configure internal logger.\n     */\n    update(options: LoggerOptions): void;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Resolve URI of referenced object w.r.t parent URI.\n *\n * Resolves `childUri` as it would be loaded from location specified by `parentUri`.\n *\n * If `childUri` is absolute, then it is returned unchanged.\n * If `childUri` is origin-absolute path, then only origin path is taken from `parentUri`.\n *\n * See [[baseUri]] for reference how base URL of `parentUri` is determined.\n *\n * Examples:\n *\n *     // normal case, child is sibling\n *     https://foo.com/themes/day.json + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent is \"folder\", so child is just located in this folder\n *     https://foo.com/themes/ + images/foo.png -> https://foo.com/themes/images/foo.png\n *\n *     // parent looks like leaf, so last component is stripped\n *     https://foo.com/themes + images/foo.png -> https://foo.com/images/foo.png\n *\n *     // origin-absolute URL, takes only origin from parent\n *     https://foo.com/themes/day.json + /fonts/foo.json -> https://foo.com/fonts/foo.json\n *\n * @param parentUri URI of parent resource\n * @param childUri URI of child as referenced from parent resource\n * @return `childUrl` as if anchored in location of `parentUrl`\n */\nexport function resolveReferenceUri(parentUri: string | undefined, childUri: string): string {\n    if (absoluteUrlWithOriginRe.test(childUri)) {\n        return childUri;\n    } else if (childUri.startsWith(\"/\")) {\n        const origin = getUrlOrigin(parentUri);\n        return origin + childUri;\n    } else {\n        if (childUri.startsWith(\"./\")) {\n            childUri = childUri.substr(2);\n        }\n        const parentBaseUrl = baseUrl(parentUri);\n        return parentBaseUrl + childUri;\n    }\n}\n\nconst absoluteUrlWithOriginRe = new RegExp(\"^(?:[a-z]+:)?//\", \"i\");\n\n/**\n * Returns base URL of given resource URL.\n *\n * `Url` with trailing slash are considered genuine 'locations', they are returned as is, however if\n * `url` ends with name component it is treated as \"leaf\", so last path component is removed.\n *\n * Standalone files (without any folder structure) are considered relative to `./`.\n *\n * Examples:\n * ```\n *     https://foo.com/themes/a.json -> https://foo.com/themes/\n *     https://foo.com/themes/ -> https://foo.com/themes/\n *     https://foo.com/themes -> https://foo.com/ // note, themes is treated as leaf\n *     themes/day.json -> themes/\n *     themes -> ./\n * ```\n */\nexport function baseUrl(url: string | undefined) {\n    if (url === undefined) {\n        return \"./\";\n    }\n    let idx = url.indexOf(\"#\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.indexOf(\"?\");\n    if (idx !== -1) {\n        url = url.slice(0, idx);\n    }\n    idx = url.lastIndexOf(\"/\");\n    if (idx === -1) {\n        return \"./\";\n    } else {\n        return url.substring(0, idx + 1);\n    }\n}\n\n/**\n * Get `origin` part of URL.\n *\n * @example\n *    https://example.com/foo -> https://example.com\n *    //example.com:8080/ -> //example.com:8080\n *    file:///etc/hosts ->\n *\n * @param url input URL\n * @return origin of given URL\n */\nexport function getUrlOrigin(url: string | undefined): string {\n    if (url === undefined) {\n        return \"\";\n    }\n    const parsed = getUrlHostAndProtocol(url);\n    if (parsed.protocol === \"file:\") {\n        return \"file://\";\n    } else if (parsed.host && parsed.protocol) {\n        return parsed.protocol + \"//\" + parsed.host;\n    } else if (parsed.host) {\n        return \"//\" + parsed.host;\n    } else if (parsed.protocol) {\n        return parsed.protocol + \"//\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Parse `host` and `protocol` part from URL.\n */\nexport function getUrlHostAndProtocol(\n    url: string\n): {\n    protocol: string;\n    host: string;\n} {\n    const urlOriginRe = new RegExp(/^(?:([a-z]+:))?\\/\\/([^\\/]*)/, \"i\");\n\n    const match = url.match(urlOriginRe);\n    if (!match) {\n        throw new Error(`getUrlHostAndProtocol: unable to parse URL '${url}'`);\n    }\n    return {\n        protocol: match[1],\n        host: match[2]\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { applyMixinsWithoutProperties, assert, chainCallbacks } from \"@here/harp-utils\";\nimport { disableBlending, enableBlending, insertShaderInclude, setShaderDefine } from \"./Utils\";\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport extrusionShaderChunk from \"./ShaderChunks/ExtrusionChunks\";\nimport fadingShaderChunk from \"./ShaderChunks/FadingChunks\";\n\nconst emptyTexture = new THREE.Texture();\n\n/**\n * The MapMeshMaterials [[MapMeshBasicMaterial]] and [[MapMeshStandardMaterial]] are the standard\n * [[THREE.MeshBasicMaterial]] and [[THREE.MeshStandardMaterial]], with the addition functionality\n * of fading out the geometry between a fadeNear and fadeFar value.\n *\n * The implementation is designed around a mixin class [[FadingFeatureMixin]], which requires\n * a bit of care when adding the FadingFeature to the existing mesh classes, but it is safe to use\n * and also reduces code duplication.\n */\n\n/**\n * Parameters used when constructing a new implementor of [[FadingFeature]].\n */\nexport interface FadingFeatureParameters {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Parameters used when constructing a new implementor of [[ExtrusionFeature]].\n */\nexport interface ExtrusionFeatureParameters {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value\n     */\n    extrusionRatio?: number;\n\n    /**\n     * Enable z-fighting workaround that doesn't animate buildings with `height <\n     * [[ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT]]`.\n     *\n     * Should be applied to `polygon` materials using this feature.\n     */\n    zFightingWorkaround?: boolean;\n}\n\n/**\n * Used internally.\n *\n * @hidden\n */\ninterface UniformsType {\n    [index: string]: THREE.IUniform;\n}\n\n/**\n * Type of callback used internally by THREE.js for shader creation.\n *\n * @hidden\n */\ntype CompileCallback = (shader: THREE.Shader, renderer: any) => void;\n\n/**\n * Material properties used from THREE, which may not be defined in the type.\n */\nexport interface HiddenThreeJSMaterialProperties {\n    /**\n     * Informs THREE.js to re-compile material shader (due to change in code or defines).\n     */\n    needsUpdate?: boolean;\n\n    /**\n     * Hidden ThreeJS value that is made public here. Required to add new uniforms to subclasses of\n     * [[THREE.MeshBasicMaterial]]/[[THREE.MeshStandardMaterial]], basically all materials that are\n     * not THREE.ShaderMaterial.\n     * @deprecated\n     */\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Available in all materials in ThreeJS.\n     */\n    transparent?: boolean;\n\n    /**\n     * Used internally for material shader defines.\n     */\n    defines?: any;\n\n    /**\n     * Defines callback available in THREE.js materials.\n     *\n     * Called before shader program compilation to generate vertex & fragment shader output code.\n     */\n    onBeforeCompile?: CompileCallback;\n}\n\ninterface MixinShaderProperties {\n    /**\n     * Used internally for material shader defines.\n     */\n    shaderDefines?: any;\n\n    /**\n     * Used internally for shader uniforms, holds references to material internal shader.uniforms.\n     *\n     * Holds a reference to material's internal shader uniforms map. New custom feature based\n     * uniforms are injected using this reference, but also internal THREE.js shader uniforms\n     * will be available via this map after [[Material#onBeforeCompile]] callback is run with\n     * feature enabled.\n     * @see needsUpdate\n     */\n    shaderUniforms?: UniformsType;\n}\n\n/**\n * Translates a linear distance value [0..1], where 1 is the distance to the far plane, into\n * [0..maxVisibilityRange].\n *\n * Copy from MapViewUtils, since it cannot be accessed here because of circular dependencies.\n *\n * @param distance Distance from the camera (range: [0, 1]).\n * @param visibilityRange object describing maximum and minimum visibility range - distances\n * from camera at which objects won't be rendered anymore.\n */\nfunction cameraToWorldDistance(distance: number, visibilityRange: ViewRanges): number {\n    return distance * visibilityRange.maximum;\n}\n\n/**\n * Provides common interface from mixin to internal material defines and shader uniforms.\n *\n * Call this function just after [THREE.Material] is constructed, so in derived classes after\n * super c-tor call.\n * @param mixin The mixin that will add features to [[THREE.Material]].\n * @param material The material that mixin feature is being applied.\n */\nfunction linkMixinWithMaterial(\n    mixin: MixinShaderProperties,\n    material: HiddenThreeJSMaterialProperties\n) {\n    // Some materials (MeshBasicMaterial) have no defines property created in c-tor.\n    // In such case create it manually, such defines will be also injected to the shader\n    // via generic THREE.js code - see THREE/WebGLProgram.js.\n    if (material.defines === undefined) {\n        material.defines = {};\n    }\n    // Link internal THREE.js material defines with mixin reference.\n    // Those defines are usually created in Material c-tor, if not we have fallback above.\n    mixin.shaderDefines = material.defines;\n\n    // Prepare map for holding uniforms references from the actual shader, but check if\n    // it was not already created with other mixin feature.\n    if (mixin.shaderUniforms === undefined) {\n        mixin.shaderUniforms = {};\n    }\n    // Shader uniforms may not be linked at this stage, they are injected available via Shader\n    // object in onBeforeCompile callback, see: linkMixinWithShader().\n}\n\n/**\n * Links mixin [[MixinShaderProperties.shaderUniforms]] with actual material shader uniforms.\n *\n * Function injects features (mixin) specific shader uniforms to material's shader, it also\n * updates uniforms references so [[MixinShaderProperties.shaderUniforms]] will contain full\n * uniforms map (both feature specific and internal ones).\n * This function should be called before material's shader is pre-compiled, so the new uniforms\n * from the mixin feature are known to shader processor. The best place to use is\n * [[Material.onBeforeCompile]].\n * @param mixin The mixin feature being applied to the material.\n * @param shader The actual shader linked to the [[THREE.Material]].\n */\nfunction linkMixinWithShader(mixin: MixinShaderProperties, shader: THREE.Shader) {\n    Object.assign(shader.uniforms, mixin.shaderUniforms);\n    mixin.shaderUniforms = shader.uniforms;\n}\n\n/**\n * Base interface for all objects that should fade in the distance. The implementation of the actual\n * FadingFeature is done with the help of the mixin class [[FadingFeatureMixin]] and a set of\n * supporting functions in the namespace of the same name.\n */\nexport interface FadingFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects start fading out.\n     */\n    fadeNear?: number;\n\n    /**\n     * Distance to the camera (range: `[0.0, 1.0]`) from which the objects are transparent. A value\n     * of <= 0.0 disables fading.\n     */\n    fadeFar?: number;\n}\n\n/**\n * Base interface for all objects that should have animated extrusion effect. The implementation of\n * the actual ExtrusionFeature is done with the help of the mixin class [[ExtrusionFeatureMixin]]\n * and a set of supporting functions in the namespace of the same name.\n */\nexport interface ExtrusionFeature extends HiddenThreeJSMaterialProperties, MixinShaderProperties {\n    /**\n     * Ratio of the extruded objects, where `1.0` is the default value. Minimum suggested value\n     * is `0.01`\n     */\n    extrusionRatio?: number;\n}\n\nnamespace DisplacementFeature {\n    /**\n     * Checks if feature is enabled (displacement map defined).\n     *\n     * @param displacementMaterial\n     */\n    export function isEnabled(displacementMaterial: DisplacementFeature) {\n        return displacementMaterial.displacementMap !== null;\n    }\n\n    /**\n     * Update the internals of the `DisplacementFeature` depending on the value of\n     * [[displacementMap]].\n     *\n     * @param displacementMaterial DisplacementFeature\n     */\n    export function updateDisplacementFeature(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties\n    ): void {\n        assert(displacementMaterial.shaderDefines !== undefined);\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        const useDisplacementMap = isEnabled(displacementMaterial);\n        // Whenever displacement feature state changes (between enabled/disabled) material will be\n        // re-compiled, forcing new shader chunks to be added (or removed).\n        const needsUpdate = setShaderDefine(\n            displacementMaterial.shaderDefines,\n            \"USE_DISPLACEMENTMAP\",\n            useDisplacementMap\n        );\n        displacementMaterial.needsUpdate = needsUpdate;\n\n        // Update texture after change.\n        if (useDisplacementMap) {\n            const texture = displacementMaterial.displacementMap!;\n            texture.needsUpdate = true;\n            displacementMaterial.shaderUniforms!.displacementMap.value = texture;\n        } else if (needsUpdate) {\n            displacementMaterial.shaderUniforms!.displacementMap.value = emptyTexture;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of DisplacementFeature in the\n     * `onBeforeCompile` callback of that material. It adds the required code to the shaders to\n     * apply displacement maps.\n     *\n     * @param displacementMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(\n        displacementMaterial: DisplacementFeature & MixinShaderProperties,\n        shader: THREE.Shader\n    ) {\n        if (!isEnabled(displacementMaterial)) {\n            return;\n        }\n        assert(displacementMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are required for this material, we use one define working as a flag,\n        // which enables/disables some chunks of shader code.\n        linkMixinWithShader(displacementMaterial, shader);\n\n        // Append the displacement map chunk to the vertex shader.\n        shader.vertexShader = shader.vertexShader.replace(\n            \"#include <skinbase_vertex>\",\n            `#include <skinbase_vertex>\n#ifndef USE_ENVMAP\n    vec3 objectNormal = vec3( normal );\n#endif`\n        );\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"uv2_pars_vertex\",\n            \"displacementmap_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"skinning_vertex\",\n            \"displacementmap_vertex\",\n            true\n        );\n    }\n}\n\nexport class DisplacementFeatureMixin implements DisplacementFeature, MixinShaderProperties {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_displacementMap: THREE.Texture | null = null;\n\n    // This is here to keep tslint from reporting a missing property, the getter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    get displacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    // This is here to keep tslint from reporting a missing property, the setter that's actually\n    // used by materials is added in [[addDisplacementProperties]].\n    set displacementMap(map: THREE.Texture | null) {\n        this.setDisplacementMap(map);\n    }\n\n    protected getDisplacementMap(): THREE.Texture | null {\n        return this.m_displacementMap;\n    }\n\n    protected setDisplacementMap(map: THREE.Texture | null): void {\n        if (map !== this.m_displacementMap) {\n            this.m_displacementMap = map;\n            DisplacementFeature.updateDisplacementFeature(this);\n        }\n    }\n    /**\n     * The mixin class should call this method to register the property [[displacementMap]]\n     */\n    protected addDisplacementProperties(): void {\n        Object.defineProperty(this, \"displacementMap\", {\n            get: () => {\n                return this.getDisplacementMap();\n            },\n            set: val => {\n                this.setDisplacementMap(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the displacementMap value from the parameters to the respective properties.\n     */\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        const uniforms = this.shaderUniforms!;\n        uniforms.displacementMap = new THREE.Uniform(emptyTexture);\n        uniforms.displacementScale = new THREE.Uniform(1);\n        uniforms.displacementBias = new THREE.Uniform(0);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.displacementMap !== undefined) {\n                this.setDisplacementMap(params.displacementMap);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            DisplacementFeature.onBeforeCompile(this, shader);\n        });\n\n        // Require material update at least once, because of new shader chunks added.\n        this.needsUpdate = DisplacementFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy displacementMap from other DisplacementFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        this.setDisplacementMap(source.displacementMap);\n        return this;\n    }\n}\n\n/**\n * Namespace with support functions for implementors of `FadingFeature`.\n */\nexport namespace FadingFeature {\n    export const DEFAULT_FADE_NEAR: number = -1.0;\n    export const DEFAULT_FADE_FAR: number = -1.0;\n\n    /**\n     * Checks if feature is enabled based on feature params.\n     *\n     * Fading feature will be disabled if fadeFar is undefined or fadeFar <= 0.0.\n     * This function is crucial for shader switching (chunks injection), whenever feature state\n     * changes between enabled/disabled. Current approach is to keep feature on (once enabled)\n     * whenever fading params are reasonable, even if it causes full fade in, no transparency.\n     *\n     * @param fadingMaterial FadingFeature.\n     */\n    export function isEnabled(fadingMaterial: FadingFeature) {\n        // NOTE: We could also check if full fade is not achieved, then feature could be\n        // disabled, but causing material re-compile.\n        return (\n            fadingMaterial.fadeNear !== undefined &&\n            fadingMaterial.fadeFar !== undefined &&\n            fadingMaterial.fadeFar > 0\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.fading_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, fadingShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `FadingFeature` depending on the value of [[fadeNear]]. The\n     * fading feature will be disabled if fadeFar <= 0.0.\n     *\n     * @param fadingMaterial FadingFeature\n     */\n    export function updateFadingFeature(fadingMaterial: FadingFeature): void {\n        assert(fadingMaterial.shaderDefines !== undefined);\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // Update entire material to add/remove shader fading chunks, this happens when we\n        // enable/disable fading after material creation. Feature is marked via dummy define, which\n        // informs about fading feature state, even if such define is not required to control\n        // feature state, it makes it easy to check for shader changes.\n        const useFading = isEnabled(fadingMaterial);\n        const needsUpdate = setShaderDefine(\n            fadingMaterial.shaderDefines,\n            \"FADING_MATERIAL\",\n            useFading\n        );\n        // Enable/disable entire feature with material re-compile, this will also cause\n        // new uniforms injection.\n        fadingMaterial.needsUpdate = needsUpdate;\n\n        // Check if shader uniforms references are already set in onBeforeCompile callback.\n        assert(\n            fadingMaterial.shaderUniforms!.fadeNear !== undefined &&\n                fadingMaterial.shaderUniforms!.fadeFar !== undefined\n        );\n\n        // Update shader internal uniforms only if fading is enabled.\n        if (useFading) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = fadingMaterial.fadeNear;\n            fadingMaterial.shaderUniforms!.fadeFar.value = fadingMaterial.fadeFar;\n            if (needsUpdate) {\n                enableBlending(fadingMaterial as THREE.Material);\n            }\n        }\n        // Perform one time update of uniforms to defaults when feature disabled (for clarity).\n        else if (needsUpdate) {\n            fadingMaterial.shaderUniforms!.fadeNear.value = FadingFeature.DEFAULT_FADE_NEAR;\n            fadingMaterial.shaderUniforms!.fadeFar.value = FadingFeature.DEFAULT_FADE_FAR;\n            disableBlending(fadingMaterial as THREE.Material);\n        }\n    }\n\n    /**\n     * This function should be called on implementors of FadingFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control fading based on view distance.\n     *\n     * @param fadingMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(fadingMaterial: FadingFeature, shader: THREE.Shader) {\n        if (!isEnabled(fadingMaterial)) {\n            return;\n        }\n        assert(fadingMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them.\n        //\n        // The object \"defines\" are not required for this material, so the fading shader chunks\n        // have no #ifdef preprocessed chunks. Feature utilized one define just to denote feature\n        // attached and easy control its state, but this define may be stripped out if needed.\n        linkMixinWithShader(fadingMaterial, shader);\n\n        // Append the new fading shader cod directly after the fog code. This is done by adding an\n        // include directive for the fading code.\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_pars_vertex\",\n            \"fading_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"fog_vertex\",\n            \"fading_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"fading_pars_fragment\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"fading_fragment\",\n            true\n        );\n    }\n\n    /**\n     * As three.js is rendering the transparent objects last (internally), regardless of their\n     * renderOrder value, we set the transparent value to false in the [[onAfterRenderCall]]. In\n     * [[onBeforeRender]], the function [[calculateDepthFromCameraDistance]] sets it to true if the\n     * fade distance value is less than 1.\n     *\n     * @param object [[THREE.Object3D]] to prepare for rendering.\n     * @param viewRanges The visibility ranges (clip planes and maximum visible distance) for\n     * actual camera setup.\n     * @param fadeNear The fadeNear value to set in the material.\n     * @param fadeFar The fadeFar value to set in the material.\n     * @param updateUniforms If `true`, the fading uniforms are set. Not required if material is\n     *          handling the uniforms already, like in a [[THREE.ShaderMaterial]].\n     * @param additionalCallback If defined, this function will be called before the function will\n     *          return.\n     */\n    export function addRenderHelper(\n        object: THREE.Object3D,\n        viewRanges: ViewRanges,\n        fadeNear: number | undefined,\n        fadeFar: number | undefined,\n        updateUniforms: boolean,\n        additionalCallback?: (\n            renderer: THREE.WebGLRenderer,\n            material: THREE.Material & FadingFeature\n        ) => void\n    ) {\n        // tslint:disable-next-line:no-unused-variable\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            (\n                renderer: THREE.WebGLRenderer,\n                scene: THREE.Scene,\n                camera: THREE.Camera,\n                geometry: THREE.Geometry | THREE.BufferGeometry,\n                material: THREE.Material & FadingFeature,\n                group: THREE.Group\n            ) => {\n                const fadingMaterial = material as FadingFeature;\n\n                fadingMaterial.fadeNear =\n                    fadeNear === undefined || fadeNear === FadingFeature.DEFAULT_FADE_NEAR\n                        ? FadingFeature.DEFAULT_FADE_NEAR\n                        : cameraToWorldDistance(fadeNear, viewRanges);\n\n                fadingMaterial.fadeFar =\n                    fadeFar === undefined || fadeFar === FadingFeature.DEFAULT_FADE_FAR\n                        ? FadingFeature.DEFAULT_FADE_FAR\n                        : cameraToWorldDistance(fadeFar, viewRanges);\n\n                if (additionalCallback !== undefined) {\n                    additionalCallback(renderer, material);\n                }\n            }\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `fadeNear` and\n * `fadeFar`. There is some special handling for the fadeNear/fadeFar properties, which get some\n * setters and getters in a way that works well with the mixin.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class FadingFeatureMixin implements FadingFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_fadeNear: number = FadingFeature.DEFAULT_FADE_NEAR;\n    private m_fadeFar: number = FadingFeature.DEFAULT_FADE_FAR;\n\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected getFadeNear(): number {\n        return this.m_fadeNear;\n    }\n    /**\n     * @see [[FadingFeature#fadeNear]]\n     */\n    protected setFadeNear(value: number) {\n        const needsUpdate = value !== this.m_fadeNear;\n        if (needsUpdate) {\n            this.m_fadeNear = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected getFadeFar(): number {\n        return this.m_fadeFar;\n    }\n    /**\n     * @see [[FadingFeature#fadeFar]]\n     */\n    protected setFadeFar(value: number) {\n        const needsUpdate = value !== this.m_fadeFar;\n        if (needsUpdate) {\n            this.m_fadeFar = value;\n            FadingFeature.updateFadingFeature(this);\n        }\n    }\n\n    /**\n     * The mixin classes should call this method to register the properties [[fadeNear]] and\n     * [[fadeFar]].\n     */\n    protected addFadingProperties(): void {\n        Object.defineProperty(this, \"fadeNear\", {\n            get: () => {\n                return this.getFadeNear();\n            },\n            set: val => {\n                this.setFadeNear(val);\n            }\n        });\n        Object.defineProperty(this, \"fadeFar\", {\n            get: () => {\n                return this.getFadeFar();\n            },\n            set: val => {\n                this.setFadeFar(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the fadeNear/fadeFar values from the parameters to the respective properties.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        // Create uniforms with default values, this ensures they are always set created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.fadeNear = new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR);\n        this.shaderUniforms!.fadeFar = new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR);\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.fadeNear !== undefined) {\n                this.setFadeNear(params.fadeNear);\n            }\n            if (params.fadeFar !== undefined) {\n                this.setFadeFar(params.fadeFar);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            FadingFeature.onBeforeCompile(this, shader);\n        });\n        // Update (re-compile) shader code to include new shader chunks only if feature is enabled.\n        this.needsUpdate = FadingFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy fadeNear/fadeFar values from other FadingFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyFadingParameters(source: FadingFeature) {\n        this.setFadeNear(\n            source.fadeNear === undefined ? FadingFeature.DEFAULT_FADE_NEAR : source.fadeNear\n        );\n        this.setFadeFar(\n            source.fadeFar === undefined ? FadingFeature.DEFAULT_FADE_FAR : source.fadeFar\n        );\n        return this;\n    }\n}\n\nexport namespace ExtrusionFeature {\n    /**\n     * Checks if feature is enabled based on [[ExtrusionFeature]] properties.\n     *\n     * @param extrusionMaterial\n     */\n    export function isEnabled(extrusionMaterial: ExtrusionFeature) {\n        return (\n            extrusionMaterial.extrusionRatio !== undefined &&\n            extrusionMaterial.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN\n        );\n    }\n\n    /**\n     * Patch the THREE.ShaderChunk on first call with some extra shader chunks.\n     */\n    export function patchGlobalShaderChunks() {\n        if (THREE.ShaderChunk.extrusion_pars_vertex === undefined) {\n            Object.assign(THREE.ShaderChunk, extrusionShaderChunk);\n        }\n    }\n\n    /**\n     * Update the internals of the `ExtrusionFeature` depending on the value of [[extrusionRatio]].\n     *\n     * @param ExtrusionMaterial ExtrusionFeature\n     */\n    export function updateExtrusionFeature(extrusionMaterial: ExtrusionFeature): void {\n        assert(extrusionMaterial.shaderDefines !== undefined);\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // Setup shader define that when changed will force material re-compile.\n        const useExtrusion = isEnabled(extrusionMaterial);\n        // Use shader define as marker if feature is enabled/disabled, this is not necessary\n        // required, but material requires update (re-compile) anyway to add/remove shader chunks.\n        const needsUpdate = setShaderDefine(\n            extrusionMaterial.shaderDefines,\n            \"EXTRUSION_MATERIAL\",\n            useExtrusion\n        );\n        // Enable/disable entire feature with material re-compile.\n        extrusionMaterial.needsUpdate = needsUpdate;\n\n        // Update uniform with new value\n        if (useExtrusion) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                extrusionMaterial.extrusionRatio;\n        }\n        // Reset uniform to default, one time only, when feature is disabled (just for clarity).\n        else if (needsUpdate) {\n            extrusionMaterial.shaderUniforms!.extrusionRatio.value =\n                ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        }\n    }\n\n    /**\n     * This function should be called on implementors of ExtrusionFeature in the `onBeforeCompile`\n     * callback of that material. It adds the required code to the shaders and declares the new\n     * uniforms that control extrusion.\n     *\n     * @param extrusionMaterial Material to add uniforms to.\n     * @param shader [[THREE.WebGLShader]] containing the vertex and fragment shaders to add the\n     *                  special includes to.\n     */\n    export function onBeforeCompile(extrusionMaterial: ExtrusionFeature, shader: THREE.Shader) {\n        if (!isEnabled(extrusionMaterial)) {\n            return;\n        }\n        assert(extrusionMaterial.shaderUniforms !== undefined);\n\n        // The vertex and fragment shaders have been constructed dynamically. The uniforms and\n        // the shader includes are now appended to them. No defines are required to preprocess\n        // shader chunks, but we utilize one just to note the feature is enabled/disabled\n        // (easier debugging), this define may be easily stripped out or replaced with simple\n        // boolean flag.\n        linkMixinWithShader(extrusionMaterial, shader);\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"common\",\n            \"extrusion_pars_vertex\"\n        );\n\n        shader.vertexShader = insertShaderInclude(\n            shader.vertexShader,\n            \"begin_vertex\",\n            \"extrusion_vertex\",\n            true\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_pars_fragment\",\n            \"extrusion_pars_fragment\"\n        );\n\n        shader.fragmentShader = shader.fragmentShader.replace(\n            \"#include <normal_fragment_begin>\",\n            \"#include <extrusion_normal_fragment_begin>\"\n        );\n\n        shader.fragmentShader = insertShaderInclude(\n            shader.fragmentShader,\n            \"fog_fragment\",\n            \"extrusion_fragment\",\n            true\n        );\n    }\n}\n\n/**\n * Mixin class for extended THREE materials. Adds new properties required for `extrusionRatio`.\n *\n * There is some special handling for the extrusionRatio property, which is animated via\n * [[AnimatedExtrusionHandler]] that is using [[extrusionRatio]] setter and getter to update\n * extrusion in a way that works well with the mixin and EdgeMaterial.\n */\nexport class ExtrusionFeatureMixin implements ExtrusionFeature {\n    needsUpdate?: boolean;\n    uniformsNeedUpdate?: boolean;\n    defines?: any;\n    shaderDefines?: any;\n    shaderUniforms?: UniformsType;\n    onBeforeCompile?: CompileCallback;\n    private m_extrusion: number = ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected getExtrusionRatio(): number {\n        return this.m_extrusion;\n    }\n    /**\n     * @see [[ExtrusionFeature#extrusion]]\n     */\n    protected setExtrusionRatio(value: number) {\n        const needsUpdate = value !== this.m_extrusion;\n        if (needsUpdate) {\n            this.m_extrusion = value;\n            ExtrusionFeature.updateExtrusionFeature(this);\n        }\n    }\n\n    /**\n     * The mixin class should call this method to register the property [[extrusionRatio]]\n     */\n    protected addExtrusionProperties(): void {\n        Object.defineProperty(this, \"extrusionRatio\", {\n            get: () => {\n                return this.getExtrusionRatio();\n            },\n            set: val => {\n                this.setExtrusionRatio(val);\n            }\n        });\n    }\n\n    /**\n     * Apply the extrusionRatio value from the parameters to the respective properties.\n     */\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // Prepare maps for holding uniforms and defines references from the actual material.\n        linkMixinWithMaterial(this, this);\n\n        assert(this.shaderDefines !== undefined);\n        assert(this.shaderUniforms !== undefined);\n\n        if (params && params.zFightingWorkaround === true) {\n            this.shaderDefines.ZFIGHTING_WORKAROUND = \"\";\n        }\n\n        // Create uniform with default value, this ensures that it is always created,\n        // so no need for checks in setters.\n        this.shaderUniforms!.extrusionRatio = new THREE.Uniform(\n            ExtrusionFeatureDefs.DEFAULT_RATIO_MAX\n        );\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.extrusionRatio !== undefined) {\n                this.setExtrusionRatio(params.extrusionRatio);\n            }\n        }\n\n        this.onBeforeCompile = chainCallbacks(this.onBeforeCompile, (shader: THREE.Shader) => {\n            ExtrusionFeature.onBeforeCompile(this, shader);\n        });\n\n        this.needsUpdate = ExtrusionFeature.isEnabled(this);\n    }\n\n    /**\n     * Copy extrusionRatio values from other ExtrusionFeature.\n     *\n     * @param source The material to copy property values from.\n     */\n    protected copyExtrusionParameters(source: ExtrusionFeature) {\n        if (source.extrusionRatio !== undefined) {\n            this.setExtrusionRatio(source.extrusionRatio);\n        }\n        return this;\n    }\n}\n\n/**\n * Subclass of [[THREE.MeshBasicMaterial]]. Adds new properties required for [[fadeNear]] and\n * [[fadeFar]]. In addition to the new properties (which update their respective uniforms), it is\n * also required to update the material in their objects [[onBeforeRender]] and [[OnAfterRender]]\n * calls, where their flag [[transparent]] is set and the internal fadeNear/fadeFar values are\n * updated to world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshBasicMaterial extends THREE.MeshBasicMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    /**\n     * Constructs a new `FadingMeshBasicMaterial`.\n     *\n     * @param params `FadingMeshBasicMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshBasicMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters &\n            DisplacementFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n\n        this.addDisplacementProperties();\n        this.applyDisplacementParameters(params);\n    }\n\n    clone(): this {\n        return new MapMeshBasicMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        this.copyDisplacementParameters(source);\n        return this;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return null;\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    set displacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    setDisplacementMap(value: THREE.Texture | null) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addDisplacementProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyDisplacementParameters(params?: DisplacementFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyDisplacementParameters(source: DisplacementFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Subclass of THREE.MeshStandardMaterial. Adds new properties required for `fadeNear` and\n * `fadeFar`. In addition to the new properties (which fill respective uniforms), it is also\n * required to update the material in their objects `onBeforeRender` and `OnAfterRender` calls,\n * where their flag `transparent` is set and the internal fadeNear/fadeFar values are updated to\n * world space distances.\n *\n * @see [[Tile#addRenderHelper]]\n */\nexport class MapMeshStandardMaterial extends THREE.MeshStandardMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    uniformsNeedUpdate?: boolean;\n\n    /**\n     * Constructs a new `FadingMeshStandardMaterial`.\n     *\n     * @param params `FadingMeshStandardMaterial` parameters.\n     */\n    constructor(\n        params?: THREE.MeshStandardMaterialParameters &\n            FadingFeatureParameters &\n            ExtrusionFeatureParameters\n    ) {\n        super(params);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        this.addFadingProperties();\n        this.applyFadingParameters(params);\n\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        this.addExtrusionProperties();\n        this.applyExtrusionParameters({ ...params, zFightingWorkaround: true });\n    }\n\n    clone(): this {\n        return new MapMeshStandardMaterial().copy(this);\n    }\n\n    copy(source: this): any {\n        super.copy(source);\n        this.copyFadingParameters(source);\n        this.copyExtrusionParameters(source);\n        return this;\n    }\n\n    /** @override */\n    get displacementMap(): THREE.Texture | null {\n        return super.displacementMap === undefined ? null : super.displacementMap;\n    }\n\n    /** @override */\n    set displacementMap(map: THREE.Texture | null) {\n        if (map === this.displacementMap) {\n            return;\n        }\n\n        if (!map || !this.displacementMap) {\n            this.needsUpdate = true;\n        }\n\n        if (map) {\n            map.needsUpdate = true;\n        }\n        super.displacementMap = map;\n    }\n\n    // Only here to make the compiler happy, these methods will be overriden: The actual\n    // implementations are those in [[FadingFeatureMixin]] and [[ExtrusionFeatureMixin]], see below:\n    //\n    // applyMixinsWithoutProperties(FadingMeshBasicMaterial, [FadingFeatureMixin]);\n    // applyMixinsWithoutProperties(ExtrudionMeshBasicMaterial, [ExtrusionFeatureMixin]);\n    //\n    // Mixin declarations start ---------------------------------------------------------\n\n    get fadeNear(): number {\n        return FadingFeature.DEFAULT_FADE_NEAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeNear(value: number) {\n        // to be overridden\n    }\n\n    get fadeFar(): number {\n        return FadingFeature.DEFAULT_FADE_FAR;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set fadeFar(value: number) {\n        // to be overridden\n    }\n\n    get extrusionRatio(): number {\n        return ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n    }\n    // tslint:disable-next-line:no-unused-variable\n    set extrusionRatio(value: number) {\n        // to be overridden\n    }\n\n    protected addFadingProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyFadingParameters(params?: FadingFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyFadingParameters(source: FadingFeature) {\n        // to be overridden\n    }\n\n    protected addExtrusionProperties(): void {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected applyExtrusionParameters(params?: ExtrusionFeatureParameters) {\n        // to be overridden\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    protected copyExtrusionParameters(source: FadingFeature) {\n        // to be overridden\n    }\n    // Mixin declarations end -----------------------------------------------------------\n}\n\n/**\n * Finish the classes MapMeshBasicMaterial and MapMeshStandardMaterial by assigning them the actual\n * implementations of the mixed in functions.\n */\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [FadingFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshStandardMaterial, [ExtrusionFeatureMixin]);\napplyMixinsWithoutProperties(MapMeshBasicMaterial, [DisplacementFeatureMixin]);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Lists supported line caps types/modes.\n */\nexport enum LineCapsModes {\n    CAPS_NONE = 0,\n    CAPS_SQUARE,\n    CAPS_ROUND,\n    CAPS_TRIANGLE_IN,\n    CAPS_TRIANGLE_OUT\n}\n\nexport default {\n    extrude_line_vert_func: `\nvec3 extrudeLine(\n        in vec3 vertexPosition,\n        in float linePosition,\n        in float lineWidth,\n        in vec4 bitangent,\n        in vec3 tangent,\n        inout vec2 uv\n    ) {\n    vec3 result = vertexPosition;\n    // Retrieve the angle between this segment and the previous one (stored in the bitangent w\n    // component).\n    float angle = bitangent.w;\n    // Extrude according to the angle between segments to properly render narrow joints...\n    if (angle != 0.0) {\n        result += uv.y * lineWidth * bitangent.xyz / cos(angle / 2.0);\n        uv.x = linePosition + uv.x * lineWidth * uv.y * tan(angle / 2.0);\n    }\n    // ... or extrude in a simple manner for segments that keep the same direction.\n    else {\n        result += uv.y * lineWidth * bitangent.xyz + uv.x * lineWidth * tangent;\n        uv.x = linePosition + uv.x * lineWidth;\n    }\n    uv.y *= lineWidth;\n    return result;\n}\n`,\n    round_edges_and_add_caps: `\n#define CAPS_NONE ${LineCapsModes.CAPS_NONE}\n#define CAPS_SQUARE ${LineCapsModes.CAPS_SQUARE}\n#define CAPS_ROUND ${LineCapsModes.CAPS_ROUND}\n#define CAPS_TRIANGLE_IN ${LineCapsModes.CAPS_TRIANGLE_IN}\n#define CAPS_TRIANGLE_OUT ${LineCapsModes.CAPS_TRIANGLE_OUT}\n\nfloat roundEdgesAndAddCaps(in vec4 coords, in vec3 range) {\n    // Compute the line's width to length ratio.\n    float widthRatio = range.y / range.x;\n\n    // Compute the inner segment distance (same for all cap mode).\n    float dist = abs(coords.y);\n    float segmentBeginMask = clamp(ceil(coords.z - coords.x), 0.0, 1.0);\n    float segmentEndMask = clamp(ceil(coords.x - coords.w), 0.0, 1.0);\n    dist = max(dist, segmentBeginMask * length(vec2((coords.x - coords.z) / widthRatio, coords.y)));\n    dist = max(dist, segmentEndMask * length(vec2((coords.x - coords.w) / widthRatio, coords.y)));\n\n    #if CAPS_MODE != CAPS_ROUND\n    // Compute the caps mask.\n    float capRangeMask = clamp(1.0 - ceil(range.z - drawRange.y), 0.0, 1.0);\n    float beginCapMask = clamp(ceil(drawRange.x - coords.x), 0.0, 1.0);\n    float endCapMask = clamp(ceil(coords.x - drawRange.y), 0.0, 1.0);\n    float capMask = capRangeMask * max(beginCapMask, endCapMask);\n\n    // Compute the outer segment distance (specific for each cap mode).\n    float capDist = max(coords.x - drawRange.y, drawRange.x - coords.x) / widthRatio;\n    #if CAPS_MODE == CAPS_NONE\n    dist = mix(dist, max(abs(coords.y), (capDist + 0.1) / 0.1), capMask);\n    #elif CAPS_MODE == CAPS_SQUARE\n    dist = mix(dist, max(abs(coords.y), capDist), capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_OUT\n    dist = mix(dist, abs(coords.y) + capDist, capMask);\n    #elif CAPS_MODE == CAPS_TRIANGLE_IN\n    dist = mix(dist, max(abs(coords.y), (capDist - abs(coords.y)) + capDist), capMask);\n    #endif\n    #endif // CAPS_MODE != CAPS_ROUND\n\n    return dist;\n}\n`,\n    tile_clip_func: `\nvoid tileClip(vec2 tilePos, vec2 tileSize) {\n    if (tileSize.x > 0.0 && (tilePos.x < -tileSize.x / 2.0 || tilePos.x > tileSize.x / 2.0))\n        discard;\n    if (tileSize.y > 0.0 && (tilePos.y < -tileSize.y / 2.0 || tilePos.y > tileSize.y / 2.0))\n        discard;\n}\n`,\n    high_precision_vert_func: `\nvec3 subtractDblEyePos( const in vec3 pos ) {\n    vec3 t1 = positionLow - u_eyepos_lowpart;\n    vec3 e = t1 - positionLow;\n    vec3 t2 = ((-u_eyepos_lowpart - e) + (positionLow - (t1 - e))) + pos - u_eyepos;\n    vec3 high_delta = t1 + t2;\n    vec3 low_delta = t2 - (high_delta - t1);\n    return (high_delta + low_delta);\n}\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { assert } from \"@here/harp-utils\";\nimport { Color } from \"three\";\nimport { ColorUtils } from \"./ColorUtils\";\n\nconst tmpColor = new Color();\n\n/**\n * Enumeration of supported string encoded numerals.\n */\nexport enum StringEncodedNumeralType {\n    Meters,\n    Pixels,\n    Hex,\n    RGB,\n    RGBA,\n    HSL\n}\n\n/**\n * Interface containing information about a [[StringEncodedNumeral]] format, component size and\n * evaluation.\n */\nexport interface StringEncodedNumeralFormat {\n    readonly type: StringEncodedNumeralType;\n    readonly size: number;\n    readonly regExp: RegExp;\n    mask?: number;\n    decoder: (encodedValue: string, target: number[]) => boolean;\n}\nconst StringEncodedMeters: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Meters,\n    size: 1,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))m$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedMeters.regExp.exec(encodedValue);\n        return match ? (target[0] = Number(match[1])) !== undefined : false;\n    }\n};\nconst StringEncodedPixels: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Pixels,\n    size: 1,\n    mask: 1.0,\n    regExp: /^((?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))px$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedPixels.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        target[0] = Number(match[1]);\n        return true;\n    }\n};\nconst StringEncodedHex: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.Hex,\n    size: 4,\n    regExp: /^\\#((?:[0-9A-Fa-f][0-9A-Fa-f]){3,4}|[0-9A-Fa-f]{3,4})$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const match = StringEncodedHex.regExp.exec(encodedValue);\n        if (match === null) {\n            return false;\n        }\n        const hex = match[1];\n        const size = hex.length;\n        // Only few sizes are possible for given reg-exp.\n        assert(\n            size === 3 || size === 4 || size === 6 || size === 8,\n            `Matched incorrect hex color format`\n        );\n        // Note that we simply ignore alpha channel value.\n        // TODO: To be resolved with HARP-7517\n        if (size === 3 || size === 4) {\n            // #RGB or #RGBA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n            target[1] = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n            target[2] = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n            target[3] = size === 4 ? parseInt(hex.charAt(3) + hex.charAt(3), 16) / 255 : 1;\n        } else if (size === 6 || size === 8) {\n            // #RRGGBB or #RRGGBBAA\n            target[0] = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n            target[1] = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n            target[2] = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n            target[3] = size === 8 ? parseInt(hex.charAt(6) + hex.charAt(7), 16) / 255 : 1;\n        }\n        return true;\n    }\n};\nconst StringEncodedRGB: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGB,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgb\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGB.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        return true;\n    }\n};\nconst StringEncodedRGBA: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.RGBA,\n    size: 4,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^rgba\\( ?(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:([0-9]{1,2}|1[0-9]{1,2}|2[0-4][0-9]|25[0-5]), ?)(?:(0(?:\\.[0-9]+)?|1(?:\\.0+)?)) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedRGBA.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        target[0] = parseInt(channels[1], 10) / 255;\n        target[1] = parseInt(channels[2], 10) / 255;\n        target[2] = parseInt(channels[3], 10) / 255;\n        target[3] = parseFloat(channels[4]);\n        return true;\n    }\n};\nconst StringEncodedHSL: StringEncodedNumeralFormat = {\n    type: StringEncodedNumeralType.HSL,\n    size: 3,\n    // tslint:disable-next-line:max-line-length\n    regExp: /^hsl\\( ?((?:[0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-9]{1,2}|3[0-5][0-9]|360)), ?(?:([0-9]|[1-9][0-9]|100)%), ?(?:([0-9]|[1-9][0-9]|100)%) ?\\)$/,\n    decoder: (encodedValue: string, target: number[]) => {\n        const channels = StringEncodedHSL.regExp.exec(encodedValue);\n        if (channels === null) {\n            return false;\n        }\n        tmpColor.setHSL(\n            parseInt(channels[1], 10) / 360,\n            parseInt(channels[2], 10) / 100,\n            parseInt(channels[3], 10) / 100\n        );\n        target[0] = tmpColor.r;\n        target[1] = tmpColor.g;\n        target[2] = tmpColor.b;\n        return true;\n    }\n};\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing sizes, lengths and distances.\n */\nexport const StringEncodedMetricFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedMeters,\n    StringEncodedPixels\n];\n\nconst StringEncodedMetricFormatMaxSize = StringEncodedMetricFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of all supported [[StringEncodedNumeralFormat]]s describing color data.\n */\nexport const StringEncodedColorFormats: StringEncodedNumeralFormat[] = [\n    StringEncodedHex,\n    StringEncodedRGB,\n    StringEncodedRGBA,\n    StringEncodedHSL\n];\n\nconst StringEncodedColorFormatMaxSize = StringEncodedColorFormats.reduce(\n    (a, b) => Math.max(a, b.size),\n    0\n);\n\n/**\n * Array of supported [[StringEncodedNumeralFormat]]s (intended to be indexed with\n * [[StringEncodedNumeralType]] enum).\n */\nexport const StringEncodedNumeralFormats: StringEncodedNumeralFormat[] = [\n    ...StringEncodedMetricFormats,\n    ...StringEncodedColorFormats\n];\n\nexport const StringEncodedNumeralFormatMaxSize = Math.max(\n    StringEncodedColorFormatMaxSize,\n    StringEncodedMetricFormatMaxSize\n);\n\nconst tmpBuffer: number[] = new Array(StringEncodedNumeralFormatMaxSize);\n\n/**\n * Parse string encoded numeral values using all known [[StringEncodedNumeralFormats]].\n *\n * @param numeral The string representing numeric value.\n * @param pixelToMeters The ratio used to convert from meters to pixels (default 1.0).\n * @returns Number parsed or __undefined__ if non of the numeral patterns matches the expression\n * provided in [[numeral]].\n */\nexport function parseStringEncodedNumeral(\n    numeral: string,\n    pixelToMeters: number = 1.0\n): number | undefined {\n    let result: number | undefined;\n    const formatMatch = (format: StringEncodedNumeralFormat) => {\n        if (format.decoder(numeral, tmpBuffer)) {\n            switch (format.type) {\n                case StringEncodedNumeralType.Meters:\n                    result = tmpBuffer[0];\n                    break;\n                case StringEncodedNumeralType.Pixels:\n                    result = tmpBuffer[0] * pixelToMeters;\n                    break;\n                case StringEncodedNumeralType.Hex:\n                case StringEncodedNumeralType.RGBA:\n                    result = ColorUtils.getHexFromRgba(\n                        tmpBuffer[0],\n                        tmpBuffer[1],\n                        tmpBuffer[2],\n                        tmpBuffer[3]\n                    );\n                    break;\n                case StringEncodedNumeralType.RGB:\n                case StringEncodedNumeralType.HSL:\n                    result = ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n                    break;\n                default:\n                    result = tmpBuffer[0];\n                    break;\n            }\n            return true;\n        }\n        return false;\n    };\n    StringEncodedNumeralFormats.some(formatMatch);\n    return result;\n}\n\n/**\n * Parse string encoded color value using all known [[StringEncodedColorFormats]].\n *\n * @param color The string encoded color expression (i.e. '#FFF', 'rgb(255, 0, 0)', etc.).\n * @returns The color parsed or __undefined__ if non of the known representations matches\n * the expression provided in [[color]].\n */\nexport function parseStringEncodedColor(color: string): number | undefined {\n    const matchedFormat = matchFormat(StringEncodedColorFormats, color, tmpBuffer);\n    if (matchedFormat === undefined) {\n        return undefined;\n    }\n    switch (matchedFormat.type) {\n        case StringEncodedNumeralType.Hex:\n        case StringEncodedNumeralType.RGBA:\n            return ColorUtils.getHexFromRgba(\n                tmpBuffer[0],\n                tmpBuffer[1],\n                tmpBuffer[2],\n                tmpBuffer[3]\n            );\n        case StringEncodedNumeralType.RGB:\n        case StringEncodedNumeralType.HSL:\n            return ColorUtils.getHexFromRgb(tmpBuffer[0], tmpBuffer[1], tmpBuffer[2]);\n        default:\n            return tmpBuffer[0];\n    }\n}\n\nfunction matchFormat(\n    formats: StringEncodedNumeralFormat[],\n    numeral: string,\n    result: number[]\n): StringEncodedNumeralFormat | undefined {\n    return formats.find(format => {\n        return format.decoder(numeral, result) ? true : false;\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BaseTechniqueParams,\n    BasicExtrudedLineTechniqueParams,\n    ExtrudedPolygonTechniqueParams,\n    FillTechniqueParams,\n    isTextureBuffer,\n    LineTechniqueParams,\n    MarkerTechniqueParams,\n    PointTechniqueParams,\n    PolygonalTechniqueParams,\n    SegmentsTechniqueParams,\n    ShaderTechniqueParams,\n    SolidLineTechniqueParams,\n    StandardExtrudedLineTechniqueParams,\n    StandardTechniqueParams,\n    TerrainTechniqueParams,\n    TextTechniqueParams,\n    TextureCoordinateType\n} from \"./TechniqueParams\";\n\nimport { Expr, JsonExpr } from \"./Expr\";\nimport { InterpolatedProperty, InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\nimport {\n    AttrScope,\n    mergeTechniqueDescriptor,\n    TechniqueDescriptor,\n    TechniqueDescriptorRegistry\n} from \"./TechniqueDescriptor\";\n/**\n * Names of the supported texture properties.\n */\nexport const TEXTURE_PROPERTY_KEYS = [\n    \"map\",\n    \"normalMap\",\n    \"displacementMap\",\n    \"roughnessMap\",\n    \"emissiveMap\",\n    \"alphaMap\",\n    \"metalnessMap\",\n    \"bumpMap\"\n];\n\n/**\n * Names of the properties controlling transparency.\n */\nexport const TRANSPARENCY_PROPERTY_KEYS = [\"opacity\", \"transparent\"];\n\n// TODO: Can be removed, when all when interpolators are implemented as [[Expr]]s\nexport type RemoveInterpolatedPropDef<T> = T | InterpolatedPropertyDefinition<any> extends T\n    ? Exclude<T, InterpolatedPropertyDefinition<any>>\n    : T;\nexport type RemoveJsonExpr<T> = T | JsonExpr extends T ? Exclude<T, JsonExpr> : T;\n\n/**\n * Make runtime representation of technique attributes from JSON-compatible typings.\n *\n * Translates\n *  - InterpolatedPropertyDefinition -> InterpolatedProperty\n *  - JsonExpr -> Expr\n */\nexport type MakeTechniqueAttrs<T> = {\n    [P in keyof T]: T[P] | JsonExpr extends T[P]\n        ? RemoveInterpolatedPropDef<RemoveJsonExpr<T[P]>> | Expr | InterpolatedProperty\n        : T[P];\n};\n\nexport const techniqueDescriptors: TechniqueDescriptorRegistry = {};\n\nexport const baseTechniqueParamsDescriptor: TechniqueDescriptor<BaseTechniqueParams> = {\n    // TODO: Choose which techniques should support color with transparency.\n    // For now we chosen all, but it maybe not suitable for text or line marker techniques.\n    attrTransparencyColor: \"color\",\n    attrScopes: {\n        renderOrder: AttrScope.TechniqueGeometry,\n        renderOrderOffset: AttrScope.TechniqueGeometry,\n        enabled: AttrScope.TechniqueGeometry,\n        kind: AttrScope.TechniqueGeometry,\n        transient: AttrScope.TechniqueGeometry,\n        fadeFar: AttrScope.TechniqueRendering,\n        fadeNear: AttrScope.TechniqueRendering\n    }\n};\n\nexport const pointTechniquePropTypes = mergeTechniqueDescriptor<PointTechniqueParams>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            texture: AttrScope.TechniqueGeometry,\n            enablePicking: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueGeometry\n        }\n    }\n);\n\n/**\n * Runtime representation of [[SquaresStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface SquaresTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"squares\";\n}\n\nexport const squaresTechniquePropTypes = mergeTechniqueDescriptor<SquaresTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.squares = squaresTechniquePropTypes;\n\n/**\n * Runtime representation of [[CirclesStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[PointTechniqueParams]].\n */\nexport interface CirclesTechnique extends MakeTechniqueAttrs<PointTechniqueParams> {\n    name: \"circles\";\n}\n\nexport const circlesTechniquePropTypes = mergeTechniqueDescriptor<CirclesTechnique>(\n    baseTechniqueParamsDescriptor,\n    pointTechniquePropTypes\n);\ntechniqueDescriptors.circles = circlesTechniquePropTypes;\n\n/**\n * Runtime representation of [[PoiStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface PoiTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"labeled-icon\";\n}\n\n/**\n * Runtime representation of [[LineMarkerStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[MarkerTechniqueParams]].\n */\nexport interface LineMarkerTechnique extends MakeTechniqueAttrs<MarkerTechniqueParams> {\n    name: \"line-marker\";\n}\n\nconst lineMarkerTechniquePropTypes = mergeTechniqueDescriptor<LineMarkerTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n            priority: AttrScope.TechniqueGeometry,\n            textMinZoomLevel: AttrScope.TechniqueGeometry,\n            textMaxZoomLevel: AttrScope.TechniqueGeometry,\n            iconMinZoomLevel: AttrScope.TechniqueGeometry,\n            iconMaxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            textMayOverlap: AttrScope.TechniqueGeometry,\n            iconMayOverlap: AttrScope.TechniqueGeometry,\n            textReserveSpace: AttrScope.TechniqueGeometry,\n            iconReserveSpace: AttrScope.TechniqueGeometry,\n            renderTextDuringMovements: AttrScope.TechniqueGeometry,\n            alwaysOnTop: AttrScope.TechniqueGeometry,\n            textIsOptional: AttrScope.TechniqueGeometry,\n            showOnMap: AttrScope.TechniqueGeometry,\n            stackMode: AttrScope.TechniqueGeometry,\n            minDistance: AttrScope.TechniqueGeometry,\n            iconIsOptional: AttrScope.TechniqueGeometry,\n            iconFadeTime: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            iconXOffset: AttrScope.TechniqueGeometry,\n            iconYOffset: AttrScope.TechniqueGeometry,\n            iconScale: AttrScope.TechniqueGeometry,\n            screenHeight: AttrScope.TechniqueGeometry,\n            screenWidth: AttrScope.TechniqueGeometry,\n            poiTable: AttrScope.TechniqueGeometry,\n            poiName: AttrScope.FeatureGeometry,\n            poiNameField: AttrScope.TechniqueGeometry,\n            imageTexture: AttrScope.FeatureGeometry,\n            imageTextureField: AttrScope.TechniqueGeometry,\n            imageTexturePrefix: AttrScope.TechniqueGeometry,\n            imageTexturePostfix: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"line-marker\"] = lineMarkerTechniquePropTypes;\ntechniqueDescriptors[\"labeled-icon\"] = lineMarkerTechniquePropTypes;\n\n/**\n * Runtime representation of [[SegmentsStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SegmentsTechniqueParams]].\n */\nexport interface SegmentsTechnique extends MakeTechniqueAttrs<SegmentsTechniqueParams> {\n    name: \"segments\";\n}\n\nconst polygonalTechniqueDescriptor: TechniqueDescriptor<PolygonalTechniqueParams> = {\n    attrScopes: {\n        polygonOffset: AttrScope.TechniqueRendering,\n        polygonOffsetFactor: AttrScope.TechniqueRendering,\n        polygonOffsetUnits: AttrScope.TechniqueRendering,\n        lineColor: AttrScope.TechniqueRendering,\n        lineFadeFar: AttrScope.TechniqueRendering,\n        lineFadeNear: AttrScope.TechniqueRendering\n    }\n};\n/**\n * Runtime representation of [[BasicExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[BasicExtrudedLineTechniqueParams]].\n */\nexport interface BasicExtrudedLineTechnique\n    extends MakeTechniqueAttrs<BasicExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[StandardExtrudedLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[StandardExtrudedLineTechniqueParams]].\n */\nexport interface StandardExtrudedLineTechnique\n    extends MakeTechniqueAttrs<StandardExtrudedLineTechniqueParams> {\n    name: \"extruded-line\";\n}\n\n/**\n * Runtime representation of [[SolidLineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[SolidLineTechniqueParams]].\n */\nexport interface SolidLineTechnique extends MakeTechniqueAttrs<SolidLineTechniqueParams> {\n    name: \"solid-line\" | \"dashed-line\";\n}\n\nexport const solidLineTechniqueDescriptor = mergeTechniqueDescriptor<SolidLineTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            clipping: AttrScope.TechniqueGeometry,\n            secondaryRenderOrder: AttrScope.TechniqueGeometry,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            secondaryWidth: AttrScope.TechniqueRendering,\n            secondaryColor: AttrScope.TechniqueRendering,\n            dashSize: AttrScope.TechniqueRendering,\n            gapSize: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"solid-line\"] = solidLineTechniqueDescriptor;\n// TODO: Remove deprecated \"dashed-line\" support in future releases.\ntechniqueDescriptors[\"dashed-line\"] = solidLineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[LineStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[LineTechniqueParams]].\n */\nexport interface LineTechnique extends MakeTechniqueAttrs<LineTechniqueParams> {\n    name: \"line\";\n}\n\nexport const lineTechniqueDescriptor = mergeTechniqueDescriptor<LineTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            // TODO, check, which are really dynamic !\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.FeatureGeometry\n        }\n    }\n);\n\ntechniqueDescriptors.line = lineTechniqueDescriptor;\n\n/**\n * Runtime representation of [[FillStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[FillTechniqueParams]].\n */\nexport interface FillTechnique extends MakeTechniqueAttrs<FillTechniqueParams> {\n    name: \"fill\";\n}\n\nconst fillTechniqueDescriptor = mergeTechniqueDescriptor<FillTechnique>(\n    baseTechniqueParamsDescriptor,\n    polygonalTechniqueDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.fill = fillTechniqueDescriptor;\n\n/**\n * Technique used to render a mesh geometry.\n * For technique parameters see [[StandardTechniqueParams]].\n */\nexport interface StandardTechnique extends MakeTechniqueAttrs<StandardTechniqueParams> {\n    name: \"standard\";\n}\nconst standardTechniqueDescriptor = mergeTechniqueDescriptor<StandardTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            color: AttrScope.FeatureGeometry,\n            vertexColors: AttrScope.FeatureGeometry,\n            wireframe: AttrScope.TechniqueRendering,\n            roughness: AttrScope.TechniqueRendering,\n            metalness: AttrScope.TechniqueRendering,\n            alphaTest: AttrScope.TechniqueRendering,\n            depthTest: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            emissive: AttrScope.TechniqueRendering,\n            emissiveIntensity: AttrScope.TechniqueRendering,\n            refractionRatio: AttrScope.TechniqueRendering,\n            map: AttrScope.TechniqueGeometry,\n            mapProperties: AttrScope.TechniqueGeometry,\n            normalMap: AttrScope.TechniqueGeometry,\n            normalMapProperties: AttrScope.TechniqueGeometry,\n            displacementMap: AttrScope.TechniqueGeometry,\n            displacementMapProperties: AttrScope.TechniqueGeometry,\n            roughnessMap: AttrScope.TechniqueGeometry,\n            roughnessMapProperties: AttrScope.TechniqueGeometry,\n            emissiveMap: AttrScope.TechniqueGeometry,\n            emissiveMapProperties: AttrScope.TechniqueGeometry,\n            bumpMap: AttrScope.TechniqueGeometry,\n            bumpMapProperties: AttrScope.TechniqueGeometry,\n            metalnessMap: AttrScope.TechniqueGeometry,\n            metalnessMapProperties: AttrScope.TechniqueGeometry,\n            alphaMap: AttrScope.TechniqueGeometry,\n            alphaMapProperties: AttrScope.TechniqueGeometry\n        }\n    }\n);\ntechniqueDescriptors.standard = standardTechniqueDescriptor;\n\n/**\n * Runtime representation of [[ExtrudedPolygonStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[ExtrudedPolygonTechniqueParams]].\n */\nexport interface ExtrudedPolygonTechnique\n    extends MakeTechniqueAttrs<ExtrudedPolygonTechniqueParams> {\n    name: \"extruded-polygon\";\n}\n\nconst extrudedPolygonTechniqueDescriptor = mergeTechniqueDescriptor<ExtrudedPolygonTechnique>(\n    baseTechniqueParamsDescriptor,\n    standardTechniqueDescriptor,\n    {\n        attrScopes: {\n            height: AttrScope.FeatureGeometry,\n            floorHeight: AttrScope.FeatureGeometry,\n            color: AttrScope.FeatureGeometry,\n            defaultColor: AttrScope.FeatureGeometry,\n            defaultHeight: AttrScope.FeatureGeometry,\n            constantHeight: AttrScope.FeatureGeometry,\n            boundaryWalls: AttrScope.FeatureGeometry,\n            footprint: AttrScope.FeatureGeometry,\n            maxSlope: AttrScope.FeatureGeometry,\n            enableDepthPrePass: AttrScope.TechniqueGeometry,\n            animateExtrusionDuration: AttrScope.TechniqueGeometry,\n            animateExtrusion: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            transparent: AttrScope.TechniqueRendering,\n            lineWidth: AttrScope.TechniqueRendering,\n            lineFadeNear: AttrScope.TechniqueRendering,\n            lineFadeFar: AttrScope.TechniqueRendering,\n            lineColorMix: AttrScope.TechniqueGeometry,\n            lineColor: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors[\"extruded-polygon\"] = extrudedPolygonTechniqueDescriptor;\n/**\n * Runtime representation of [[TextStyle]] as parsed by [[StyleSetEvaluator]].\n * For technique parameters see [[TextTechniqueParams]].\n */\nexport interface TextTechnique extends MakeTechniqueAttrs<TextTechniqueParams> {\n    name: \"text\";\n}\n\nconst textTechniqueDescriptor = mergeTechniqueDescriptor<TextTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            text: AttrScope.FeatureGeometry,\n            label: AttrScope.FeatureGeometry,\n            useAbbreviation: AttrScope.FeatureGeometry,\n            useIsoCode: AttrScope.FeatureGeometry,\n\n            minZoomLevel: AttrScope.TechniqueGeometry,\n            maxZoomLevel: AttrScope.TechniqueGeometry,\n            distanceScale: AttrScope.TechniqueGeometry,\n            mayOverlap: AttrScope.TechniqueGeometry,\n            reserveSpace: AttrScope.TechniqueGeometry,\n            textFadeTime: AttrScope.TechniqueGeometry,\n            xOffset: AttrScope.TechniqueGeometry,\n            yOffset: AttrScope.TechniqueGeometry,\n            style: AttrScope.TechniqueGeometry,\n            fontName: AttrScope.TechniqueGeometry,\n            fontStyle: AttrScope.TechniqueGeometry,\n            fontVariant: AttrScope.TechniqueGeometry,\n            rotation: AttrScope.TechniqueGeometry,\n            tracking: AttrScope.TechniqueGeometry,\n            leading: AttrScope.TechniqueGeometry,\n            maxLines: AttrScope.TechniqueGeometry,\n            lineWidth: AttrScope.TechniqueGeometry,\n            canvasRotation: AttrScope.TechniqueGeometry,\n            lineRotation: AttrScope.TechniqueGeometry,\n            wrappingMode: AttrScope.TechniqueGeometry,\n            hAlignment: AttrScope.TechniqueGeometry,\n            vAlignment: AttrScope.TechniqueGeometry,\n            backgroundColor: AttrScope.TechniqueRendering,\n            backgroundSize: AttrScope.TechniqueRendering,\n            backgroundOpacity: AttrScope.TechniqueRendering,\n            color: AttrScope.TechniqueRendering,\n            opacity: AttrScope.TechniqueRendering,\n            priority: AttrScope.TechniqueRendering,\n            size: AttrScope.TechniqueRendering\n        }\n    }\n);\ntechniqueDescriptors.text = textTechniqueDescriptor;\n\n/**\n * Special technique for user-defined shaders.\n * For technique parameters see [[ShaderTechniqueParams]].\n */\nexport interface ShaderTechnique extends MakeTechniqueAttrs<ShaderTechniqueParams> {\n    name: \"shader\";\n}\n\nconst shaderTechniqueDescriptor = mergeTechniqueDescriptor<ShaderTechnique>(\n    baseTechniqueParamsDescriptor,\n    {\n        attrScopes: {\n            primitive: AttrScope.TechniqueGeometry,\n            params: AttrScope.TechniqueRendering\n        }\n    }\n);\n\ntechniqueDescriptors.shader = shaderTechniqueDescriptor;\n\n/**\n * Technique used to render a terrain geometry with textures.\n * For technique parameters see [[TerrainTechniqueParams]].\n */\nexport interface TerrainTechnique extends MakeTechniqueAttrs<TerrainTechniqueParams> {\n    name: \"terrain\";\n}\n\n/**\n * Technique to avoid label rendering on top of certain line geometries.\n * For technique parameters see [[BaseTechniqueParams]].\n */\nexport interface LabelRejectionLineTechnique extends MakeTechniqueAttrs<BaseTechniqueParams> {\n    name: \"label-rejection-line\";\n}\n\n/**\n * Possible techniques that can be used to draw a geometry on the map.\n */\nexport type Technique =\n    | SquaresTechnique\n    | CirclesTechnique\n    | PoiTechnique\n    | LineMarkerTechnique\n    | LineTechnique\n    | SegmentsTechnique\n    | SolidLineTechnique\n    | FillTechnique\n    | StandardTechnique\n    | TerrainTechnique\n    | BasicExtrudedLineTechnique\n    | StandardExtrudedLineTechnique\n    | ExtrudedPolygonTechnique\n    | ShaderTechnique\n    | TextTechnique\n    | LabelRejectionLineTechnique;\n\n/**\n * Additional params used for optimized usage of `Techniques`.\n */\nexport interface IndexedTechniqueParams {\n    /**\n     * Optimization: Index into table in [[StyleSetEvaluator]] or in [[DecodedTile]].\n     * @hidden\n     */\n    _index: number;\n\n    /**\n     * Unique technique key derived from all dynamic expressions that were input to this particular\n     * technique instance.\n     * @hidden\n     */\n    _key: string;\n\n    /**\n     * Optimization: Unique [[Technique]] index of [[Style]] from which technique was derived.\n     * @hidden\n     */\n    _styleSetIndex: number;\n\n    /**\n     * The styleSet associated to this [[Technique]].\n     * @hidden\n     */\n    _styleSet?: string;\n\n    /**\n     * The category used to assign render orders to objects created using this [[Technique]].\n     * @hidden\n     */\n    _category?: string;\n\n    /**\n     * The category used to assign render orders to secondary objects\n     * created using this [[Technique]].\n     * @hidden\n     */\n    _secondaryCategory?: string;\n}\n\n/**\n * For efficiency, [[StyleSetEvaluator]] returns [[Techniques]] additional params as defined in\n * [[IndexedTechniqueParams]].\n */\nexport type IndexedTechnique = Technique & IndexedTechniqueParams;\n\n/**\n * Type guard to check if an object is an instance of [[CirclesTechnique]].\n */\nexport function isCirclesTechnique(technique: Technique): technique is CirclesTechnique {\n    return technique.name === \"circles\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SquaresTechnique]].\n */\nexport function isSquaresTechnique(technique: Technique): technique is SquaresTechnique {\n    return technique.name === \"squares\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[PoiTechnique]].\n */\nexport function isPoiTechnique(technique: Technique): technique is PoiTechnique {\n    return technique.name === \"labeled-icon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineMarkerTechnique]].\n */\nexport function isLineMarkerTechnique(technique: Technique): technique is LineMarkerTechnique {\n    return technique.name === \"line-marker\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[LineTechnique]].\n */\nexport function isLineTechnique(technique: Technique): technique is LineTechnique {\n    return technique.name === \"line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]].\n */\nexport function isSolidLineTechnique(technique: Technique): technique is SolidLineTechnique {\n    return technique.name === \"solid-line\" || technique.name === \"dashed-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[SolidLineTechnique]] and is a kind that\n * has special dashes.\n * @note Lines with special dashes need line caps to render properly.\n */\nexport function isSpecialDashesLineTechnique(\n    technique: Technique\n): technique is SolidLineTechnique {\n    return (\n        (technique.name === \"solid-line\" || technique.name === \"dashed-line\") &&\n        technique.dashes !== undefined &&\n        technique.dashes !== \"Square\"\n    );\n}\n\n/**\n * Type guard to check if an object is an instance of [[SegmentsTechnique]].\n */\nexport function isSegmentsTechnique(technique: Technique): technique is SegmentsTechnique {\n    return technique.name === \"segments\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]]\n * or [[StandardExtrudedLineTechnique]].\n */\nexport function isExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique | StandardExtrudedLineTechnique {\n    return technique.name === \"extruded-line\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[BasicExtrudedLineTechnique]].\n */\nexport function isBasicExtrudedLineTechnique(\n    technique: Technique\n): technique is BasicExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"basic\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardExtrudedLineTechnique]].\n */\nexport function isStandardExtrudedLineTechnique(\n    technique: Technique\n): technique is StandardExtrudedLineTechnique {\n    return isExtrudedLineTechnique(technique) && technique.shading === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[FillTechnique]].\n */\nexport function isFillTechnique(technique: Technique): technique is FillTechnique {\n    return technique.name === \"fill\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ExtrudedPolygonTechnique]].\n */\nexport function isExtrudedPolygonTechnique(\n    technique: Technique\n): technique is ExtrudedPolygonTechnique {\n    return technique.name === \"extruded-polygon\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[StandardTechnique]].\n */\nexport function isStandardTechnique(technique: Technique): technique is StandardTechnique {\n    return technique.name === \"standard\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TerrainTechnique]].\n */\nexport function isTerrainTechnique(technique: Technique): technique is TerrainTechnique {\n    return technique.name === \"terrain\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[TextTechnique]].\n */\nexport function isTextTechnique(technique: Technique): technique is TextTechnique {\n    return technique.name === \"text\";\n}\n\n/**\n * Type guard to check if an object is an instance of [[ShaderTechnique]].\n */\nexport function isShaderTechnique(technique: Technique): technique is ShaderTechnique {\n    return technique.name === \"shader\";\n}\n\nexport function isLabelRejectionLineTechnique(\n    technique: Technique\n): technique is LabelRejectionLineTechnique {\n    return technique.name === \"label-rejection-line\";\n}\n\n/**\n * Check if vertex normals should be generated for this technique (if no normals are in the data).\n * @param technique Technique to check.\n */\nexport function needsVertexNormals(technique: Technique): boolean {\n    return (\n        isFillTechnique(technique) ||\n        isStandardTechnique(technique) ||\n        isTerrainTechnique(technique) ||\n        isStandardExtrudedLineTechnique(technique)\n    );\n}\n\n/**\n * Get the texture coordinate type if the technique supports it.\n */\nexport function textureCoordinateType(technique: Technique): TextureCoordinateType | undefined {\n    if (isStandardTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isExtrudedPolygonTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else if (isTerrainTechnique(technique)) {\n        return technique.textureCoordinateType;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Add all the buffers of the technique to the transfer list.\n */\nexport function addBuffersToTransferList(technique: Technique, transferList: ArrayBuffer[]) {\n    if (\n        isStandardTechnique(technique) ||\n        isExtrudedPolygonTechnique(technique) ||\n        isTerrainTechnique(technique)\n    ) {\n        for (const texturePropertyKey of TEXTURE_PROPERTY_KEYS) {\n            const textureProperty = (technique as any)[texturePropertyKey];\n            if (isTextureBuffer(textureProperty)) {\n                if (textureProperty.buffer instanceof ArrayBuffer) {\n                    transferList.push(textureProperty.buffer);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Compose full texture name for given image name with technique specified.\n * Some techniques allows to add prefix/postfix to icons names specified, this\n * function uses technique information to create fully qualified texture name.\n * @param imageName base name of the marker icon.\n * @param technique the technique describing POI or line marker.\n * @returns fully qualified texture name for loading from atlas (without extension).\n */\nexport function composeTechniqueTextureName(\n    imageName: string,\n    technique: PoiTechnique | LineMarkerTechnique\n): string {\n    let textureName = imageName;\n    if (typeof technique.imageTexturePrefix === \"string\") {\n        textureName = technique.imageTexturePrefix + textureName;\n    }\n    if (typeof technique.imageTexturePostfix === \"string\") {\n        textureName = textureName + technique.imageTexturePostfix;\n    }\n    return textureName;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Definitions, StyleSet, Theme } from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { Tile } from \"./Tile\";\n\nconst UPDATE_EVENT = { type: \"update\" };\n\n/**\n * Derive a class from `DataSource` to contribute data and geometries to the [[MapView]].\n */\nexport abstract class DataSource extends THREE.EventDispatcher {\n    /**\n     * A counter to generate unique names for each `DataSource`, if no name is provided in the\n     * constructor.\n     */\n    private static uniqueNameCounter: number = 0;\n\n    /**\n     * Set to `true` if this `DataSource` is enabled; `false` otherwise.\n     */\n    enabled: boolean = true;\n\n    /**\n     * Set to `true` if the [[MapView]] can cache tiles produced by this `DataSource`.\n     */\n    cacheable: boolean = false;\n\n    /**\n     * Set to `true` if the loader should be used to get the tile contents.\n     */\n    useGeometryLoader: boolean = false;\n\n    /**\n     * The unique name of a `DataSource` instance.\n     */\n    name: string;\n\n    /**\n     * Whether the datasource should have a ground plane (this plane covers the tile entirely and\n     * has the minimum possible renderOrder), this can be required in some cases when fallback\n     * parent tiles need to be covered by the children, otherwise the content will overlap.\n     * Default is false\n     */\n    addGroundPlane: boolean = false;\n\n    /**\n     * The [[MapView]] instance holding a reference to this `DataSource`.\n     */\n    private m_mapView?: MapView;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    private m_styleSetName?: string;\n\n    /**\n     * Minimum zoom level this `DataSource` can be displayed in.\n     */\n    private m_minZoomLevel: number = 1;\n\n    /**\n     * Maximum zoom level this `DataSource` can be displayed in.\n     */\n    private m_maxZoomLevel: number = 20;\n\n    /**\n     * Current value of [[maxGeometryHeight]] property.\n     */\n    private m_maxGeometryHeight = 0;\n\n    /**\n     * Storage level offset applied to this `DataSource`.\n     */\n    private m_storageLevelOffset: number = 0;\n\n    /**\n     * Constructs a new `DataSource`.\n     *\n     * @param uniqueName A unique name that represents this `DataSource`.\n     * @param styleSetName The name of the [[StyleSet]] to refer to in a [[Theme]], to decode vector\n     * tiles.\n     * @param minZoomLevel Minimum zoom level this `DataSource` can be displayed in.\n     * @param maxZoomLevel Maximum zoom level this `DataSource` can be displayed in.\n     * @param storageLevelOffset Storage level offset applied to this `DataSource`.\n     */\n    constructor(\n        uniqueName?: string,\n        styleSetName?: string,\n        minZoomLevel?: number,\n        maxZoomLevel?: number,\n        storageLevelOffset?: number\n    ) {\n        super();\n        if (uniqueName === undefined || uniqueName.length === 0) {\n            uniqueName = `anonymous-datasource#${++DataSource.uniqueNameCounter}`;\n        }\n        this.name = uniqueName;\n\n        this.styleSetName = styleSetName;\n\n        if (minZoomLevel !== undefined) {\n            this.m_minZoomLevel = minZoomLevel;\n        }\n        if (maxZoomLevel !== undefined) {\n            this.m_maxZoomLevel = maxZoomLevel;\n        }\n        if (storageLevelOffset !== undefined) {\n            this.m_storageLevelOffset = storageLevelOffset;\n        }\n    }\n\n    /**\n     * Returns the name of the [[StyleSet]] to use for the decoding.\n     */\n    get styleSetName(): string | undefined {\n        return this.m_styleSetName;\n    }\n\n    /**\n     * Sets the name of the [[StyleSet]] to use for the decoding. If this [[DataSource]] is already\n     * attached to a [[MapView]], this setter then reapplies [[StyleSet]] with this name found in\n     * [[MapView]]s theme.\n     */\n    set styleSetName(styleSetName: string | undefined) {\n        this.m_styleSetName = styleSetName;\n        if (this.m_mapView !== undefined && styleSetName !== undefined) {\n            this.setTheme(this.m_mapView.theme);\n        }\n    }\n\n    /**\n     * Destroys this `DataSource`.\n     */\n    dispose() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Purges all the caching done by this `DataSource`\n     */\n    clearCache() {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns `true` if this `DataSource` is ready and the [[MapView]] can invoke `getTile()` to\n     * start requesting data.\n     */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * The [[MapView]] that is holding this `DataSource`.\n     */\n    get mapView(): MapView {\n        if (this.m_mapView === undefined) {\n            throw new Error(\"This DataSource was not added to MapView\");\n        }\n\n        return this.m_mapView;\n    }\n\n    /**\n     * The [[Projection]] used by the [[MapView]] that is holding this `DataSource`.\n     *\n     * An `Error` is thrown if you call this method before this `DataSource` has been added\n     * to a [[MapView]].\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * This method is called when the `DataSource` is added to a [[MapView]]. Reimplement this\n     * method to provide any custom initialization, such as, to establish a network connection,\n     * or to initialize complex data structures.\n     */\n    async connect(): Promise<void> {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Returns the [[TilingScheme]] used by this `DataSource`.\n     */\n    abstract getTilingScheme(): TilingScheme;\n\n    /**\n     * This method is called when this `DataSource` is added to a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    attach(mapView: MapView): void {\n        this.m_mapView = mapView;\n    }\n\n    /**\n     * This method is called when this `DataSource` is removed from a [[MapView]].\n     *\n     * Reimplementations of this method must invoke the definition of the super class.\n     *\n     * @param mapView The instance of the [[MapView]].\n     */\n    detach(mapView: MapView) {\n        assert(this.m_mapView === mapView);\n        this.m_mapView = undefined;\n    }\n\n    /**\n     * Invoked by [[MapView]] to notify when the [[Theme]] has been changed.\n     *\n     * If `DataSource` depends on a `styleSet` or `languages`, it must update its tiles' geometry.\n     *\n     * @deprecated, Use [[setTheme]].\n     *\n     * @param styleSet The new theme that [[MapView]] uses.\n     * @param languages An optional list of languages for the `DataSource`.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * If `DataSource` depends on a `styleSet` defined by this theme or `languages`, it must update\n     * its tiles' geometry.\n     *\n     * @param languages\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        // to be overwritten by subclasses\n    }\n\n    /**\n     * Used to configure the languages used by the `DataSource` according to priority;\n     * the first language in the array has the highest priority.\n     *\n     * @param languages An array of ISO 639-1 language codes.\n     */\n    setLanguages(languages?: string[]): void {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called when [[MapView]] needs to visualize or preload the content of a\n     * [[TileKey]].\n     *\n     * @param tileKey The unique identifier for a map tile.\n     */\n    abstract getTile(tileKey: TileKey): Tile | undefined;\n\n    /**\n     * This method is called by [[MapView]] before the tile needs to be updated, for example after\n     * a theme change.\n     *\n     * @param tile The [[Tile]] to update.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    updateTile(tile: Tile) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * This method is called by the [[MapView]] to determine if the content of the surrounding\n     * tiles must be preloaded.\n     *\n     * @returns `true` if the [[MapView]] should try to preload tiles surrounding the visible\n     * tiles; `false` otherwise. The default is `false`.\n     */\n    shouldPreloadTiles(): boolean {\n        return false;\n    }\n\n    /**\n     * The minimum zoom level to use for display.\n     *\n     * @returns The minimum zoom level to use for display.\n     */\n    get minZoomLevel(): number {\n        return this.m_minZoomLevel;\n    }\n\n    set minZoomLevel(level: number) {\n        this.m_minZoomLevel = level;\n    }\n\n    /**\n     * The maximum zoom level to use for display.\n     */\n    get maxZoomLevel(): number {\n        return this.m_maxZoomLevel;\n    }\n\n    set maxZoomLevel(level: number) {\n        this.m_maxZoomLevel = level;\n    }\n\n    /**\n     * Maximum geometry height above ground level this `DataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default 0.\n     */\n    get maxGeometryHeight() {\n        return this.m_maxGeometryHeight;\n    }\n    set maxGeometryHeight(value: number) {\n        this.m_maxGeometryHeight = value;\n    }\n\n    /**\n     * The difference between storage level and display level of tile.\n     *\n     * Storage level offset is a value applied (added) to current zoom level giving\n     * a final tile level being displayed. This way we may differentate current\n     * zoom level from the storage level that is displayed, giving fine grained\n     * control over the tiles being decoded an displayed.\n     */\n    get storageLevelOffset() {\n        return this.m_storageLevelOffset;\n    }\n\n    /**\n     * Setup the relative offset between storage level and display level of tile.\n     *\n     * @param levelOffset Difference between zoom level and display level.\n     */\n    set storageLevelOffset(levelOffset: number) {\n        this.m_storageLevelOffset = levelOffset;\n    }\n\n    /**\n     * Enables or disables overlay of geometry on elevation. It must be overloaded by data sources\n     * supporting this feature.\n     *\n     * @param value True to enable, false to disable.\n     */\n    setEnableElevationOverlay(enable: boolean) {\n        // to be overloaded by subclasses\n    }\n\n    /**\n     * Computes the zoom level to use for display.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @returns The zoom level to use for display.\n     */\n    getDisplayZoomLevel(zoomLevel: number): number {\n        return THREE.Math.clamp(\n            zoomLevel + this.m_storageLevelOffset,\n            this.m_minZoomLevel,\n            this.m_maxZoomLevel\n        );\n    }\n\n    /**\n     * Returns `true` if [[DataSource]] can load tile with given [[TileKey]] and zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the tile for the given [[TileKey]] can be loaded.\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should traverse tiles further with given [[TileKey]] and\n     * zoom level.\n     *\n     * @param zoomLevel The zoom level of the [[MapView]].\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the subtiles of the given [[TileKey]] should be\n     * checked for collisions.\n     */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        return tileKey.level <= zoomLevel;\n    }\n\n    /**\n     * Returns `true` if [[MapView]] should render the text elements with the given [[TileKey]] and\n     * zoom level.\n     *\n     * This is an additional check for the tiles that are already selected for rendering so the\n     * default implementation returns `true`.\n     *\n     * @param zoomLevel The zoom level.\n     * @param tileKey The unique identifier for a map tile.\n     * @returns `true` if the text elements created for the given [[TileKey]] should be rendered.\n     */\n    // tslint:disable-next-line:no-unused-variable\n    shouldRenderText(zoomLevel: number, tileKey: TileKey): boolean {\n        return true;\n    }\n\n    /**\n     * Sends a request to the [[MapView]] to redraw the scene.\n     */\n    requestUpdate() {\n        this.dispatchEvent(UPDATE_EVENT);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Font } from \"./FontCatalog\";\n\n/**\n * Structure containing all the required information necessary to render a BMFont glyph using\n * [[TextCanvas]].\n */\nexport class GlyphData {\n    /**\n     * Unicode character represented by this glyph.\n     */\n    readonly character: string;\n\n    /**\n     * Glyph' direction.\n     */\n    readonly direction: UnicodeUtils.Direction;\n\n    /**\n     * Array containing the positions for all corners of this glyph.\n     */\n    positions: THREE.Vector3[] = [];\n\n    /**\n     * Array containing the source texture coordinates for all corners of this glyph.\n     * Used to sample the original texture atlas pages.\n     */\n    sourceTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Array containing the dynamic texture coordinates for all corners of this glyph.\n     * Used to sample the dynamic texture atlas page.\n     */\n    dynamicTextureCoordinates: THREE.Vector2[] = [];\n\n    /**\n     * Source texture atlas' page copy index.\n     */\n    copyIndex: number = 0;\n\n    /**\n     * Flag indicating if glyph can be currently rendered.\n     */\n    isInCache: boolean = false;\n\n    /**\n     * Creates a new `GlyphData` object.\n     *\n     * @param codePoint Unicode code point.\n     * @param block Unicode block.\n     * @param width Glyph' width.\n     * @param height Glyph' height.\n     * @param advanceX Amount of pixel to move after placing this glyph.\n     * @param offsetX Horizontal offset from the glyph' origin.\n     * @param offsetY Vertical offset from the glyph' origin.\n     * @param u0 Glyph' left texture coordinate.\n     * @param v0 Glyph' bottom texture coordinate.\n     * @param u1 Glyph' right texture coordinate.\n     * @param v1 Glyph' top texture coordinate.\n     * @param texture Glyph' source texture atlas page.\n     * @param font Glyph' font.\n     *\n     * @returns New `GlyphData`.\n     */\n    constructor(\n        readonly codePoint: number,\n        readonly block: string,\n        readonly width: number,\n        readonly height: number,\n        readonly advanceX: number,\n        readonly offsetX: number,\n        readonly offsetY: number,\n        u0: number,\n        v0: number,\n        u1: number,\n        v1: number,\n        readonly texture: THREE.Texture,\n        readonly font: Font\n    ) {\n        this.character = String.fromCodePoint(codePoint);\n        this.direction = UnicodeUtils.getDirection(codePoint, block);\n\n        const left = this.offsetX;\n        const right = left + this.width;\n        const top = font.metrics.lineHeight - this.offsetY;\n        const bottom = top - this.height;\n\n        this.positions.push(\n            new THREE.Vector3(left, bottom, 1.0),\n            new THREE.Vector3(right, bottom, 1.0),\n            new THREE.Vector3(left, top, 1.0),\n            new THREE.Vector3(right, top, 1.0)\n        );\n\n        this.sourceTextureCoordinates.push(\n            new THREE.Vector2(u0, v0),\n            new THREE.Vector2(u1, v0),\n            new THREE.Vector2(u0, v1),\n            new THREE.Vector2(u1, v1)\n        );\n\n        this.dynamicTextureCoordinates.push(\n            new THREE.Vector2(0.0, 0.0),\n            new THREE.Vector2(1.0, 0.0),\n            new THREE.Vector2(0.0, 1.0),\n            new THREE.Vector2(1.0, 1.0)\n        );\n    }\n\n    /**\n     * Clone this `GlyphData`.\n     *\n     * @returns Cloned `GlyphData`.\n     */\n    clone(): GlyphData {\n        return new GlyphData(\n            this.codePoint,\n            this.block,\n            this.width,\n            this.height,\n            this.advanceX,\n            this.offsetX,\n            this.offsetY,\n            this.sourceTextureCoordinates[0].x,\n            this.sourceTextureCoordinates[0].y,\n            this.sourceTextureCoordinates[3].x,\n            this.sourceTextureCoordinates[3].y,\n            this.texture,\n            this.font\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextBufferObject } from \"./TextBufferObject\";\nimport { TextRenderStyle } from \"./TextStyle\";\n\nexport const MAX_CAPACITY = 65536;\nexport const VERTEX_BUFFER_STRIDE = 16;\nexport const INDEX_BUFFER_STRIDE = 1;\nexport const VERTICES_PER_QUAD = 4;\nexport const INDICES_PER_QUAD = 6;\nexport const QUAD_VERTEX_MEMORY_FOOTPRINT = VERTICES_PER_QUAD * VERTEX_BUFFER_STRIDE;\nexport const QUAD_INDEX_MEMORY_FOOTPRINT = INDICES_PER_QUAD * INDEX_BUFFER_STRIDE;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * Interface containing user-supplied picking data, as well as the [[TextGeometry]] range it's\n * assigned to.\n */\ninterface PickingData {\n    start: number;\n    end: number;\n    data: any;\n}\n\n/**\n * Procedural geometry that holds vertex attribute data for all glyphs in a [[TextCanvas]].\n */\nexport class TextGeometry {\n    /**\n     * Count of currently drawn glyphs.\n     */\n    get drawCount(): number {\n        return this.m_drawCount;\n    }\n\n    /**\n     * Mesh used to render foreground glyphs.\n     */\n    get mesh(): THREE.Mesh {\n        return this.m_mesh;\n    }\n\n    /**\n     * Mesh used to render background glyphs.\n     */\n    get backgroundMesh(): THREE.Mesh {\n        return this.m_bgMesh;\n    }\n    /**\n     * Maximum glyph capacity.\n     */\n    readonly capacity: number;\n\n    private m_currentCapacity: number;\n    private m_drawCount: number;\n    private m_updateOffset: number;\n\n    private m_vertexBuffer: THREE.InterleavedBuffer;\n    private m_positionAttribute: THREE.InterleavedBufferAttribute;\n    private m_uvAttribute: THREE.InterleavedBufferAttribute;\n    private m_colorAttribute: THREE.InterleavedBufferAttribute;\n    private m_bgColorAttribute: THREE.InterleavedBufferAttribute;\n    private m_indexBuffer: THREE.BufferAttribute;\n\n    private m_geometry: THREE.BufferGeometry;\n    private m_mesh: THREE.Mesh;\n    private m_bgMesh: THREE.Mesh;\n\n    private m_pickingCount: number;\n    private m_pickingDataArray: PickingData[];\n\n    /**\n     * Creates a new `TextGeometry`.\n     *\n     * @param material Material used to render foreground glyphs.\n     * @param backgroundMaterial Material used to render background glyphs.\n     * @param initialSize Initial amount of glyphs that can be stored.\n     * @param capacity Maximum glyph capacity.\n     *\n     * @returns New `TextGeometry`.\n     */\n    constructor(\n        readonly scene: THREE.Scene,\n        material: THREE.Material,\n        backgroundMaterial: THREE.Material,\n        initialSize: number,\n        capacity: number\n    ) {\n        this.capacity = Math.min(capacity, MAX_CAPACITY);\n        this.m_currentCapacity = Math.min(initialSize, capacity);\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(\n            new Float32Array(this.m_currentCapacity * QUAD_VERTEX_MEMORY_FOOTPRINT),\n            VERTEX_BUFFER_STRIDE\n        );\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        this.m_indexBuffer = new THREE.BufferAttribute(\n            new Uint32Array(this.m_currentCapacity * QUAD_INDEX_MEMORY_FOOTPRINT),\n            INDEX_BUFFER_STRIDE\n        );\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray = new Array(this.m_currentCapacity);\n\n        this.m_mesh = new THREE.Mesh(this.m_geometry, material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, backgroundMaterial);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_geometry.dispose();\n    }\n\n    /**\n     * Clear the geometry.\n     */\n    clear() {\n        this.m_drawCount = 0;\n        this.m_updateOffset = 0;\n        this.m_pickingCount = 0;\n    }\n\n    /**\n     * Update the GPU resources to reflect the latest additions to the geometry.\n     */\n    update() {\n        if (this.drawCount > this.m_updateOffset) {\n            this.m_vertexBuffer.needsUpdate = true;\n            this.m_vertexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_vertexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_VERTEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.needsUpdate = true;\n            this.m_indexBuffer.updateRange.offset =\n                this.m_updateOffset * QUAD_INDEX_MEMORY_FOOTPRINT;\n            this.m_indexBuffer.updateRange.count =\n                (this.m_drawCount - this.m_updateOffset) * QUAD_INDEX_MEMORY_FOOTPRINT;\n        }\n        this.m_updateOffset = this.m_drawCount;\n        this.m_geometry.setDrawRange(0, this.m_drawCount * INDICES_PER_QUAD);\n    }\n\n    /**\n     * Add a new glyph to the `TextGeometry`.\n     *\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be horizontally mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     *\n     * @returns Result of the addition.\n     */\n    add(\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): boolean {\n        if (this.m_drawCount >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const baseVertex = this.m_drawCount * VERTICES_PER_QUAD;\n        const baseIndex = this.m_drawCount * INDICES_PER_QUAD;\n\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            this.m_positionAttribute.setXYZW(\n                baseVertex + i,\n                corners[i].x,\n                corners[i].y,\n                corners[i].z,\n                (mirrored ? -1.0 : 1.0) * style.rotation\n            );\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            this.m_uvAttribute.setXYZW(\n                baseVertex + i,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].x,\n                glyphData.dynamicTextureCoordinates[mirroredUVIdx].y,\n                weight,\n                bgWeight\n            );\n            this.m_colorAttribute.setXYZW(\n                baseVertex + i,\n                style.color.r,\n                style.color.g,\n                style.color.b,\n                style.opacity\n            );\n            this.m_bgColorAttribute.setXYZW(\n                baseVertex + i,\n                style.backgroundColor.r,\n                style.backgroundColor.g,\n                style.backgroundColor.b,\n                style.backgroundOpacity\n            );\n        }\n\n        this.m_indexBuffer.setX(baseIndex, baseVertex);\n        this.m_indexBuffer.setX(baseIndex + 1, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 2, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 3, baseVertex + 2);\n        this.m_indexBuffer.setX(baseIndex + 4, baseVertex + 1);\n        this.m_indexBuffer.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_drawCount;\n        return true;\n    }\n\n    /**\n     * Add a new glyph to a text buffer.\n     *\n     * @param buffer Target buffer where glyph attributes will be stored.\n     * @param offset Offset of the target buffer.\n     * @param glyphData [[GlyphData]] holding the glyph description.\n     * @param corners Transformed glyph corners.\n     * @param weight Foreground glyph sampling weight.\n     * @param bgWeight Foreground glyph sampling weight.\n     * @param mirrored If `true`, UVs will be mirrored (needed for RTL punctuation).\n     * @param style Currently set [[TextRenderStyle]].\n     */\n    addToBuffer(\n        buffer: Float32Array,\n        offset: number,\n        glyphData: GlyphData,\n        corners: THREE.Vector3[],\n        weight: number,\n        bgWeight: number,\n        mirrored: boolean,\n        style: TextRenderStyle\n    ): void {\n        for (let i = 0; i < VERTICES_PER_QUAD; ++i) {\n            const vertexOffset = offset + VERTEX_BUFFER_STRIDE * i;\n            buffer[vertexOffset] = corners[i].x;\n            buffer[vertexOffset + 1] = corners[i].y;\n            buffer[vertexOffset + 2] = corners[i].z;\n            buffer[vertexOffset + 3] = (mirrored ? -1.0 : 1.0) * style.rotation;\n\n            const mirroredUVIdx = mirrored ? ((i + 1) % 2) + Math.floor(i / 2) * 2 : i;\n            buffer[vertexOffset + 4] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].x;\n            buffer[vertexOffset + 5] = glyphData.dynamicTextureCoordinates[mirroredUVIdx].y;\n            buffer[vertexOffset + 6] = weight;\n            buffer[vertexOffset + 7] = bgWeight;\n\n            buffer[vertexOffset + 8] = style.color.r;\n            buffer[vertexOffset + 9] = style.color.g;\n            buffer[vertexOffset + 10] = style.color.b;\n            buffer[vertexOffset + 11] = style.opacity;\n\n            buffer[vertexOffset + 12] = style.backgroundColor.r;\n            buffer[vertexOffset + 13] = style.backgroundColor.g;\n            buffer[vertexOffset + 14] = style.backgroundColor.b;\n            buffer[vertexOffset + 15] = style.backgroundOpacity;\n        }\n    }\n\n    /**\n     * Add a previously computed [[TextBufferObject]] to the `TextGeometry`. Extra parameters can\n     * be passed to override the passed attribute data.\n     *\n     * @param textBufferObject [[TextBufferObject]] containing computed glyphs.\n     * @param position Override position value.\n     * @param scale Override scale value.\n     * @param rotation Override rotation value.\n     * @param color Override color value.\n     * @param opacity Override opacity value.\n     * @param bgColor Override background color value.\n     * @param bgOpacity Override background opacity value.\n     *\n     * @returns Result of the addition.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        position?: THREE.Vector3,\n        scale?: number,\n        rotation?: number,\n        color?: THREE.Color,\n        opacity?: number,\n        bgColor?: THREE.Color,\n        bgOpacity?: number\n    ): boolean {\n        if (this.m_drawCount + textBufferObject.glyphs.length >= this.capacity) {\n            return false;\n        } else if (this.m_drawCount + textBufferObject.glyphs.length >= this.m_currentCapacity) {\n            const newSize = Math.min(this.m_currentCapacity * 2, this.capacity);\n            this.resizeBuffers(newSize);\n        }\n\n        const s = scale || 1.0;\n        const r = rotation || 0.0;\n        const cosR = Math.cos(r);\n        const sinR = Math.sin(r);\n        const offsetX = position !== undefined ? position.x : 0.0;\n        const offsetY = position !== undefined ? position.y : 0.0;\n        const offsetZ = position !== undefined ? position.z : 0.0;\n\n        const buffer = textBufferObject.buffer;\n\n        const rot = buffer[3];\n        const rotSign = rot < 0 ? -1.0 : 1.0;\n\n        const red = color !== undefined ? color.r : buffer[8];\n        const green = color !== undefined ? color.g : buffer[9];\n        const blue = color !== undefined ? color.b : buffer[10];\n        const alpha = opacity !== undefined ? opacity : buffer[11];\n        const bgRed = bgColor !== undefined ? bgColor.r : buffer[12];\n        const bgGreen = bgColor !== undefined ? bgColor.g : buffer[13];\n        const bgBlue = bgColor !== undefined ? bgColor.b : buffer[14];\n        const bgAlpha = bgOpacity !== undefined ? bgOpacity : buffer[15];\n\n        const targetOffset = this.m_drawCount * VERTICES_PER_QUAD;\n        for (let i = 0; i < textBufferObject.glyphs.length; ++i) {\n            const srcOffset = i * QUAD_VERTEX_MEMORY_FOOTPRINT;\n\n            const glyph = textBufferObject.glyphs[i];\n            if (!glyph.isInCache) {\n                return false;\n            }\n\n            const mirrored = buffer[srcOffset + 4] > buffer[srcOffset + VERTEX_BUFFER_STRIDE + 4];\n            const w = buffer[srcOffset + 6];\n            const bw = buffer[srcOffset + 7];\n\n            for (let j = 0; j < VERTICES_PER_QUAD; ++j) {\n                const x = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE];\n                const y = buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 1];\n                this.m_positionAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    x * s * cosR + y * s * -sinR + offsetX,\n                    x * s * sinR + y * s * cosR + offsetY,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 2] + offsetZ,\n                    buffer[srcOffset + j * VERTEX_BUFFER_STRIDE + 3] + rotSign * r\n                );\n                const mirroredUVIdx = mirrored ? ((j + 1) % 2) + Math.floor(j / 2) * 2 : j;\n                this.m_uvAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].x,\n                    glyph.dynamicTextureCoordinates[mirroredUVIdx].y,\n                    w,\n                    (bw - w) / s + w\n                );\n                this.m_colorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    red,\n                    green,\n                    blue,\n                    alpha\n                );\n                this.m_bgColorAttribute.setXYZW(\n                    targetOffset + i * VERTICES_PER_QUAD + j,\n                    bgRed,\n                    bgGreen,\n                    bgBlue,\n                    bgAlpha\n                );\n            }\n\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 1,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 2,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 3,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 2\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 4,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 1\n            );\n            this.m_indexBuffer.setX(\n                (this.m_drawCount + i) * INDICES_PER_QUAD + 5,\n                (this.m_drawCount + i) * VERTICES_PER_QUAD + 3\n            );\n        }\n\n        this.m_drawCount += textBufferObject.glyphs.length;\n        return true;\n    }\n\n    /**\n     * Adds picking data for glyphs from the specified start until the last glyph added.\n     *\n     * @param startIdx First glyph index that this picking data is associated to.\n     * @param endIdx Last glyph index that this picking data is associated to.\n     * @param pickingData Picking data to be added.\n     */\n    addPickingData(startIdx: number, endIdx: number, pickingData: any): boolean {\n        if (this.m_pickingCount >= this.m_currentCapacity) {\n            return false;\n        }\n\n        this.m_pickingDataArray[this.m_pickingCount] = {\n            start: Math.min(startIdx, this.capacity),\n            end: Math.min(endIdx, this.capacity),\n            data: pickingData\n        };\n\n        ++this.m_pickingCount;\n        return true;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple glyphs\n     * are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pick(screenPosition: THREE.Vector2, pickCallback: (pickData: any | undefined) => void) {\n        for (const pickingData of this.m_pickingDataArray) {\n            if (pickingData === undefined) {\n                return;\n            }\n\n            for (let i = pickingData.start; i < pickingData.end; ++i) {\n                const positionIndex = i * VERTICES_PER_QUAD;\n\n                const minX = Math.min(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x < minX) {\n                    continue;\n                }\n\n                const maxX = Math.max(\n                    this.m_positionAttribute.getX(positionIndex + 2),\n                    this.m_positionAttribute.getX(positionIndex + 1)\n                );\n                if (screenPosition.x > maxX) {\n                    continue;\n                }\n\n                const minY = Math.min(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y < minY) {\n                    continue;\n                }\n\n                const maxY = Math.max(\n                    this.m_positionAttribute.getY(positionIndex + 2),\n                    this.m_positionAttribute.getY(positionIndex + 1)\n                );\n                if (screenPosition.y > maxY) {\n                    continue;\n                }\n\n                pickCallback(pickingData.data);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextGeometry`.\n     *\n     * @param info The info object to increment with the values from this `TextGeometry`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.m_vertexBuffer.count * NUM_BYTES_PER_FLOAT +\n            this.m_indexBuffer.count * NUM_BYTES_PER_INT32;\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    private resizeBuffers(size: number) {\n        this.m_currentCapacity = size;\n\n        const newVertexBuffer = new Float32Array(size * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        newVertexBuffer.set(this.m_vertexBuffer.array);\n        this.m_vertexBuffer = new THREE.InterleavedBuffer(newVertexBuffer, VERTEX_BUFFER_STRIDE);\n        this.m_vertexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_positionAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 0);\n        this.m_uvAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 4);\n        this.m_colorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 8);\n        this.m_bgColorAttribute = new THREE.InterleavedBufferAttribute(this.m_vertexBuffer, 4, 12);\n\n        const newIndexBuffer = new Uint32Array(size * QUAD_INDEX_MEMORY_FOOTPRINT);\n        newIndexBuffer.set(this.m_indexBuffer.array);\n        this.m_indexBuffer = new THREE.BufferAttribute(newIndexBuffer, INDEX_BUFFER_STRIDE);\n        this.m_indexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_geometry.dispose();\n        this.m_geometry = new THREE.BufferGeometry();\n        this.m_geometry.setAttribute(\"position\", this.m_positionAttribute);\n        this.m_geometry.setAttribute(\"uv\", this.m_uvAttribute);\n        this.m_geometry.setAttribute(\"color\", this.m_colorAttribute);\n        this.m_geometry.setAttribute(\"bgColor\", this.m_bgColorAttribute);\n        this.m_geometry.setIndex(this.m_indexBuffer);\n\n        this.m_pickingDataArray.length = this.m_currentCapacity;\n\n        this.scene.remove(this.m_bgMesh, this.m_mesh);\n        this.m_mesh = new THREE.Mesh(this.m_geometry, this.m_mesh.material);\n        this.m_bgMesh = new THREE.Mesh(this.m_geometry, this.m_bgMesh.material);\n        this.m_mesh.renderOrder = Number.MAX_SAFE_INTEGER;\n        this.m_bgMesh.renderOrder = Number.MAX_SAFE_INTEGER - 1;\n        this.m_mesh.frustumCulled = false;\n        this.m_bgMesh.frustumCulled = false;\n        this.scene.add(this.m_bgMesh, this.m_mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GlyphData } from \"../rendering/GlyphData\";\nimport { FontUnit, FontVariant } from \"../rendering/TextStyle\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\n\n/**\n * Collection of different constants and utility functions used by [[Typesetter]]s.\n */\nexport namespace TypesettingUtils {\n    /**\n     * Ratio between EMs and Pixels.\n     */\n    export const EM_TO_PX = 16.0;\n\n    /**\n     * Ratio between Points and Pixels.\n     */\n    export const PT_TO_PX = 1.25;\n\n    /**\n     * Angle used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_ANGLE = 0.174533;\n\n    /**\n     * Horizontal offset used when emulating italic fonts (oblique).\n     */\n    export const OBLIQUE_OFFSET = Math.tan(OBLIQUE_ANGLE);\n\n    /**\n     * Convert between any size specified in any [[FontUnit]] to pixels.\n     *\n     * @param size Font size (specified in `unit`).\n     * @param unit Size unit.\n     * @param originalSize Original size (pixels)\n     *\n     * @returns Pixel size.\n     */\n    export function getPixelSize(size: number, unit: FontUnit, originalSize: number) {\n        let result = size;\n        switch (unit) {\n            case FontUnit.Em:\n                result *= EM_TO_PX;\n                break;\n            case FontUnit.Point:\n                result *= PT_TO_PX;\n                break;\n            case FontUnit.Percent:\n                result *= (1.0 / 100) * originalSize;\n                break;\n        }\n        return result;\n    }\n\n    /**\n     * Gets the scale applied to a certain character when using the [[FontVariant]].`SmallCaps`.\n     *\n     * @param glyphs Array containing [[TransformedGlyphData]].\n     * @param index Index to `glyphDataArray`.\n     * @param fontVariant Currently active [[FontVariant]].\n     *\n     * @returns Glyph `SmallCaps` scale.\n     */\n    export function getSmallCapsScale(\n        glyphs: GlyphData[],\n        smallCapsTransformations: boolean[],\n        index: number,\n        fontVariant: FontVariant\n    ): number {\n        const isSmallCaps =\n            smallCapsTransformations[index] && fontVariant === FontVariant.SmallCaps;\n        return isSmallCaps\n            ? glyphs[index].font.metrics.xHeight / glyphs[index].font.metrics.capHeight\n            : 1.0;\n    }\n\n    /**\n     * Returns the first strong direction (LTR or RTL) found for a given array of [[GlyphData]].\n     *\n     * @param glyphs Array containing [[GlyphData]].\n     * @param offset `glyphDataArray` offset.\n     *\n     * @returns Strong direction.\n     */\n    export function getDirection(glyphs: GlyphData[], offset: number): UnicodeUtils.Direction {\n        let result = UnicodeUtils.Direction.LTR;\n        let index = offset;\n        while (\n            glyphs[index].direction !== UnicodeUtils.Direction.LTR &&\n            glyphs[index].direction !== UnicodeUtils.Direction.RTL &&\n            index < glyphs.length - 1\n        ) {\n            ++index;\n        }\n\n        if (Math.abs(glyphs[index].direction) === 1.0) {\n            result = glyphs[index].direction;\n        }\n        return result;\n    }\n\n    /**\n     * Computes the transformation matrix for a glyph.\n     *\n     * @param transform Matrix used to store the results.\n     * @param position Glyph' position.\n     * @param scale Glyph' scale.\n     * @param rotation [[TextCanvas]] rotation.\n     * @param localRotation Glyph' local rotation.\n     */\n    export function computeGlyphTransform(\n        transform: THREE.Matrix3,\n        position: THREE.Vector3,\n        scale: number,\n        rotation: number,\n        localRotation: number\n    ): void {\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(rotation);\n        const localCosAngle = Math.cos(localRotation);\n        const localSinAngle = Math.sin(localRotation);\n        transform.set(\n            scale * localCosAngle,\n            scale * -localSinAngle,\n            cosAngle * position.x - sinAngle * position.y,\n            scale * localSinAngle,\n            scale * localCosAngle,\n            sinAngle * position.x + cosAngle * position.y,\n            0,\n            0,\n            1.0\n        );\n    }\n\n    /**\n     * Updates the supplied bounds with the computed screen-space corners for a given glyph.\n     *\n     * @param corners Glyph' corners.\n     * @param globalBounds Global text bounds.\n     * @param individualBounds Individual per-character bounds.\n     */\n    export function updateBounds(\n        corners: THREE.Vector3[],\n        globalBounds: THREE.Box2,\n        individualBounds?: { array: THREE.Box2[]; offset: number }\n    ): void {\n        const minX = Math.min(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const maxX = Math.max(corners[0].x, corners[1].x, corners[2].x, corners[3].x);\n        const minY = Math.min(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n        const maxY = Math.max(corners[0].y, corners[1].y, corners[2].y, corners[3].y);\n\n        if (individualBounds !== undefined) {\n            if (individualBounds.array[individualBounds.offset] !== undefined) {\n                individualBounds.array[individualBounds.offset].min.set(minX, minY);\n                individualBounds.array[individualBounds.offset].max.set(maxX, maxY);\n            } else {\n                individualBounds.array.push(\n                    new THREE.Box2(new THREE.Vector2(minX, minY), new THREE.Vector2(maxX, maxY))\n                );\n            }\n            ++individualBounds.offset;\n        }\n\n        globalBounds.min.set(\n            Math.min(globalBounds.min.x, minX),\n            Math.min(globalBounds.min.y, minY)\n        );\n        globalBounds.max.set(\n            Math.max(globalBounds.max.x, maxX),\n            Math.max(globalBounds.max.y, maxY)\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { PickingRaycaster } from \"./PickingRaycaster\";\n\n/**\n * `MapViewPoints` is a class to extend for the `\"circles\"` and `\"squares\"` [[Technique]]s to\n * implement raycasting of [[THREE.Points]] as expected in [[MapView]], that are in screen space. It\n * copies the behaviour of the `raycast` method in [[THREE.Points]] and dispatches it to its\n * children classes, [[Circles]] and [[Squares]], who hold the intersection testing in the\n * `testPoint` method. This class also has the ability to dismiss the testing via the\n * `enableRayTesting` flag.\n *\n * Its main motivation is to handle the point styles of XYZ projects.\n *\n * @see https://github.com/mrdoob/three.js/blob/master/src/objects/Points.js\n */\nexport abstract class MapViewPoints extends THREE.Points {\n    /**\n     * This allows to discard the ray testing.\n     */\n    enableRayTesting: boolean = true;\n\n    /**\n     * Implements the intersection testing in screen space between the drawn points and the ray. The\n     * drawing of the points being different between [[Circles]] and [[Squares]], this method is\n     * implemented in these child classes.\n     *\n     * @param point The point to test.\n     * @param screenPosition The point position on screen.\n     * @param pickCoordinates The picking position on screen.\n     * @param index The index of the point in the [[THREE.Geometry]].\n     * @param distance The distance between the point and the ray origin.\n     * @param intersects The results array.\n     */\n    abstract testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ): void;\n\n    /**\n     * This method is similar to the original method `raycast` in [[THREE.Points]] except that it\n     * then calls the tailored `testPoint` method in the children classes to test intersections\n     * depending on whether the points are circles or squares, which [[THREE.Points]] cannot do.\n     *\n     * @param raycaster The raycaster.\n     * @param intersects The array to fill with the results.\n     */\n    raycast(raycaster: PickingRaycaster, intersects: THREE.Intersection[]) {\n        if (!this.enableRayTesting) {\n            return;\n        }\n\n        const geometry = this.geometry;\n        const matrixWorld = this.matrixWorld;\n        const screenCoords = raycaster.ray.origin\n            .clone()\n            .add(raycaster.ray.direction)\n            .project(raycaster.camera);\n        const mouseCoords = new THREE.Vector2(\n            Math.ceil(((screenCoords.x + 1) / 2) * raycaster.width),\n            Math.ceil(((1 - screenCoords.y) / 2) * raycaster.height)\n        );\n\n        if (geometry instanceof THREE.BufferGeometry) {\n            const point = new THREE.Vector3();\n            const index = geometry.index;\n            const attributes = geometry.attributes;\n            const positions = attributes.position.array;\n            if (index !== null) {\n                const indices = index.array;\n                for (let i = 0, il = indices.length; i < il; i++) {\n                    const a = indices[i];\n                    point.fromArray(positions as number[], a * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            } else {\n                for (let i = 0, l = positions.length / 3; i < l; i++) {\n                    point.fromArray(positions as number[], i * 3);\n                    const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                    if (pointInfo.pointIsOnScreen) {\n                        this.testPoint(\n                            point,\n                            pointInfo.absoluteScreenPosition!,\n                            mouseCoords,\n                            i,\n                            pointInfo.distance!,\n                            intersects\n                        );\n                    }\n                }\n            }\n        } else {\n            const vertices = geometry.vertices;\n            for (let index = 0; index < vertices.length; index++) {\n                const point = vertices[index];\n                const pointInfo = getPointInfo(point, matrixWorld, raycaster);\n                if (pointInfo.pointIsOnScreen) {\n                    this.testPoint(\n                        point,\n                        pointInfo.absoluteScreenPosition!,\n                        mouseCoords,\n                        index,\n                        pointInfo.distance!,\n                        intersects\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getPointInfo(\n    point: THREE.Vector3,\n    matrixWorld: THREE.Matrix4,\n    raycaster: PickingRaycaster\n): {\n    pointIsOnScreen: boolean;\n    absoluteScreenPosition?: THREE.Vector2;\n    distance?: number;\n} {\n    const worldPosition = point.clone();\n    worldPosition.applyMatrix4(matrixWorld);\n    const distance = worldPosition.distanceTo(raycaster.ray.origin);\n    worldPosition.project(raycaster.camera);\n    const relativeScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n    const pointIsOnScreen =\n        relativeScreenPosition.x < 1 &&\n        relativeScreenPosition.x > -1 &&\n        relativeScreenPosition.y < 1 &&\n        relativeScreenPosition.y > -1;\n    if (pointIsOnScreen) {\n        worldPosition.x = ((worldPosition.x + 1) / 2) * raycaster.width;\n        worldPosition.y = ((1 - worldPosition.y) / 2) * raycaster.height;\n        const absoluteScreenPosition = new THREE.Vector2(worldPosition.x, worldPosition.y);\n        return {\n            absoluteScreenPosition,\n            pointIsOnScreen,\n            distance\n        };\n    }\n    return {\n        pointIsOnScreen\n    };\n}\n\n/**\n * Point object that implements the raycasting of circles in screen space.\n */\nexport class Circles extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const dist = Math.sqrt(dx * dx + dy * dy);\n        const radius = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (dist <= radius) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n\n/**\n * Point object that implements the raycasting of squares in screen space.\n */\nexport class Squares extends MapViewPoints {\n    /** @override */\n    testPoint(\n        point: THREE.Vector3,\n        screenPosition: THREE.Vector2,\n        pickCoordinates: THREE.Vector2,\n        index: number,\n        distance: number,\n        intersects: THREE.Intersection[]\n    ) {\n        const dx = screenPosition.x - pickCoordinates.x;\n        const dy = screenPosition.y - pickCoordinates.y;\n        const halfSize = (this.material as THREE.PointsMaterial).size / 2;\n\n        if (Math.abs(dx) <= halfSize && Math.abs(dy) <= halfSize) {\n            intersects.push({\n                point,\n                distance,\n                index,\n                object: this\n            });\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Usage in Modules:\n *\n * import { DebugContext, debugContext } from \"../lib/DebugContext\";\n *\n * Declare a debug option:\n * debugContext.settings.setOption(\"MY_DBG_OPT\", \"default\");\n *\n * Access an option:\n * if (debugContext.settings.option(\"MY_DBG_OPT\")) {\n *     ...\n * }\n *\n *\n * Access in browser console:\n *\n * window.__debugContext.settings.addEventListener(\"MY_DBG_OPT\", function(event) {\n *  console.log(\"name:\", event.type, \"value:\", event.value)});\n *\n */\n\n/**\n * Allows access to the global `window` object here. The constructor of [[DebugContext]] adds the\n * instance to `window`, so it is available from the browser console.\n */\n\ninterface DebugInfo {\n    __debugContext?: DebugContext;\n}\n\nconst isNode = typeof window === \"undefined\";\n\n/**\n * A `DebugOption` is a pair that consists of an option value and an array of change listeners.\n * Listeners are called up when setting the option's value.\n */\nclass DebugOption extends THREE.EventDispatcher {\n    static SET_EVENT_TYPE: string = \"set\";\n\n    /**\n     * Constructs the `DebugOption`.\n     *\n     * @param value The value of the option.\n     */\n    constructor(public value: any) {\n        super();\n    }\n\n    /**\n     * Updates the value of a given option.\n     *\n     * @param value The new value for the option.\n     * @param name The name of the option to set.\n     */\n    set(value: any, name: string) {\n        this.value = value;\n        this.dispatchEvent({ type: DebugOption.SET_EVENT_TYPE, name, value });\n    }\n}\n\n/**\n * Maintains a map of [[DebugOption]]s. You can add listeners to debug options by passing their\n * names.\n */\nexport class DebugContext {\n    private m_optionsMap: Map<string, DebugOption>;\n\n    /**\n     * Builds a `DebugContext`.\n     */\n    constructor() {\n        this.m_optionsMap = new Map<string, DebugOption>();\n\n        // If we have a `window` object, we store the context in it to make it available in the\n        // console.\n        if (!isNode && typeof window !== \"undefined\" && window) {\n            const debugInfo = window as DebugInfo;\n            debugInfo.__debugContext = this;\n        }\n    }\n\n    /**\n     * Sets the value of an option. Calls change listeners of that option, even if the value has\n     * not been changed. The change listeners provided here are not called during this set\n     * operation.\n     *\n     * @param name Name of the option.\n     * @param value Value of the option.\n     */\n    setValue(name: string, value: any): void {\n        let opt = this.m_optionsMap.get(name);\n        if (!opt) {\n            opt = new DebugOption(value);\n            this.m_optionsMap.set(name, opt);\n        } else {\n            opt.set(value, name);\n        }\n    }\n\n    /**\n     * Gets the option value.\n     *\n     * @param name Name of option.\n     */\n    getValue(name: string): any {\n        const opt = this.m_optionsMap.get(name);\n        return opt ? opt.value : undefined;\n    }\n\n    /**\n     * Determines if the option is registered.\n     *\n     * @param name Name of option.\n     */\n    hasOption(name: string): boolean {\n        return this.m_optionsMap.get(name) !== undefined;\n    }\n\n    /**\n     * Adds a listener to a debug option.\n     *\n     * @param name Name of the option that requires a listener.\n     * @param listener The listener function to add.\n     */\n    addEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.addEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Checks for a listener in a debug option.\n     *\n     * @param name Name of the option to check for.\n     * @param listener The listener function to check for.\n     */\n    hasEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            return opt.hasEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Removes a listener from a debug option.\n     *\n     * @param name Name of the option from which to remove a listener.\n     * @param listener The listener function to remove.\n     */\n    removeEventListener(name: string, listener: (event: THREE.Event) => void) {\n        const opt = this.m_optionsMap.get(name);\n        if (opt) {\n            opt.removeEventListener(DebugOption.SET_EVENT_TYPE, listener);\n        } else {\n            throw Error(\"Unknown option: \" + name);\n        }\n    }\n\n    /**\n     * Provides access to the options map. This method is useful for creating an automatic\n     * browser GUI.\n     */\n    get options(): Map<string, any> {\n        return this.m_optionsMap;\n    }\n\n    /**\n     * Clears away all debug options. Currently, `THREE.EventDispatcher` does not provide an API\n     * to remove all event listeners.\n     */\n    clear() {\n        this.m_optionsMap.forEach(option => {\n            option.set(undefined, \"\");\n        });\n    }\n}\n\nexport const debugContext = new DebugContext();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Use `ColorCache` to reuse a color specified by name and save allocation as well as\n * setup time.\n *\n * Implemented as a singleton. Do not modify colors after getting them from the `ColorCache`.\n */\nexport class ColorCache {\n    /**\n     * Return instance of `ColorCache`.\n     */\n    static get instance() {\n        return this.m_instance;\n    }\n\n    private static m_instance: ColorCache = new ColorCache();\n    private m_map: Map<string, THREE.Color> = new Map();\n\n    /**\n     * Returns the color for the given `colorCode`. This function may reuse a previously generated\n     * color, so you cannot modify the contents of the color.\n     *\n     * @param colorCode ThreeJS color code or name. You must provide a valid color code or name,\n     * as this function does not do any validation.\n     */\n    getColor(colorCode: string | number): THREE.Color {\n        if (typeof colorCode === \"number\") {\n            colorCode = \"#\" + colorCode.toString(16).padStart(6, \"0\");\n        }\n\n        let color = this.m_map.get(colorCode);\n        if (color !== undefined) {\n            return color;\n        }\n        color = new THREE.Color(colorCode);\n        this.m_map.set(colorCode, color);\n        return color;\n    }\n\n    /**\n     * Returns the number of elements in the cache.\n     */\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    /**\n     * Clears the cache. Only references to the THREE.Color are removed from the cache.\n     * Consequently, clearing the cache does not cause any negative visual impact.\n     */\n    clear(): void {\n        this.m_map.clear();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isExtrudedLineTechnique,\n    isExtrudedPolygonTechnique,\n    isFillTechnique,\n    isLineMarkerTechnique,\n    isLineTechnique,\n    isPoiTechnique,\n    isSegmentsTechnique,\n    isSolidLineTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\n\n/**\n * Loads the geometry for its [[Tile]]. Derived classes allow for different loading strategies.\n */\nexport interface TileGeometryLoader {\n    /**\n     * The [[Tile]] this `TileGeometryLoader` is managing.\n     */\n    tile: Tile;\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded and the loading process is finished.\n     */\n    isFinished: boolean;\n\n    /**\n     * `True` if the basic geometry has been loaded, and the `Tile` is ready  for display.\n     */\n    basicGeometryLoaded: boolean;\n\n    /**\n     * `True` if all geometry of the `Tile` has been loaded.\n     */\n    allGeometryLoaded: boolean;\n\n    /**\n     * The kinds of geometry stored in this [[Tile]].\n\n     */\n    availableGeometryKinds: GeometryKindSet | undefined;\n\n    /**\n     * Start with or continue with loading geometry. Called repeatedly until `isFinished` is `true`.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void;\n\n    /**\n     * Dispose of any resources.\n     */\n    dispose(): void;\n\n    /**\n     * Reset the loader to its initial state and cancels any asynchronous work.\n     */\n    reset(): void;\n}\n\nexport namespace TileGeometryLoader {\n    /**\n     * Make sure that all technique have their geometryKind set, either from the theme or their\n     * default value.\n     *\n     * Also gather set of the [[GeometryKind]]s found in the techniques and return it.\n     *\n     * @param {DecodedTile} decodedTile\n     * @returns {GeometryKindSet} The set of kinds used in the decodeTile.\n     */\n    export function prepareDecodedTile(decodedTile: DecodedTile): GeometryKindSet {\n        const foundSet: GeometryKindSet = new GeometryKindSet();\n\n        for (const technique of decodedTile.techniques) {\n            let geometryKind = technique.kind;\n\n            // Set default kind based on technique.\n            if (geometryKind === undefined) {\n                geometryKind = setDefaultGeometryKind(technique);\n            }\n\n            if (Array.isArray(geometryKind)) {\n                geometryKind = new GeometryKindSet(geometryKind);\n            }\n\n            if (geometryKind instanceof Set) {\n                for (const kind of geometryKind) {\n                    foundSet.add(kind);\n                }\n            } else {\n                foundSet.add(geometryKind);\n            }\n        }\n        return foundSet;\n    }\n\n    /**\n     * Make sure that the technique has its geometryKind set, either from the theme or their default\n     * value.\n     *\n     * @param {Technique} technique\n     */\n    export function setDefaultGeometryKind(technique: Technique): GeometryKind | GeometryKindSet {\n        let geometryKind = technique.kind;\n\n        // Set default kind based on technique.\n        if (geometryKind === undefined) {\n            if (isFillTechnique(technique)) {\n                geometryKind = GeometryKind.Area;\n            } else if (\n                isLineTechnique(technique) ||\n                isSolidLineTechnique(technique) ||\n                isSegmentsTechnique(technique) ||\n                isExtrudedLineTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Line;\n            } else if (isExtrudedPolygonTechnique(technique)) {\n                geometryKind = GeometryKind.Building;\n            } else if (\n                isPoiTechnique(technique) ||\n                isLineMarkerTechnique(technique) ||\n                isTextTechnique(technique)\n            ) {\n                geometryKind = GeometryKind.Label;\n            } else {\n                geometryKind = GeometryKind.All;\n            }\n\n            technique.kind = geometryKind;\n        }\n\n        return geometryKind;\n    }\n}\n\n/**\n * Simplest implementation of a [[TileGeometryLoader]]. It loads all geometry in a single step.\n */\nexport class SimpleTileGeometryLoader implements TileGeometryLoader {\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_enabledKinds: GeometryKindSet | undefined;\n    private m_disabledKinds: GeometryKindSet | undefined;\n    private m_timeout: any;\n\n    constructor(private m_tile: Tile) {}\n\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    get geometryCreationPending(): boolean {\n        // Geometry loading not yet finished and timeout already set, but not yet processing\n        // (m_timeout !== undefined), or timeout callback already in progress\n        // (m_timeout === undefined), but decoded tile still not reset.\n        return !this.isFinished && this.m_decodedTile !== undefined;\n    }\n\n    get basicGeometryLoaded(): boolean {\n        return this.m_tile.hasGeometry;\n    }\n\n    get allGeometryLoaded(): boolean {\n        return this.m_isFinished;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareDecodedTile(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        const tile = this.tile;\n\n        // Cheap sanity check, do it first so no longer processing is needed.\n        if (this.isFinished) {\n            return;\n        }\n\n        // Check if tile should be already discarded (invisible, disposed).\n        // If the tile is not ready for display, or if it has become invisible while being loaded,\n        // for example by moving the camera, the tile is not finished and its geometry is not\n        // created. This is an optimization for fast camera movements and zooms.\n        if (this.discardNeedlessTile(tile)) {\n            return;\n        }\n\n        // Geometry kinds have changed when loading, if so reset entire loading because\n        // this geometry loader generates all geometry at once.\n        // TODO: Probably the update() interface will change soon, when phased loading support\n        // will be removed, then this code may be no longer necessary.\n        if (\n            this.geometryCreationPending &&\n            !this.compareGeometryKinds(enabledKinds, disabledKinds)\n        ) {\n            this.reset();\n        }\n\n        // First time this tile is handled, or reset has been requested.\n        // Note: Finished condition already checked above.\n        if (!this.geometryCreationPending && tile.decodedTile !== undefined) {\n            TileGeometryCreator.instance.processTechniques(tile, enabledKinds, disabledKinds);\n            this.setGeometryKinds(enabledKinds, disabledKinds);\n            this.setDecodedTile(tile.decodedTile);\n            this.prepareForRender(enabledKinds, disabledKinds);\n        }\n    }\n\n    dispose(): void {\n        this.m_decodedTile = undefined;\n        // TODO: Release other resource: availableGeometryKind, enabled/disabled sets, timeout?\n    }\n\n    reset(): void {\n        this.m_availableGeometryKinds?.clear();\n        this.m_enabledKinds?.clear();\n        this.m_disabledKinds?.clear();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    private finish() {\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n\n        this.m_decodedTile = undefined;\n        this.m_isFinished = true;\n\n        if (this.m_timeout !== undefined) {\n            clearTimeout(this.m_timeout);\n            this.m_timeout = undefined;\n        }\n    }\n\n    /**\n     * Called by [[VisibleTileSet]] to mark that [[Tile]] is visible and it should prepare geometry.\n     */\n    private prepareForRender(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ) {\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n\n        // Just a sanity check that satisfies compiler check below.\n        if (decodedTile === undefined) {\n            this.finish();\n            return;\n        }\n\n        this.m_timeout = setTimeout(() => {\n            // Reset timeout so it is untouched during processing.\n            this.m_timeout = undefined;\n\n            if (this.discardNeedlessTile(tile)) {\n                return;\n            }\n\n            const stats = PerformanceStatistics.instance;\n            let now = 0;\n            if (stats.enabled) {\n                now = PerformanceTimer.now();\n            }\n\n            const geometryCreator = TileGeometryCreator.instance;\n\n            tile.clear();\n            // Set up techniques which should be processed.\n            geometryCreator.initDecodedTile(decodedTile, enabledKinds, disabledKinds);\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            if (stats.enabled) {\n                const geometryCreationTime = PerformanceTimer.now() - now;\n                const currentFrame = stats.currentFrame;\n                currentFrame.addValue(\"geometry.geometryCreationTime\", geometryCreationTime);\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n            this.finish();\n            tile.dataSource.requestUpdate();\n        }, 0);\n    }\n\n    private discardNeedlessTile(tile: Tile): boolean {\n        // If the tile has become invisible while being loaded, for example by moving the\n        // camera, the tile is not finished and its geometry is not created. This is an\n        // optimization for fast camera movements and zooms.\n        if (!tile.isVisible) {\n            // Dispose the tile from the visible set, so it can be reloaded properly next time\n            // it is needed.\n            tile.mapView.visibleTileSet.disposeTile(tile);\n\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - invisible`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        // Tile already disposed (this may potentially happen in timeout callback).\n        else if (tile.disposed) {\n            const stats = PerformanceStatistics.instance;\n            if (stats.enabled) {\n                stats.currentFrame.addMessage(\n                    // tslint:disable-next-line: max-line-length\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} col=${tile.tileKey.column} row=${tile.tileKey.row} DISCARDED - disposed`\n                );\n            }\n            this.finish();\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Stores geometry kinds used to load decoded tile geometry.\n     *\n     * This values are stored to detect geometry kind changes during loading.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     */\n    private setGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): void {\n        if (enabledKinds !== undefined) {\n            this.m_enabledKinds = Object.assign(\n                this.m_enabledKinds ?? new GeometryKindSet(),\n                enabledKinds\n            );\n        }\n        if (disabledKinds !== undefined) {\n            this.m_disabledKinds = Object.assign(\n                this.m_disabledKinds ?? new GeometryKindSet(),\n                disabledKinds\n            );\n        }\n    }\n\n    /**\n     * Compare enabled and disabled geometry kinds with currently set.\n     *\n     * Method compares input sets with recently used geometry kinds in performance wise\n     * manner, taking special care of undefined and zero size sets.\n     *\n     * @param enabledKinds Set of geometry kinds to be displayed or undefined.\n     * @param disabledKinds Set of geometry kinds that won't be rendered.\n     * @return `true` only if sets are logically equal, meaning that undefined and empty sets\n     * may result in same geometry (techniques kind) beeing rendered.\n     */\n    private compareGeometryKinds(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        const enabledSame = this.m_enabledKinds === enabledKinds;\n        const disabledSame = this.m_disabledKinds === disabledKinds;\n        // Same references, no need to compare.\n        if (enabledSame && disabledSame) {\n            return true;\n        }\n        const enabledEmpty =\n            (this.m_enabledKinds === undefined || this.m_enabledKinds.size === 0) &&\n            (enabledKinds === undefined || enabledKinds.size === 0);\n        const disabledEmpty =\n            (this.m_disabledKinds === undefined || this.m_disabledKinds.size === 0) &&\n            (disabledKinds === undefined || disabledKinds.size === 0);\n\n        // We deal only with empty, the same or undefined sets - fast return, no need to compare.\n        if (\n            (enabledEmpty && disabledEmpty) ||\n            (enabledSame && disabledEmpty) ||\n            (disabledSame && enabledEmpty)\n        ) {\n            return true;\n        }\n        // It is enough that one the the sets are different, try to spot difference otherwise\n        // return true. Compare only non-empty sets.\n        if (!enabledEmpty) {\n            // If one set undefined then other must be non-empty, for sure different.\n            if (enabledKinds === undefined || this.m_enabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!enabledKinds.has(this.m_enabledKinds)) {\n                return false;\n            }\n        }\n        if (!disabledEmpty) {\n            // One set defined and non-empty other undefined, for sure different.\n            if (disabledKinds === undefined || this.m_disabledKinds === undefined) {\n                return false;\n            }\n            // Both defined and non-empty, compare the sets.\n            else if (!disabledKinds.has(this.m_disabledKinds)) {\n                return false;\n            }\n        }\n        // No difference found.\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITileDecoder } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedDecoder } from \"./WorkerBasedDecoder\";\n\n/**\n * Default concurrent decoder helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedDecoder]]s for data sources.\n */\nexport class ConcurrentDecoderFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and decoders.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount?: number = undefined;\n\n    /**\n     * Returns a [[WorkerBasedDecoder]] instance.\n     *\n     * @param decoderServiceType The name of the decoder service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTileDecoder(\n        decoderServiceType: string,\n        scriptUrl?: string,\n        workerCount?: number\n    ): ITileDecoder {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedDecoder(workerSet, decoderServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue, MathUtils } from \"@here/harp-utils\";\n\n/**\n * Copyright info attached to data displayed on map. Provided by [[DataSource]] and attached\n * to [[Tile]]s.\n *\n * In most cases, an application should display this information on [[MapView]] to conform with\n * licencing terms of its map data providers.\n *\n * @see [[CopyrightElementHandler]]\n */\nexport interface CopyrightInfo {\n    /**\n     * Unique id of the copyright holder.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * Examples:\n     *\n     *  * `openstreetmap.org` - for data originating from OpenStreetMap project\n     *  * `naturalearthdata.com` - for data originating from Natural Earth dataset\n     *\n     * Note: [[DataSource]] may return [[CopyrightInfo]] with only `id`, thus defining only holder\n     * of copyright, however, valid attribution may require proper `label` and `link`.\n     *\n     * Entries with same `id` are deduplicated by [[CopyrightInfo.mergeArrays]].\n     */\n    id: string;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     *\n     * If undefined, `id` is used as text label.\n     * Set it to empty string to not render a copyright info.\n     */\n    label?: string;\n\n    /**\n     * Optional URL pointing to further copyright information.\n     */\n    link?: string;\n\n    /**\n     * Optional, copyright notice year.\n     */\n    year?: number;\n}\n\nexport namespace CopyrightInfo {\n    /**\n     * Merge [[CopyrightInfo]] arrays, removing duplicates.\n     *\n     * `id` and `label` are considered keys in deduplication algorithm.\n     *\n     * @param sources non-duplicate elements from this array are added to `target`\n     * @returns merge of all copyright infos in `sources`\n     */\n    export function mergeArrays(a: CopyrightInfo[], b?: CopyrightInfo[]): CopyrightInfo[] {\n        const result: CopyrightInfo[] = [];\n        for (const source of [a, b]) {\n            if (source === undefined) {\n                continue;\n            }\n\n            for (const sourceInfo of source) {\n                const existingInfo = result.find(\n                    findItem =>\n                        findItem.id === sourceInfo.id ||\n                        (findItem.label !== undefined && findItem.label === sourceInfo.label)\n                );\n\n                if (existingInfo === undefined) {\n                    result.push({ ...sourceInfo });\n                } else {\n                    existingInfo.year = MathUtils.max2(sourceInfo.year, existingInfo.year);\n                    existingInfo.label = getOptionValue(sourceInfo.label, existingInfo.label);\n                    existingInfo.link = getOptionValue(sourceInfo.link, existingInfo.link);\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Format copyright information to a HTML string that can be displayed in the UI.\n     *\n     * * Empty list returns empty string.\n     * * Entries with empty (but defined) labels are skipped.\n     *\n     * @param copyrightInfo Array of copyrights to format.\n     */\n    export function formatAsHtml(copyrightInfo: CopyrightInfo[]): string {\n        if (copyrightInfo.length === 0) {\n            return \"\";\n        }\n\n        const filtered = copyrightInfo.filter(entry => entry.label !== \"\");\n        if (filtered.length === 0) {\n            return \"\";\n        }\n\n        return (\n            \"© \" +\n            filtered\n                .map(entry => {\n                    const label = entry.label ?? entry.id;\n                    const text = entry.year !== undefined ? `${entry.year} ${label}` : label;\n                    const link = entry.link;\n                    return link\n                        ? `<a href=\"${link}\" target=\"_blank\" rel=\"noreferrer noopener\">${text}</a>`\n                        : `${text}`;\n                })\n                .join(\", \")\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    HighPrecisionLineMaterial,\n    HighPrecisionPointMaterial,\n    isHighPrecisionPointMaterial\n} from \"@here/harp-materials\";\nimport {\n    BufferAttribute,\n    BufferGeometry,\n    Camera,\n    Color,\n    Float32BufferAttribute,\n    InterleavedBuffer,\n    InterleavedBufferAttribute,\n    Matrix4,\n    PointsMaterialParameters,\n    ShaderMaterial,\n    ShaderMaterialParameters,\n    Vector3\n} from \"three\";\n\nimport * as HPL from \"./HighPrecisionLines\";\nimport * as HPP from \"./HighPrecisionPoints\";\nimport { triangulateLine } from \"./TriangulateLines\";\n\nexport namespace HighPrecisionUtils {\n    /**\n     * Extract the `float` parts of all vector members, Making this a `Vector3` of `float`.\n     * precision.\n     *\n     * @param v\n     */\n    export function doubleToFloatVec(v: Vector3): Vector3 {\n        return new Vector3(Math.fround(v.x), Math.fround(v.y), Math.fround(v.z));\n    }\n\n    /**\n     * Convert a `Vector3` to `float` (in place!) Returns the minor float vector, which is the\n     * difference of the double elements and their float counterparts.\n     *\n     * @param v Vector3 to convert to float IN-PLACE!\n     */\n    export function makeFloatVec(v: Vector3): Vector3 {\n        const majorX = Math.fround(v.x);\n        const majorY = Math.fround(v.y);\n        const majorZ = Math.fround(v.z);\n\n        const minorVec = new Vector3(v.x - majorX, v.y - majorY, v.z - majorZ);\n\n        v.x = Math.fround(majorX);\n        v.y = Math.fround(majorY);\n        v.z = Math.fround(majorZ);\n\n        return minorVec;\n    }\n\n    /**\n     * Describes addtional postion data needed to render high-precision vertices. Created by\n     * [[createHighPrecisionCameraPos]].\n     */\n    export interface HighPrecisionCameraInfo {\n        /**\n         * View Projection matrix of this high-precision camera.\n         */\n        viewProjection: Matrix4;\n\n        /**\n         * Low-order bits of the high-precision camera's position.\n         */\n        eyePosLo: Vector3;\n\n        /**\n         * High-order bits of the high-precision camera's position.\n         */\n        eyePosHi: Vector3;\n    }\n\n    /**\n     * Describes different properties used when creating a [[HighPrecisionLine]] or\n     * a [[HighPrecisionWireFrameLine]].\n     */\n    export interface HighPrecisionLineParams extends ShaderMaterialParameters {\n        /**\n         * Color of the rendered line.\n         */\n        color?: number | string | Color;\n\n        /**\n         * Width of the rendered line (specified in world units).\n         */\n        lineWidth?: number;\n\n        /**\n         * Add rounded caps to the extremes of the line if set to `true`.\n         */\n        addCircles?: boolean;\n\n        /**\n         * Opacity of the rendered line.\n         */\n        opacity?: number;\n\n        /**\n         * Renders a wireframe line if set to `true`.\n         */\n        wireFrame?: boolean;\n    }\n\n    /**\n     * Calculate high-precision camera position used in vertex shader of high-precision materials.\n     *\n     * @param camera Camera used to get the high-precision position.\n     * @param objectInverseWorldMatrix Inverse World Matrix of the rendered [[HighPrecisionObject]].\n     */\n    export function createHighPrecisionCameraPos(\n        camera: Camera,\n        objectInverseWorldMatrix: Matrix4\n    ): HighPrecisionCameraInfo {\n        const _projScreenMatrix = new Matrix4().copy(camera.projectionMatrix);\n        const mvp = _projScreenMatrix.multiply(camera.matrixWorldInverse);\n        const eyePos = new Vector3(0, 0, 0).applyMatrix4(objectInverseWorldMatrix);\n\n        // split the double float vector into hi and lo parts\n        const eyePosFloat = doubleToFloatVec(eyePos);\n\n        const eyePosLo = doubleToFloatVec(eyePos.sub(eyePosFloat));\n\n        return {\n            viewProjection: mvp,\n            eyePosHi: eyePosFloat,\n            eyePosLo\n        };\n    }\n\n    /**\n     * Updates the high-precision uniform data of a material used to render a\n     * [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] used for rendering.\n     * @param camera Camera used to get the high-precision position.\n     * @param shaderMaterial Material which uniforms will be updated.\n     */\n    export function updateHpUniforms(\n        object: HPL.HighPrecisionObject,\n        camera: Camera,\n        shaderMaterial: ShaderMaterial\n    ): void {\n        const highPrecisionCameraInfo = createHighPrecisionCameraPos(\n            camera,\n            object.matrixWorldInverse\n        );\n        const mvp = highPrecisionCameraInfo.viewProjection;\n\n        if (shaderMaterial !== undefined && shaderMaterial.isMaterial) {\n            if (\n                shaderMaterial.uniforms &&\n                shaderMaterial.uniforms.u_mvp &&\n                shaderMaterial.uniforms.u_eyepos &&\n                shaderMaterial.uniforms.u_eyepos_lowpart\n            ) {\n                shaderMaterial.uniforms.u_mvp.value = new Float32Array(mvp.elements);\n                shaderMaterial.uniforms.u_eyepos.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosHi.toArray()\n                );\n                shaderMaterial.uniforms.u_eyepos_lowpart.value = new Float32Array(\n                    highPrecisionCameraInfo.eyePosLo.toArray()\n                );\n            } else {\n                throw Error(\"High pecision material has missing uniforms\");\n            }\n        } else {\n            throw Error(\"High pecision line has no high precision material\");\n        }\n    }\n\n    /**\n     * Assembles the necessary attribute buffers needed to render [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     */\n    export function createAttributes(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): {\n        positionHigh: BufferAttribute;\n        positionLow: BufferAttribute;\n    } {\n        if (positions.length > 0) {\n            const v = positions[0];\n\n            if (v === undefined || v === null) {\n                throw Error(\"Empty element in positions\");\n            }\n\n            const positionVec = new Array<number>();\n            const positionVecLow = new Array<number>();\n\n            const addHPValue = (...values: number[]) => {\n                for (const value of values) {\n                    const major = Math.fround(value);\n                    positionVecLow.push(value - major);\n                    positionVec.push(major);\n                }\n            };\n\n            const addHPVector = (vec: Vector3) => {\n                addHPValue(vec.x, vec.y, vec.z);\n            };\n\n            const vAny = v as any;\n            if (vAny.z !== undefined) {\n                (positions as Vector3[]).forEach(vec => {\n                    addHPVector(vec);\n                });\n            } else {\n                if (positionVec.length % 3 !== 0) {\n                    throw Error(\"Positions must be 3D, not 2D\");\n                }\n                (positions as number[]).forEach((n: number): void => {\n                    addHPValue(n);\n                });\n            }\n\n            return {\n                positionHigh: new Float32BufferAttribute(positionVec, 3),\n                positionLow: new Float32BufferAttribute(positionVecLow, 3)\n            };\n        } else {\n            return {\n                positionHigh: new Float32BufferAttribute([], 3),\n                positionLow: new Float32BufferAttribute([], 3)\n            };\n        }\n    }\n\n    /**\n     * Assembles an interleaved buffer containing the position attribute data for a\n     * [[HighPrecisionObject]].\n     *\n     * @param positions Array of positions.\n     * @param stride Stride of the elements in the `positions` array.\n     * @param positionOffset Offset into the `positions` array.\n     */\n    export function addInterleavedAttributes3(\n        positions: ArrayLike<number>,\n        stride: number,\n        positionOffset = 0\n    ): ArrayLike<number> {\n        const newPositions = new Array<number>();\n\n        const end = positions.length;\n\n        for (let i = 0; i < end; i += stride) {\n            for (let j = 0; j < positionOffset; j++) {\n                newPositions.push(positions[i + j]);\n            }\n\n            const x = positions[i + positionOffset];\n            const y = positions[i + positionOffset + 1];\n            const z = positions[i + positionOffset + 2];\n            const majorX = Math.fround(x);\n            const minorX = x - majorX;\n            const majorY = Math.fround(y);\n            const minorY = y - majorY;\n            const majorZ = Math.fround(z);\n            const minorZ = z - majorZ;\n\n            // insert values in interleaved buffer\n            newPositions.push(majorX, majorY, majorZ, minorX, minorY, minorZ);\n\n            for (let j = positionOffset + 3; j < stride; j++) {\n                newPositions.push(positions[i + j]);\n            }\n        }\n\n        return newPositions;\n    }\n\n    /**\n     * Adds the high-precision position attribute data to a [[HighPrecisionObject]].\n     *\n     * @param object [[HighPrecisionObject]] which position attribute will be set.\n     * @param positions Array of positions.\n     */\n    export function setPositions(\n        object: HPL.HighPrecisionObject,\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): number {\n        const attributes = createAttributes(positions);\n\n        object.bufferGeometry.setAttribute(\"position\", attributes.positionHigh);\n        object.bufferGeometry.setAttribute(\"positionLow\", attributes.positionLow);\n\n        return attributes.positionHigh.itemSize;\n    }\n\n    /**\n     * Convert positions from `Array<Vector3>` to `Array<number>`.\n     *\n     * @param positions Array of positions.\n     */\n    export function convertPositions(\n        positions: ArrayLike<number> | ArrayLike<Vector3>\n    ): { positions: number[] } {\n        if (positions.length <= 0) {\n            return { positions: [] };\n        }\n\n        const v = positions[0];\n\n        if (v === undefined || v === null) {\n            throw Error(\"Empty element in positions\");\n        }\n\n        const vAny = v as any;\n        if (vAny.y === undefined && vAny.z === undefined) {\n            return { positions: positions as number[] };\n        }\n\n        const returnPositions = new Array<number>();\n        (positions as Vector3[]).forEach(vec => {\n            returnPositions.push(vec.x, vec.y, vec.z);\n        });\n\n        return { positions: returnPositions };\n    }\n\n    /**\n     * Creates a [[HighPrecisionLine]] or [[HighPrecisionWireFrameLine]] object.\n     *\n     * @param linePositions Array of 2D/3D positions.\n     * @param params Parameters used to configure the created [[HighPrecisionObject]].\n     */\n    export function createLine(\n        linePositions: ArrayLike<number>,\n        params: HighPrecisionLineParams\n    ): HPL.HighPrecisionLine | HPL.HighPrecisionWireFrameLine {\n        const lineWidth = params.lineWidth !== undefined ? params.lineWidth : 5;\n        const addCircles = params.addCircles !== undefined ? params.addCircles : false;\n        const wireFrame = params.wireFrame !== undefined ? params.wireFrame : false;\n\n        const positions: number[] = [];\n        const indices: number[] = [];\n\n        triangulateLine(linePositions, lineWidth, positions, indices, addCircles);\n\n        const hpLineGeometry = new BufferGeometry();\n        const hpPositions = addInterleavedAttributes3(positions, 3);\n        const buffer = new InterleavedBuffer(new Float32Array(hpPositions), 6);\n\n        const positionAttribute = new InterleavedBufferAttribute(buffer, 3, 0, false);\n        const positionLowAttribute = new InterleavedBufferAttribute(buffer, 3, 3, false);\n\n        hpLineGeometry.setAttribute(\"position\", positionAttribute);\n        hpLineGeometry.setAttribute(\"positionLow\", positionLowAttribute);\n        hpLineGeometry.setIndex(new BufferAttribute(new Uint32Array(indices), 1));\n\n        const hpSolidMaterial = new HighPrecisionLineMaterial(params);\n\n        const lineObject = wireFrame\n            ? new HPL.HighPrecisionWireFrameLine(hpLineGeometry, hpSolidMaterial)\n            : new HPL.HighPrecisionLine(hpLineGeometry, hpSolidMaterial);\n\n        lineObject.setupForRendering();\n\n        return lineObject;\n    }\n\n    /**\n     * Creates a group of [[HighPrecisionPoints]].\n     *\n     * @param pointPositions Array of 2D/3D positions.\n     * @param materialParameters Parameters used to configure the material used to render the\n     * created [[HighPrecisionPoints]].\n     */\n    export function createPoints(\n        pointPositions: ArrayLike<number>,\n        materialParameters?: PointsMaterialParameters | HighPrecisionPointMaterial\n    ): HPP.HighPrecisionPoints {\n        const indices: number[] = [];\n\n        // tslint:disable-next-line:prefer-for-of - pointPositions doesn't have iterable interface\n        for (let i = 0; i < pointPositions.length; i++) {\n            indices.push(indices.length / 3);\n        }\n\n        const hpPointsGeometry = new BufferGeometry();\n\n        const hpPointsMaterial = isHighPrecisionPointMaterial(materialParameters)\n            ? materialParameters\n            : new HighPrecisionPointMaterial(materialParameters);\n\n        const pointsObject = new HPP.HighPrecisionPoints(hpPointsGeometry, hpPointsMaterial);\n\n        setPositions(pointsObject, pointPositions);\n\n        pointsObject.setupForRendering();\n\n        return pointsObject;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Value } from \"@here/harp-datasource-protocol/index-decoder\";\n\n/**\n * Feature Modifier ids to choose which OmvFeatureModifer should be used in OmvDecoder.\n */\nexport enum FeatureModifierId {\n    /**\n     * Identifier to use the OmvTomTomFeatureModifier in the OmvDecoder.\n     */\n    tomTom\n}\n\n/**\n * Definition of a filter.\n */\nexport interface OmvFilterString {\n    /**  String value */\n    value: string;\n    /** Match condition */\n    match: OmvFilterString.StringMatch;\n}\n\n/**\n * Adding the match condition type and the matching function to the namespace of `OmvFilterString`.\n */\nexport namespace OmvFilterString {\n    /**\n     * Match condition.\n     */\n    export enum StringMatch {\n        /** Matches any. */\n        Any,\n        /** Exact match. */\n        Match,\n        /** Matches if a test string starts with a filter string. */\n        StartsWith,\n        /** Matches if a test string contains a filter string. */\n        Contains,\n        /** Matches if a test string ends with a filter string. */\n        EndsWith\n    }\n\n    /**\n     * Check for a string against a filter.\n     *\n     * @param str The string to check against a filter.\n     * @param filterString The filter containing the match condition.\n     * @returns `true` if the match condition is satisfied.\n     */\n    export function matchString(str: string, filterString: OmvFilterString): boolean {\n        switch (filterString.match) {\n            case OmvFilterString.StringMatch.Any:\n                return true;\n            case OmvFilterString.StringMatch.Match:\n                return str === filterString.value;\n            case OmvFilterString.StringMatch.StartsWith:\n                return filterString.value.startsWith(str);\n            case OmvFilterString.StringMatch.EndsWith:\n                return filterString.value.endsWith(str);\n            default:\n                return str.indexOf(filterString.value) >= 0;\n        }\n    }\n}\n\n/**\n * Definition of a filter for a feature attribute\n */\nexport interface OmvFilterFeatureAttribute {\n    key: string;\n    value: Value;\n}\n\nexport enum OmvGeometryType {\n    UNKNOWN = 0,\n    POINT = 1,\n    LINESTRING = 2,\n    POLYGON = 3\n}\n\n/**\n * Internal type of a layer filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvLayerFilterDescription {\n    name: OmvFilterString;\n    minLevel: number;\n    maxLevel: number;\n}\n\n/**\n * Internal type of a single filter description, Should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFilterDescription {\n    layerName: OmvFilterString;\n    geometryTypes?: OmvGeometryType[];\n    classes?: OmvFilterString[];\n    minLevel: number;\n    maxLevel: number;\n    featureAttribute?: OmvFilterFeatureAttribute;\n}\n\n/**\n * Internal type of a complete [[OmvFeatureFilter]] description, should not be publicly available.\n *\n * @hidden\n */\nexport interface OmvFeatureFilterDescription {\n    processLayersDefault: boolean;\n    processPointsDefault: boolean;\n    processLinesDefault: boolean;\n    processPolygonsDefault: boolean;\n\n    layersToProcess: OmvLayerFilterDescription[];\n    layersToIgnore: OmvLayerFilterDescription[];\n    pointsToProcess: OmvFilterDescription[];\n    pointsToIgnore: OmvFilterDescription[];\n    linesToProcess: OmvFilterDescription[];\n    linesToIgnore: OmvFilterDescription[];\n    polygonsToProcess: OmvFilterDescription[];\n    polygonsToIgnore: OmvFilterDescription[];\n\n    // enabledKinds and disabledKinds\n    kindsToProcess: string[];\n    kindsToIgnore: string[];\n}\n\n/**\n * Internal interface for options passed from the [[OmvDataSource]] to the decoder.\n *\n * @hidden\n */\nexport interface OmvDecoderOptions {\n    /**\n     * If true, features that have no technique in the theme will be printed to the console (can be\n     * excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * Gather feature attributes from [[OmvData]]. Defaults to false.\n     */\n    gatherFeatureAttributes?: boolean;\n    createTileInfo?: boolean;\n    gatherRoadSegments?: boolean;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -2.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * If not set to `false` very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter which can be safely passed down to the web workers.\n     * It has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to\n     * guarantee the correctness).\n     */\n    filterDescription?: OmvFeatureFilterDescription | null;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    enableElevationOverlay?: boolean;\n}\n\n/**\n * Default OMV tile decoder service type.\n *\n * Used for requesting decoder services using [[WorkerServiceManager]].\n */\nexport const OMV_TILE_DECODER_SERVICE_TYPE = \"omv-tile-decoder\";\n\n/**\n * Default OMV tiler service type.\n *\n * Used for requesting tiler services using [[WorkerServiceManager]].\n */\nexport const OMV_TILER_SERVICE_TYPE = \"omv-tiler\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, Tile } from \"@here/harp-mapview\";\n\nexport class OmvTile extends Tile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `GeoCoordinates` like interface.\n */\nexport interface GeoCoordinatesLike {\n    /** The latitude in degrees. */\n    latitude: number;\n\n    /** The longitude in degrees. */\n    longitude: number;\n\n    /** The optional altitude in meters. */\n    altitude?: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[GeoCoordinatesLike]] data interface.\n */\nexport function isGeoCoordinatesLike(object: any): object is GeoCoordinatesLike {\n    return (\n        object &&\n        typeof object.latitude === \"number\" &&\n        typeof object.longitude === \"number\" &&\n        (typeof object.altitude === \"number\" || typeof object.altitude === \"undefined\")\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * An [[Array]] following the order longitude, latitude, altitude.\n */\nexport type GeoPointLike = [number, number, number?];\n\n/**\n * Type guard to assert that `object` conforms to [[GeoPointLike]] interface.\n */\nexport function isGeoPointLike(geoPoint: any): geoPoint is GeoPointLike {\n    if (Array.isArray(geoPoint)) {\n        const [longitude, latitude, altitude] = geoPoint;\n        return (\n            typeof longitude === \"number\" &&\n            typeof latitude === \"number\" &&\n            (altitude === undefined || typeof altitude === \"number\")\n        );\n    }\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Represents an object with `LatLng` like interface.\n */\nexport interface LatLngLike {\n    /** The latitude in degrees. */\n    lat: number;\n\n    /** The longitude in degrees. */\n    lng: number;\n}\n\n/**\n * Type guard to assert that `object` conforms to [[LatLngLike]] interface.\n */\nexport function isLatLngLike(object: any): object is LatLngLike {\n    return object && typeof object.lat === \"number\" && typeof object.lng === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass EquirectangularProjection extends Projection {\n    static geoToWorldScale: number = 1.0 / (2.0 * Math.PI);\n    static worldToGeoScale: number = (2.0 * Math.PI) / 1.0;\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = 0.0;\n        result.min.y = 0.0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale / 2;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (result === undefined) {\n            /*\n             * The following tslint:disable is due to the fact that the [[WorldCoordinates]]\n             * might be a concrete class which is not available at runtime.\n             * Consider the following example:\n             *\n             *  const x: THREE.Vector3 = new THREE.Vector3(0,0,0);\n             *  const result = EquirectangularProjection.projectPoint<THREE.Vector3>(x);\n             *\n             * Note: type of `result` is Vector3Like and not as expected: THREE.Vector3!\n             */\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x =\n            (THREE.Math.degToRad(geoPoint.longitude) + Math.PI) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.y =\n            (THREE.Math.degToRad(geoPoint.latitude) + Math.PI * 0.5) *\n            EquirectangularProjection.geoToWorldScale *\n            this.unitScale;\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(\n            (worldPoint.y * EquirectangularProjection.worldToGeoScale) / this.unitScale -\n                Math.PI * 0.5,\n            (worldPoint.x * EquirectangularProjection.worldToGeoScale) / this.unitScale - Math.PI,\n            worldPoint.z\n        );\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const worldCenter = this.projectPoint(\n            new GeoCoordinates(geoBox.center.latitude, geoBox.center.longitude, 0)\n        );\n        const { latitudeSpanInRadians, longitudeSpanInRadians, altitudeSpan } = geoBox;\n        const sizeX = longitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        const sizeY = latitudeSpanInRadians * EquirectangularProjection.geoToWorldScale;\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = worldCenter.x - sizeX * 0.5 * this.unitScale;\n            result.min.y = worldCenter.y - sizeY * 0.5 * this.unitScale;\n            result.max.x = worldCenter.x + sizeX * 0.5 * this.unitScale;\n            result.max.y = worldCenter.y + sizeY * 0.5 * this.unitScale;\n            if (altitudeSpan !== undefined) {\n                result.min.z = worldCenter.z - altitudeSpan * 0.5;\n                result.max.z = worldCenter.z + altitudeSpan * 0.5;\n            } else {\n                result.min.z = 0;\n                result.max.z = 0;\n            }\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = worldCenter.x;\n            result.position.y = worldCenter.y;\n            result.position.z = worldCenter.z;\n            result.extents.x = sizeX * 0.5 * this.unitScale;\n            result.extents.y = sizeY * 0.5 * this.unitScale;\n            result.extents.z = Math.max(Number.EPSILON, (altitudeSpan || 0) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to unit coordinates and vice\n * versa.\n */\nexport const normalizedEquirectangularProjection: Projection = new EquirectangularProjection(1);\n\n/**\n * Equirectangular [[Projection]] used to convert geo coordinates to world coordinates and vice\n * versa.\n */\nexport const equirectangularProjection: Projection = new EquirectangularProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\n/**\n *\n * https://en.wikipedia.org/wiki/Transverse_Mercator_projection\n * http://mathworld.wolfram.com/MercatorProjection.html\n *\n */\nclass TransverseMercatorProjection extends Projection {\n    /**\n     * Like in regular Mercator projection, there are two points on sphere\n     * with radius about 5 degrees, that is out of projected space.\n     *\n     *\n     * in regular Mercator these points are:\n     *     (90, any), (-90, any)\n     *\n     * and in transverse Mercator:\n     *     (0, 90), (0, -90)\n     *\n     * So, in transverse we need to compute distnce to poles, and clamp if\n     * radius is exceeded\n     */\n    static clampGeoPoint(geoPoint: GeoCoordinatesLike, _unitScale: number) {\n        const lat = geoPoint.latitude;\n        const lon = geoPoint.longitude;\n\n        const r = TransverseMercatorUtils.POLE_RADIUS;\n        const rsq = TransverseMercatorUtils.POLE_RADIUS_SQ;\n\n        const nearestQuarter = Math.round(lon / 90);\n        const deltaLon = nearestQuarter * 90 - lon;\n        if (nearestQuarter % 2 === 0 || Math.abs(deltaLon) > r) {\n            return geoPoint;\n        }\n\n        const deltaLat = lat - 0;\n        const distanceToPoleSq = deltaLon * deltaLon + deltaLat * deltaLat;\n        if (distanceToPoleSq < rsq) {\n            const distanceToPole = Math.sqrt(distanceToPoleSq);\n            const scale = (r - distanceToPole) / distanceToPole;\n            // const quarter = ((nearestQuarter % 4) + 4) % 4;\n            // const dir = quarter === 1 ? -1 : quarter === 3 ? 1 : 0;\n            const dir = 1;\n            const offsetLon = deltaLon === 0 && deltaLat === 0 ? r * dir : deltaLon;\n            return new GeoCoordinates(lat + deltaLat * scale, lon + offsetLon * scale);\n        }\n\n        return geoPoint;\n    }\n\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    private m_phi0: number = 0;\n    private m_lambda0: number = 0;\n\n    constructor(readonly unitScale: number) {\n        super(unitScale);\n    }\n\n    /** @override */\n    getScaleFactor(worldPoint: Vector3Like): number {\n        return Math.cosh((worldPoint.x / this.unitScale - 0.5) * 2 * Math.PI);\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = 0;\n        result.min.y = 0;\n        result.min.z = minAltitude;\n        result.max.x = this.unitScale;\n        result.max.y = this.unitScale;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n\n        const clamped = TransverseMercatorProjection.clampGeoPoint(geoPoint, this.unitScale);\n        const normalLon = clamped.longitude / 360 + 0.5;\n        const offset = normalLon === 1 ? 0 : Math.floor(normalLon);\n        const phi = MathUtils.degToRad(clamped.latitude);\n        const lambda = MathUtils.degToRad(clamped.longitude - offset * 360) - this.m_lambda0;\n\n        const B = Math.cos(phi) * Math.sin(lambda);\n        // result.x = 1/2 * Math.log((1 + B) / (1 - B));\n        result.x = Math.atanh(B);\n        result.y = Math.atan2(Math.tan(phi), Math.cos(lambda)) - this.m_phi0;\n\n        const outScale = 0.5 / Math.PI;\n        result.x = this.unitScale * (MathUtils.clamp(result.x * outScale + 0.5, 0, 1) + offset);\n        result.y = this.unitScale * MathUtils.clamp(result.y * outScale + 0.5, 0, 1);\n\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const tau = Math.PI * 2;\n        const nx = worldPoint.x / this.unitScale;\n        const ny = worldPoint.y / this.unitScale;\n        const offset = nx === 1 ? 0 : Math.floor(nx);\n        const x = tau * (nx - 0.5 - offset);\n        const y = tau * (ny - 0.5);\n        const z = worldPoint.z || 0;\n\n        const D = y + this.m_phi0;\n\n        const phi = Math.asin(Math.sin(D) / Math.cosh(x));\n        const lambda = this.m_lambda0 + Math.atan2(Math.sinh(x), Math.cos(D)) + offset * tau;\n\n        const geoPoint = GeoCoordinates.fromRadians(phi, lambda, z);\n        return geoPoint;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        const { north, south, east, west } = geoBox;\n\n        const pointsToCheck = [\n            geoBox.center,\n            geoBox.northEast,\n            geoBox.southWest,\n            new GeoCoordinates(south, east),\n            new GeoCoordinates(north, west)\n        ];\n\n        const E = TransverseMercatorUtils.POLE_EDGE_DEG;\n\n        const containsWestCut = west < -90 && east > -90;\n        const containsEastCut = west < 90 && east > 90;\n        const containsCenterX = west < 0 && east > 0;\n        const containsCenterY = west < E && east > -E && north > 0 && south < 0;\n\n        if (containsWestCut) {\n            pointsToCheck.push(new GeoCoordinates(north, -90));\n            pointsToCheck.push(new GeoCoordinates(south, -90));\n        }\n\n        if (containsEastCut) {\n            pointsToCheck.push(new GeoCoordinates(north, 90));\n            pointsToCheck.push(new GeoCoordinates(south, 90));\n        }\n\n        if (containsCenterX) {\n            pointsToCheck.push(new GeoCoordinates(north, 0));\n            pointsToCheck.push(new GeoCoordinates(south, 0));\n        }\n\n        if (containsCenterY) {\n            pointsToCheck.push(new GeoCoordinates(0, west));\n            pointsToCheck.push(new GeoCoordinates(0, east));\n        }\n\n        TransverseMercatorUtils.alignLatitude(pointsToCheck, pointsToCheck[0]);\n\n        const projected = pointsToCheck.map(p => this.projectPoint(p));\n        const vx = projected.map(p => p.x);\n        const vy = projected.map(p => p.y);\n        const vz = projected.map(p => p.z);\n\n        const minX = Math.min(...vx);\n        const minY = Math.min(...vy);\n        const minZ = Math.min(...vz);\n        const maxX = Math.max(...vx);\n        const maxY = Math.max(...vy);\n        const maxZ = Math.max(...vz);\n\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        if (isBox3Like(result)) {\n            result.min.x = minX;\n            result.min.y = minY;\n            result.min.z = minZ;\n            result.max.x = maxX;\n            result.max.y = maxY;\n            result.max.z = maxZ;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (minX + maxX) / 2;\n            result.position.y = (minY + maxY) / 2;\n            result.position.z = (minZ + maxZ) / 2;\n            result.extents.x = (maxX - minX) / 2;\n            result.extents.y = (maxY - minY) / 2;\n            result.extents.z = (maxZ - minZ) / 2;\n        } else {\n            throw new Error(\"invalid bounding box\");\n        }\n        return result;\n    }\n\n    /**\n     * There are 8 sub-regions on entire projection space\n     * where both longitude and latitude preserve direction.\n     * If bounding box hits more than one region, it should be splitted\n     * into sub-boxes by regions, (un)projected and then united again.\n     *\n     *\n     * directions in form [latitude / longitude]:\n     *    1 ┌─────────|─────────┐\n     *      │ dr / dl | dl / ul │\n     * 0.75 ----------|----------\n     *      │ ur / dr | ul / ur │\n     * 0.5  ----------|----------\n     *      │ ul / ur | ur / dr │\n     * 0.25 ----------|----------\n     *      │ dl / ul | dr / dl │\n     *      └─────────|─────────┘\n     *     0         0.5        1\n     *     @override\n     */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const s = this.unitScale;\n\n        const min = worldBox.min;\n        const max = worldBox.max;\n        const pointsToCheck = [\n            { x: (min.x + max.x) / 2, y: (min.y + max.y) / 2, z: 0 },\n            min,\n            max,\n            { x: min.x, y: max.y, z: 0 },\n            { x: max.x, y: min.y, z: 0 }\n        ];\n\n        const center = 0.5 * s;\n        const lowerQ = 0.25 * s;\n        const upperQ = 0.75 * s;\n\n        const containsCenterX = min.x < center && max.x > center;\n        const containsCenterY = min.y < center && max.y > center;\n        const containsLowerQY = min.y < lowerQ && max.y > lowerQ;\n        const containsUpperQY = min.y < upperQ && max.y > upperQ;\n\n        if (containsCenterY) {\n            pointsToCheck.push({ x: min.x, y: center, z: 0 });\n            pointsToCheck.push({ x: max.x, y: center, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: center, z: 0 });\n            }\n        }\n        if (containsLowerQY) {\n            pointsToCheck.push({ x: min.x, y: lowerQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: lowerQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: lowerQ, z: 0 });\n            }\n        }\n        if (containsUpperQY) {\n            pointsToCheck.push({ x: min.x, y: upperQ, z: 0 });\n            pointsToCheck.push({ x: max.x, y: upperQ, z: 0 });\n\n            if (containsCenterX) {\n                pointsToCheck.push({ x: center, y: upperQ, z: 0 });\n            }\n        }\n\n        const geoPoints = pointsToCheck.map(p => this.unprojectPoint(p));\n        TransverseMercatorUtils.alignLongitude(geoPoints, geoPoints[0]);\n\n        const latitudes = geoPoints.map(g => g.latitude);\n        const longitudes = geoPoints.filter(g => Math.abs(g.latitude) < 90).map(g => g.longitude);\n        const altitudes = geoPoints.map(g => g.altitude || 0);\n\n        const minGeo = new GeoCoordinates(\n            Math.min(...latitudes),\n            Math.min(...longitudes),\n            Math.min(...altitudes)\n        );\n\n        const maxGeo = new GeoCoordinates(\n            Math.max(...latitudes),\n            Math.max(...longitudes),\n            Math.max(...altitudes)\n        );\n\n        const geoBox = GeoBox.fromCoordinates(minGeo, maxGeo);\n        return geoBox;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: -1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = -1;\n        }\n        return normal;\n    }\n}\n\nexport class TransverseMercatorUtils {\n    static POLE_EDGE: number = 1.4844222297453323;\n    static POLE_EDGE_DEG: number = MathUtils.radToDeg(TransverseMercatorUtils.POLE_EDGE);\n    static POLE_RADIUS: number = 90 - TransverseMercatorUtils.POLE_EDGE_DEG;\n    static POLE_RADIUS_SQ: number = Math.pow(TransverseMercatorUtils.POLE_RADIUS, 2);\n\n    /**\n     * There are two regions on projected space that have same geo coordinates,\n     * it's the entire lines   { x: [0..1], y: 0 } and { x: [0..1], y: 1 }\n     * they both have geo coordinates of   (0, [-90..+90])\n     * and should be aligned somehow to fall into first or second region\n     * to make proper bounding boxes, tile bounds, etc.\n     */\n    static alignLatitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const EPSILON = 1e-9;\n\n        for (const point of points) {\n            if (point.latitude === 0) {\n                point.latitude = referencePoint.latitude * EPSILON;\n            }\n        }\n    }\n\n    /**\n     * There are two regions on projected plane,\n     * { x: 0.5, y: [0..0.25] }    and    { x: 0.5, y: [0.75..1] }\n     * that represent longitude edge where -180 and +180 met.\n     * Points falling in this regions should be aligned to get proper boxes etc.\n     */\n    static alignLongitude(points: GeoCoordinatesLike[], referencePoint: GeoCoordinatesLike): void {\n        const bad = referencePoint.longitude < 0 ? 180 : -180;\n        const good = referencePoint.longitude < 0 ? -180 : 180;\n\n        for (const point of points) {\n            if (point.longitude === bad) {\n                point.longitude = good;\n            }\n        }\n    }\n}\n\n/**\n * Transverse Mercator [[Projection]] used to convert geo coordinates to world coordinates\n * and vice versa.\n */\nexport const transverseMercatorProjection: Projection = new TransverseMercatorProjection(\n    EarthConstants.EQUATORIAL_CIRCUMFERENCE\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { Box3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection } from \"../projection/Projection\";\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * `FlatTileBoundingBoxGenerator` generates bounding boxes in world and geo coordinates for a given\n * TilingScheme.\n */\nexport class FlatTileBoundingBoxGenerator {\n    private readonly m_tilingScheme: TilingScheme;\n    private readonly m_worldDimensions: Vector3Like;\n    private readonly m_worldBox: Box3Like;\n    /**\n     * Creates a new `FlatTileBoundingBoxGenerator` that can generate bounding boxes for the given\n     * TilingScheme.\n     *\n     * @param tilingScheme The [[TilingScheme]] used to compute bounding boxes.\n     * @param minElevation The minimum elevation in meters.\n     * @param maxElevation The maximum elevation in meters.\n     */\n    constructor(\n        readonly tilingScheme: TilingScheme,\n        readonly minElevation: number = 0,\n        readonly maxElevation: number = 0\n    ) {\n        this.m_tilingScheme = tilingScheme;\n        this.m_worldBox = tilingScheme.projection.worldExtent(minElevation, maxElevation);\n        const { min, max } = this.m_worldBox;\n        this.m_worldDimensions = { x: max.x - min.x, y: max.y - min.y, z: max.z - min.z };\n    }\n\n    /**\n     * Returns the [[Projection]] of the [[TilingScheme]].\n     */\n    get projection(): Projection {\n        return this.m_tilingScheme.projection;\n    }\n\n    /**\n     * Returns the [[SubdivisionScheme]] of the [[TilingScheme]].\n     */\n    get subdivisionScheme(): SubdivisionScheme {\n        return this.m_tilingScheme.subdivisionScheme;\n    }\n\n    /**\n     * Returns the bounding box in world coordinates of the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const worldBounds = new THREE.Box3();\n     * generator.getWorldBox(geoBox, worldBounds);\n     * console.log(worldBounds.getCenter());\n     * ```\n     *\n     * @param tileKey The TileKey.\n     * @param result The optional object used to store the resulting bounding box in world\n     * coordinates.\n     */\n    getWorldBox(tileKey: TileKey, result?: Box3Like): Box3Like {\n        const level = tileKey.level;\n        const levelDimensionX = this.subdivisionScheme.getLevelDimensionX(level);\n        const levelDimensionY = this.subdivisionScheme.getLevelDimensionY(level);\n        const sizeX = this.m_worldDimensions.x / levelDimensionX;\n        const sizeY = this.m_worldDimensions.y / levelDimensionY;\n        const originX = this.m_worldBox.min.x + sizeX * tileKey.column;\n        const originY = this.m_worldBox.min.y + sizeY * tileKey.row;\n\n        if (!result) {\n            result = MathUtils.newEmptyBox3();\n        }\n\n        result.min.x = originX;\n        result.min.y = originY;\n        result.min.z = this.m_worldBox.min.z;\n        result.max.x = originX + sizeX;\n        result.max.y = originY + sizeY;\n        result.max.z = this.m_worldBox.max.z;\n        return result;\n    }\n\n    /**\n     * Returns the bounding box in geo coordinates for the given [[TileKey]].\n     *\n     * Example:\n     * ```typescript\n     * const geoBox = generator.getGeoBox(worldBounds);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tileKey The [[TileKey]].\n     */\n    getGeoBox(tileKey: TileKey): GeoBox {\n        const worldBox = this.getWorldBox(tileKey);\n        return this.projection.unprojectBox(worldBox);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\n\nclass HalfQuadTreeSubdivisionScheme implements SubdivisionScheme {\n    getSubdivisionX(): number {\n        return 2;\n    }\n    getSubdivisionY(level: number): number {\n        return level === 0 ? 1 : 2;\n    }\n    getLevelDimensionX(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return 1 << level;\n    }\n    getLevelDimensionY(level: number): number {\n        // tslint:disable-next-line:no-bitwise\n        return level !== 0 ? 1 << (level - 1) : 1;\n    }\n}\n\n/**\n * A [[SubdivisionScheme]] used to represent half quadtrees. This particular subdivision scheme is\n * used by the HERE tiling scheme.\n */\nexport const halfQuadTreeSubdivisionScheme: SubdivisionScheme = new HalfQuadTreeSubdivisionScheme();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"./TileKey\";\n\nexport class SubTiles implements Iterable<TileKey> {\n    constructor(public tileKey: TileKey, public sizeX: number, public sizeY: number) {}\n\n    [Symbol.iterator](): Iterator<TileKey> {\n        return this.sizeX === 2 && this.sizeY === 2\n            ? SubTiles.ZCurveIterator(this.tileKey)\n            : SubTiles.RowColumnIterator(this.tileKey, this.sizeX, this.sizeY);\n    }\n}\n\nexport namespace SubTiles {\n    export function* RowColumnIterator(\n        parentKey: TileKey,\n        sizeX: number,\n        sizeY: number\n    ): Iterator<TileKey> {\n        for (let y = 0; y < sizeY; y++) {\n            for (let x = 0; x < sizeX; x++) {\n                yield TileKey.fromRowColumnLevel(\n                    parentKey.row * sizeY + y,\n                    parentKey.column * sizeX + x,\n                    parentKey.level + 1\n                );\n            }\n        }\n    }\n\n    export function* ZCurveIterator(parentKey: TileKey): Iterator<TileKey> {\n        // tslint:disable:no-bitwise\n        for (let i = 0; i < 4; i++) {\n            yield TileKey.fromRowColumnLevel(\n                (parentKey.row << 1) | (i >> 1),\n                (parentKey.column << 1) | (i & 1),\n                parentKey.level + 1\n            );\n        }\n        // tslint:enableno-bitwise\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\nexport class TileKeyUtils {\n    static geoCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        geoPoint: GeoCoordinatesLike,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const worldPoint = projection.projectPoint(geoPoint);\n\n        return this.worldCoordinatesToTileKey(tilingScheme, worldPoint, level);\n    }\n\n    static worldCoordinatesToTileKey(\n        tilingScheme: TilingScheme,\n        worldPoint: Vector3Like,\n        level: number\n    ): TileKey | null {\n        const projection = tilingScheme.projection;\n        const subdivisionScheme = tilingScheme.subdivisionScheme;\n\n        const cx = subdivisionScheme.getLevelDimensionX(level);\n        const cy = subdivisionScheme.getLevelDimensionY(level);\n\n        const { min, max } = projection.worldExtent(0, 0);\n        const worldSizeX = max.x - min.x;\n        const worldSizeY = max.y - min.y;\n\n        if (worldPoint.x < min.x || worldPoint.x > max.x) {\n            return null;\n        }\n\n        if (worldPoint.y < min.y || worldPoint.y > max.y) {\n            return null;\n        }\n\n        const column = Math.min(cx - 1, Math.floor((cx * (worldPoint.x - min.x)) / worldSizeX));\n        const row = Math.min(cy - 1, Math.floor((cy * (worldPoint.y - min.y)) / worldSizeY));\n\n        return TileKey.fromRowColumnLevel(row, column, level);\n    }\n\n    static geoRectangleToTileKeys(\n        tilingScheme: TilingScheme,\n        geoBox: GeoBox,\n        level: number\n    ): TileKey[] {\n        const wrap = (value: number, lower: number, upper: number) => {\n            if (value < lower) {\n                return upper - ((lower - value) % (upper - lower));\n            }\n\n            return lower + ((value - lower) % (upper - lower));\n        };\n\n        const clamp = (x: number, minVal: number, maxVal: number) => {\n            return Math.min(Math.max(x, minVal), maxVal);\n        };\n\n        // Clamp at the poles and wrap around the international date line.\n        const southWestLongitude = wrap(geoBox.southWest.longitudeInRadians, -Math.PI, Math.PI);\n        const southWestLatitude = clamp(\n            geoBox.southWest.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const northEastLongitude = wrap(geoBox.northEast.longitudeInRadians, -Math.PI, Math.PI);\n        const northEastLatitude = clamp(\n            geoBox.northEast.latitudeInRadians,\n            -(Math.PI * 0.5),\n            Math.PI * 0.5\n        );\n        const minTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(southWestLatitude, southWestLongitude),\n            level\n        );\n        const maxTileKey = TileKeyUtils.geoCoordinatesToTileKey(\n            tilingScheme,\n            GeoCoordinates.fromRadians(northEastLatitude, northEastLongitude),\n            level\n        );\n        const columnCount = tilingScheme.subdivisionScheme.getLevelDimensionX(level);\n\n        if (!minTileKey || !maxTileKey) {\n            throw new Error(\"Invalid coordinates\");\n        }\n\n        const minColumn = minTileKey.column;\n        let maxColumn = maxTileKey.column;\n\n        // wrap around case\n        if (southWestLongitude > northEastLongitude) {\n            if (maxColumn !== minColumn) {\n                maxColumn += columnCount;\n            } else {\n                // do not duplicate\n                maxColumn += columnCount - 1;\n            }\n        }\n\n        const minRow = Math.min(minTileKey.row, maxTileKey.row);\n        const maxRow = Math.max(minTileKey.row, maxTileKey.row);\n\n        const keys = new Array<TileKey>();\n\n        for (let row = minRow; row <= maxRow; ++row) {\n            for (let column = minColumn; column <= maxColumn; ++column) {\n                keys.push(TileKey.fromRowColumnLevel(row, column % columnCount, level));\n            }\n        }\n\n        return keys;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { SubdivisionScheme } from \"./SubdivisionScheme\";\nimport { SubTiles } from \"./SubTiles\";\nimport { TileKey } from \"./TileKey\";\n\nexport class TileTreeTraverse {\n    private m_subdivisionScheme: SubdivisionScheme;\n\n    constructor(subdivisionScheme: SubdivisionScheme) {\n        this.m_subdivisionScheme = subdivisionScheme;\n    }\n\n    subTiles(tileKey: TileKey): Iterable<TileKey> {\n        const divX = this.m_subdivisionScheme.getSubdivisionX(tileKey.level);\n        const divY = this.m_subdivisionScheme.getSubdivisionY(tileKey.level);\n\n        return new SubTiles(tileKey, divX, divY);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class for the default console channel.\n */\n\nexport class ConsoleChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.error(message, ...optionalParams);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.debug(message, ...optionalParams);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.info(message, ...optionalParams);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.log(message, ...optionalParams);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.trace(message, ...optionalParams);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        // tslint:disable-next-line:no-console\n        console.warn(message, ...optionalParams);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\n\n/**\n * Logger class.\n */\nexport class Logger implements ILogger {\n    enabled: boolean = true;\n    level: LogLevel = LogLevel.Trace;\n\n    constructor(readonly name: string, private m_channel: IChannel, options?: LoggerOptions) {\n        if (options !== undefined) {\n            this.update(options);\n        }\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Error) {\n            this.m_channel.error(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Debug) {\n            this.m_channel.debug(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Info) {\n            this.m_channel.info(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Log) {\n            this.m_channel.log(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Trace) {\n            this.m_channel.trace(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        if (this.enabled && this.level <= LogLevel.Warn) {\n            this.m_channel.warn(this.prefix, message, ...optionalParams);\n        }\n    }\n\n    update(options: LoggerOptions) {\n        this.enabled = options.enabled === undefined ? this.enabled : options.enabled;\n        this.level = options.level === undefined ? this.level : options.level;\n    }\n\n    private get prefix(): string {\n        return this.name + \":\";\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\nimport { LogLevel } from \"./ILogger\";\n\ndeclare let self: Worker;\n\nexport const WORKERCHANNEL_MSG_TYPE = \"worker-channel-message\";\n\n/**\n * The interface for the messages of the WorkerChannel.\n */\nexport interface IWorkerChannelMessage {\n    message: any[];\n    type: \"worker-channel-message\";\n    level: LogLevel;\n}\n\n/**\n * The class for the worker channel.\n */\nexport class WorkerChannel implements IChannel {\n    error(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Error\n        };\n        self.postMessage(workerMessage);\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Debug\n        };\n        self.postMessage(workerMessage);\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Info\n        };\n        self.postMessage(workerMessage);\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Log\n        };\n        self.postMessage(workerMessage);\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Trace\n        };\n        self.postMessage(workerMessage);\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        const workerMessage: IWorkerChannelMessage = {\n            message: [message, ...optionalParams],\n            type: WORKERCHANNEL_MSG_TYPE,\n            level: LogLevel.Warn\n        };\n        self.postMessage(workerMessage);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * The base shader to use for [[MapView]]'s composing passes, like [[MSAAMaterial]].\n */\n\nexport const CopyShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        opacity: { value: 1.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform float opacity;\n    uniform sampler2D tDiffuse;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        gl_FragColor = opacity * texel;\n    }`\n};\n\n/**\n * The material is used for composing.\n */\nexport class CopyMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `CopyMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            name: \"CopyMaterial\",\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: false,\n            blending: THREE.NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @hidden\n */\nexport type Value = null | boolean | number | string | object;\n\n/**\n * @hidden\n */\nexport interface ValueMap {\n    [name: string]: Value;\n}\n\n/**\n * @hidden\n */\nexport class Env {\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     */\n    lookup(_name: string): Value | undefined {\n        return undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment. (Here: empty object).\n     */\n    unmap(): ValueMap {\n        return {};\n    }\n}\n\n/**\n * Adds access to map specific environment properties.\n */\nexport class MapEnv extends Env {\n    constructor(readonly entries: ValueMap, private readonly parent?: Env) {\n        super();\n    }\n    /**\n     * Returns property in [[Env]] by name.\n     *\n     * @param name Name of property.\n     * @override\n     */\n    lookup(name: string): Value | undefined {\n        if (this.entries.hasOwnProperty(name)) {\n            const value = this.entries[name];\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return this.parent ? this.parent.lookup(name) : undefined;\n    }\n    /**\n     * Return an object containing all properties of this environment, takes care of the parent\n     * object.\n     * @override\n     */\n    unmap(): ValueMap {\n        const obj: any = this.parent ? this.parent.unmap() : {};\n        for (const key in this.entries) {\n            if (this.entries.hasOwnProperty(key)) {\n                obj[key] = this.entries[key];\n            }\n        }\n        return obj;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { JsonExpr } from \"./Expr\";\nimport { InterpolatedPropertyDefinition } from \"./InterpolatedPropertyDefs\";\n\n/**\n * Available line caps types(`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n * Default is `\"Round\"`.\n */\nexport type LineCaps = \"Square\" | \"Round\" | \"None\" | \"TriangleOut\" | \"TriangleIn\";\n\n/**\n * Available line dash types(`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n * Default is `\"Square\"`.\n */\nexport type LineDashes = \"Square\" | \"Round\" | \"Diamond\";\n\n/**\n * The kind of geometry is used to\n *\n * a) Group objects together, allowing the group to be hidden or displayed.\n *\n * b) Assigning the objects a loading phase. If a [[PhasedTileGeometryManager]] is used, techniques\n *      without a `GeometryKind` may not be processed (at the desired phase).\n *\n * Any string can be used to specify the kind of the technique in a style in the theme file. Is is\n * suggested to specify multiple kinds for specific types of data. For a highway, the following list\n * of kinds is suggested:\n *\n *    [\"line\", \"road\", \"road:highway\"]\n *\n * If it is a tunnel for a highway:\n *\n *    [\"line\", \"road\", \"road:highway\", \"tunnel\", \"road:tunnel\", \"road:highway:tunnel\"]\n *\n * If specified in this way, specific types of data (here: highway roads) can be enabled and/or\n * disabled.\n */\nexport enum GeometryKind {\n    /**\n     * Used in the enabledKinds/disabledKinds filter to match any kind.\n     */\n    All = \"_all_\",\n\n    /**\n     * Background geometry.\n     */\n    Background = \"background\",\n\n    /**\n     * Terrain geometry.\n     */\n    Terrain = \"terrain\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Area = \"area\",\n\n    /**\n     * Default value for all line techniques.\n     */\n    Line = \"line\",\n\n    /**\n     * Default value for the FillTechnique.\n     */\n    Water = \"water\",\n\n    /**\n     * Political borders.\n     */\n    Border = \"border\",\n\n    /**\n     * Basis for all roads.\n     */\n    Road = \"road\",\n\n    /**\n     * Default value for the ExtrudedPolygonTechnique.\n     */\n    Building = \"building\",\n\n    /**\n     * Default value for the TextTechnique, LineMarkerTechnique and the PoiTechnique.\n     */\n    Label = \"label\",\n\n    /**\n     * Anything that may show up last.\n     */\n    Detail = \"detail\"\n}\n\n/**\n * Decorate property type with possible dynamic variants.\n */\nexport type DynamicProperty<T> = T | JsonExpr | InterpolatedPropertyDefinition<T>;\n\n/*\n * Description of length units inside a style. Supports literal values (interpreted as `m`), `m` and\n * `px`(i.e. `80`, `14px`, `0.6m`, etc.).\n */\nexport type StyleLength = string | number;\n\n/**\n * Description of colors inside a style. Supports hex values as well as CSS hex, rgb and hsl values\n * (i.e. `0xffffff`, `#f00fab`, `#aaa`, `rgb(255, 0 120)`, `hsl(360, 100%, 100%)`, etc.).\n */\nexport type StyleColor = string | number;\n\n/**\n * A set of [[GeometryKind]]s.\n */\nexport class GeometryKindSet extends Set {\n    /**\n     * Return `true` if the Set is a superset of the set 'subset'.\n     */\n    isSuperset(subset: Set<any>): boolean {\n        for (const elem of subset) {\n            if (!this.has(elem)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Return `true` if the Set intersects Set 'set'.\n     */\n    hasIntersection(set: any) {\n        for (const elem of set) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return `true` if the Set either intersects Set 'set' (if set is a Set), of has element 'set'\n     * if set is not a Set.\n     */\n    hasOrIntersects(set: any) {\n        if (set instanceof Set) {\n            return this.hasIntersection(set);\n        }\n        return this.has(set);\n    }\n\n    /**\n     * Return `true` if this set and the array of elements share at least a single element.\n     */\n    hasOrIntersectsArray(subset: any[]) {\n        for (const elem of subset) {\n            if (this.has(elem)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Common attributes or all [[Technique]]s.\n */\nexport interface BaseTechniqueParams {\n    /**\n     * The name used to identify materials created from this technique.\n     */\n    id?: string;\n\n    /**\n     * The render order of the objects created using this technique.\n     *\n     * If not specified in style file, [[StyleSetEvaluator]] will assign monotonically increasing\n     * values according to style position in file.\n     */\n    renderOrder: number;\n\n    /**\n     * The category of this technique.\n     *\n     * The category is used in conjunction with [[Theme.priorities]]\n     * to assign render orders to the objects created by this [[Style]].\n     */\n    category?: string;\n\n    /**\n     *\n     */\n    renderOrderOffset?: number;\n\n    /**\n     * Optional. If `true`, no IDs will be saved for the geometry this technique creates.\n     */\n    transient?: boolean;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object start\n     * fading out (opacity decreases).\n     */\n    fadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = camera position, 1.0 = farPlane) at which the object has zero\n     * opacity and stops fading out. An undefined value disables fading.\n     */\n    fadeFar?: DynamicProperty<number>;\n\n    /**\n     * Specified kind of geometry. One kind is set as default in the technique, and can be\n     * overridden in the style.\n     */\n    kind?: GeometryKind | GeometryKindSet;\n\n    /**\n     * Set to `true` if this `Technique`s kind is in the set of enabled [[GeometryKind]]s, set to\n     * `false` if is in the disabled [[GeometryKind]]s. Disabling overrules enabling.\n     */\n    enabled?: boolean;\n}\n\nexport enum TextureCoordinateType {\n    /**\n     * Texture coordinates are in tile space.\n     * SW of the tile will have (0,0) and NE will have (1,1).\n     */\n    TileSpace = \"tile-space\",\n    /**\n     * Texture coordinates are in equirectangular space.\n     * (u, v) = ( (longitude+180) / 360, (latitude+90) / 180).\n     */\n    EquirectangularSpace = \"equirectangular-space\"\n}\n\n/**\n * Standard technique parameters.\n */\nexport interface StandardTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of the feature in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.color.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.wireframe.\n     */\n    wireframe?: boolean;\n    /**\n     * If `vertexColors` is `true`, every vertex has color information, which is interpolated\n     * between vertices.\n     * See https://threejs.org/docs/#api/en/materials/Material.vertexColors.\n     */\n    vertexColors?: boolean;\n    /**\n     * How rough the material appears. `0.0` means a smooth mirror reflection. `1.0` means fully\n     * diffuse. Default is `1.0`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughness.\n     */\n    roughness?: DynamicProperty<number>;\n    /**\n     * How much the material is like a metal. Nonmetallic materials such as wood or stone use `0.0`,\n     * metallic ones use `1.0`, with nothing (usually) in between. Default is `0.0`. A value between\n     * `0.0` and `1.0` can be used for a rusty metal look. If `metalnessMap` is also provided, both\n     * values are multiplied.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalness.\n     */\n    metalness?: DynamicProperty<number>;\n    /**\n     * The material will not be rendered if the opacity is lower than this value.\n     * See https://threejs.org/docs/#api/en/materials/Material.alphaTest.\n     */\n    alphaTest?: DynamicProperty<number>;\n    /**\n     * Skip rendering clobbered pixels.\n     * See https://threejs.org/docs/#api/en/materials/Material.depthTest.\n     */\n    depthTest?: boolean;\n    /**\n     * Set to 'true' if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     * See https://threejs.org/docs/#api/en/materials/Material.transparent.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     * See https://threejs.org/docs/#api/en/materials/Material.opacity.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Emissive (light) color of the material, essentially a solid color unaffected by other\n     * lighting. Default is black.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissive.\n     * @format color-hex\n     */\n    emissive?: DynamicProperty<StyleColor>;\n    /**\n     * Intensity of the emissive light. Modulates the emissive color. Default is `1`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveIntensity.\n     */\n    emissiveIntensity?: DynamicProperty<number>;\n    /**\n     * The index of refraction (IOR) of air (approximately 1) divided by the index of refraction of\n     * the material. It is used with environment mapping modes `THREE.CubeRefractionMapping` and\n     * `THREE.EquirectangularRefractionMapping`. The refraction ratio should not exceed `1`. Default\n     *  is `0.98`.\n     * See https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.refractionRatio.\n     */\n    refractionRatio?: DynamicProperty<number>;\n\n    /**\n     * Whether and how texture coordinates should be generated. No texture coordinates are\n     * generated if `undefined`.\n     * Should be set if any texture assigned (e.g. `map`, `normalMap`, ...).\n     */\n    textureCoordinateType?: TextureCoordinateType;\n\n    /*\n     * URL or texture buffer that should be used as color map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.map\n     */\n    map?: string | TextureBuffer;\n    mapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as normal map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.normalMap\n     */\n    normalMap?: string | TextureBuffer;\n    normalMapType?: number;\n    normalMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as displacement map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.displacementMap\n     */\n    displacementMap?: string | TextureBuffer;\n    displacementMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as roughness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.roughnessMap\n     */\n    roughnessMap?: string | TextureBuffer;\n    roughnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as emissive map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.emissiveMap\n     */\n    emissiveMap?: string | TextureBuffer;\n    emissiveMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as bump map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.bumpMap\n     */\n    bumpMap?: string | TextureBuffer;\n    bumpMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as metalness map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.metalnessMap\n     */\n    metalnessMap?: string | TextureBuffer;\n    metalnessMapProperties?: TextureProperties;\n\n    /**\n     * URL or texture buffer that should be used as alpha map. See:\n     * https://threejs.org/docs/#api/en/materials/MeshStandardMaterial.alphaMap\n     */\n    alphaMap?: string | TextureBuffer;\n    alphaMapProperties?: TextureProperties;\n}\n\n/**\n * Possible parameters of [[PointTechnique]].\n */\nexport interface PointTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a point in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * URL of a texture image to be loaded.\n     */\n    texture?: string;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Size of point in pixels.\n     */\n    size?: number;\n    /**\n     * Whether to enable picking on these points.\n     */\n    enablePicking?: boolean;\n}\n\n/**\n * Define the stacking option. Enum values for theme file are in \"kebab-case\".\n */\nexport enum PoiStackMode {\n    /**\n     * Show in a stack.\n     */\n    Show = \"show-in-stack\",\n    /**\n     * Do not show in a stack.\n     */\n    Hide = \"hide-in-stack\",\n    /**\n     * Show category parent in the stack.\n     */\n    ShowParent = \"show-parent\"\n}\n\n/**\n * Technique that describes icons with labels. Used in [[PoiTechnique]] and [[LineMarkerTechnique]]\n * (for road shields).\n */\nexport interface MarkerTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted)\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language\n     *  - `[\"get\", \"name\"]`\n     *\n     * See [[ExtendedTileInfo.getFeatureText]]\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of marker, defaults to `0`. Markers with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimum zoomLevel at which to display the label text. No default.\n     */\n    textMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label text. No default.\n     */\n    textMaxZoomLevel?: number;\n    /**\n     * Minimum zoomLevel at which to display the label icon. No default.\n     */\n    iconMinZoomLevel?: number;\n    /**\n     * Maximum zoomLevel at which to display the label icon. No default.\n     */\n    iconMaxZoomLevel?: number;\n    /**\n     * Scaling factor of icon. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `false`, text may overlap markers.\n     * @default `false`\n     */\n    textMayOverlap?: boolean;\n    /**\n     * If `false`, the icon may overlap text and other icons of lower priority. If not defined, the\n     * property value from `textMayOverlap` will be used.\n     * @default `false`\n     */\n    iconMayOverlap?: boolean;\n    /**\n     * If `false`, text will not reserve screen space, other markers will be able to overlap.\n     * @default `true`\n     */\n    textReserveSpace?: boolean;\n    /**\n     * If `false`, icon will not reserve screen space, other markers will be able to overlap. If not\n     * defined, the property value from `iconReserveSpace` will be used.\n     * @default `true`\n     */\n    iconReserveSpace?: boolean;\n    /**\n     * If `false`, text will not be rendered during animations. Defaults to `true`.\n     */\n    renderTextDuringMovements?: boolean;\n    /**\n     * If `true`, the label will always be rendered on top. If overlapping with other labels with\n     * this flag set, the render order is undefined.\n     * @default `false`\n     */\n    alwaysOnTop?: boolean;\n    /**\n     * If `true`, icon will appear even if the text part is blocked by other labels. Defaults to\n     * `false`.\n     */\n    textIsOptional?: boolean;\n    /**\n     * Should be displayed on map or not. Defaults to `true`.\n     */\n    showOnMap?: boolean;\n    /**\n     * Specify stack mode. Defaults to `ShowInStack`.\n     */\n    stackMode?: PoiStackMode;\n    /**\n     * Minimal distance between markers in screen pixels.\n     */\n    minDistance?: number;\n    /**\n     * If true, the text will appear even if the icon cannot be rendered because of missing icon\n     * graphics. Defaults to `true`.\n     */\n    iconIsOptional?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Fading time for icons in seconds.\n     */\n    iconFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: DynamicProperty<number>;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    iconXOffset?: DynamicProperty<number>;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    iconYOffset?: DynamicProperty<number>;\n    /**\n     * Scaling factor of icon.\n     */\n    iconScale?: number;\n    /**\n     * Vertical height in pixels, controls vertical scaling. Overrides `iconScale`.\n     */\n    screenHeight?: DynamicProperty<number>;\n    /**\n     * Horizontal height in pixels, controls horizontal scaling. Overrides `iconScale`.\n     */\n    screenWidth?: DynamicProperty<number>;\n    /**\n     * Name of the POI table which should be used for this POI.\n     */\n    poiTable?: string;\n    /**\n     * Fixed name to identify POI options in the POI table. If `poiName` has a value, this value\n     * supercedes any value read from the field referenced in `poiNameField`.\n     */\n    poiName?: string;\n    /**\n     * Name of the field to evaluate to get the name of the POI options in the POI table.\n     */\n    poiNameField?: string;\n    /**\n     * Name of [[ImageTexture]] definition to use.\n     */\n    imageTexture?: string;\n    /**\n     * Field name to extract imageTexture content from.\n     */\n    imageTextureField?: string;\n    /**\n     * Prefix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePrefix?: string;\n    /**\n     * Postfix for `imageTexture` if `imageTextureField` is used.\n     */\n    imageTexturePostfix?: string;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\nexport interface LineTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to true if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in pixels. WebGL implementations will normally render all lines with 1 pixel\n     * width, and ignore this value.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a geometry as a segment.\n */\nexport interface SegmentsTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Color of segments in a hexadecimal notation, for example: `\"#e4e9ec\"` or `\"#fff\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of a line in meters.\n     */\n    lineWidth: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a polygon.\n */\nexport interface PolygonalTechniqueParams {\n    /**\n     * Whether to use polygon offset. Default is false. This corresponds to the\n     * GL_POLYGON_OFFSET_FILL WebGL feature.\n     *\n     * PolygonOffset is used to raise the geometry towards the geometry (for depth calculation\n     * only). Default is false.\n     *\n     * See here: https://sites.google.com/site/threejstuts/home/polygon_offset\n     *\n     * To activate polygonOffset these values have to be set to pull the line \"forwards\":\n     *\n     * transparent: true\n     *\n     * polygonOffset: true\n     *\n     * polygonOffsetFactor : -1.0, (as an example, see link above)\n     *\n     * polygonOffsetUnits: -1 (as an example, see link above)\n     */\n    polygonOffset?: boolean;\n\n    /**\n     * Sets the polygon offset factor. Default is 0.\n     */\n    polygonOffsetFactor?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon offset units. Default is 0.\n     */\n    polygonOffsetUnits?: DynamicProperty<number>;\n\n    /**\n     * Sets the polygon outline color.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n}\n\n/**\n * Declares a a geometry as a basic extruded line.\n */\nexport interface BasicExtrudedLineTechniqueParams\n    extends BaseTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are \"Basic\" and \"Standard\". Default\n     * is \"Basic\".\n     *\n     * `\"basic\"`   : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"`: Elaborate shading, with metalness, and roughness.\n     *\n     * TODO: is this TechniqueParams or Style prop ?\n     */\n    shading?: \"basic\";\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Width of line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a standard extruded line.\n */\nexport interface StandardExtrudedLineTechniqueParams\n    extends StandardTechniqueParams,\n        PolygonalTechniqueParams {\n    /**\n     * A value determining the shading technique. Valid values are `\"basic\"` and `\"standard\"`.\n     * Default is `\"basic\"`.\n     *\n     * `\"basic\"` : Simple shading, faster to render. Only simple color and opacity are effective.\n     * `\"standard\"` : Elaborate shading, with metalness, and roughness.\n     */\n    shading: \"standard\";\n    /**\n     * Width of a line in meters for different zoom levels.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Style of both end caps. Possible values: `\"None\"`, `\"Circle\"`. A value of undefined maps to\n     * `\"Circle\"`.\n     */\n    caps?: \"None\" | \"Circle\";\n}\n\n/**\n * Declares a a geometry as a solid line.\n */\nexport interface SolidLineTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Color of a line in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color: DynamicProperty<StyleColor>;\n    /**\n     * Color of a line outline in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    outlineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    // TODO: Make pixel units default.\n    /**\n     * @deprecated Specify metrics units as part of the value instead.\n     * Units in which different size properties are specified. Either `Meter` (default) or `Pixel`.\n     */\n    metricUnit?: string;\n    /**\n     * Width of a line in `metricUnit` for different zoom levels.\n     */\n    lineWidth: DynamicProperty<StyleLength>;\n    /**\n     * Outline width of a line in `metricUnit`s for different zoom levels.\n     */\n    outlineWidth?: DynamicProperty<StyleLength>;\n    /**\n     * Clip the line outside the tile if `true`.\n     */\n    clipping?: boolean;\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n    /**\n     * Color of secondary line geometry in hexadecimal or CSS-style notation, for example:\n     * `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    secondaryColor?: DynamicProperty<StyleColor>;\n    /**\n     * Width of secondary line geometry in `metricUnit`s for different zoom levels.\n     */\n    secondaryWidth?: DynamicProperty<StyleLength>;\n    /**\n     * The render order of the secondary line geometry object created using this technique.\n     */\n    secondaryRenderOrder?: number;\n    /**\n     * Describes secondary line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`,\n     * `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    secondaryCaps?: LineCaps;\n    /**\n     * Describes the category of the secondary geometry object created using this technique.\n     */\n    secondaryCategory?: number;\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n    /**\n     * Color of a line dashes in hexadecimal or CSS-style notation,\n     * for example: `\"#e4e9ec\"`, `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    dashColor?: DynamicProperty<StyleColor>;\n    /**\n     * Length of a line in meters for different zoom levels.\n     */\n    dashSize?: DynamicProperty<StyleLength>;\n    /**\n     * Size of a gap between lines in meters for different zoom levels.\n     */\n    gapSize?: DynamicProperty<StyleLength>;\n}\n\n/**\n * Technique used to draw filled polygons.\n */\nexport interface FillTechniqueParams extends BaseTechniqueParams, PolygonalTechniqueParams {\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Set to `true` if line should appear transparent. Rendering transparent lines may come with a\n     * slight performance impact.\n     */\n    transparent?: boolean;\n    /**\n     * For transparent lines, set a value between `0.0` for fully transparent, to `1.0` for fully\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * A value of `true` creates a wireframe geometry. (May not be supported with all techniques).\n     */\n    wireframe?: boolean;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth?: DynamicProperty<number>;\n}\n\n/**\n * Technique used to draw a geometry as an extruded polygon, for example extruded buildings.\n */\nexport interface ExtrudedPolygonTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Renders the footprint lines if set to 'true'.\n     */\n    footprint?: boolean;\n    /**\n     * Set to a negative value to remove all the vertical lines, and to a value between 0.0 and 1.0\n     * to modulate the amount of vertical lines rendered.\n     */\n    maxSlope?: number;\n    /**\n     * Width of the lines. Currently limited to the [0, 1] range.\n     */\n    lineWidth: DynamicProperty<number>;\n    /**\n     * Fill color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    lineColor?: DynamicProperty<StyleColor>;\n    /**\n     * Mix value between the lineColor(0.0) and the geometry's vertex colors(1.0).\n     */\n    lineColorMix?: number;\n\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges start\n     * fading out.\n     */\n    lineFadeNear?: DynamicProperty<number>;\n    /**\n     * Distance to the camera (0.0 = nearPlane, 1.0 = farPlane) at which the object edges become\n     * transparent. A value of <= 0.0 disables fading.\n     */\n    lineFadeFar?: DynamicProperty<number>;\n\n    /**\n     * Height above ground in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"get\", \"height\"]`.\n     */\n    height?: number;\n\n    /**\n     * Height of \"floor\" of extruded polygon in world units of extruded polygon.\n     *\n     * Usually, unique per feature, so defaults to `[\"number\", [\"get\", \"min_height\"], 0]`.\n     */\n    floorHeight?: number;\n\n    /**\n     * In some data sources, for example Tilezen, building extrusion information might be missing.\n     * This attribute allows to define a default height of an extruded polygon in the theme.\n     *\n     * @deprecated use [[height]]\n     */\n    defaultHeight?: number;\n\n    /**\n     * Default color used if feature doesn't provide color attribute\n     * and [[MapEnv]] did not return it too.\n     * @format color-hex\n     */\n    defaultColor?: DynamicProperty<StyleColor>;\n\n    /**\n     * If `true`, the height of the extruded buildings will not be modified by the mercator\n     * projection distortion that happens around the poles.\n     *\n     * @default `false`\n     */\n    constantHeight?: boolean;\n\n    /**\n     * If `false`, wall geometry will not be added along the tile boundaries.\n     * @default `true`\n     */\n    boundaryWalls?: boolean;\n\n    /**\n     * Animate the extrusion of the buildings if set to `true`.\n     */\n    animateExtrusion?: DynamicProperty<boolean>;\n\n    /**\n     * Duration of the building's extrusion in milliseconds\n     */\n    animateExtrusionDuration?: number;\n\n    /**\n     * Control rendering of depth prepass before the actual geometry.\n     *\n     * Depth prepass is a method to render translucent meshes, hence only the visible front faces of\n     * a mesh are actually rendered, removing artifacts caused by blending with internal faces of\n     * the mesh. This method is used for drawing translucent buildings over map background.\n     *\n     * By default, each [[DataSource]] determines how/if enable the depth pre-pass. A value of\n     * `false` forcefully disables depth prepass.\n     */\n    enableDepthPrePass?: boolean;\n}\n\nexport interface ShaderTechniqueMaterialParameters {\n    [name: string]: any;\n}\n\n/**\n * Special technique for user-defined shaders. See\n * https://threejs.org/docs/#api/harp-materials/ShaderMaterial for details.\n */\nexport interface ShaderTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Parameters for shader. See `THREE.ShaderMaterialParameters`.\n     */\n    params: ShaderTechniqueMaterialParameters;\n\n    /**\n     * Type of primitive for the shader technique. Valid values are \"point\" | \"line\" | \"segments\" |\n     * \"mesh\"\n     */\n    primitive: \"point\" | \"line\" | \"segments\" | \"mesh\";\n}\n\n/**\n * Technique used to render a terrain geometry with a texture.\n * When using this technique, the datasource will produce texture coordinates in\n * local tile space (i.e. [0,0] at south-west and [1,1] at north-east tile corner).\n */\nexport interface TerrainTechniqueParams extends StandardTechniqueParams {\n    /**\n     * Colors to be applied at different heights (as a results of a `displacementMap`).\n     */\n    heightBasedColors?: HeightBasedColors;\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the interpolation method used to\n     * generate the height-based gradient texture (defaults to `Discrete`).\n     */\n    heightGradientInterpolation?: \"Discrete\" | \"Linear\" | \"Cubic\";\n\n    /**\n     * If `heightBasedColors` is defined, this value defines the width (in pixels) of the generated\n     * gradient texture (defaults to `128`).\n     */\n    heightGradientWidth?: number;\n}\n\n/**\n * Render geometry as a text.\n */\nexport interface TextTechniqueParams extends BaseTechniqueParams {\n    /**\n     * Text to be displayed for feature.\n     *\n     * Defaults to first defined:\n     *  - feature property `label` if present in technique (depreacted);\n     *  - `[\"get\", \"name:short\"]` is `useAbbreviation` is true;\n     *  - `[\"get\", \"iso_code\"]` is `useIsoCode` is true;\n     *  - `[\"get\", \"name:$LANGUAGE\"]` for each specified language;\n     *  - `[\"get\", \"name\"]`.\n     *\n     * See [[ExtendedTileInfo.getFeatureText]].\n     */\n    text?: string;\n\n    /**\n     * Field name of object containing the text to be rendered.\n     *\n     * @deprecated, Use `[\"get\", \"FIELD\"]`.\n     */\n    label?: string;\n    /**\n     * If `true`, the abbreviation (field `name:short`) of the elements is used as text.\n     *\n     * @deprecated Use proper expression with [`get`, `name:short`] for this purpose.\n     */\n    useAbbreviation?: boolean;\n    /**\n     * If `true`, the iso code (field 'iso_code') of the elements is used as text.\n     * The `iso_code` field contains the ISO 3166-1 2-letter country code.\n     *\n     * @deprecated Use proper expression with [`get`, `iso_code`] for this purpose.\n     */\n    useIsoCode?: boolean;\n    /**\n     * Priority of text, defaults to `0`. Elements with highest priority get placed first.\n     */\n    priority?: DynamicProperty<number>;\n    /**\n     * Minimal zoom level. If the current zoom level is smaller, the technique will not be used.\n     */\n    minZoomLevel?: number;\n    /**\n     * Maximum zoom level. If the current zoom level is larger, the technique will not be used.\n     */\n    maxZoomLevel?: number;\n    /**\n     * Scaling factor of the text. Defaults to 0.5, reducing the size ot 50% in the distance.\n     */\n    distanceScale?: number;\n    /**\n     * If `true`, icon is allowed to overlap other labels or icons of lower priority.\n     * @default `false`\n     */\n    mayOverlap?: boolean;\n    /**\n     * If `true`, element will reserve screen space, other markers of lower priority will not be\n     * able to overlap.\n     * @default `true`\n     */\n    reserveSpace?: boolean;\n    /**\n     * Fading time for labels in seconds.\n     */\n    textFadeTime?: number;\n    /**\n     * Horizontal offset (to the right) in screen pixels.\n     */\n    xOffset?: number;\n    /**\n     * Vertical offset (up) in screen pixels.\n     */\n    yOffset?: number;\n    /**\n     * Name of the text style.\n     */\n    style?: string;\n    /**\n     * Name of the preferred [[Font]] to be used when rendering.\n     */\n    fontName?: string;\n    /**\n     * Size of the text (pixels).\n     */\n    size?: DynamicProperty<number>;\n    /**\n     * Size of the text background (pixels).\n     */\n    backgroundSize?: DynamicProperty<number>;\n    /**\n     * Glyph style to apply for the currently active [[Font]].\n     */\n    fontStyle?: \"Regular\" | \"Bold\" | \"Italic\" | \"BoldItalic\";\n    /**\n     * Glyph variant to apply for the currently active [[Font]].\n     */\n    fontVariant?: \"Regular\" | \"AllCaps\" | \"SmallCaps\";\n    /**\n     * Glyph local rotation (radians).\n     */\n    rotation?: number;\n    /**\n     * Text color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`, `\"#fff\"`,\n     * `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    color?: DynamicProperty<StyleColor>;\n    /**\n     * Text background color in hexadecimal or CSS-style notation, for example: `\"#e4e9ec\"`,\n     * `\"#fff\"`, `\"rgb(255, 0, 0)\"`, or `\"hsl(35, 11%, 88%)\"`.\n     * @format color-hex\n     */\n    backgroundColor?: DynamicProperty<StyleColor>;\n    /**\n     * For transparent text, set a value between 0.0 for totally transparent, to 1.0 for totally\n     * opaque.\n     */\n    opacity?: DynamicProperty<number>;\n    /**\n     * Background text opacity value.\n     */\n    backgroundOpacity?: DynamicProperty<number>;\n    /**\n     * Inter-glyph spacing (pixels). Scaled by `size`.\n     */\n    tracking?: DynamicProperty<number>;\n    /**\n     * Inter-line spacing (pixels). Scaled by `size`.\n     */\n    leading?: DynamicProperty<number>;\n    /**\n     * Maximum number of lines for this label.\n     */\n    maxLines?: DynamicProperty<number>;\n    /**\n     * Maximum line width (pixels).\n     */\n    lineWidth?: DynamicProperty<number>;\n    /**\n     * [[TextCanvas]] rotation (radians).\n     */\n    canvasRotation?: DynamicProperty<number>;\n    /**\n     * Line typesetting rotation (radians).\n     */\n    lineRotation?: DynamicProperty<number>;\n    /**\n     * Wrapping (line-breaking) mode.\n     */\n    wrappingMode?: DynamicProperty<\"None\" | \"Character\" | \"Word\">;\n    /**\n     * Text position regarding the baseline.\n     */\n    hAlignment?: DynamicProperty<\"Left\" | \"Center\" | \"Right\">;\n    /**\n     * Text position inside a line.\n     */\n    vAlignment?: DynamicProperty<\"Above\" | \"Center\" | \"Below\">;\n}\n\n/**\n * Buffer holding a texture.\n */\nexport interface TextureBuffer {\n    /**\n     * Buffer containing the (compressed) image or the raw texture data.\n     */\n    buffer: ArrayBuffer;\n\n    /**\n     * Mime type of the image or 'image/raw' in case of raw texture data.\n     */\n    type: string;\n\n    /**\n     * Properties for creating a three.js DataTexture\n     * (https://threejs.org/docs/#api/en/textures/DataTexture).\n     */\n    dataTextureProperties?: DataTextureProperties;\n}\n\n/**\n * Type guard to check if an object is an instance of `TextureBuffer`.\n */\nexport function isTextureBuffer(object: any): object is TextureBuffer {\n    return object && object.buffer && typeof object.type === \"string\";\n}\n\n/**\n * Properties of a DataTexture (https://threejs.org/docs/#api/en/textures/DataTexture).\n */\nexport interface DataTextureProperties {\n    width: number;\n    height: number;\n\n    format?: PixelFormat;\n    type?: TextureDataType;\n}\n\n/**\n * Properties of a Texture (https://threejs.org/docs/#api/en/textures/Texture).\n */\nexport interface TextureProperties {\n    /**\n     * Texture horizontal wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapS.\n     */\n    wrapS?: WrappingMode;\n\n    /**\n     * Texture vertical wrapping mode.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.wrapT.\n     */\n    wrapT?: WrappingMode;\n\n    /**\n     * Texture magnification filter.\n     */\n    magFilter?: MagFilter;\n\n    /**\n     * Texture minification filter.\n     */\n    minFilter?: MinFilter;\n\n    /**\n     * Flip texture vertically.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.flipY.\n     */\n    flipY?: boolean;\n\n    /**\n     * Texture horizontal repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatU?: number;\n\n    /**\n     * Texture vertical repetition rate.\n     * See: https://threejs.org/docs/#api/en/textures/Texture.repeat.\n     */\n    repeatV?: number;\n}\n\n/**\n * Interface containing the definition of different colors to be used at different heights with the\n * [[TerrainTechnique]].\n */\nexport interface HeightBasedColors {\n    heightArray: number[];\n    colorArray: string[];\n}\n\nexport type PixelFormat =\n    | \"Alpha\"\n    | \"RGB\"\n    | \"RGBA\"\n    | \"Luminance\"\n    | \"LuminanceAlpha\"\n    | \"RGBE\"\n    | \"Depth\"\n    | \"DepthStencil\"\n    | \"Red\";\n\nexport type TextureDataType =\n    | \"UnsignedByte\"\n    | \"Byte\"\n    | \"Short\"\n    | \"UnsignedShort\"\n    | \"Int\"\n    | \"UnsignedInt\"\n    | \"Float\"\n    | \"HalfFloat\";\n\n/**\n * Available texture wrapping modes.\n */\nexport type WrappingMode = \"clamp\" | \"repeat\" | \"mirror\";\n\n/**\n * Available texture magnification filters.\n */\nexport type MagFilter = \"nearest\" | \"linear\";\n\n/**\n * Available texture minification filters.\n */\nexport type MinFilter =\n    | \"nearest\"\n    | \"nearestMipMapNearest\"\n    | \"nearestMipMapLinear\"\n    | \"linear\"\n    | \"linearMipMapNearest\"\n    | \"linearMipMapLinear\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Technique } from \"./Techniques\";\n\nexport enum AttrScope {\n    /**\n     * Attributes that affect generation of feature geometry and thus must be resolved at decoding\n     * time.\n     *\n     * They may have huge variancy as they are implemented as vertex attributes or embedded in\n     * generated meshes.\n     *\n     * These attributes are available only in decoding scope.\n     */\n    FeatureGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * These attributes affect generated geometry and  thus must be resolved at decoding time.\n     *\n     * They shouldn't have big variancy and evaluate to at least dozens of values as each\n     * combination of these attributes consitute new technique and material.\n     *\n     * These attributes are available in decoding and rendering scope.\n     */\n    TechniqueGeometry,\n\n    /**\n     * Attributes that are common to whole group of features drawn with this technique.\n     * Attributes that can be changed in resulting object/material from frame to frame. They are\n     * usually implemented as uniforms.\n     *\n     * These attributes may be available only at rendering scope.\n     */\n    TechniqueRendering\n}\n\n/**\n * Extract  property names from [[Technique]]-like interface (excluding `name`) as union of string\n * literals.\n *\n * TechniquePropName<Base\n *\n */\nexport type TechniquePropNames<T> = T extends { name: any } ? keyof Omit<T, \"name\"> : keyof T;\n\nexport type TechniquePropScopes<T> = {\n    [P in TechniquePropNames<T>]?: AttrScope;\n};\n\nexport interface TechniqueDescriptor<T> {\n    attrTransparencyColor?: string;\n    attrScopes: TechniquePropScopes<T>;\n}\n\ntype OneThatMatches<T, P> = T extends P ? T : never;\ntype TechniqueByName<K extends Technique[\"name\"]> = OneThatMatches<Technique, { name: K }>;\n\nexport type TechniqueDescriptorRegistry = {\n    [P in Technique[\"name\"]]?: TechniqueDescriptor<TechniqueByName<P>>;\n};\n\nexport function mergeTechniqueDescriptor<T>(\n    ...descriptors: Array<Partial<TechniqueDescriptor<T>>>\n): TechniqueDescriptor<T> {\n    const result: TechniqueDescriptor<T> = {\n        attrScopes: {}\n    };\n    for (const descriptor of descriptors) {\n        if (descriptor.attrTransparencyColor !== undefined) {\n            result.attrTransparencyColor = descriptor.attrTransparencyColor;\n        }\n        if (descriptor.attrScopes !== undefined) {\n            result.attrScopes = { ...result.attrScopes, ...descriptor.attrScopes };\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    equirectangularProjection,\n    mercatorProjection,\n    normalizedEquirectangularProjection,\n    OrientedBox3,\n    Projection,\n    sphereProjection,\n    Vector3Like,\n    webMercatorProjection\n} from \"@here/harp-geoutils\";\nimport { Technique } from \"./Techniques\";\nimport { TileInfo } from \"./TileInfo\";\n\n/**\n * This object has geometry data in the form of geometries buffers ready to be used by WebGL.\n * These geometries are not `three.js` objects. They are pure data stored as `ArrayBuffer`s and\n * metadata describing these buffers.\n */\nexport interface DecodedTile {\n    techniques: Technique[];\n    geometries: Geometry[];\n    pathGeometries?: PathGeometry[];\n    textPathGeometries?: TextPathGeometry[];\n    textGeometries?: TextGeometry[]; // ### deprecate\n    poiGeometries?: PoiGeometry[];\n    tileInfo?: TileInfo;\n    maxGeometryHeight?: number;\n    decodeTime?: number; // time used to decode (in ms)\n\n    /**\n     * The default bounding box in [[Tile]] is based on the geo box of the tile.\n     * For data-sources that have 3d data this is not sufficient so the data-source can provide a\n     * more accurate bounding box once the data is decoded.\n     */\n    boundingBox?: OrientedBox3;\n\n    /**\n     * Tile data Copyright holder identifiers.\n     *\n     * `id`s should be unique. It is recommended to build them from unique identifiers like\n     * registered domain names.\n     *\n     * @see [[CopyrightInfo]]\n     */\n    copyrightHolderIds?: string[];\n}\n\n/**\n * This object keeps the path of the geometry. Space of the path depends on the\n * use case, so could be either world or local tile space.\n */\nexport interface PathGeometry {\n    path: Vector3Like[];\n}\n\n/**\n * Attributes corresponding to some decoded geometry. It may be either a map\n * of multiple attributes or just a number with the geometry's feature id.\n */\nexport type AttributeMap = {} | number;\n\n/**\n * This object keeps textual data together with metadata to place it on the map.\n */\nexport interface TextPathGeometry {\n    path: number[];\n    pathLengthSqr: number;\n    text: string;\n    technique: number;\n    objInfos?: AttributeMap;\n}\n\n/**\n * Returns an array with the data type specified as parameter.\n *\n * @param attr specifies which type of data is being stored in the array\n */\nexport function getArrayConstructor(attr: BufferElementType) {\n    switch (attr) {\n        case \"float\":\n            return Float32Array;\n        case \"uint8\":\n            return Uint8Array;\n        case \"uint16\":\n            return Uint16Array;\n        case \"uint32\":\n            return Uint32Array;\n        case \"int8\":\n            return Int8Array;\n        case \"int16\":\n            return Int16Array;\n        case \"int32\":\n            return Int32Array;\n    }\n}\n\n/**\n * Structured clone compliant WebGL interleaved buffer with its metadata attached.\n */\nexport interface InterleavedBufferAttribute {\n    buffer: ArrayBufferLike;\n    stride: number;\n    type: BufferElementType;\n    attributes: Array<{\n        name: string;\n        itemSize: number;\n        offset: number;\n    }>;\n}\n\n/**\n * Geometry types supported by [[Geometry]] objects.\n */\nexport enum GeometryType {\n    Unspecified = 0,\n    Point,\n    Line,\n    SolidLine,\n    Text,\n    TextPath,\n    ExtrudedLine,\n    Polygon,\n    ExtrudedPolygon,\n    Object3D,\n    Other = 1000\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object, consisting of buffers with\n * metadata for map features and objects for example roads, trees or parks.\n */\nexport interface Geometry {\n    type: GeometryType;\n    vertexAttributes: BufferAttribute[];\n    interleavedVertexAttributes?: InterleavedBufferAttribute[];\n    index?: BufferAttribute;\n    edgeIndex?: BufferAttribute;\n    groups: Group[];\n    uuid?: string;\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n}\n\n/**\n * The data stored in Buffers' elements can be of the following elementary types: float, signed or\n * unsigned integers (8-bit, 16-bit or 32-bit long).\n */\nexport type BufferElementType =\n    | \"float\"\n    | \"uint8\"\n    | \"uint16\"\n    | \"uint32\"\n    | \"int8\"\n    | \"int16\"\n    | \"int32\";\n\n/**\n * Structured clone compliant WebGL buffer and its metadata.\n */\nexport interface BufferAttribute {\n    name: string;\n    buffer: ArrayBufferLike;\n    type: BufferElementType;\n    itemCount: number;\n    normalized?: boolean;\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with text to be rendered.\n * It is composed of buffers with metadata for text objects.\n */\nexport interface TextGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant version of a `three.js` geometry object with points of interest (POIs)\n * to be rendered. It is composed of buffers with metadata for POI objects.\n */\nexport interface PoiGeometry {\n    positions: BufferAttribute;\n    texts: number[];\n    /**\n     * Names of the image texture or the name of the POI as indices into the array `stringCatalog`.\n     */\n    imageTextures?: number[];\n    technique?: number;\n    stringCatalog?: Array<string | undefined>;\n    objInfos?: AttributeMap[];\n}\n\n/**\n * Structured clone compliant WebGL group object and its metadata.\n * Its purpose is to make working with groups of objects easier.\n */\nexport interface Group {\n    start: number;\n    count: number;\n    technique: number;\n\n    /**\n     * Offset added to [[Technique]]'s [[renderOrder]] when calculating final `renderOrder` of\n     * geometry object from given group.\n     */\n    renderOrderOffset?: number;\n    featureId?: number;\n\n    /**\n     * Contains tile offsets if its [[Geometry]] has been created.\n     */\n    createdOffsets?: number[];\n}\n\n/**\n * Returns the projection object specified in the parameter.\n *\n * @param projectionName string describing projection to be used\n */\nexport function getProjection(projectionName: string): Projection | never {\n    switch (projectionName) {\n        case \"mercator\":\n            return mercatorProjection;\n        case \"webMercator\":\n            return webMercatorProjection;\n        case \"sphere\":\n            return sphereProjection;\n        case \"normalizedEquirectangular\":\n            return normalizedEquirectangularProjection;\n        case \"equirectangular\":\n            return equirectangularProjection;\n        default:\n            throw new Error(`Unknown projection ${projectionName}`);\n    } // switch\n}\n\n/**\n * String with the projection's name.\n *\n * @param projection `Projection` object containing the name of the projection to retrieve\n */\nexport function getProjectionName(projection: Projection): string | never {\n    if (projection === mercatorProjection) {\n        return \"mercator\";\n    } else if (projection === webMercatorProjection) {\n        return \"webMercator\";\n    } else if (projection === sphereProjection) {\n        return \"sphere\";\n    } else if (projection === normalizedEquirectangularProjection) {\n        return \"normalizedEquirectangular\";\n    } else if (projection === equirectangularProjection) {\n        return \"equirectangular\";\n    }\n    throw new Error(\"Unknown projection\");\n}\n\n/**\n * @returns Feature id from the provided attribute map.\n */\nexport function getFeatureId(attributeMap: AttributeMap | undefined): number {\n    if (attributeMap === undefined) {\n        return 0;\n    }\n\n    if (typeof attributeMap === \"number\") {\n        return attributeMap;\n    }\n\n    if (attributeMap.hasOwnProperty(\"$id\")) {\n        return (attributeMap as any).$id as number;\n    }\n\n    return 0;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    isJsonExpr,\n    JsonExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\nimport { ExprPool } from \"./ExprPool\";\nimport { isInterpolatedPropertyDefinition } from \"./InterpolatedProperty\";\nimport { interpolatedPropertyDefinitionToJsonExpr } from \"./InterpolatedPropertyDefs\";\nimport { AttrScope, mergeTechniqueDescriptor } from \"./TechniqueDescriptor\";\nimport { IndexedTechnique, Technique, techniqueDescriptors } from \"./Techniques\";\nimport {\n    Definitions,\n    isActualSelectorDefinition,\n    isJsonExprReference,\n    LineStyle,\n    Style,\n    StyleDeclaration,\n    StyleSelector,\n    StyleSet\n} from \"./Theme\";\n\nconst logger = LoggerManager.instance.create(\"StyleSetEvaluator\");\n\nconst emptyTechniqueDescriptor = mergeTechniqueDescriptor<Technique>({});\n\ninterface StyleInternalParams {\n    /**\n     * Optimization: Lazy creation and storage of expression in a style object.\n     */\n    _whenExpr?: Expr;\n    _minZoomLevelExpr?: Expr;\n    _maxZoomLevelExpr?: Expr;\n\n    _staticAttributes?: Array<[string, Value]>;\n\n    /**\n     * These attributes are used to instantiate Technique variants.\n     *\n     * @see [[TechiqueDescriptor.techniquePropNames]]\n     */\n    _dynamicTechniqueAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes must be evaluated basing with feature env.\n     *\n     * They are not propagated to rendering scope.\n     *\n     * @see [[TechniqueAttrScope.Feature]]\n     */\n    _dynamicFeatureAttributes?: Array<[string, Expr]>;\n\n    /**\n     * These attributes are forwarded as serialized by decoder to main thread, so they are resolved\n     * directly in render loop.\n     *\n     * Will contain attributes from these lists\n     *  - interpolants from [[TechiqueDescriptor.techniquePropNames]]\n     *  - expressions [[TechniqueDescriptor.dynamicPropNames]] (Future)\n     */\n    _dynamicForwardedAttributes?: Array<[string, Expr]>;\n    _dynamicTechniques?: Map<string, IndexedTechnique>;\n\n    /**\n     * Optimization: Index into table in StyleSetEvaluator.\n     * @hidden\n     */\n    _staticTechnique?: IndexedTechnique;\n\n    /**\n     * Optimization: StyleSet index.\n     * @hidden\n     */\n    _styleSetIndex?: number;\n\n    /**\n     * Optimization: Requested $geometryType.\n     * @hidden\n     */\n    _geometryType?: string;\n}\n\ntype InternalStyle = Style & StyleSelector & StyleInternalParams;\n\n/**\n * [[StyleConditionClassifier]] searches for usages of `$layer` in `when` conditions\n * associated with styling rules.\n *\n * @hidden\n */\nclass StyleConditionClassifier implements ExprVisitor<Expr | undefined, Expr | undefined> {\n    private _style!: InternalStyle;\n\n    classify(style: InternalStyle) {\n        if (style._whenExpr) {\n            const savedStyle = this.switchStyle(style);\n            style._whenExpr = style._whenExpr.accept(this, undefined);\n            this._style = savedStyle;\n        }\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitContainsExpr(expr: ContainsExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitMatchExpr(expr: MatchExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCaseExpr(expr: CaseExpr, enclosingExpr: Expr | undefined): Expr {\n        return expr;\n    }\n\n    visitCallExpr(call: CallExpr, enclosingExpr: Expr | undefined): Expr | undefined {\n        if (call.op === \"all\") {\n            // processing of an `[\"all\", e1, e2, ... eN]` expression. In this case\n            // search for expressions matching comparison of `$layer` and string literals\n            // in the sub expressions.\n            const children = call.args\n                .map(childExpr => childExpr.accept(this, call))\n                .filter(childExpr => childExpr !== undefined) as Expr[];\n\n            return new CallExpr(call.op, children);\n        } else if (enclosingExpr) {\n            // `call` is a direct child expression of an `\"all\"` operator.\n            const matched = this.matchVarStringComparison(call);\n\n            if (matched) {\n                if (this._style.layer === undefined && matched.name === \"$layer\") {\n                    // found a subexpression `[\"==\", [\"get\", \"$layer\"], \"some layer name\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $layer in\n                    // [[StyleInternalParams]].\n\n                    this._style.layer = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                } else if (\n                    this._style._geometryType === undefined &&\n                    matched.name === \"$geometryType\"\n                ) {\n                    // found a subexpression `[\"==\", [\"get\", \"$geometryType\"], \"geometry\"]`\n                    // enclosed in an `[\"all\", e1...eN]` expression. Remove it from\n                    // its parent expression and store the value of the expected $geometryType in\n                    // [[StyleInternalParams]].\n\n                    this._style._geometryType = matched.value;\n\n                    // return `undefined` to remove this sub expression from its parent.\n                    return undefined;\n                }\n            }\n        }\n\n        return call;\n    }\n\n    /**\n     * Tests if the given `call` matches the structure [\"==\", [\"get\", name], value].\n     * If a match is found returns an object containing the `name` and the `value`;\n     *\n     * @param call The expression to match.\n     */\n    private matchVarStringComparison(call: CallExpr) {\n        if (call.op === \"==\") {\n            const left = call.args[0];\n            const right = call.args[1];\n\n            if (left instanceof VarExpr && right instanceof StringLiteralExpr) {\n                return { name: left.name, value: right.value };\n            }\n\n            if (right instanceof VarExpr && left instanceof StringLiteralExpr) {\n                return { name: right.name, value: left.value };\n            }\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Sets the given `style` as current.\n     *\n     * @returns The previous `style`.\n     */\n    private switchStyle(style: InternalStyle) {\n        const saved = this._style;\n        this._style = style;\n        return saved;\n    }\n}\n\nclass OptimizedSubSetKey {\n    key: string;\n    layer: string | undefined;\n    geometryType: string | undefined;\n\n    cachedStyleSet?: InternalStyle[];\n\n    constructor(layer?: string | undefined, geometryType?: string | undefined) {\n        this.key = \"\";\n        this.set(layer, geometryType);\n    }\n\n    set(\n        layer: string | undefined,\n        geometryType: string | undefined,\n        env?: Env\n    ): OptimizedSubSetKey {\n        let keyUpdateNeeded: boolean = false;\n        if (layer === undefined) {\n            const envLayer = env !== undefined ? env.lookup(\"$layer\") : undefined;\n            layer = typeof envLayer === \"string\" ? envLayer : undefined;\n        }\n        if (this.layer !== layer) {\n            this.layer = layer;\n            keyUpdateNeeded = true;\n        }\n\n        if (geometryType === undefined) {\n            const envGeometryType = env !== undefined ? env.lookup(\"$geometryType\") : undefined;\n            geometryType = typeof envGeometryType === \"string\" ? envGeometryType : undefined;\n        }\n        if (this.geometryType !== geometryType) {\n            this.geometryType = geometryType;\n            keyUpdateNeeded = true;\n        }\n\n        if (keyUpdateNeeded) {\n            this.updateKey();\n        }\n        return this;\n    }\n\n    private updateKey() {\n        if (this.layer !== undefined) {\n            // tslint:disable-next-line:prefer-conditional-expression\n            if (this.geometryType !== undefined) {\n                this.key = `${this.layer}:${this.geometryType}`;\n            } else {\n                this.key = `${this.layer}:`;\n            }\n        } else {\n            if (this.geometryType !== undefined) {\n                this.key = `:${this.geometryType}`;\n            } else {\n                this.key = \"all\";\n            }\n        }\n        this.cachedStyleSet = undefined;\n    }\n}\n\n/**\n * Combine data from datasource and apply the rules from a specified theme to show it on the map.\n */\nexport class StyleSetEvaluator {\n    readonly styleSet: InternalStyle[];\n\n    private readonly m_techniques: IndexedTechnique[] = [];\n    private readonly m_exprPool = new ExprPool();\n    private readonly m_cachedResults = new Map<Expr, Value>();\n    private readonly m_styleConditionClassifier = new StyleConditionClassifier();\n    private readonly m_subStyleSetCache = new Map<string, InternalStyle[]>();\n    private readonly m_definitions?: Definitions;\n    private readonly m_definitionExprCache = new Map<string, Expr>();\n    private readonly m_tmpOptimizedSubSetKey: OptimizedSubSetKey = new OptimizedSubSetKey();\n    private readonly m_emptyEnv = new Env();\n    private m_layer: string | undefined;\n    private m_geometryType: string | undefined;\n    private m_zoomLevel: number | undefined;\n\n    constructor(styleSet: StyleSet, definitions?: Definitions) {\n        this.m_definitions = definitions;\n        this.styleSet = resolveReferences(styleSet, definitions);\n        computeDefaultRenderOrder(this.styleSet);\n        this.compileStyleSet();\n    }\n\n    /**\n     * Find all techniques that fit the current objects' environment.\n     * *The techniques in the resulting array may not be modified* since they are being reused for\n     * identical objects.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     * representation.\n     * @param layer The optional layer name used to filter techniques.\n     * @param geometryType The optional geometryType used to filter techniques.\n     */\n    getMatchingTechniques(\n        env: Env,\n        layer?: string | undefined,\n        geometryType?: string | undefined\n    ): IndexedTechnique[] {\n        const result: IndexedTechnique[] = [];\n        this.m_cachedResults.clear();\n\n        const optimizedSubSetKey = this.m_tmpOptimizedSubSetKey;\n        optimizedSubSetKey.set(layer, geometryType, env);\n\n        // get the requested $layer and $geometryType, if any.\n        this.m_layer = optimizedSubSetKey.layer;\n        this.m_geometryType = optimizedSubSetKey.geometryType;\n        this.m_zoomLevel = env.lookup(\"$zoom\") as number | undefined;\n\n        const searchedStyleSet = this.getOptimizedStyleSet(optimizedSubSetKey);\n\n        for (const currStyle of searchedStyleSet) {\n            if (this.processStyle(env, currStyle, result)) {\n                break;\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to `layer`.\n     *\n     * @param layer name of layer\n     */\n    wantsLayer(layer: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, undefined)).length > 0\n        );\n    }\n\n    /**\n     * Check if `styleSet` contains any rule related to particular `[layer, geometryType]` pair.\n     *\n     * @param layer name of layer\n     * @param geometryType type of layer - `point`, `line` or `polygon`\n     */\n    wantsFeature(layer: string, geometryType?: string): boolean {\n        return (\n            this.getOptimizedStyleSet(this.m_tmpOptimizedSubSetKey.set(layer, geometryType))\n                .length > 0\n        );\n    }\n\n    /**\n     * Get the expression evaluation cache, for further feature processing.\n     *\n     * This object is valid until next `getMatchingTechniques` call.\n     */\n    get expressionEvaluatorCache() {\n        return this.m_cachedResults;\n    }\n\n    /**\n     * Reset array of techniques.\n     *\n     * Cleans technique array and indices, so it doesn't accumulate accross several decoding runs.\n     */\n    resetTechniques() {\n        for (const techinque of this.m_techniques) {\n            techinque._index = undefined!;\n        }\n        this.m_techniques.length = 0;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get techniques(): IndexedTechnique[] {\n        return this.m_techniques;\n    }\n\n    /**\n     * Get the (current) array of techniques that have been created during decoding.\n     */\n    get decodedTechniques(): IndexedTechnique[] {\n        return this.m_techniques.map(makeDecodedTechnique);\n    }\n\n    private getOptimizedStyleSet(subSetKey: OptimizedSubSetKey): InternalStyle[] {\n        if (subSetKey.cachedStyleSet !== undefined) {\n            return subSetKey.cachedStyleSet;\n        }\n        let optimizedStyleSet = this.m_subStyleSetCache.get(subSetKey.key);\n        if (optimizedStyleSet !== undefined) {\n            subSetKey.cachedStyleSet = optimizedStyleSet;\n            return optimizedStyleSet;\n        }\n        optimizedStyleSet = this.createPreFilteredStyleSet(subSetKey);\n        this.m_subStyleSetCache.set(subSetKey.key, optimizedStyleSet);\n        subSetKey.cachedStyleSet = optimizedStyleSet;\n        return optimizedStyleSet;\n    }\n\n    private createPreFilteredStyleSet(subSetKey: OptimizedSubSetKey) {\n        const { layer, geometryType } = subSetKey;\n\n        return this.styleSet.filter(style => {\n            if (layer !== undefined && style.layer !== undefined && style.layer !== layer) {\n                return false;\n            }\n            if (\n                geometryType !== undefined &&\n                style._geometryType !== undefined &&\n                style._geometryType !== geometryType\n            ) {\n                return false;\n            }\n            return true;\n        });\n    }\n\n    /**\n     * Compile the `when` conditions found when traversting the styling rules.\n     */\n    private compileStyleSet() {\n        this.styleSet.forEach(style => this.compileStyle(style));\n\n        // Create optimized styleSets for each `layer` & `geometryType` tuple.\n        this.styleSet.forEach(style => {\n            this.getOptimizedStyleSet(\n                this.m_tmpOptimizedSubSetKey.set(style.layer, style._geometryType)\n            );\n        });\n    }\n\n    /**\n     * Compile the `when` conditions reachable from the given `style`.\n     *\n     * @param style The current style.\n     */\n    private compileStyle(style: InternalStyle) {\n        if (style.when !== undefined) {\n            try {\n                style._whenExpr = Array.isArray(style.when)\n                    ? Expr.fromJSON(style.when, this.m_definitions, this.m_definitionExprCache)\n                    : Expr.parse(style.when);\n\n                // search for usages of '$layer' and any other\n                // special symbol that can be used to speed up the evaluation\n                // of the `when` conditions associated to this `style`.\n                this.m_styleConditionClassifier.classify(style);\n\n                if (style._whenExpr !== undefined) {\n                    style._whenExpr = style._whenExpr.intern(this.m_exprPool);\n                }\n\n                if (isJsonExpr(style.minZoomLevel)) {\n                    style._minZoomLevelExpr = Expr.fromJSON(style.minZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n\n                if (isJsonExpr(style.maxZoomLevel)) {\n                    style._maxZoomLevelExpr = Expr.fromJSON(style.maxZoomLevel).intern(\n                        this.m_exprPool\n                    );\n                }\n            } catch (err) {\n                logger.log(\n                    \"failed to evaluate expression\",\n                    JSON.stringify(style.when),\n                    \"error\",\n                    String(err)\n                );\n            }\n        }\n    }\n\n    /**\n     * Process a style (and its sub-styles) hierarchically to look for the technique that fits the\n     * current objects' environment. The attributes of the styles are assembled to create a unique\n     * technique for every object.\n     *\n     * @param env The objects environment, i.e. the attributes that are relevant for its\n     *            representation.\n     * @param style Current style (could also be top of stack).\n     * @param result The array of resulting techniques. There may be more than one technique per\n     *               object, resulting in multiple graphical objects for representation.\n     * @returns `true` if style has been found and processing is finished. `false` if not found, or\n     *          more than one technique should be applied.\n     */\n    private processStyle(env: Env, style: InternalStyle, result: Technique[]): boolean {\n        if (!this.checkZoomLevel(env, style)) {\n            return false;\n        }\n\n        if (\n            this.m_layer !== undefined &&\n            style.layer !== undefined &&\n            style.layer !== this.m_layer\n        ) {\n            return false;\n        }\n        if (\n            this.m_geometryType !== undefined &&\n            style._geometryType !== undefined &&\n            style._geometryType !== this.m_geometryType\n        ) {\n            return false;\n        }\n\n        if (style._whenExpr) {\n            try {\n                if (!style._whenExpr.evaluate(env, ExprScope.Condition, this.m_cachedResults)) {\n                    // Stop processing this styling rule. The `when` condition\n                    // associated with the current `style` evaluates to false so\n                    // no techinque defined by this style should be applied.\n                    return false;\n                }\n            } catch (error) {\n                logger.error(\n                    `failed to evaluate expression '${JSON.stringify(style.when)}': ${error}`\n                );\n                return false;\n            }\n        }\n\n        if (style.technique === undefined) {\n            return false;\n        }\n        // we found a technique!\n        if (style.technique !== \"none\") {\n            result.push(this.getTechniqueForStyleMatch(env, style));\n        }\n        // stop processing if \"final\" is set\n        return style.final === true;\n    }\n\n    private checkZoomLevel(env: Env, style: InternalStyle) {\n        if (style.minZoomLevel === undefined && style.maxZoomLevel === undefined) {\n            return true;\n        }\n\n        const zoomLevel = this.m_zoomLevel;\n        if (zoomLevel === undefined) {\n            return true;\n        }\n\n        if (style.minZoomLevel !== undefined) {\n            let minZoomLevel: Value = style.minZoomLevel;\n\n            if (style._minZoomLevelExpr) {\n                // the constraint is defined as expression, evaluate it and\n                // use its value\n                try {\n                    minZoomLevel = style._minZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._minZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof minZoomLevel === \"number\" && zoomLevel < minZoomLevel) {\n                return false;\n            }\n        }\n\n        if (style.maxZoomLevel !== undefined) {\n            let maxZoomLevel: Value = style.maxZoomLevel;\n\n            if (style._maxZoomLevelExpr) {\n                try {\n                    maxZoomLevel = style._maxZoomLevelExpr.evaluate(\n                        env,\n                        ExprScope.Condition,\n                        this.m_cachedResults\n                    );\n                } catch (error) {\n                    logger.error(\n                        `failed to evaluate expression '${JSON.stringify(\n                            style._maxZoomLevelExpr\n                        )}': ${error}`\n                    );\n                }\n            }\n\n            if (typeof maxZoomLevel === \"number\" && zoomLevel > maxZoomLevel) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private getTechniqueForStyleMatch(env: Env, style: InternalStyle) {\n        this.checkStyleDynamicAttributes(style);\n\n        let technique: IndexedTechnique | undefined;\n        if (style._dynamicTechniques !== undefined) {\n            const dynamicAttributes = this.evaluateTechniqueProperties(style, env);\n            const key = this.getDynamicTechniqueKey(style, dynamicAttributes);\n            technique = style._dynamicTechniques!.get(key);\n            if (technique === undefined) {\n                technique = this.createTechnique(style, key, dynamicAttributes);\n                style._dynamicTechniques!.set(key, technique);\n            }\n        } else {\n            technique = style._staticTechnique;\n            if (technique === undefined) {\n                style._staticTechnique = technique = this.createTechnique(\n                    style,\n                    `${style._styleSetIndex}`,\n                    []\n                ) as IndexedTechnique;\n            }\n        }\n\n        if (technique._index === undefined) {\n            technique._index = this.m_techniques.length;\n            this.m_techniques.push(technique);\n        }\n        return technique;\n    }\n\n    private getDynamicTechniqueKey(\n        style: InternalStyle,\n        dynamicAttributes: Array<[string, Value]>\n    ) {\n        const dynamicAttrKey = dynamicAttributes\n            .map(([_attrName, attrValue]) => {\n                if (attrValue === undefined) {\n                    return \"U\";\n                } else {\n                    return JSON.stringify(attrValue);\n                }\n            })\n            .join(\":\");\n        return `${style._styleSetIndex!}:${dynamicAttrKey}`;\n    }\n\n    private checkStyleDynamicAttributes(style: InternalStyle) {\n        if (style._dynamicTechniqueAttributes !== undefined || style.technique === \"none\") {\n            return;\n        }\n\n        style._dynamicTechniqueAttributes = [];\n        style._dynamicFeatureAttributes = [];\n        style._dynamicForwardedAttributes = [];\n        style._staticAttributes = [];\n\n        const dynamicFeatureAttributes = style._dynamicFeatureAttributes;\n        const dynamicTechniqueAttributes = style._dynamicTechniqueAttributes;\n        const dynamicForwardedAttributes = style._dynamicForwardedAttributes;\n        const targetStaticAttributes = style._staticAttributes;\n\n        const techniqueDescriptor =\n            techniqueDescriptors[style.technique] || emptyTechniqueDescriptor;\n\n        const processAttribute = (attrName: string, attrValue: Value | JsonExpr | undefined) => {\n            if (attrValue === undefined) {\n                return;\n            }\n\n            if (isJsonExpr(attrValue)) {\n                attrValue = Expr.fromJSON(\n                    attrValue,\n                    this.m_definitions,\n                    this.m_definitionExprCache\n                ).intern(this.m_exprPool);\n            } else if (isInterpolatedPropertyDefinition(attrValue)) {\n                // found a property using an object-like interpolation definition.\n                attrValue = Expr.fromJSON(\n                    interpolatedPropertyDefinitionToJsonExpr(attrValue)\n                ).intern(this.m_exprPool);\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                const deps = attrValue.dependencies();\n\n                if (!deps.zoom && deps.properties.size === 0) {\n                    // no data-dependencies detected.\n                    attrValue = attrValue.evaluate(this.m_emptyEnv);\n                }\n            }\n\n            if (Expr.isExpr(attrValue)) {\n                let attrScope: AttrScope | undefined = (techniqueDescriptor.attrScopes as any)[\n                    attrName as any\n                ];\n\n                if (attrScope === undefined) {\n                    // Use [[AttrScope.TechniqueGeometry]] as default scope for the attribute.\n                    attrScope = AttrScope.TechniqueGeometry;\n                }\n\n                const deps = attrValue.dependencies();\n\n                switch (attrScope) {\n                    case AttrScope.FeatureGeometry:\n                        dynamicFeatureAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueGeometry:\n                        dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        break;\n                    case AttrScope.TechniqueRendering:\n                        if (deps.properties.size === 0) {\n                            dynamicForwardedAttributes.push([attrName, attrValue]);\n                        } else {\n                            dynamicTechniqueAttributes.push([attrName, attrValue]);\n                        }\n                        break;\n                }\n            } else if (attrValue !== undefined && attrValue !== null) {\n                targetStaticAttributes.push([attrName, attrValue]);\n            }\n        };\n\n        processAttribute(\"_category\", style.category);\n        processAttribute(\"_secondaryCategory\", (style as LineStyle).secondaryCategory);\n\n        processAttribute(\"renderOrder\", style.renderOrder);\n\n        // TODO: What the heck is that !?\n        processAttribute(\"label\", style.labelProperty);\n\n        // line & solid-line secondaryRenderOrder should be generic attr\n        // TODO: maybe just warn and force move it to `attr` ?\n        processAttribute(\"secondaryRenderOrder\", (style as LineStyle).secondaryRenderOrder);\n\n        if (style.attr !== undefined) {\n            for (const attrName in style.attr) {\n                if (!style.attr.hasOwnProperty(attrName)) {\n                    continue;\n                }\n                processAttribute(attrName, (style.attr as any)[attrName]);\n            }\n        }\n\n        if (dynamicTechniqueAttributes.length > 0) {\n            style._dynamicTechniques = new Map();\n        }\n    }\n\n    private evaluateTechniqueProperties(style: InternalStyle, env: Env): Array<[string, Value]> {\n        if (style._dynamicTechniqueAttributes === undefined) {\n            return [];\n        }\n\n        const instantiationContext = { env };\n\n        return style._dynamicTechniqueAttributes.map(([attrName, attrExpr]) => {\n            try {\n                if (attrExpr.isDynamic()) {\n                    const reducedExpr = attrExpr.instantiate(instantiationContext);\n                    return [attrName, reducedExpr];\n                }\n\n                const evaluatedValue = attrExpr.evaluate(\n                    env,\n                    ExprScope.Value,\n                    this.m_cachedResults\n                );\n                return [attrName, evaluatedValue];\n            } catch (error) {\n                logger.error(`failed to evaluate expression '${attrExpr.toJSON()}': ${error}`);\n                return [attrName, null];\n            }\n        });\n    }\n\n    private createTechnique(\n        style: InternalStyle,\n        key: string,\n        dynamicAttrs: Array<[string, Value]>\n    ) {\n        const technique: any = {};\n        technique.name = style.technique;\n        if (style._staticAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._staticAttributes) {\n                if (attrValue !== null) {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n        for (const [attrName, attrValue] of dynamicAttrs) {\n            if (attrValue !== null) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicFeatureAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicFeatureAttributes) {\n                technique[attrName] = attrValue;\n            }\n        }\n\n        if (style._dynamicForwardedAttributes !== undefined) {\n            for (const [attrName, attrValue] of style._dynamicForwardedAttributes) {\n                // tslint:disable-next-line: prefer-conditional-expression\n                if (Expr.isExpr(attrValue)) {\n                    technique[attrName] = attrValue.toJSON();\n                } else {\n                    technique[attrName] = attrValue;\n                }\n            }\n        }\n\n        technique._index = this.m_techniques.length;\n        technique._styleSetIndex = style._styleSetIndex!;\n        technique._key = key;\n        if (style.styleSet !== undefined) {\n            technique._styleSet = style.styleSet;\n        }\n        this.m_techniques.push(technique as IndexedTechnique);\n        return technique as IndexedTechnique;\n    }\n}\n\nfunction computeDefaultRenderOrder(styleSet: InternalStyle[]) {\n    let techniqueRenderOrder = 0;\n    let styleSetIndex = 0;\n    for (const style of styleSet) {\n        style._styleSetIndex = styleSetIndex++;\n        if (style.technique !== undefined && style.renderOrder === undefined) {\n            style.renderOrder = techniqueRenderOrder++;\n        }\n    }\n}\n\nfunction resolveReferences(styleSet: StyleDeclaration[], definitions: Definitions | undefined) {\n    return styleSet.map(style => resolveStyleReferences(style, definitions));\n}\n\nfunction resolveStyleReferences(\n    style: StyleDeclaration,\n    definitions: Definitions | undefined\n): InternalStyle {\n    if (isJsonExpr(style)) {\n        if (!isJsonExprReference(style)) {\n            throw new Error(\"invalid expression in this context, only 'ref's are supported\");\n        }\n        // expand and instantiate references to style definitions.\n        const definitionName = style[1];\n        const def = definitions && definitions[definitionName];\n        if (!def) {\n            throw new Error(`invalid reference '${definitionName}' - not found`);\n        }\n        if (!isActualSelectorDefinition(def)) {\n            throw new Error(`invalid reference '${definitionName}' - expected style definition`);\n        }\n        // instantiate the style\n        return resolveStyleReferences(def, definitions);\n    }\n\n    return { ...style };\n}\n\n/**\n * Create transferable representation of dynamic technique.\n *\n * As for now, we remove all `Expr` as they are not supported on other side.\n */\nexport function makeDecodedTechnique(technique: IndexedTechnique): IndexedTechnique {\n    const result: Partial<IndexedTechnique> = {};\n    for (const attrName in technique) {\n        if (!technique.hasOwnProperty(attrName)) {\n            continue;\n        }\n        let attrValue: any = (technique as any)[attrName];\n        if (Expr.isExpr(attrValue)) {\n            attrValue = attrValue.toJSON();\n        }\n        (result as any)[attrName] = attrValue;\n    }\n    return (result as any) as IndexedTechnique;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/LRUCache\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst SdfShaderChunks = {\n    sdf_attributes: `\n        attribute vec4 position;\n        attribute vec4 uv;\n        attribute vec4 color;\n        attribute vec4 bgColor;\n        `,\n    sdf_varying: `\n        varying vec4 vColor;\n        varying float vWeight;\n        varying vec2 vUv;\n        varying float vRotation;\n        `,\n    sdf_varying_computation: `\n        #if BG_TEXT\n        vColor = bgColor;\n        vWeight = uv.w;\n        #else\n        vColor = color;\n        vWeight = uv.z;\n        #endif\n        vUv = vec2(uv.xy);\n        vRotation = position.w;\n        `,\n    sdf_frag_uniforms: `\n        uniform sampler2D sdfTexture;\n        uniform vec4 sdfParams;\n        `,\n    sdf_sampling_functions: `\n        float median(float r, float g, float b) {\n            return max(min(r, g), min(max(r, g), b));\n        }\n\n        float getDistance(vec2 uvOffset) {\n            vec3 sample = texture2D(sdfTexture, vUv.xy + uvOffset).rgb;\n            #if MSDF\n            return median(sample.r, sample.g, sample.b);\n            #else\n            return sample.r;\n            #endif\n        }\n\n        float getOpacity(vec2 uvOffset, float weight) {\n            vec2 uv = vUv + uvOffset;\n            vec2 rotatedUVs = abs(vec2(\n                cos(vRotation) * uv.x - sin(vRotation) * uv.y,\n                sin(vRotation) * uv.x + cos(vRotation) * uv.y));\n\n            float dx = dFdx(rotatedUVs.x) * sdfParams.x;\n            float dy = dFdy(rotatedUVs.y) * sdfParams.y;\n            float toPixels = sdfParams.w * inversesqrt( dx * dx + dy * dy );\n\n            float dist = getDistance(uvOffset) + min(weight, 0.5 - 1.0 / sdfParams.w) - 0.5;\n            return clamp(dist * toPixels + 0.5, 0.0, 1.0);\n        }\n        `\n};\nObject.assign(THREE.ShaderChunk, SdfShaderChunks);\n\nconst clearVertexSource: string = `\n    attribute vec2 position;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst clearFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    void main() {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }`;\n\nconst copyVertexSource: string = `\n    attribute vec3 position;\n    attribute vec2 uv;\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vUv;\n\n    void main() {\n        vUv = vec3(uv.xy, position.z);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xy, 0.0, 1.0);\n    }`;\n\nconst copyFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    uniform float pageOffset;\n    uniform sampler2D page0;\n    uniform sampler2D page1;\n    uniform sampler2D page2;\n    uniform sampler2D page3;\n    uniform sampler2D page4;\n    uniform sampler2D page5;\n    uniform sampler2D page6;\n    uniform sampler2D page7;\n\n    varying vec3 vUv;\n\n    void main() {\n        vec4 sample = vec4(0.0);\n        if (vUv.z < pageOffset || vUv.z > (pageOffset + 7.0)) discard;\n        else if (vUv.z < pageOffset + 1.0) sample = texture2D(page0, vUv.xy);\n        else if (vUv.z < pageOffset + 2.0) sample = texture2D(page1, vUv.xy);\n        else if (vUv.z < pageOffset + 3.0) sample = texture2D(page2, vUv.xy);\n        else if (vUv.z < pageOffset + 4.0) sample = texture2D(page3, vUv.xy);\n        else if (vUv.z < pageOffset + 5.0) sample = texture2D(page4, vUv.xy);\n        else if (vUv.z < pageOffset + 6.0) sample = texture2D(page5, vUv.xy);\n        else if (vUv.z < pageOffset + 7.0) sample = texture2D(page6, vUv.xy);\n        else sample = texture2D(page7, vUv.xy);\n\n        gl_FragColor = sample;\n    }`;\n\nconst sdfTextVertexSource: string = `\n    #include <sdf_attributes>\n    #include <sdf_varying>\n\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    void main() {\n        #include <sdf_varying_computation>\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n    }`;\n\nconst sdfTextFragmentSource: string = `\n    precision highp float;\n    precision highp int;\n\n    #include <sdf_varying>\n    #include <sdf_frag_uniforms>\n    #include <sdf_sampling_functions>\n\n    void main() {\n        vec4 color = vColor;\n        color.a *= getOpacity(vec2(0.0), vWeight);\n        if (color.a < 0.05) {\n            discard;\n        }\n        gl_FragColor = color;\n    }`;\n\n/**\n * @hidden\n * Material used for clearing glyphs from a [[GlyphTextureCache]].\n */\nexport class GlyphClearMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphClearMaterial`.\n     *\n     * @returns New `GlyphClearMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphClearMaterial\",\n            vertexShader: clearVertexSource,\n            fragmentShader: clearFragmentSource,\n            uniforms: {},\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material used for copying glyphs into a [[GlyphTextureCache]].\n */\nexport class GlyphCopyMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `GlyphCopyMaterial`.\n     *\n     * @returns New `GlyphCopyMaterial`.\n     */\n    constructor() {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"GlyphCopyMaterial\",\n            vertexShader: copyVertexSource,\n            fragmentShader: copyFragmentSource,\n            uniforms: {\n                pageOffset: new THREE.Uniform(0.0),\n                page0: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page1: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page2: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page3: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page4: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page5: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page6: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE),\n                page7: new THREE.Uniform(THREE.Texture.DEFAULT_IMAGE)\n            },\n            depthTest: false,\n            depthWrite: false\n        };\n        super(shaderParams);\n    }\n}\n\n/**\n * @hidden\n * Material parameters passed on [[SdfTextMaterial]] creation.\n */\nexport interface SdfTextMaterialParameters {\n    texture: THREE.Texture;\n    textureSize: THREE.Vector2;\n    size: number;\n    distanceRange: number;\n    isMsdf: boolean;\n    isBackground: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Material designed to render transformable, high quality SDF text.\n */\nexport class SdfTextMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Creates a new `SdfTextMaterial`.\n     *\n     * @param params Material parameters.\n     *\n     * @returns New `SdfTextMaterial`.\n     */\n    constructor(params: SdfTextMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SdfTextMaterial\",\n            vertexShader:\n                params.vertexSource !== undefined ? params.vertexSource : sdfTextVertexSource,\n            fragmentShader:\n                params.fragmentSource !== undefined ? params.fragmentSource : sdfTextFragmentSource,\n            uniforms: {\n                sdfTexture: new THREE.Uniform(params.texture),\n                sdfParams: new THREE.Uniform(\n                    new THREE.Vector4(\n                        params.textureSize.x,\n                        params.textureSize.y,\n                        params.size,\n                        params.distanceRange\n                    )\n                )\n            },\n            defines: {\n                MSDF: params.isMsdf ? 1.0 : 0.0,\n                BG_TEXT: params.isBackground ? 1.0 : 0.0\n            },\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.DoubleSide,\n            transparent: true\n        };\n        super(shaderParams);\n        this.extensions.derivatives = true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { GlyphData } from \"./GlyphData\";\nimport { TextLayoutStyle, TextRenderStyle } from \"./TextStyle\";\n\n/**\n * Object containing vertex buffer data generated by [[TextCanvas]].\n */\nexport class TextBufferObject {\n    /**\n     * Constructs a new `TextBufferObject`.\n     *\n     * @param glyphs Input glyphs.\n     * @param buffer Buffer containing the data generated by [[TextCanvas]].\n     * @param bounds Optional text bounds.\n     * @param characterBounds Optional character bounds.\n     * @param textRenderStyle [[TextRenderStyle]] applied by [[TextCanvas]].\n     * @param textLayoutStyle [[TextLayoutStyle]] applied by [[TextCanvas]].\n     *\n     * @returns New `TextBufferObject`.\n     */\n    constructor(\n        readonly glyphs: GlyphData[],\n        readonly buffer: Float32Array,\n        readonly bounds?: THREE.Box2,\n        readonly characterBounds?: THREE.Box2[],\n        readonly textRenderStyle?: TextRenderStyle,\n        readonly textLayoutStyle?: TextLayoutStyle\n    ) {}\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog } from \"../rendering/FontCatalog\";\nimport { SdfTextMaterial } from \"../rendering/TextMaterials\";\n\n/**\n * Material parameters passed on [[SdfTextMaterial]] creation when using the `\n * `createSdfTextMaterial` helper function.\n */\nexport interface SdfTextMaterialParameters {\n    fontCatalog: FontCatalog;\n    isBackground?: boolean;\n    vertexSource?: string;\n    fragmentSource?: string;\n}\n\n/**\n * Helper function designed to create [[SdfTextMaterials]] that can be rendered using\n * [[TextCanvas]].\n *\n * @param params Material parameters.\n *\n * @returns New `SdfTextMaterial`.\n */\nexport function createSdfTextMaterial(params: SdfTextMaterialParameters): SdfTextMaterial {\n    return new SdfTextMaterial({\n        texture: params.fontCatalog.texture,\n        textureSize: params.fontCatalog.textureSize,\n        size: params.fontCatalog.size,\n        distanceRange: params.fontCatalog.distanceRange,\n        isMsdf: params.fontCatalog.type === \"msdf\",\n        isBackground: params.isBackground === true,\n        vertexSource: params.vertexSource,\n        fragmentSource: params.fragmentSource\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport {\n    Light,\n    MagFilter,\n    MinFilter,\n    PixelFormat,\n    TextureDataType,\n    WrappingMode\n} from \"@here/harp-datasource-protocol\";\n\n/**\n * Returns `three.js` pixel format object basing on a [[PixelFormat]] specified.\n */\nexport function toPixelFormat(format: PixelFormat): THREE.PixelFormat {\n    switch (format) {\n        case \"Alpha\":\n            return THREE.AlphaFormat;\n        case \"RGB\":\n            return THREE.RGBFormat;\n        case \"RGBA\":\n            return THREE.RGBAFormat;\n        case \"Luminance\":\n            return THREE.LuminanceFormat;\n        case \"LuminanceAlpha\":\n            return THREE.LuminanceAlphaFormat;\n        case \"RGBE\":\n            return THREE.RGBEFormat;\n        case \"Depth\":\n            return THREE.DepthFormat;\n        case \"DepthStencil\":\n            return THREE.DepthStencilFormat;\n        case \"Red\":\n            return THREE.RedFormat;\n        default:\n            throw new Error(`invalid pixel format: ${format}`);\n    }\n}\n\n/**\n * Returns `three.js` texture data types based on a [[TextureDataType]] specified.\n */\nexport function toTextureDataType(dataType: TextureDataType): THREE.TextureDataType {\n    switch (dataType) {\n        case \"UnsignedByte\":\n            return THREE.UnsignedByteType;\n        case \"Byte\":\n            return THREE.ByteType;\n        case \"Short\":\n            return THREE.ShortType;\n        case \"UnsignedShort\":\n            return THREE.UnsignedShortType;\n        case \"Int\":\n            return THREE.IntType;\n        case \"UnsignedInt\":\n            return THREE.UnsignedIntType;\n        case \"Float\":\n            return THREE.FloatType;\n        case \"HalfFloat\":\n            return THREE.HalfFloatType;\n        default:\n            throw new Error(`invalid texture data type: ${dataType}`);\n    }\n}\n\n/**\n * Returns `three.js` wrapping mode object based on a [[WrappingMode]] specified.\n */\nexport function toWrappingMode(mode: WrappingMode): THREE.Wrapping {\n    switch (mode) {\n        case \"clamp\":\n            return THREE.ClampToEdgeWrapping;\n        case \"repeat\":\n            return THREE.RepeatWrapping;\n        case \"mirror\":\n            return THREE.MirroredRepeatWrapping;\n        default:\n            throw new Error(`invalid wrapping mode: ${mode}`);\n    }\n}\n\n/**\n * Returns `three.js` texture filter object based on a [[MagFilter]] or [[MinFilter]] specified.\n */\nexport function toTextureFilter(filter: MagFilter | MinFilter): THREE.TextureFilter {\n    switch (filter) {\n        case \"nearest\":\n            return THREE.NearestFilter;\n        case \"nearestMipMapNearest\":\n            return THREE.NearestMipMapNearestFilter;\n        case \"nearestMipMapLinear\":\n            return THREE.NearestMipMapLinearFilter;\n        case \"linear\":\n            return THREE.LinearFilter;\n        case \"linearMipMapNearest\":\n            return THREE.LinearMipMapNearestFilter;\n        case \"linearMipMapLinear\":\n            return THREE.LinearMipMapLinearFilter;\n        default:\n            throw new Error(`invalid texture filter: ${filter}`);\n    }\n}\n\n/**\n * Create a specific light for lightening the map.\n */\nexport function createLight(lightDescription: Light): THREE.Light {\n    switch (lightDescription.type) {\n        case \"ambient\": {\n            const light = new THREE.AmbientLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            return light;\n        }\n        case \"directional\": {\n            const light = new THREE.DirectionalLight(\n                lightDescription.color,\n                lightDescription.intensity\n            );\n            light.name = lightDescription.name;\n            if (lightDescription.castShadow !== undefined) {\n                light.castShadow = lightDescription.castShadow;\n            }\n            light.position.set(\n                lightDescription.direction.x,\n                lightDescription.direction.y,\n                lightDescription.direction.z\n            );\n            light.position.normalize();\n            return light;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ExtrudedPolygonTechnique } from \"@here/harp-datasource-protocol\";\nimport { ColorUtils } from \"@here/harp-datasource-protocol/lib/ColorUtils\";\nimport { enforceBlending, MapMeshStandardMaterial } from \"@here/harp-materials\";\nimport { evaluateBaseColorProperty } from \"./DecodedTileHelpers\";\n\n/**\n * Bitmask used for the depth pre-pass to prevent multiple fragments in the same screen position\n * from rendering color.\n */\nexport const DEPTH_PRE_PASS_STENCIL_MASK = 0x01;\n\n/**\n * Render order offset for the depth pre-pass to ensure that it's rendered first.\n */\nconst DEPTH_PRE_PASS_RENDER_ORDER_OFFSET = 1e-6;\n\n/**\n * Check if technique requires (and not disables) use of depth prepass.\n *\n * Depth prepass is enabled if correct opacity is specified (in range `(0,1)`) _and_ not explicitly\n * disabled by `enableDepthPrePass` option.\n *\n * @param technique [[BaseStandardTechnique]] instance to be checked\n */\nexport function isRenderDepthPrePassEnabled(technique: ExtrudedPolygonTechnique) {\n    // Depth pass explicitly disabled\n    if (technique.enableDepthPrePass === false) {\n        return false;\n    }\n    let transparent =\n        technique.opacity !== undefined && technique.opacity > 0.0 && technique.opacity < 1.0;\n    // If not opaque then check if transparency may be modified via alpha in base color.\n    // Otherwise we don't need to even test base color because opacity mixed with any base alpha,\n    // will always produce some transparency effect.\n    if (!transparent) {\n        // We do not support switching depth pass during alpha interpolation, ignore zoom level\n        // when calculating base color value.\n        const color = evaluateBaseColorProperty(technique);\n        if (color !== undefined) {\n            const alpha = ColorUtils.getAlphaFromHex(color);\n            transparent = alpha > 0.0 && alpha < 1.0;\n        }\n    }\n    return transparent;\n}\n\n/**\n * Creates material for depth prepass.\n *\n * Creates material that writes only to the z-buffer. Updates the original material instance, to\n * support depth prepass.\n *\n * @param baseMaterial The base material of mesh that is updated to work with depth prepass\n *     and then used. This parameter is a template for depth prepass material that is returned.\n * @returns depth prepass material, which is a clone of `baseMaterial` with the adapted settings.\n */\nexport function createDepthPrePassMaterial(baseMaterial: THREE.Material): THREE.Material {\n    baseMaterial.depthWrite = false;\n    baseMaterial.depthFunc = THREE.EqualDepth;\n    baseMaterial.colorWrite = true;\n    enforceBlending(baseMaterial);\n\n    const depthPassMaterial = baseMaterial.clone();\n    depthPassMaterial.depthWrite = true;\n    depthPassMaterial.depthTest = true;\n    depthPassMaterial.depthFunc = THREE.LessDepth;\n    depthPassMaterial.colorWrite = false;\n    depthPassMaterial.opacity = 1.0;\n    depthPassMaterial.blending = THREE.NoBlending;\n    return depthPassMaterial;\n}\n\n// tslint:disable:max-line-length\n/**\n * Clones a given mesh to render it in the depth prepass with another material. Both the original\n * and depth prepass meshes, when rendered in the correct order, create the proper depth prepass\n * effect. The original mesh material is slightly modified by [[createDepthPrePassMaterial]] to\n * support the depth prepass. This method is usable only if the material of this mesh has an\n * opacity value in the range `(0,1)`.\n *\n * The DepthPrePass object is created wis a slightly smaller `renderOrder` as the original mesh\n * to ensure that it's rendered first.\n *\n * @param mesh original mesh\n * @returns `Mesh` depth pre pass\n */\n// tslint:enable:max-line-length\nexport function createDepthPrePassMesh(mesh: THREE.Mesh): THREE.Mesh {\n    const originalGeometry = mesh.geometry;\n\n    if (!(originalGeometry instanceof THREE.BufferGeometry)) {\n        throw new Error(\"#createDepthPassMesh only BufferGeometry is supported\");\n    }\n    const positionAttribute = originalGeometry.getAttribute(\"position\");\n    if (!positionAttribute) {\n        throw new Error(\"#createDepthPassMesh position attribute not found\");\n    }\n\n    const depthPassGeometry = new THREE.BufferGeometry();\n    depthPassGeometry.setAttribute(\"position\", positionAttribute);\n    const uvAttribute = originalGeometry.getAttribute(\"uv\");\n    if (uvAttribute) {\n        depthPassGeometry.setAttribute(\"uv\", uvAttribute);\n    }\n    const normalAttribute = originalGeometry.getAttribute(\"normal\");\n    if (normalAttribute) {\n        depthPassGeometry.setAttribute(\"normal\", normalAttribute);\n    }\n    const extrusionAxisAttribute = originalGeometry.getAttribute(\"extrusionAxis\");\n    if (extrusionAxisAttribute) {\n        depthPassGeometry.setAttribute(\"extrusionAxis\", extrusionAxisAttribute);\n    }\n\n    if (originalGeometry.index) {\n        depthPassGeometry.setIndex(originalGeometry.index);\n    }\n\n    for (const group of originalGeometry.groups) {\n        const { start, count, materialIndex } = group;\n        depthPassGeometry.addGroup(start, count, materialIndex);\n    }\n\n    const depthPassMaterial =\n        mesh.material instanceof Array\n            ? mesh.material.map(createDepthPrePassMaterial)\n            : createDepthPrePassMaterial(mesh.material);\n\n    const depthPassMesh = new THREE.Mesh(depthPassGeometry, depthPassMaterial);\n    depthPassMesh.renderOrder = mesh.renderOrder - DEPTH_PRE_PASS_RENDER_ORDER_OFFSET;\n\n    return depthPassMesh;\n}\n\n/**\n * Sets up all the needed stencil logic needed for the depth pre-pass.\n *\n * This logic is in place to avoid z-fighting artifacts that can appear in geometries that have\n * coplanar triangles inside the same mesh.\n *\n * @param depthMesh Mesh created by `createDepthPrePassMesh`.\n * @param colorMesh Original mesh.\n */\nexport function setDepthPrePassStencil(depthMesh: THREE.Mesh, colorMesh: THREE.Mesh) {\n    // Set up depth mesh stencil logic.\n    // Set the depth pre-pass stencil bit for all processed fragments. We use\n    // `THREE.AlwaysStencilFunc` and not `THREE.NotEqualStencilFunc` to force all fragments to pass\n    // the stencil test and write the correct depth value.\n    const depthMaterial = depthMesh.material as MapMeshStandardMaterial;\n    depthMaterial.stencilWrite = true;\n    depthMaterial.stencilFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZFail = THREE.KeepStencilOp;\n    depthMaterial.stencilZPass = THREE.ReplaceStencilOp;\n    depthMaterial.stencilFunc = THREE.AlwaysStencilFunc;\n    depthMaterial.stencilRef = 0xff;\n    (depthMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n\n    // Set up color mesh stencil logic.\n    // Only write color for pixels with the depth pre-pass stencil bit set. Also, once a pixel is\n    // rendered, set the stencil bit to 0 to prevent subsequent pixels in the same clip position\n    // from rendering color again.\n    const colorMaterial = colorMesh.material as MapMeshStandardMaterial;\n    colorMaterial.stencilWrite = true;\n    colorMaterial.stencilFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZFail = THREE.KeepStencilOp;\n    colorMaterial.stencilZPass = THREE.ZeroStencilOp;\n    colorMaterial.stencilFunc = THREE.EqualStencilFunc;\n    colorMaterial.stencilRef = 0xff;\n    (colorMaterial as any).stencilFuncMask = DEPTH_PRE_PASS_STENCIL_MASK;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { hasDisplacementFeature } from \"@here/harp-materials\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { TileDisplacementMap } from \"../DisplacementMap\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { TextElement } from \"../text/TextElement\";\nimport { Tile, TileObject } from \"../Tile\";\n\n/**\n * Overlays the specified object's geometry on the elevation represented by the given displacement\n * map .\n *\n * @param object The object to be overlaid.\n * @param displacementMap Texture representing the elevation data used to overlay the object.\n */\nfunction overlayObject(object: TileObject, displacementMap: THREE.DataTexture): void {\n    if (!(\"material\" in object)) {\n        return;\n    }\n\n    const material = (object as any).material;\n\n    if (hasDisplacementFeature(material)) {\n        material.displacementMap = displacementMap;\n    }\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param worldCoords World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPosition(\n    worldCoords: THREE.Vector3,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    // TODO: Move calculation of text element geoCoordinates to decoder.\n    const geoCoords = projection.unprojectPoint(worldCoords);\n\n    if (displacementMap.geoBox.contains(geoCoords)) {\n        geoCoords.altitude = elevationProvider.sampleHeight(geoCoords, displacementMap);\n    } else {\n        geoCoords.altitude = elevationProvider.getHeight(geoCoords, displacementMap.tileKey.level);\n        if (geoCoords.altitude === undefined) {\n            return false;\n        }\n    }\n    projection.projectPoint(geoCoords, worldCoords);\n    return true;\n}\n\n/**\n * Overlays the specified coordinates on top of elevation data if available.\n *\n * @param path World coordinates to overlay.\n * @param elevationProvider Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n * @returns `true` if the position was successfully overlaid, `false` otherwise (e.g. elevation\n * data not available).\n */\nfunction overlayPath(\n    path: THREE.Vector3[],\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n): boolean {\n    for (const position of path) {\n        if (!overlayPosition(position, elevationProvider, displacementMap, projection)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Overlays a text element on top of elevation data if available.\n *\n * @param textElement The text element whose geometry will be overlaid.\n * @param elevationProvider  Used to sample elevation data.\n * @param displacementMap Elevation data to be sampled.\n * @param projection Projection from geo to world space.\n */\nexport function overlayTextElement(\n    textElement: TextElement,\n    elevationProvider: ElevationProvider,\n    displacementMap: TileDisplacementMap,\n    projection: Projection\n) {\n    assert(!textElement.elevated);\n    if (!displacementMap) {\n        return;\n    }\n\n    textElement.elevated = textElement.path\n        ? overlayPath(textElement.path, elevationProvider, displacementMap, projection)\n        : overlayPosition(textElement.position, elevationProvider, displacementMap, projection);\n}\n\n/**\n * Overlays the geometry in the given tile on top of elevation data if available.\n *\n * @param tile The tile whose geometry will be overlaid.\n */\nexport function overlayOnElevation(tile: Tile): void {\n    const elevationProvider = tile.mapView.elevationProvider;\n\n    if (elevationProvider === undefined || tile.objects.length === 0) {\n        return;\n    }\n    const firstObject = tile.objects[0];\n    if (\n        !firstObject.userData ||\n        !firstObject.userData.kind ||\n        !firstObject.userData.kind.find((kind: GeometryKind) => {\n            return kind !== GeometryKind.All && kind !== GeometryKind.Terrain;\n        })\n    ) {\n        return;\n    }\n\n    const displacementMap = elevationProvider.getDisplacementMap(tile.tileKey);\n    if (displacementMap === undefined) {\n        return;\n    }\n\n    // TODO: HARP-8808 Apply displacement maps once per material.\n    for (const object of tile.objects) {\n        overlayObject(object, displacementMap.texture);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ExtendedTileInfo,\n    getPropertyValue,\n    LineTechnique,\n    SolidLineTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { Expr } from \"@here/harp-datasource-protocol/lib/Expr\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { compileTechniques } from \"./DecodedTileHelpers\";\nimport { MapView } from \"./MapView\";\nimport { PickObjectType, PickResult } from \"./PickHandler\";\nimport { RoadIntersectionData, Tile } from \"./Tile\";\n\nconst logger = LoggerManager.instance.create(\"RoadPicker\");\n\nexport interface RoadPickResult extends PickResult {\n    distFromCenter: number;\n    positions: number[];\n}\n\nconst MAX_DISTANCE_ERROR = 0.01;\n\n/**\n * Optional flags in the style that can be used to optimize the evaluation.\n */\ninterface CustomLineTechnique extends LineTechnique {\n    isBackground?: boolean;\n}\n\n/**\n * The `RoadPicker` class manages picking of roads, which may not be pickable in THREE.js, since\n * their geometry is generated in the vertex shader.\n */\nexport class RoadPicker {\n    constructor(private m_mapView: MapView) {}\n    /**\n     * Registers a tile with the `RoadPicker`. This function extracts line data from the [[Tile]],\n     * but only if the tile has the necessary [[ExtendedTileInfo]] that allows for road features to\n     * be reconstructed.\n     *\n     * @param tile The tile to register.\n     */\n    registerTile(tile: Tile): RoadIntersectionData | undefined {\n        assert(tile.decodedTile !== undefined);\n        if (tile.decodedTile === undefined || tile.decodedTile.tileInfo === undefined) {\n            return undefined;\n        }\n        const extendedTileInfo: ExtendedTileInfo = tile.decodedTile.tileInfo as ExtendedTileInfo;\n        const lineFeatures = extendedTileInfo.lineGroup;\n\n        if (lineFeatures === undefined || lineFeatures.numFeatures === 0) {\n            // tileInfo not of expected type [[ExtendedTileInfo]]\n            return undefined;\n        }\n\n        const widths: RoadIntersectionData[\"widths\"] = [];\n        widths.length = lineFeatures.numFeatures;\n\n        compileTechniques(extendedTileInfo.techniqueCatalog);\n\n        const mapView = this.m_mapView;\n        for (let i = 0; i < lineFeatures.numFeatures; i++) {\n            const technique = extendedTileInfo.techniqueCatalog[\n                lineFeatures.techniqueIndex[i]\n            ] as SolidLineTechnique;\n\n            const isDynamic =\n                technique.metricUnit === \"Pixel\" ||\n                Expr.isExpr(technique.lineWidth) ||\n                typeof technique.lineWidth === \"string\";\n\n            widths[i] =\n                technique.lineWidth !== undefined\n                    ? isDynamic\n                        ? () => {\n                              const unitFactor =\n                                  technique.metricUnit === \"Pixel\" ? mapView.pixelToWorld : 1.0;\n                              return (\n                                  getPropertyValue(technique.lineWidth, mapView.env) *\n                                  unitFactor *\n                                  0.5\n                              );\n                          }\n                        : (technique.lineWidth as number)\n                    : 1.0;\n        }\n        const objInfos = extendedTileInfo.lineGroup.userData;\n\n        const roadIntersectionData = {\n            ids: lineFeatures.featureIds,\n            techniqueIndex: lineFeatures.techniqueIndex,\n            starts: lineFeatures.positionIndex,\n            widths,\n            positions: lineFeatures.positions,\n            techniques: extendedTileInfo.techniqueCatalog,\n            objInfos\n        };\n\n        return roadIntersectionData;\n    }\n\n    /**\n     * Tests the `pickPos` point for intersection with all roads on a tile.\n     *\n     * @param tile The tile to pick.\n     * @param eyePos The WorldPosition of eye or camera to compute distances.\n     * @param pickPos The WorldPosition of the picked point, on the plane.\n     * @param results The existing array of [[PickResult]]; new results should be appended.\n     */\n    intersectRoads(\n        tile: Tile,\n        eyePos: THREE.Vector3,\n        pickPos: THREE.Vector3,\n        results: PickResult[]\n    ): boolean {\n        if (tile.boundingBox.distanceToPoint(pickPos) > MAX_DISTANCE_ERROR) {\n            // outside of bounding box of tile\n            return false;\n        }\n\n        const roadIntersectionData = tile.roadIntersectionData;\n        if (roadIntersectionData === undefined) {\n            return false;\n        }\n\n        const ids = roadIntersectionData.ids;\n        const techniques = roadIntersectionData.techniques;\n        const techniqueIndices = roadIntersectionData.techniqueIndex;\n        const numFeatures = ids.length;\n        const positions = roadIntersectionData.positions;\n        const widths = roadIntersectionData.widths;\n        const px = pickPos.x - tile.center.x;\n        const py = pickPos.y - tile.center.y;\n        const pickDistance = pickPos.distanceTo(eyePos);\n\n        if (\n            widths.length !== ids.length ||\n            ids.length !== techniqueIndices.length ||\n            techniqueIndices.length !== roadIntersectionData.starts.length\n        ) {\n            logger.error(\n                \"The amount of widths, ids, techniqueIndices and starts has to be the same\"\n            );\n            return false;\n        }\n\n        for (let i = 0; i < numFeatures; i++) {\n            const technique = techniques[techniqueIndices[i]] as CustomLineTechnique;\n\n            // if the technique is marked as background or as transient, we ignore it for picking\n            if (/*technique.isBackground === true ||*/ technique.transient === true) {\n                continue;\n            }\n\n            const featureStart = roadIntersectionData.starts[i];\n            const featureEnd =\n                i < numFeatures - 1\n                    ? roadIntersectionData.starts[i + 1]\n                    : roadIntersectionData.positions.length;\n\n            let startX = positions[featureStart];\n            let startY = positions[featureStart + 1];\n\n            const widthEntry = widths[i];\n            const actualWidth = Math.max(\n                1,\n                typeof widthEntry === \"function\" ? widthEntry() : widthEntry\n            );\n            const lineWidthSqr = actualWidth * actualWidth;\n\n            let closestDistSqr = Number.MAX_VALUE;\n\n            for (let j = featureStart + 2; j < featureEnd; j += 2) {\n                const endX = positions[j];\n                const endY = positions[j + 1];\n\n                const distSqr = Math2D.distToSegmentSquared(px, py, startX, startY, endX, endY);\n                if (distSqr < lineWidthSqr) {\n                    if (distSqr < closestDistSqr) {\n                        closestDistSqr = distSqr;\n                    }\n                }\n\n                startX = endX;\n                startY = endY;\n            }\n\n            if (closestDistSqr < Number.MAX_VALUE) {\n                const roadPickResult: RoadPickResult = {\n                    type: PickObjectType.Line,\n                    point: pickPos,\n                    distance: pickDistance,\n                    distFromCenter: Math.sqrt(closestDistSqr),\n                    featureId: ids[i],\n                    positions: positions.slice(featureStart, featureEnd),\n                    technique\n                };\n                this.addUserData(roadPickResult, i, roadIntersectionData.objInfos);\n                results.push(roadPickResult);\n            }\n        }\n\n        return false;\n    }\n\n    private addUserData(\n        roadPickResult: RoadPickResult,\n        index: number,\n        objInfos?: Array<{} | undefined>\n    ) {\n        if (objInfos !== undefined && objInfos.length > 0) {\n            roadPickResult.userData = { ...objInfos[index] };\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport {\n    HorizontalAlignment,\n    MeasurementParameters,\n    TextCanvas,\n    VerticalAlignment\n} from \"@here/harp-text-canvas\";\nimport { assert, Math2D, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { PoiManager } from \"../poi/PoiManager\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { CollisionBox, DetailedCollisionBox, IBox, ScreenCollisions } from \"../ScreenCollisions\";\nimport { ScreenProjector } from \"../ScreenProjector\";\nimport { RenderState } from \"./RenderState\";\nimport { PoiInfo, poiIsRenderable, TextElement } from \"./TextElement\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * Minimum number of pixels per character. Used during estimation if there is enough screen space\n * available to render a text.\n */\nconst MIN_AVERAGE_CHAR_WIDTH = 5;\n\n/**\n * Functions related to text element placement.\n */\n\nconst tmpPosition = new THREE.Vector3(0, 0, 0);\nconst tmpCameraDir = new THREE.Vector3(0, 0, 0);\nconst COS_TEXT_ELEMENT_FALLOFF_ANGLE = 0.5877852522924731; // Math.cos(0.3 * Math.PI)\n\n/**\n * Checks whether the distance of the specified text element to the center of the given view is\n * lower than a maximum threshold.\n * @param textElement The textElement of which the view distance will be checked, with coordinates\n * in world space.\n * @param mapView The view that will be used as reference to calculate the distance.\n * @param maxViewDistance The maximum distance value.\n * @returns The text element view distance if it's lower than the maximum value, otherwise\n * `undefined`.\n */\nfunction checkViewDistance(\n    worldCenter: THREE.Vector3,\n    textElement: TextElement,\n    projectionType: ProjectionType,\n    camera: THREE.Camera,\n    maxViewDistance: number\n): number | undefined {\n    const textDistance = computeViewDistance(worldCenter, textElement);\n\n    if (projectionType !== ProjectionType.Spherical) {\n        return textDistance <= maxViewDistance ? textDistance : undefined;\n    }\n\n    // For sphere projection: Filter labels that are close to the horizon\n    tmpPosition.copy(textElement.position).normalize();\n    camera.getWorldPosition(tmpCameraDir).normalize();\n    const cosAlpha = tmpPosition.dot(tmpCameraDir);\n    const viewDistance =\n        cosAlpha > COS_TEXT_ELEMENT_FALLOFF_ANGLE && textDistance <= maxViewDistance\n            ? textDistance\n            : undefined;\n\n    return viewDistance;\n}\n\n/**\n * Computes the distance of the specified text element to the given position.\n * @param refPosition The world coordinates used a reference position to calculate the distance.\n * @param textElement The textElement of which the view distance will be checked. It must have\n * coordinates in world space.\n * @returns The text element view distance.\n * `undefined`.\n */\nexport function computeViewDistance(refPosition: THREE.Vector3, textElement: TextElement): number {\n    let viewDistance: number;\n\n    if (Array.isArray(textElement.points) && textElement.points.length > 1) {\n        const viewDistance0 = refPosition.distanceTo(textElement.points[0]);\n        const viewDistance1 = refPosition.distanceTo(\n            textElement.points[textElement.points.length - 1]\n        );\n\n        viewDistance = Math.min(viewDistance0, viewDistance1);\n    } else {\n        viewDistance = refPosition.distanceTo(textElement.points as THREE.Vector3);\n    }\n\n    return viewDistance;\n}\n\n/**\n * Computes the maximum view distance for text elements as a ratio of the given view's maximum far\n * plane distance.\n * @param viewState The view for which the maximum view distance will be calculated.\n * @param farDistanceLimitRatio The ratio to apply to the maximum far plane distance.\n * @returns Maximum view distance.\n */\nexport function getMaxViewDistance(viewState: ViewState, farDistanceLimitRatio: number): number {\n    return viewState.maxVisibilityDist * farDistanceLimitRatio;\n}\n\n/**\n * State of fading.\n */\nexport enum PrePlacementResult {\n    Ok = 0,\n    NotReady,\n    Invisible,\n    TooFar,\n    Duplicate,\n    Count\n}\n\n/**\n * Applies early rejection tests for a given text element meant to avoid trying to place labels\n * that are not visible, not ready, duplicates etc...\n * @param textElement The Text element to check.\n * @param viewState The view for which the text element will be placed.\n * @param viewCamera The view's camera.\n * @param m_poiManager To prepare pois for rendering.\n * @param [maxViewDistance] If specified, text elements farther than this max distance will be\n * rejected.\n * @returns An object with the result code and the text element view distance\n * ( or `undefined` of the checks failed) as second.\n */\nexport function checkReadyForPlacement(\n    textElement: TextElement,\n    viewState: ViewState,\n    viewCamera: THREE.Camera,\n    poiManager: PoiManager,\n    maxViewDistance?: number\n): { result: PrePlacementResult; viewDistance: number | undefined } {\n    let viewDistance: number | undefined;\n\n    if (!textElement.visible) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    // If a PoiTable is specified in the technique, the table is required to be\n    // loaded before the POI can be rendered.\n    if (!poiManager.updatePoiFromPoiTable(textElement)) {\n        // PoiTable has not been loaded, but is required to determine\n        // visibility.\n        return { result: PrePlacementResult.NotReady, viewDistance };\n    }\n\n    // Text element visibility and zoom level ranges must be checked after calling\n    // updatePoiFromPoiTable, since that function may change those values.\n    if (\n        !textElement.visible ||\n        !MathUtils.isClamped(\n            viewState.zoomLevel,\n            textElement.minZoomLevel,\n            textElement.maxZoomLevel\n        )\n    ) {\n        return { result: PrePlacementResult.Invisible, viewDistance };\n    }\n\n    viewDistance =\n        maxViewDistance === undefined\n            ? computeViewDistance(viewState.worldCenter, textElement)\n            : checkViewDistance(\n                  viewState.worldCenter,\n                  textElement,\n                  viewState.projection.type,\n                  viewCamera,\n                  maxViewDistance\n              );\n\n    if (viewDistance === undefined) {\n        return { result: PrePlacementResult.TooFar, viewDistance };\n    }\n\n    return { result: PrePlacementResult.Ok, viewDistance };\n}\n\n/**\n * Computes the offset for a point text accordingly to text alignment (and icon, if any).\n * @param textElement The text element of which the offset will computed. It must be a point\n * label with [[layoutStyle]] and [[bounds]] already computed.\n * @param offset The offset result.\n */\nfunction computePointTextOffset(\n    textElement: TextElement,\n    offset: THREE.Vector2 = new THREE.Vector2()\n): THREE.Vector2 {\n    assert(textElement.type === TextElementType.PoiLabel);\n    assert(textElement.layoutStyle !== undefined);\n    assert(textElement.bounds !== undefined);\n\n    const hAlign = textElement.layoutStyle!.horizontalAlignment;\n    const vAlign = textElement.layoutStyle!.verticalAlignment;\n\n    switch (hAlign) {\n        case HorizontalAlignment.Right:\n            offset.x = -textElement.xOffset;\n            break;\n        default:\n            offset.x = textElement.xOffset;\n            break;\n    }\n\n    switch (vAlign) {\n        case VerticalAlignment.Below:\n            offset.y = -textElement.yOffset;\n            break;\n        case VerticalAlignment.Above:\n            offset.y = textElement.yOffset - textElement.bounds!.min.y;\n            break;\n        default:\n            offset.y = textElement.yOffset;\n            break;\n    }\n\n    if (textElement.poiInfo !== undefined && poiIsRenderable(textElement.poiInfo)) {\n        assert(textElement.poiInfo.computedWidth !== undefined);\n        assert(textElement.poiInfo.computedHeight !== undefined);\n\n        offset.x += textElement.poiInfo.computedWidth! * (0.5 + hAlign);\n        offset.y += textElement.poiInfo.computedHeight! * (0.5 + vAlign);\n    }\n    return offset;\n}\n\nconst tmpBox = new THREE.Box2();\nconst tmpBoxes: THREE.Box2[] = [];\nconst tmpMeasurementParams: MeasurementParameters = {};\nconst tmpCollisionBoxes: CollisionBox[] = [];\nconst tmpCollisionBox = new CollisionBox();\nconst tmpScreenPosition = new THREE.Vector2();\nconst tmpTextOffset = new THREE.Vector2();\nconst tmp2DBox = new Math2D.Box();\nconst pointLabelMargin = new THREE.Vector2(4, 2);\n\nexport enum PlacementResult {\n    Ok,\n    Rejected,\n    Invisible\n}\n\n/**\n * Places an icon on screen.\n * @param iconRenderState The icon state.\n * @param poiInfo Icon information necessary to compute its dimensions.\n * @param screenPosition Screen position of the icon.\n * @param scaleFactor Scaling factor to apply to the icon dimensions.\n * @param screenCollisions Used to check the icon visibility and collisions.\n * @param env Current map env.\n * @returns `PlacementResult.Ok` if icon can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placeIcon(\n    iconRenderState: RenderState,\n    poiInfo: PoiInfo,\n    screenPosition: THREE.Vector2,\n    scaleFactor: number,\n    env: Env,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scaleFactor, env, tmp2DBox);\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    const iconSpaceAvailable =\n        poiInfo.mayOverlap === true || !screenCollisions.isAllocated(tmp2DBox);\n\n    if (!iconSpaceAvailable) {\n        return iconRenderState.isVisible() ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Places a point label on a specified text canvas.\n * @param labelState State of the point label to place.\n * @param screenPosition Position of the label in screen coordinates.\n * @param scale Scale factor to be applied to label dimensions.\n * @param isRejected Whether the label is already rejected (e.g. because its icon was rejected). If\n * `true`, text won't be checked for collision, result will be either `PlacementResult.Invisible` or\n * `PlacementResult.Rejected`.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @param outScreenPosition The final label screen position after applying any offsets.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePointLabel(\n    labelState: TextElementState,\n    screenPosition: THREE.Vector2,\n    scale: number,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions,\n    isRejected: boolean,\n    outScreenPosition: THREE.Vector3\n): PlacementResult {\n    const label = labelState.element;\n\n    if (label.bounds === undefined) {\n        label.bounds = new THREE.Box2();\n        tmpMeasurementParams.outputCharacterBounds = undefined;\n        tmpMeasurementParams.path = undefined;\n        tmpMeasurementParams.pathOverflow = false;\n        tmpMeasurementParams.letterCaseArray = label.glyphCaseArray!;\n        textCanvas.measureText(label.glyphs!, label.bounds, tmpMeasurementParams);\n    }\n\n    screenPosition.add(computePointTextOffset(label, tmpTextOffset));\n    outScreenPosition.set(screenPosition.x, screenPosition.y, labelState.renderDistance);\n\n    // TODO: Make the margin configurable\n    tmpBox.copy(label.bounds!).expandByVector(pointLabelMargin);\n    tmpBox.min.multiplyScalar(scale);\n    tmpBox.max.multiplyScalar(scale);\n    tmpBox.translate(screenPosition);\n    tmp2DBox.set(\n        tmpBox.min.x,\n        tmpBox.min.y,\n        tmpBox.max.x - tmpBox.min.x,\n        tmpBox.max.y - tmpBox.min.y\n    );\n\n    // Check the text visibility.\n    if (!screenCollisions.isVisible(tmp2DBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    if (isRejected || (!label.textMayOverlap && screenCollisions.isAllocated(tmp2DBox))) {\n        return labelState.visible ? PlacementResult.Rejected : PlacementResult.Invisible;\n    }\n\n    // Don't allocate space for rejected text. When zooming, this allows placement of a\n    // lower priority text element that was displaced by a higher priority one (not\n    // present in the new zoom level) before an even lower priority one takes the space.\n    // Otherwise the lowest priority text will fade in and back out.\n    // TODO: Add a unit test for this scenario.\n    if (label.textReservesSpace) {\n        screenCollisions.allocate(tmp2DBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Places a path label along a given path on a specified text canvas.\n * @param labelState The state of the path label to place.\n * @param textPath The text path along which the label will be placed.\n * @param screenPosition Position of the label in screen coordinates.\n * @param textCanvas The text canvas where the label will be placed.\n * @param screenCollisions Used to check collisions with other labels.\n * @returns `PlacementResult.Ok` if path label can be placed, `PlacementResult.Rejected` if there's\n * a collision or text doesn't fit into path, `PlacementResult.Invisible` if it's not visible.\n */\nexport function placePathLabel(\n    labelState: TextElementState,\n    textPath: THREE.Path,\n    screenPosition: THREE.Vector2,\n    textCanvas: TextCanvas,\n    screenCollisions: ScreenCollisions\n): PlacementResult {\n    // Recalculate the text bounds for this path label. If measurement fails, the whole\n    // label doesn't fit the path and should be discarded.\n    tmpMeasurementParams.path = textPath;\n    tmpMeasurementParams.outputCharacterBounds = tmpBoxes;\n    tmpMeasurementParams.letterCaseArray = labelState.element.glyphCaseArray!;\n\n    // TODO: HARP-7648. TextCanvas.measureText does the placement as in TextCanvas.addText but\n    // without storing the result. If the measurement succeeds, the placement work is done\n    // twice.\n    // This could be done in one step (e.g measureAndAddText). Collision test could be injected\n    // in the middle as a function.\n    if (!textCanvas.measureText(labelState.element.glyphs!, tmpBox, tmpMeasurementParams)) {\n        return PlacementResult.Rejected;\n    }\n\n    // Coarse collision check.\n    tmpCollisionBox.copy(tmpBox.translate(screenPosition));\n    if (!screenCollisions.isVisible(tmpCollisionBox)) {\n        return PlacementResult.Invisible;\n    }\n\n    let checkGlyphCollision = false;\n    let candidateBoxes: IBox[] | undefined;\n    if (!labelState.element.textMayOverlap) {\n        candidateBoxes = screenCollisions.search(tmpCollisionBox);\n        checkGlyphCollision = candidateBoxes.length > 0;\n    }\n\n    const checkGlyphVisible = !screenCollisions.isFullyVisible(tmpCollisionBox);\n\n    // Perform per-character collision checks.\n    tmpCollisionBoxes.length = tmpBoxes.length;\n    for (let i = 0; i < tmpBoxes.length; ++i) {\n        const glyphBox = tmpBoxes[i].translate(screenPosition);\n        let collisionBox = tmpCollisionBoxes[i];\n        if (collisionBox === undefined) {\n            collisionBox = new CollisionBox(glyphBox);\n            tmpCollisionBoxes[i] = collisionBox;\n        } else {\n            collisionBox.copy(glyphBox);\n        }\n        if (checkGlyphVisible && !screenCollisions.isVisible(collisionBox)) {\n            return PlacementResult.Invisible;\n        }\n\n        if (\n            checkGlyphCollision &&\n            screenCollisions.intersectsDetails(collisionBox, candidateBoxes!)\n        ) {\n            return PlacementResult.Rejected;\n        }\n    }\n    // Allocate collision info if needed.\n    if (labelState.element.textReservesSpace) {\n        const collisionBox = new DetailedCollisionBox(tmpCollisionBox, tmpCollisionBoxes.slice());\n        tmpCollisionBoxes.length = 0;\n        screenCollisions.allocate(collisionBox);\n    }\n    return PlacementResult.Ok;\n}\n\n/**\n * Check if a given path label is too small to be rendered.\n * @param textElement The text element to check.\n * @param screenProjector Used to project coordinates from world to screen space.\n * @param outScreenPoints Label path projected to screen space.\n * @returns `true` if label is too small, `false` otherwise.\n */\nexport function isPathLabelTooSmall(\n    textElement: TextElement,\n    screenProjector: ScreenProjector,\n    outScreenPoints: THREE.Vector2[]\n): boolean {\n    assert(textElement.type === TextElementType.PathLabel);\n\n    // Get the screen points that define the label's segments and create a path with\n    // them.\n    outScreenPoints.length = 0;\n    let anyPointVisible = false;\n\n    for (const pt of textElement.points as THREE.Vector3[]) {\n        // Skip invisible points at the beginning of the path.\n        const screenPoint = anyPointVisible\n            ? screenProjector.project(pt, tmpScreenPosition)\n            : screenProjector.projectOnScreen(pt, tmpScreenPosition);\n        if (screenPoint === undefined) {\n            continue;\n        }\n        anyPointVisible = true;\n\n        outScreenPoints.push(tmpScreenPosition.clone());\n    }\n\n    // TODO: (HARP-3515)\n    //      The rendering of a path label that contains just a single point that is not\n    //      visible is impossible, which is problematic with long paths.\n    //      Fix: Skip/clip the invisible points at beginning and end of the path to get\n    //      the visible part of the path.\n\n    // If not a single point is visible, skip the path\n    if (!anyPointVisible) {\n        return true;\n    }\n\n    // Check/guess if the screen box can hold a string of that length. It is important\n    // to guess that value without measuring the font first to save time.\n    const minScreenSpace = textElement.text.length * MIN_AVERAGE_CHAR_WIDTH;\n\n    tmpBox.setFromPoints(outScreenPoints);\n    const boxDiagonalSq = tmpBox.max.sub(tmpBox.min).lengthSq();\n\n    if (boxDiagonalSq < minScreenSpace * minScreenSpace) {\n        textElement.dbgPathTooSmall = true;\n        return true;\n    }\n\n    return false;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, getPropertyValue, ImageTexture } from \"@here/harp-datasource-protocol\";\nimport { IconMaterial } from \"@here/harp-materials\";\nimport { MemoryUsage, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { ColorCache } from \"../ColorCache\";\nimport { ImageItem } from \"../image/Image\";\nimport { MapView } from \"../MapView\";\nimport { ScreenCollisions } from \"../ScreenCollisions\";\nimport { PoiInfo, TextElement } from \"../text/TextElement\";\nimport { BoxBuffer } from \"./BoxBuffer\";\nimport { IconTexture } from \"./Poi\";\n\nconst logger = LoggerManager.instance.create(\"PoiRenderer\");\n\nconst INVALID_RENDER_BATCH = -1;\n\nconst tempPos = new THREE.Vector3(0);\n\n/**\n * The `PoiRenderBufferBatch` contains the geometry and the material for all POIs that share the\n * same icon image ([[ImageTexture]]). If the image is the same, all the objects in this batch can\n * share the same material, which makes them renderable in the same draw call, whatever the number\n * of actual objects (WebGL limits apply!).\n *\n * There is a `PoiRenderBufferBatch` for every icon in a texture atlas, since the size of the icon\n * in the atlas as well as the texture coordinates are specified in the `PoiRenderBufferBatch`.\n */\nclass PoiRenderBufferBatch {\n    color: THREE.Color = ColorCache.instance.getColor(\"#000000\");\n\n    boxBuffer: BoxBuffer | undefined;\n\n    private m_material?: THREE.Material | THREE.Material[];\n\n    /**\n     * Create the `PoiRenderBufferBatch`.\n     *\n     * @param mapView The [[MapView]] instance.\n     * @param scene The three.js scene to add the POIs to.\n     * @param imageItem The icon that will have his material shared.\n     * @param renderOrder RenderOrder of the batch geometry's [[Mesh]].\n     */\n    constructor(\n        readonly mapView: MapView,\n        readonly scene: THREE.Scene,\n        readonly imageItem: ImageItem,\n        readonly renderOrder: number\n    ) {}\n\n    /**\n     * Initialize with the [[ImageTexture]]. Loads the image and sets up the icon size, the texture\n     * coordinates and material of the batch. Since image loading is done asynchronously, this\n     * batch cannot be rendered right away. MapView#update is being triggered if it loaded\n     * successfully.\n     */\n    init() {\n        if (this.boxBuffer === undefined) {\n            this.setup();\n        }\n    }\n\n    /**\n     * Clean the `PoiRenderBufferBatch`, remove all icon boxes. Called before starting a new frame.\n     */\n    reset(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.reset();\n    }\n\n    /**\n     * Update the geometry with all the added boxes during the frame.\n     */\n    update(): void {\n        if (this.boxBuffer === undefined) {\n            this.init();\n        }\n        this.boxBuffer!.updateBufferGeometry();\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the\n     * `PoiRenderBufferBatch`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBufferBatch`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        if (this.boxBuffer !== undefined) {\n            this.boxBuffer.updateMemoryUsage(info);\n        }\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     */\n    private setup() {\n        const bilinear = true;\n\n        // Texture images should be generated with premultiplied alpha\n        const premultipliedAlpha = true;\n\n        const iconTexture = new IconTexture(this.imageItem);\n        const texture = new THREE.Texture(\n            iconTexture.image.imageData as any,\n            THREE.UVMapping,\n            undefined,\n            undefined,\n            bilinear ? THREE.LinearFilter : THREE.NearestFilter,\n            bilinear ? THREE.LinearFilter : THREE.NearestFilter,\n            THREE.RGBAFormat\n        );\n        texture.needsUpdate = true;\n        texture.premultiplyAlpha = premultipliedAlpha;\n        texture.generateMipmaps = false; // not needed, always rendered in full size\n\n        this.m_material = new IconMaterial({\n            map: texture\n        });\n\n        this.boxBuffer = new BoxBuffer(this.m_material, this.renderOrder);\n\n        const mesh = this.boxBuffer.mesh;\n\n        mesh.frustumCulled = false;\n\n        this.scene.add(mesh);\n\n        this.mapView.update();\n    }\n}\n\n/**\n * Contains all [[PoiRenderBufferBatch]]es. Selects (and initializes) the correct batch for a POI.\n */\nclass PoiRenderBuffer {\n    readonly batches: PoiRenderBufferBatch[] = [];\n    private readonly m_batchMap: Map<string, Map<number, number>> = new Map();\n\n    /**\n     * Create the `PoiRenderBuffer`.\n     *\n     * @param mapView The [[MapView]] to be rendered to.\n     * @param textCanvas The [[TextCanvas]] to which scenes this `PoiRenderBuffer` adds geometry to.\n     * The actual scene a [[TextElement]] is added to is specified by the renderOrder of the\n     * [[TextElement]].\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {}\n\n    /**\n     * Register the POI and prepare the [[PoiRenderBufferBatch]] for the POI at first usage.\n     *\n     * @param poiInfo Describes the POI icon.\n     */\n    registerPoi(poiInfo: PoiInfo): number {\n        const { imageItem, imageTexture, imageTextureName } = poiInfo;\n\n        if (\n            imageItem === undefined ||\n            imageTextureName === undefined ||\n            imageTexture === undefined\n        ) {\n            // No image -> invisible -> ignore\n            return INVALID_RENDER_BATCH;\n        }\n\n        const renderOrder = poiInfo.renderOrder!;\n\n        // There is a batch for every ImageDefinition, which could be a texture atlas with many\n        // ImageTextures in it.\n        const batchKey = imageTexture.image;\n        let batchSet = this.m_batchMap.get(batchKey);\n        let mappedIndex: number | undefined;\n        let bufferBatch: PoiRenderBufferBatch;\n\n        if (batchSet === undefined) {\n            batchSet = new Map<number, number>();\n            this.m_batchMap.set(batchKey, batchSet);\n        }\n\n        mappedIndex = batchSet.get(renderOrder);\n        if (mappedIndex !== undefined) {\n            return mappedIndex;\n        }\n        mappedIndex = this.batches.length;\n\n        let layer = this.textCanvas.getLayer(renderOrder);\n        if (layer === undefined) {\n            this.textCanvas.addText(\"\", tempPos, { layer: renderOrder });\n            layer = this.textCanvas.getLayer(renderOrder);\n        }\n\n        bufferBatch = new PoiRenderBufferBatch(\n            this.mapView,\n            layer!.storage.scene,\n            imageItem,\n            renderOrder\n        );\n        bufferBatch.init();\n        batchSet.set(renderOrder, mappedIndex);\n        this.batches.push(bufferBatch);\n        return mappedIndex;\n    }\n\n    /**\n     * Render a POI image at the specified location.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenBox Box to render icon into in 2D coordinates.\n     * @param viewDistance Box's distance to camera.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    addPoi(poiInfo: PoiInfo, screenBox: Math2D.Box, viewDistance: number, opacity: number): number {\n        const poiRegistered =\n            poiInfo.poiRenderBatch !== undefined && poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH;\n        const batchIndex = poiRegistered ? poiInfo.poiRenderBatch! : this.registerPoi(poiInfo);\n        if (batchIndex === INVALID_RENDER_BATCH) {\n            return INVALID_RENDER_BATCH;\n        }\n        assert(batchIndex >= 0);\n        assert(batchIndex < this.batches.length);\n        assert(poiInfo.uvBox !== undefined);\n\n        if (this.batches[batchIndex].boxBuffer === undefined) {\n            this.batches[batchIndex].init();\n        }\n\n        this.batches[batchIndex].boxBuffer!.addBox(\n            screenBox,\n            poiInfo.uvBox!,\n            this.batches[batchIndex].color,\n            opacity,\n            viewDistance,\n            poiInfo.textElement\n        );\n\n        return batchIndex;\n    }\n\n    /**\n     * Retrieve the [[PoiRenderBufferBatch]] from the array at the specified index. May be invalid\n     * if the imageTexture could not be found\n     *\n     * @param index Index into batch array.\n     */\n    getBatch(index: number): PoiRenderBufferBatch | undefined {\n        if (index >= 0) {\n            assert(index < this.batches.length);\n            return this.batches[index];\n        }\n        // may be invalid if the imageTexture could not be found\n        return undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBufferBatch]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        for (const batch of this.batches) {\n            batch.reset();\n        }\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBufferBatch]]es. Called before rendering.\n     */\n    update(): void {\n        for (const batch of this.batches) {\n            batch.update();\n        }\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        for (const batch of this.batches) {\n            if (batch.boxBuffer === undefined) {\n                batch.init();\n            }\n            batch.boxBuffer!.pickBoxes(screenPosition, pickCallback, batch.imageItem.imageData);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderBuffer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        for (const batch of this.batches) {\n            if (batch.imageItem.imageData !== undefined) {\n                const imageBytes =\n                    batch.imageItem.imageData.width * batch.imageItem.imageData.height * 4;\n                info.heapSize += imageBytes;\n                info.gpuSize += imageBytes;\n            }\n            if (batch.boxBuffer !== undefined) {\n                batch.boxBuffer.updateMemoryUsage(info);\n            }\n        }\n    }\n}\n\n/**\n * Manage POI rendering. Uses a [[PoiRenderBuffer]] to actually create the geometry that is being\n * rendered.\n */\nexport class PoiRenderer {\n    /**\n     * Compute screen box for icon. It is required that `prepareRender` has been successfully called\n     * before `computeScreenBox` may be called.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D).\n     * @param scale Scale to apply to icon.\n     * @param env Current zoom level.\n     * @param screenBox Box that will be used to store the result.\n     * @returns The computed screen box for the icon.\n     */\n    static computeIconScreenBox(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        scale: number,\n        env: Env,\n        /* out */ screenBox: Math2D.Box = new Math2D.Box()\n    ): Math2D.Box {\n        assert(poiInfo.poiRenderBatch !== undefined);\n        assert(poiInfo.poiRenderBatch !== INVALID_RENDER_BATCH);\n\n        const width = poiInfo.computedWidth! * scale;\n        const height = poiInfo.computedHeight! * scale;\n        const technique = poiInfo.technique;\n        const iconXOffset = getPropertyValue(technique.iconXOffset, env);\n        const iconYOffset = getPropertyValue(technique.iconYOffset, env);\n\n        const centerX = screenPosition.x + (typeof iconXOffset === \"number\" ? iconXOffset : 0);\n        const centerY = screenPosition.y + (typeof iconYOffset === \"number\" ? iconYOffset : 0);\n\n        screenBox.x = centerX - width / 2;\n        screenBox.y = centerY - height / 2;\n        screenBox.w = width;\n        screenBox.h = height;\n\n        return screenBox;\n    }\n    // keep track of the missing textures, but only warn once\n    private static m_missingTextureName: Map<string, boolean> = new Map();\n\n    // the render buffer containing all batches, one batch per texture/material.\n    private m_renderBuffer: PoiRenderBuffer;\n\n    // temporary variable to save allocations\n    private m_tempScreenBox = new Math2D.Box();\n\n    /**\n     * Create the `PoiRenderer` for the specified [[MapView]].\n     *\n     * @param mapView The MapView to be rendered to.\n     * @param textCanvas The [[TextCanvas]] this `PoiRenderer` is associated to. POIs are added to\n     * the different layers of this [[TextCanvas]] based on renderOrder.\n     */\n    constructor(readonly mapView: MapView, readonly textCanvas: TextCanvas) {\n        this.m_renderBuffer = new PoiRenderBuffer(mapView, textCanvas);\n    }\n\n    /**\n     * Prepare the POI for rendering, and determine which `poiRenderBatch` should be used. If a\n     * `poiRenderBatch` is assigned, the POI is ready to be rendered.\n     *\n     * @param pointLabel TextElement with PoiInfo for rendering the POI icon.\n     * @param env TODO! The current zoomLevel level of [[MapView]]\n     *\n     * @returns `True` if the space is not already allocated by another object (text label or POI)\n     */\n    prepareRender(pointLabel: TextElement, env: Env): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined) {\n            return false;\n        }\n        if (poiInfo.poiRenderBatch === undefined) {\n            this.preparePoi(pointLabel, env);\n        }\n        return poiInfo.poiRenderBatch !== undefined;\n    }\n\n    /**\n     * Reset all batches, removing all content from the [[PoiRenderBuffer]]es. Called at the\n     * beginning of a frame before the POIs are placed.\n     */\n    reset(): void {\n        this.m_renderBuffer.reset();\n    }\n\n    /**\n     * Render the icon.\n     *\n     * @param poiInfo PoiInfo containing information for rendering the POI icon.\n     * @param screenPosition Position on screen (2D):\n     * @param screenCollisions Object handling the collision checks for screen-aligned 2D boxes.\n     * @param viewDistance Box's distance to camera.\n     * @param scale Scaling factor to apply to text and icon.\n     * @param allocateScreenSpace If `true` screen space will be allocated for the icon.\n     * @param opacity Opacity of icon to allow fade in/out.\n     */\n    renderPoi(\n        poiInfo: PoiInfo,\n        screenPosition: THREE.Vector2,\n        screenCollisions: ScreenCollisions,\n        viewDistance: number,\n        scale: number,\n        allocateScreenSpace: boolean,\n        opacity: number,\n        env: Env\n    ): void {\n        assert(poiInfo.poiRenderBatch !== undefined);\n\n        PoiRenderer.computeIconScreenBox(poiInfo, screenPosition, scale, env, this.m_tempScreenBox);\n\n        if (allocateScreenSpace) {\n            screenCollisions.allocate(this.m_tempScreenBox);\n        }\n\n        this.m_renderBuffer.addPoi(poiInfo, this.m_tempScreenBox, viewDistance, opacity);\n    }\n\n    /**\n     * Update the geometry of all [[PoiRenderBuffer]]es. Called before rendering.\n     */\n    update(): void {\n        this.m_renderBuffer.update();\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * [[PoiInfo]]s are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickTextElements(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void\n    ) {\n        this.m_renderBuffer.pickTextElements(screenPosition, pickCallback);\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `PoiRenderer`.\n     *\n     * @param info The info object to increment with the values from this `PoiRenderer`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_renderBuffer.updateMemoryUsage(info);\n    }\n\n    /**\n     * Register the POI at the [[PoiRenderBuffer]] which may require some setup, for example loading\n     * of the actual image.\n     */\n    private preparePoi(pointLabel: TextElement, env: Env): void {\n        const poiInfo = pointLabel.poiInfo;\n        if (poiInfo === undefined || !pointLabel.visible) {\n            return;\n        }\n\n        if (poiInfo.poiRenderBatch !== undefined || poiInfo.isValid === false) {\n            // Already set up, nothing to be done here.\n            return;\n        }\n\n        if (poiInfo.poiTableName !== undefined) {\n            if (this.mapView.poiManager.updatePoiFromPoiTable(pointLabel)) {\n                if (!pointLabel.visible) {\n                    // PoiTable set this POI to not visible.\n                    return;\n                }\n            } else {\n                // PoiTable has not been loaded, but is required to determine visibility.\n                return;\n            }\n        }\n\n        const imageTextureName = poiInfo.imageTextureName;\n\n        const imageTexture = this.mapView.poiManager.getImageTexture(imageTextureName);\n        if (imageTexture === undefined) {\n            // Warn about a missing texture, but only once.\n            if (PoiRenderer.m_missingTextureName.get(imageTextureName) === undefined) {\n                PoiRenderer.m_missingTextureName.set(imageTextureName, true);\n                logger.error(`preparePoi: No imageTexture with name '${imageTextureName}' found`);\n            }\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const imageDefinition = imageTexture.image;\n\n        let imageItem = this.mapView.imageCache.findImageByName(imageDefinition);\n        if (imageItem === undefined) {\n            logger.error(`init: No imageItem found with name '${imageDefinition}'`);\n            poiInfo.isValid = false;\n            return;\n        }\n\n        if (!imageItem.loaded) {\n            if (imageItem.loadingPromise !== undefined) {\n                // already being loaded, will be rendered once available\n                return;\n            }\n            const imageUrl = imageItem.url;\n            const loading = this.mapView.imageCache.loadImage(imageItem);\n            if (loading instanceof Promise) {\n                loading\n                    .then(loadedImageItem => {\n                        if (loadedImageItem === undefined) {\n                            logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`);\n                            return;\n                        }\n                        this.setupPoiInfo(poiInfo, imageTexture, loadedImageItem, env);\n                    })\n                    .catch(error => {\n                        logger.error(`preparePoi: Failed to load imageItem: '${imageUrl}`, error);\n                        poiInfo.isValid = false;\n                    });\n                return;\n            } else {\n                imageItem = loading;\n            }\n        }\n\n        this.setupPoiInfo(poiInfo, imageTexture, imageItem, env);\n    }\n\n    /**\n     * Setup texture and material for the batch.\n     *\n     * @param poiInfo [[PoiInfo]] to initialize.\n     * @param imageTexture Shared [[ImageTexture]], defines used area in atlas.\n     * @param imageItem Shared [[ImageItem]], contains cached image for texture.\n     * @param env The current zoom level of [[MapView]]\n     */\n    private setupPoiInfo(\n        poiInfo: PoiInfo,\n        imageTexture: ImageTexture,\n        imageItem: ImageItem,\n        env: Env\n    ) {\n        assert(poiInfo.uvBox === undefined);\n\n        if (imageItem === undefined || imageItem.imageData === undefined) {\n            logger.error(\"setupPoiInfo: No imageItem/imageData found\");\n            // invalid render batch number\n            poiInfo.poiRenderBatch = INVALID_RENDER_BATCH;\n            poiInfo.isValid = false;\n            return;\n        }\n\n        const technique = poiInfo.technique;\n\n        const imageWidth = imageItem.imageData.width;\n        const imageHeight = imageItem.imageData.height;\n\n        const iconWidth = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const iconHeight = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n\n        let minS = 0;\n        let maxS = 1;\n        let minT = 0;\n        let maxT = 1;\n\n        let iconScaleH = technique.iconScale !== undefined ? technique.iconScale : 1;\n        let iconScaleV = technique.iconScale !== undefined ? technique.iconScale : 1;\n\n        const width = imageTexture.width !== undefined ? imageTexture.width : imageWidth;\n        const height = imageTexture.height !== undefined ? imageTexture.height : imageHeight;\n        const xOffset = imageTexture.xOffset !== undefined ? imageTexture.xOffset : 0;\n        const yOffset = imageTexture.yOffset !== undefined ? imageTexture.yOffset : 0;\n\n        minS = xOffset / imageWidth;\n        maxS = (xOffset + width) / imageWidth;\n\n        const flipY = true;\n        if (flipY) {\n            minT = (imageHeight - yOffset) / imageHeight;\n            maxT = (imageHeight - yOffset - height) / imageHeight;\n        } else {\n            minT = yOffset / imageHeight;\n            maxT = (yOffset + height) / imageHeight;\n        }\n\n        // minS += 0.5 / imageWidth;\n        // maxS += 0.5 / imageWidth;\n        // minT += 0.5 / imageHeight;\n        // maxT += 0.5 / imageHeight;\n\n        // By default, iconScaleV should be equal to iconScaleH, whatever is set in the style.\n        const screenWidth = getPropertyValue(technique.screenWidth, env);\n        if (screenWidth !== undefined) {\n            iconScaleV = iconScaleH = screenWidth / iconWidth;\n        }\n\n        const screenHeight = getPropertyValue(technique.screenHeight, env);\n        if (screenHeight !== undefined) {\n            iconScaleV = screenHeight / iconHeight;\n            if (screenWidth !== undefined) {\n                iconScaleH = iconScaleV;\n            }\n        }\n\n        // compute stored values in imageTexture\n        poiInfo.computedWidth = iconWidth * iconScaleH;\n        poiInfo.computedHeight = iconHeight * iconScaleV;\n        poiInfo.uvBox = {\n            s0: minS,\n            t0: maxT,\n            s1: maxS,\n            t1: minT\n        };\n        poiInfo.imageItem = imageItem;\n        poiInfo.imageTexture = imageTexture;\n        poiInfo.poiRenderBatch = this.m_renderBuffer.registerPoi(poiInfo);\n        poiInfo.isValid = true;\n\n        assert(poiInfo.poiRenderBatch !== undefined);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ImageItem } from \"../image/Image\";\n\nimport * as THREE from \"three\";\n\nexport type ExtendedMesh = THREE.Mesh & {\n    /**\n     * Distance of this object from the Tile's center.\n     */\n    displacement?: THREE.Vector3;\n};\n\n/**\n * This enum defines the possible origin points for an image.\n */\nexport enum ImageOrigin {\n    TopLeft,\n    BottomLeft\n}\n\n/**\n * Available rendering parameters for the POIs.\n */\nexport interface ImageOptions {\n    /**\n     * The point of origin of the texture as supported in [[ImageOrigin]].\n     */\n    origin?: ImageOrigin;\n\n    /**\n     * Missing Typedoc\n     */\n    width: number;\n\n    /**\n     * Missing Typedoc\n     */\n    height: number;\n\n    /**\n     * Missing Typedoc\n     */\n    xOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    yOffset?: number;\n\n    /**\n     * Missing Typedoc\n     */\n    flipH?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    flipV?: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    opacity?: number;\n}\n\n/**\n * Defines a part (or all) of an image as a texture.\n */\nexport class IconTexture {\n    /**\n     * The constructor of an `IconTexture`.\n     *\n     * @param image An [[ImageItem]] instance.\n     * @param options The rendering parameters.\n     */\n    constructor(public image: ImageItem) {}\n}\n\n// export enum TextAlign {\n//     Center,\n//     Left,\n//     Right,\n\n//     // ??? expands lines to have same length.\n//     Justify\n// }\n\n// export interface LayoutOptions {\n//     paddingH?: number;\n//     paddingV: number;\n//     transFormCenterX?: number;\n//     transFormCenterY?: number;\n//     rotation?: number;\n//     /** Set to `true` to enlarge the box after rotation to include all rotated corners. */\n//     rotationEnlargesBox: boolean;\n// }\n\n// export interface TextOptions {\n//     bgColor?: THREE.Color;\n//     wrapWords?: boolean;\n//     maxNumLines?: number;\n//     maxWidth?: number;\n//     /** Replace with ellipsis if wider than maxWidth. */\n//     addEllipsis?: boolean;\n//     /** Handle right-to-left texts */\n//     isRightToLeft?: boolean;\n\n//     textAlignH?: AlignH; // = AlignH.Center;\n//     textAlignV?: AlignV; // = AlignV.Center;\n// }\n\n// export class IconLabel {\n//     constructor(text: string, options: LayoutOptions | TextOptions) {}\n\n//     /**\n//      * Setup a box with size and padding.\n//      *\n//      * @param box Target box to set up.\n//      */\n//     getBox(box: THREE.Box2) {}\n\n//     /**\n//      * Compute width and height from text and font.\n//      */\n//     computeBox() {}\n\n//     /**\n//      * Generate the glyphs and keep them in a buffer. Generates a fixed layout.\n//      */\n//     prepareRendering() {}\n// }\n\n// export enum AlignH {\n//     Center,\n//     Left,\n//     Right\n// }\n\n// export enum AlignV {\n//     Center,\n//     Top,\n//     Bottom\n// }\n\n// export enum AnchorTarget {\n//     /** Anchor point relative to Icon */\n//     Icon,\n//     /** Anchor point is transform center of icon */\n//     IconCenter,\n//     /** Anchor point relative to Icon including padding */\n//     IconBox,\n//     /** Anchor point relative to Label */\n//     Label,\n//     /** Anchor point relative to combination of Icon and Label */\n//     Box\n// }\n\n// export class AnchorPosition {\n//     targetH: AnchorTarget = AnchorTarget.Icon;\n//     targetV: AnchorTarget = AnchorTarget.Icon;\n//     alignH: AlignH = AlignH.Center;\n//     alignV: AlignV = AlignV.Center;\n// }\n\n// export enum IconPinMode {\n//     /** Pinned down, anchor point is the same at all angles. */\n//     PinDown,\n//     /**\n//      * Icon stands up. \"StreetLevel\"-style. The anchor point moves to the bottom of the icon when\n//      * the view direction gets parallel to the ground.\n//      */\n//     StandUp\n// }\n\n// export interface IconScaleOptions {\n//     depthScale?: boolean;\n//     minimumScale?: number;\n// }\n\n// export interface IconOptions {\n//     useScreenSpace?: boolean; // = true\n//     priority?: number;\n\n//     scaleOptions?: IconScaleOptions;\n\n//     /** Optional offset in screen space */\n//     screenOffsetX?: number;\n//     screenOffsetY?: number;\n\n//     /** Optional 3D height above terrain. */\n//     heightAboveGround?: number;\n// }\n\n// export class SimplePoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image ?: IconTexture,\n//         options ?: IconOptions\n//     ) { }\n// }\n\n// export class PoiIcon {\n//     constructor(\n//         readonly pos: THREE.Vector3,\n//         readonly image?: IconTexture,\n//         readonly label?: IconLabel,\n//         options?: IconOptions\n//     ) {}\n// }\n\n// export interface PoiOptions {\n//     featureId?: number;\n//     minZoomLevel?: number;\n// }\n\n// export class SimplePoi {\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(readonly icon: SimplePoiIcon, options?: PoiOptions) {\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n// }\n\n// export class Poi {\n//     /** store multiple icons, one for every LOD */\n//     private m_icons: PoiIcon[] = [];\n//     private m_lod = 0;\n//     private m_featureId?: number;\n//     private m_minZoomLevel: number = 0;\n\n//     constructor(icon: PoiIcon, options?: PoiOptions) {\n//         this.m_icons.push(icon);\n\n//         if (options !== undefined) {\n//             this.m_featureId = options.featureId;\n//             this.m_minZoomLevel = options.minZoomLevel !== undefined ? options.minZoomLevel : 0;\n//         }\n//     }\n\n//     icon(): PoiIcon | undefined {\n//         return this.m_icons[this.m_lod];\n//     }\n\n//     /**\n//      * Select the level of detail that should be used.\n//      *\n//      * @param levelOfDetail Level of detail to render.\n//      */\n//     selectIcon(levelOfDetail: number) {}\n// }\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager, Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { debugContext } from \"./DebugContext\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\nconst logger = LoggerManager.instance.create(\"ScreenCollissions\");\n\nexport interface IBox {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nexport class CollisionBox extends Math2D.Box implements IBox {\n    constructor(box?: Math2D.Box | THREE.Box2 | IBox) {\n        super();\n        if (box !== undefined) {\n            this.copy(box);\n        }\n    }\n\n    copy(box: Math2D.Box | THREE.Box2 | IBox): CollisionBox {\n        if (box instanceof Math2D.Box) {\n            this.set(box.x, box.y, box.w, box.h);\n        } else if (box instanceof THREE.Box2) {\n            this.set(box.min.x, box.min.y, box.max.x - box.min.x, box.max.y - box.min.y);\n        } else {\n            this.set(box.minX, box.minY, box.maxX - box.minX, box.maxY - box.minY);\n        }\n        return this;\n    }\n    get minX(): number {\n        return this.x;\n    }\n    set minX(minX: number) {\n        this.x = minX;\n    }\n    get maxX(): number {\n        return this.x + this.w;\n    }\n    set maxX(maxX: number) {\n        this.w = maxX - this.x;\n    }\n    get minY(): number {\n        return this.y;\n    }\n    set minY(minY: number) {\n        this.y = minY;\n    }\n    get maxY(): number {\n        return this.y + this.h;\n    }\n    set maxY(maxY: number) {\n        this.h = maxY - this.y;\n    }\n}\n\n/**\n * Collision box with additional boxes defining tighter bounds for the enclosed feature\n * (e.g.glyph bounds for text).\n */\nexport class DetailedCollisionBox extends CollisionBox {\n    constructor(box: Math2D.Box | THREE.Box2 | IBox, readonly detailBoxes: CollisionBox[]) {\n        super(box);\n    }\n}\n\nexport interface LineWithBound extends IBox {\n    line: THREE.Line3;\n}\n\nexport function isLineWithBound(box: IBox): box is LineWithBound {\n    return (box as LineWithBound).line !== undefined;\n}\n\nconst tmpCollisionBox = new CollisionBox();\n\nexport class ScreenCollisions {\n    /** The screen bounding box. */\n    readonly screenBounds = new Math2D.Box();\n\n    /** Tree of allocated bounds. */\n\n    private rtree = new RBush();\n\n    /**\n     * Constructs a new ScreenCollisions object.\n     */\n    constructor() {\n        //\n    }\n\n    /**\n     * Resets the list of allocated screen bounds.\n     */\n    reset() {\n        this.rtree.clear();\n    }\n\n    /**\n     * Updates the screen bounds that are used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     */\n    update(width: number, height: number) {\n        this.screenBounds.set(width / -2, height / -2, width, height);\n        this.reset();\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds The bounding box in NDC scaled coordinates (i.e. top left is -width/2,\n     * -height/2)\n     */\n    allocate(bounds: Math2D.Box | CollisionBox | DetailedCollisionBox): void {\n        const bbox = !(bounds instanceof CollisionBox) ? new CollisionBox(bounds) : bounds;\n        this.rtree.insert(bbox);\n    }\n\n    /**\n     * Inserts the given bounds into the rtree.\n     *\n     * @param bounds The bounding boxes (the bounding boxes must be in the space returned from the\n     * ScreenProjector.project method).\n     */\n    allocateIBoxes(bounds: IBox[]) {\n        this.rtree.load(bounds);\n    }\n\n    /**\n     * Search for all bounds in the tree intersecting with the given box.\n     * @param box The box used for the search.\n     * @returns An array of all IBoxes intersecting with the given box.\n     */\n    search(box: CollisionBox): IBox[] {\n        return this.rtree.search(box);\n    }\n\n    /**\n     * Checks if the given bounding box is already allocated.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isAllocated(bounds: Math2D.Box | CollisionBox): boolean {\n        const collisionBox = bounds instanceof CollisionBox ? bounds : tmpCollisionBox.copy(bounds);\n        const results = this.search(collisionBox);\n        return this.intersectsDetails(collisionBox, results);\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.intersects(bounds);\n    }\n\n    /**\n     * Checks if the given screen bounds is contained within the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     */\n    isFullyVisible(bounds: Math2D.Box): boolean {\n        return this.screenBounds.containsBox(bounds);\n    }\n\n    /**\n     * Test whether a given [[CollisionBox]] intersects with any of the details in the specified\n     * [[IBox]]es.\n     *\n     * @param testBox The box to test for intersection.\n     * @param boxes The candidate boxes the test box may intersect with. It's assumed that the\n     * global bounds of these boxes intersect with the given test box.\n     * @returns `true` if any intersection found.\n     */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        for (const box of boxes) {\n            if (box instanceof DetailedCollisionBox) {\n                for (const detailBox of box.detailBoxes) {\n                    if (detailBox.intersects(testBox)) {\n                        return true;\n                    }\n                }\n            } else if (isLineWithBound(box)) {\n                const boundedLine = box as LineWithBound;\n                if (this.intersectsLine(testBox, boundedLine)) {\n                    return true;\n                }\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Computes the intersection between the supplied CollisionBox and the LineWithBound.\n     * @note The [[CollisionBox]] is in Screen Bounds space, whereas the line must be\n     * in Screen Coordinate space\n     * @deprecated Because this is meant just for testing.\n     */\n    intersectsLine(bbox: CollisionBox, boundedLine: LineWithBound): boolean {\n        const line = boundedLine.line;\n\n        // Note, these aren't normalized, but it doesn't matter, we are just interested\n        // in the sign.\n        const lineXDiffTransformed = line.end.x - line.start.x;\n\n        // Sign of bottom left, bottom right, top left and top right corners.\n        let signBL: number;\n        let signBR: number;\n        let signTL: number;\n        let signTR: number;\n        if (lineXDiffTransformed !== 0) {\n            const lineYDiffTransformed = line.end.y - line.start.y;\n            const normalX = lineYDiffTransformed;\n            const normalY = -lineXDiffTransformed;\n            const D = line.start.y - (lineYDiffTransformed / lineXDiffTransformed) * line.start.x;\n\n            signBL = Math.sign(bbox.minX * normalX + (bbox.minY - D) * normalY);\n            signBR = Math.sign(bbox.maxX * normalX + (bbox.minY - D) * normalY);\n            signTL = Math.sign(bbox.minX * normalX + (bbox.maxY - D) * normalY);\n            signTR = Math.sign(bbox.maxX * normalX + (bbox.maxY - D) * normalY);\n        } else {\n            signBL = Math.sign(bbox.minX - line.start.x);\n            signBR = Math.sign(bbox.maxX - line.start.x);\n            signTL = Math.sign(bbox.minX - line.start.x);\n            signTR = Math.sign(bbox.maxX - line.start.x);\n        }\n        return signBL !== signBR || signBL !== signTL || signBL !== signTR;\n    }\n}\n\n/**\n * @hidden\n *\n * Shows requests for screen space during labelling in an HTML canvas, which should be sized like\n * the actual map canvas. It can be placed on top of the map canvas to show exactly which requests\n * for screen space were done.\n *\n * Also logs statistics.\n */\nexport class ScreenCollisionsDebug extends ScreenCollisions {\n    /** 2D rendering context. */\n    private m_renderContext: CanvasRenderingContext2D | null = null;\n    private m_renderingEnabled = false;\n    private m_numAllocations = 0;\n    private m_numSuccessfulTests = 0;\n    private m_numFailedTests = 0;\n    private m_numSuccessfulVisibilityTests = 0;\n    private m_numFailedVisibilityTests = 0;\n\n    /**\n     * Constructs a new ScreenCollisions object which renders its state to a 2D canvas.\n     */\n    constructor(debugCanvas: HTMLCanvasElement) {\n        super();\n\n        if (debugCanvas !== undefined && debugCanvas !== null) {\n            this.m_renderContext = debugCanvas.getContext(\"2d\");\n        }\n    }\n\n    /**\n     * Resets the list of allocated bounds and clears the debug canvas.\n     * @override\n     */\n    reset() {\n        super.reset();\n\n        this.m_numAllocations = 0;\n        this.m_numSuccessfulTests = 0;\n        this.m_numFailedTests = 0;\n        this.m_numSuccessfulVisibilityTests = 0;\n        this.m_numFailedVisibilityTests = 0;\n    }\n\n    /**\n     * Updates the screen bounds used to check if bounding boxes are visible.\n     *\n     * @param width The width of the container.\n     * @param height The height of the container.\n     * @override\n     */\n    update(width: number, height: number) {\n        if (this.m_renderingEnabled) {\n            logger.log(\n                // tslint:disable-next-line: max-line-length\n                `Allocations: ${this.m_numAllocations} Successful Tests: ${this.m_numSuccessfulTests} Failed Tests: ${this.m_numFailedTests}  Successful Visibility Tests: ${this.m_numSuccessfulVisibilityTests}  Failed Visibility Tests: ${this.m_numFailedVisibilityTests} `\n            );\n        }\n\n        super.update(width, height);\n\n        if (this.m_renderContext !== null) {\n            this.m_renderContext.canvas.width = width;\n            this.m_renderContext.canvas.height = height;\n        }\n\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_SCREEN_COLLISIONS\", true)\n        this.m_renderingEnabled = debugContext.getValue(\"DEBUG_SCREEN_COLLISIONS\");\n    }\n\n    /**\n     * Marks the region of the screen intersecting with the given bounding box as allocated.\n     *\n     * @param bounds the bounding box in world coordinates.\n     * @override\n     */\n    allocate(bounds: Math2D.Box | CollisionBox): void {\n        super.allocate(bounds);\n\n        this.m_numAllocations++;\n\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            this.m_renderContext.strokeStyle = \"#6666ff\";\n            this.m_renderContext.strokeRect(\n                bounds.x - this.screenBounds.x,\n                this.screenBounds.y + this.screenBounds.h - bounds.y - 1,\n                bounds.w,\n                -bounds.h\n            );\n        }\n    }\n\n    /** @override */\n    allocateIBoxes(boundsArray: IBox[]) {\n        for (const bounds of boundsArray) {\n            this.m_numAllocations++;\n\n            if (this.m_renderingEnabled && this.m_renderContext !== null) {\n                this.m_renderContext.strokeStyle = \"#aa2222\";\n                this.m_renderContext.strokeRect(\n                    bounds.minX - this.screenBounds.x,\n                    this.screenBounds.y + this.screenBounds.h - bounds.minY - 1,\n                    bounds.maxX - bounds.minX,\n                    -(bounds.maxY - bounds.minY)\n                );\n            }\n        }\n        super.allocateIBoxes(boundsArray);\n    }\n\n    /** @override */\n    intersectsDetails(testBox: CollisionBox, boxes: IBox[]): boolean {\n        const collisionFound = super.intersectsDetails(testBox, boxes);\n        if (this.m_renderingEnabled && this.m_renderContext !== null) {\n            const offset = collisionFound ? 2 : 0;\n            this.m_renderContext.strokeStyle = collisionFound ? \"#FF0000\" : \"#00ff00\";\n            this.m_renderContext.strokeRect(\n                testBox.x - this.screenBounds.x - offset,\n                this.screenBounds.y + this.screenBounds.h - testBox.y - 1 + offset,\n                testBox.w + 2 * offset,\n                -testBox.h - 2 * offset\n            );\n        }\n\n        if (collisionFound) {\n            this.m_numFailedTests++;\n        } else {\n            this.m_numSuccessfulTests++;\n        }\n\n        return collisionFound;\n    }\n\n    /**\n     * Checks if the given screen bounds intersects with the frustum of the active camera.\n     *\n     * @param bounds The bounding box in world coordinates.\n     * @override\n     */\n    isVisible(bounds: Math2D.Box): boolean {\n        const visible = super.isVisible(bounds);\n\n        if (visible) {\n            this.m_numSuccessfulVisibilityTests++;\n        } else {\n            this.m_numFailedVisibilityTests++;\n        }\n        return visible;\n    }\n}\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    ColorUtils,\n    getPropertyValue,\n    IndexedTechniqueParams,\n    LineMarkerTechnique,\n    MapEnv,\n    PoiTechnique,\n    Technique,\n    TextStyleDefinition,\n    TextTechnique,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport {\n    DefaultTextStyle,\n    FontStyle,\n    FontUnit,\n    FontVariant,\n    HorizontalAlignment,\n    TextCanvas,\n    TextLayoutParameters,\n    TextLayoutStyle,\n    TextRenderParameters,\n    TextRenderStyle,\n    VerticalAlignment,\n    WrappingMode\n} from \"@here/harp-text-canvas\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { ColorCache } from \"../ColorCache\";\nimport { evaluateColorProperty } from \"../DecodedTileHelpers\";\nimport { PoiRenderer } from \"../poi/PoiRenderer\";\nimport { Tile } from \"../Tile\";\nimport { TextCanvasRenderer } from \"./TextCanvasRenderer\";\n\nconst logger = LoggerManager.instance.create(\"TextStyleCache\");\n\n/**\n * [[TextStyle]] id for the default value inside a [[TextRenderStyleCache]] or a\n * [[TextLayoutStyleCache]].\n */\nexport const DEFAULT_TEXT_STYLE_CACHE_ID = \"Default\";\n\n/**\n * Calculates the [[TextStyle]] id that identifies either a [[TextRenderStyle]] or a\n * [[TextLayoutStyle]] inside a [[TextRenderStyleCache]] or a [[TextLayoutStyleCache]],\n * respectively.\n *\n * @param technique Technique defining the [[TextStyle]].\n * @param zoomLevel Zoom level for which to interpret the technique.\n *\n * @returns [[TextStyle]] id.\n */\nexport function computeStyleCacheId(\n    datasourceName: string,\n    technique: Technique & Partial<IndexedTechniqueParams>,\n    zoomLevel: number\n): string {\n    return `${datasourceName}_${technique._key}_${zoomLevel}`;\n}\n\n/**\n * Cache storing [[MapView]]'s [[TextRenderStyle]]s.\n */\nexport class TextRenderStyleCache {\n    private m_map: Map<string, TextRenderStyle> = new Map();\n    constructor() {\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextRenderStyle({\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: 8\n                },\n                color: ColorCache.instance.getColor(\"#6d7477\"),\n                opacity: 1.0,\n                backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n                backgroundOpacity: 0.5\n            })\n        );\n    }\n\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    get(id: string): TextRenderStyle | undefined {\n        return this.m_map.get(id);\n    }\n\n    set(id: string, value: TextRenderStyle): void {\n        this.m_map.set(id, value);\n    }\n\n    clear(): void {\n        this.m_map.clear();\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextRenderStyle({\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: 8\n                },\n                color: ColorCache.instance.getColor(\"#6d7477\"),\n                opacity: 1.0,\n                backgroundColor: ColorCache.instance.getColor(\"#f7fbfd\"),\n                backgroundOpacity: 0.5\n            })\n        );\n    }\n}\n\n/**\n * Cache storing [[MapView]]'s [[TextLayoutStyle]]s.\n */\nexport class TextLayoutStyleCache {\n    private m_map: Map<string, TextLayoutStyle> = new Map();\n    constructor() {\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextLayoutStyle({\n                verticalAlignment: VerticalAlignment.Center,\n                horizontalAlignment: HorizontalAlignment.Center\n            })\n        );\n    }\n\n    get size(): number {\n        return this.m_map.size;\n    }\n\n    get(id: string): TextLayoutStyle | undefined {\n        return this.m_map.get(id);\n    }\n\n    set(id: string, value: TextLayoutStyle): void {\n        this.m_map.set(id, value);\n    }\n\n    clear(): void {\n        this.m_map.clear();\n        this.m_map.set(\n            DEFAULT_TEXT_STYLE_CACHE_ID,\n            new TextLayoutStyle({\n                verticalAlignment: VerticalAlignment.Center,\n                horizontalAlignment: HorizontalAlignment.Center\n            })\n        );\n    }\n}\n\nconst DEFAULT_STYLE_NAME = \"default\";\n\n/**\n * [[TextElementsRenderer]] representation of a [[Theme]]'s TextStyle.\n */\nexport interface TextElementStyle {\n    name: string;\n    fontCatalog: string;\n    renderParams: TextRenderParameters;\n    layoutParams: TextLayoutParameters;\n    textCanvas?: TextCanvas;\n    poiRenderer?: PoiRenderer;\n}\n\nexport class TextStyleCache {\n    private m_textRenderStyleCache = new TextRenderStyleCache();\n    private m_textLayoutStyleCache = new TextLayoutStyleCache();\n    private m_textStyles: Map<string, TextElementStyle> = new Map();\n    private m_defaultStyle: TextElementStyle = {\n        name: DEFAULT_STYLE_NAME,\n        fontCatalog: \"\",\n        renderParams: this.m_textRenderStyleCache.get(DEFAULT_TEXT_STYLE_CACHE_ID)!.params,\n        layoutParams: this.m_textLayoutStyleCache.get(DEFAULT_TEXT_STYLE_CACHE_ID)!.params\n    };\n\n    constructor(private m_theme: Theme) {}\n\n    initializeDefaultTextElementStyle(defaultFontCatalogName: string) {\n        if (this.m_theme.textStyles === undefined) {\n            this.m_theme.textStyles = [];\n        }\n        const styles = this.m_theme.textStyles;\n\n        const themedDefaultStyle = styles.find(style => style.name === DEFAULT_STYLE_NAME);\n        if (themedDefaultStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                themedDefaultStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (this.m_theme.defaultTextStyle !== undefined) {\n            this.m_defaultStyle = this.createTextElementStyle(\n                this.m_theme.defaultTextStyle,\n                DEFAULT_STYLE_NAME\n            );\n        } else if (styles.length > 0) {\n            this.m_defaultStyle = this.createTextElementStyle(styles[0], DEFAULT_STYLE_NAME);\n        }\n        this.m_defaultStyle.fontCatalog = defaultFontCatalogName;\n    }\n\n    initializeTextElementStyles(\n        defaultPoiRenderer: PoiRenderer,\n        defaultTextCanvas: TextCanvas,\n        textRenderers: TextCanvasRenderer[]\n    ) {\n        // Initialize default text style.\n        if (this.m_defaultStyle.fontCatalog !== undefined) {\n            const styledTextRenderer = textRenderers.find(\n                textRenderer => textRenderer.fontCatalog === this.m_defaultStyle.fontCatalog\n            );\n            this.m_defaultStyle.textCanvas =\n                styledTextRenderer !== undefined ? styledTextRenderer.textCanvas : undefined;\n            this.m_defaultStyle.poiRenderer =\n                styledTextRenderer !== undefined ? styledTextRenderer.poiRenderer : undefined;\n        }\n        if (this.m_defaultStyle.textCanvas === undefined) {\n            if (this.m_defaultStyle.fontCatalog !== undefined) {\n                logger.warn(\n                    `FontCatalog '${this.m_defaultStyle.fontCatalog}' set in TextStyle '${\n                        this.m_defaultStyle.name\n                    }' not found, using default fontCatalog(${\n                        defaultTextCanvas!.fontCatalog.name\n                    }).`\n                );\n            }\n            this.m_defaultStyle.textCanvas = defaultTextCanvas;\n            this.m_defaultStyle.poiRenderer = defaultPoiRenderer;\n        }\n\n        // Initialize theme text styles.\n        this.m_theme.textStyles!.forEach(element => {\n            this.m_textStyles.set(\n                element.name!,\n                this.createTextElementStyle(element, element.name!)\n            );\n        });\n        // tslint:disable-next-line:no-unused-variable\n        for (const [, style] of this.m_textStyles) {\n            if (style.textCanvas === undefined) {\n                if (style.fontCatalog !== undefined) {\n                    const styledTextRenderer = textRenderers.find(\n                        textRenderer => textRenderer.fontCatalog === style.fontCatalog\n                    );\n                    style.textCanvas =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.textCanvas\n                            : undefined;\n                    style.poiRenderer =\n                        styledTextRenderer !== undefined\n                            ? styledTextRenderer.poiRenderer\n                            : undefined;\n                }\n                if (style.textCanvas === undefined) {\n                    if (style.fontCatalog !== undefined) {\n                        logger.warn(\n                            `FontCatalog '${style.fontCatalog}' set in TextStyle '${\n                                style.name\n                            }' not found, using default fontCatalog(${\n                                defaultTextCanvas!.fontCatalog.name\n                            }).`\n                        );\n                    }\n                    style.textCanvas = defaultTextCanvas;\n                    style.poiRenderer = defaultPoiRenderer;\n                }\n            }\n        }\n    }\n\n    /**\n     * Retrieves a [[TextElementStyle]] for [[Theme]]'s [[TextStyle]] id.\n     */\n    getTextElementStyle(styleId?: string): TextElementStyle {\n        let result;\n        if (styleId === undefined) {\n            result = this.m_defaultStyle;\n        } else {\n            result = this.m_textStyles.get(styleId);\n            if (result === undefined) {\n                result = this.m_defaultStyle;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param technique Label's technique.\n     * @param techniqueIdx Label's technique index.\n     */\n    getRenderStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextRenderStyle {\n        const mapView = tile.mapView;\n        const dataSource = tile.dataSource;\n        const zoomLevel = mapView.zoomLevel;\n        const discreteZoomLevel = Math.floor(zoomLevel);\n\n        const cacheId = computeStyleCacheId(dataSource.name, technique, discreteZoomLevel);\n        let renderStyle = this.m_textRenderStyleCache.get(cacheId);\n        if (renderStyle === undefined) {\n            // Environment with $zoom forced to integer to achieve stable interpolated values.\n            const discreteZoomEnv = new MapEnv({ $zoom: discreteZoomLevel }, mapView.env);\n\n            const defaultRenderParams = this.m_defaultStyle.renderParams;\n\n            // Sets opacity to 1.0 if default and technique attribute are undefined.\n            const defaultOpacity = getOptionValue(defaultRenderParams.opacity, 1.0);\n            // Interpolate opacity but only on discreet zoom levels (step interpolation).\n            let opacity = getPropertyValue(\n                getOptionValue(technique.opacity, defaultOpacity),\n                discreteZoomEnv\n            );\n\n            let color: THREE.Color | undefined;\n            // Store color (RGB) in cache and multiply opacity value with the color alpha channel.\n            if (technique.color !== undefined) {\n                let hexColor = evaluateColorProperty(technique.color, discreteZoomEnv);\n                if (ColorUtils.hasAlphaInHex(hexColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexColor);\n                    opacity = opacity * alpha;\n                    hexColor = ColorUtils.removeAlphaFromHex(hexColor);\n                }\n                color = ColorCache.instance.getColor(hexColor);\n            }\n\n            // Sets background size to 0.0 if default and technique attribute is undefined.\n            const defaultBackgroundSize = getOptionValue(\n                defaultRenderParams.fontSize!.backgroundSize,\n                0\n            );\n            const backgroundSize = getPropertyValue(\n                getOptionValue(technique.backgroundSize, defaultBackgroundSize),\n                discreteZoomEnv\n            );\n\n            const hasBackgroundDefined =\n                technique.backgroundColor !== undefined &&\n                technique.backgroundSize !== undefined &&\n                backgroundSize > 0;\n\n            // Sets background opacity to 1.0 if default and technique value is undefined while\n            // background size and color is specified, otherwise set value in default render\n            // params or 0.0 if neither set. Makes label opaque when backgroundColor and\n            // backgroundSize are set.\n            const defaultBackgroundOpacity = getOptionValue(\n                defaultRenderParams.backgroundOpacity,\n                0.0\n            );\n            let backgroundOpacity = getPropertyValue(\n                getOptionValue(\n                    technique.backgroundOpacity,\n                    hasBackgroundDefined ? 1.0 : defaultBackgroundOpacity\n                ),\n                discreteZoomEnv\n            );\n\n            let backgroundColor: THREE.Color | undefined;\n            // Store background color (RGB) in cache and multiply backgroundOpacity by its alpha.\n            if (technique.backgroundColor !== undefined) {\n                let hexBgColor = evaluateColorProperty(technique.backgroundColor, discreteZoomEnv);\n                if (ColorUtils.hasAlphaInHex(hexBgColor)) {\n                    const alpha = ColorUtils.getAlphaFromHex(hexBgColor);\n                    backgroundOpacity = backgroundOpacity * alpha;\n                    hexBgColor = ColorUtils.removeAlphaFromHex(hexBgColor);\n                }\n                backgroundColor = ColorCache.instance.getColor(hexBgColor);\n            }\n\n            const renderParams = {\n                fontName: getOptionValue(technique.fontName, defaultRenderParams.fontName),\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: getPropertyValue(\n                        getOptionValue(technique.size, defaultRenderParams.fontSize!.size),\n                        discreteZoomEnv\n                    ),\n                    backgroundSize\n                },\n                fontStyle:\n                    technique.fontStyle === \"Regular\" ||\n                    technique.fontStyle === \"Bold\" ||\n                    technique.fontStyle === \"Italic\" ||\n                    technique.fontStyle === \"BoldItalic\"\n                        ? FontStyle[technique.fontStyle]\n                        : defaultRenderParams.fontStyle,\n                fontVariant:\n                    technique.fontVariant === \"Regular\" ||\n                    technique.fontVariant === \"AllCaps\" ||\n                    technique.fontVariant === \"SmallCaps\"\n                        ? FontVariant[technique.fontVariant]\n                        : defaultRenderParams.fontVariant,\n                rotation: getOptionValue(technique.rotation, defaultRenderParams.rotation),\n                color: getOptionValue(\n                    color,\n                    getOptionValue(defaultRenderParams.color, DefaultTextStyle.DEFAULT_COLOR)\n                ),\n                backgroundColor: getOptionValue(\n                    backgroundColor,\n                    getOptionValue(\n                        defaultRenderParams.backgroundColor,\n                        DefaultTextStyle.DEFAULT_BACKGROUND_COLOR\n                    )\n                ),\n                opacity,\n                backgroundOpacity\n            };\n\n            const themeRenderParams = this.getTextElementStyle(technique.style).renderParams;\n            renderStyle = new TextRenderStyle({\n                ...themeRenderParams,\n                ...renderParams\n            });\n            this.m_textRenderStyleCache.set(cacheId, renderStyle);\n        }\n\n        return renderStyle;\n    }\n\n    /**\n     * Gets the appropriate [[TextRenderStyle]] to use for a label. Depends heavily on the label's\n     * [[Technique]] and the current zoomLevel.\n     *\n     * @param tile The [[Tile]] to process.\n     * @param technique Label's technique.\n     */\n    getLayoutStyle(\n        tile: Tile,\n        technique: TextTechnique | PoiTechnique | LineMarkerTechnique\n    ): TextLayoutStyle {\n        const mapView = tile.mapView;\n        const floorZoomLevel = Math.floor(tile.mapView.zoomLevel);\n        const cacheId = computeStyleCacheId(tile.dataSource.name, technique, floorZoomLevel);\n        let layoutStyle = this.m_textLayoutStyleCache.get(cacheId);\n\n        if (layoutStyle === undefined) {\n            // Environment with $zoom forced to integer to achieve stable interpolated values.\n            const discreteZoomEnv = new MapEnv({ $zoom: floorZoomLevel }, mapView.env);\n\n            const defaultLayoutParams = this.m_defaultStyle.layoutParams;\n\n            const hAlignment = getPropertyValue(technique.hAlignment, discreteZoomEnv) as\n                | string\n                | undefined;\n            const vAlignment = getPropertyValue(technique.vAlignment, discreteZoomEnv) as\n                | string\n                | undefined;\n            const wrapping = getPropertyValue(technique.wrappingMode, discreteZoomEnv) as\n                | string\n                | undefined;\n\n            const horizontalAlignment: HorizontalAlignment | undefined =\n                hAlignment === \"Left\" || hAlignment === \"Center\" || hAlignment === \"Right\"\n                    ? HorizontalAlignment[hAlignment]\n                    : defaultLayoutParams.horizontalAlignment;\n\n            const verticalAlignment: VerticalAlignment | undefined =\n                vAlignment === \"Above\" || vAlignment === \"Center\" || vAlignment === \"Below\"\n                    ? VerticalAlignment[vAlignment]\n                    : defaultLayoutParams.verticalAlignment;\n\n            const layoutParams = {\n                tracking:\n                    getPropertyValue(technique.tracking, discreteZoomEnv) ??\n                    defaultLayoutParams.tracking,\n                leading:\n                    getPropertyValue(technique.leading, discreteZoomEnv) ??\n                    defaultLayoutParams.leading,\n                maxLines:\n                    getPropertyValue(technique.maxLines, discreteZoomEnv) ??\n                    defaultLayoutParams.maxLines,\n                lineWidth:\n                    getPropertyValue(technique.lineWidth, discreteZoomEnv) ??\n                    defaultLayoutParams.lineWidth,\n                canvasRotation:\n                    getPropertyValue(technique.canvasRotation, discreteZoomEnv) ??\n                    defaultLayoutParams.canvasRotation,\n                lineRotation:\n                    getPropertyValue(technique.lineRotation, discreteZoomEnv) ??\n                    defaultLayoutParams.lineRotation,\n                wrappingMode:\n                    wrapping === \"None\" || wrapping === \"Character\" || wrapping === \"Word\"\n                        ? WrappingMode[wrapping]\n                        : defaultLayoutParams.wrappingMode,\n                horizontalAlignment,\n                verticalAlignment\n            };\n\n            const themeLayoutParams = this.getTextElementStyle(technique.style);\n            layoutStyle = new TextLayoutStyle({\n                ...themeLayoutParams,\n                ...layoutParams\n            });\n            this.m_textLayoutStyleCache.set(cacheId, layoutStyle);\n        }\n\n        return layoutStyle;\n    }\n\n    private createTextElementStyle(\n        style: TextStyleDefinition,\n        styleName: string\n    ): TextElementStyle {\n        return {\n            name: styleName,\n            fontCatalog: getOptionValue(style.fontCatalogName, this.m_defaultStyle.fontCatalog),\n            renderParams: {\n                fontName: style.fontName,\n                fontSize: {\n                    unit: FontUnit.Pixel,\n                    size: 32,\n                    backgroundSize: style.backgroundSize || 8\n                },\n                fontStyle:\n                    style.fontStyle === \"Regular\" ||\n                    style.fontStyle === \"Bold\" ||\n                    style.fontStyle === \"Italic\" ||\n                    style.fontStyle === \"BoldItalic\"\n                        ? FontStyle[style.fontStyle]\n                        : undefined,\n                fontVariant:\n                    style.fontVariant === \"Regular\" ||\n                    style.fontVariant === \"AllCaps\" ||\n                    style.fontVariant === \"SmallCaps\"\n                        ? FontVariant[style.fontVariant]\n                        : undefined,\n                rotation: style.rotation,\n                color:\n                    style.color !== undefined\n                        ? ColorCache.instance.getColor(style.color)\n                        : undefined,\n                backgroundColor:\n                    style.backgroundColor !== undefined\n                        ? ColorCache.instance.getColor(style.backgroundColor)\n                        : undefined,\n                opacity: style.opacity,\n                backgroundOpacity: style.backgroundOpacity\n            },\n            layoutParams: {\n                tracking: style.tracking,\n                leading: style.leading,\n                maxLines: style.maxLines,\n                lineWidth: style.lineWidth,\n                canvasRotation: style.canvasRotation,\n                lineRotation: style.lineRotation,\n                wrappingMode:\n                    style.wrappingMode === \"None\" ||\n                    style.wrappingMode === \"Character\" ||\n                    style.wrappingMode === \"Word\"\n                        ? WrappingMode[style.wrappingMode]\n                        : WrappingMode.Word,\n                verticalAlignment:\n                    style.vAlignment === \"Above\" ||\n                    style.vAlignment === \"Center\" ||\n                    style.vAlignment === \"Below\"\n                        ? VerticalAlignment[style.vAlignment]\n                        : VerticalAlignment.Center,\n                horizontalAlignment:\n                    style.hAlignment === \"Left\" ||\n                    style.hAlignment === \"Center\" ||\n                    style.hAlignment === \"Right\"\n                        ? HorizontalAlignment[style.hAlignment]\n                        : HorizontalAlignment.Center\n            }\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3 } from \"three\";\n\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * The default value for camera movement throttling, in milliseconds.\n */\nconst DEFAULT_THROTTLING_TIMEOUT = 300;\n\n/**\n * The `CameraMovementDetector` class checks for changes in camera position and orientation, to\n * detect continuous movements without the animation mode activated in [[MapView]]. If the\n * interaction is not continuous enough, you can use a throttling timer to reduce the number of\n * callbacks.\n */\nexport class CameraMovementDetector {\n    private m_lastAttitude?: MapViewUtils.Attitude;\n    private m_lastCameraPos = new Vector3();\n    private m_newCameraPos = new Vector3();\n    private m_cameraMovedLastFrame: boolean | undefined;\n    private m_throttlingTimerId?: number = undefined;\n    private m_movementDetectorDeadline: number = 0;\n\n    /**\n     * Initializes the detector with timeout value and callbacks. [[MapView]] also provides\n     * events for client code to be notified when these cues occur.\n     *\n     * @param m_throttlingTimeout The delay, in milliseconds, between the last user interaction\n     * detected and the call to `m_movementFinishedFunc`; the default is `300`.\n     * @param m_movementStartedFunc Callback function, called when the user starts interacting.\n     * @param m_movementFinishedFunc Callback function, called when the user stops interacting.\n     */\n    constructor(\n        private m_throttlingTimeout: number | undefined,\n        private m_movementStartedFunc: (() => void) | undefined,\n        private m_movementFinishedFunc: (() => void) | undefined\n    ) {\n        if (this.m_throttlingTimeout === undefined) {\n            this.m_throttlingTimeout = DEFAULT_THROTTLING_TIMEOUT;\n        }\n    }\n\n    /**\n     * Checks if the camera has moved since the last time it was checked. The\n     * `m_movementStartedFunc` is called when a movement starts. If no movement\n     * is detected, a timer for `m_movementFinishedFunc` starts.\n     *\n     * @param mapView [[Mapview]]'s position and camera are checked for modifications.\n     */\n    checkCameraMoved(mapView: MapView, now: number): boolean {\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n\n        if (this.m_lastAttitude === undefined) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n            return false;\n        }\n        const cameraMoved =\n            !this.m_lastCameraPos.equals(newCameraPos) ||\n            newAttitude.yaw !== this.m_lastAttitude.yaw ||\n            newAttitude.pitch !== this.m_lastAttitude.pitch ||\n            newAttitude.roll !== this.m_lastAttitude.roll;\n\n        if (cameraMoved) {\n            this.m_lastCameraPos.copy(newCameraPos);\n            this.m_lastAttitude = newAttitude;\n        }\n\n        if (cameraMoved !== this.m_cameraMovedLastFrame) {\n            if (cameraMoved) {\n                this.movementStarted();\n            }\n            this.m_cameraMovedLastFrame = cameraMoved;\n        }\n        if (cameraMoved) {\n            // Start timer\n            this.m_movementDetectorDeadline = now + this.m_throttlingTimeout!;\n            this.startMovementFinishedTimer(now);\n        }\n\n        return this.m_cameraMovedLastFrame;\n    }\n\n    /**\n     * Reset the saved camera position. Next time checkCameraMoved is called, it will return\n     * `false`.\n     */\n    clear(mapView: MapView) {\n        const newCameraPos = mapView.camera.getWorldPosition(this.m_newCameraPos);\n        this.m_lastCameraPos.set(newCameraPos.x, newCameraPos.y, newCameraPos.z);\n\n        const newAttitude = MapViewUtils.extractAttitude(mapView, mapView.camera);\n        this.m_lastAttitude = newAttitude;\n    }\n\n    /**\n     * Force change of camera position. Next time checkCameraMoved is called, it will return `true`.\n     */\n    forceMoved() {\n        this.m_lastCameraPos.set(Number.NaN, Number.NaN, Number.NaN);\n    }\n\n    /**\n     * Returns `true` if the camera of this [[MapView]] is currently moving. In this case the\n     * `m_movementFinishedFunc` is waiting to be called after the throttling timer runs out.\n     */\n    get cameraIsMoving() {\n        return this.m_throttlingTimerId !== undefined;\n    }\n\n    /**\n     * Disposes resources and kills the throttling timer.\n     */\n    dispose() {\n        this.removeMovementFinishedTimer();\n        this.m_movementStartedFunc = undefined;\n        this.m_movementFinishedFunc = undefined;\n    }\n\n    /**\n     * Returns `true` if the camera has moved in the last frame.\n     */\n    get cameraMovedLastFrame(): boolean {\n        return this.m_cameraMovedLastFrame === true;\n    }\n\n    private movementStarted() {\n        if (this.m_movementStartedFunc !== undefined) {\n            this.m_movementStartedFunc();\n        }\n    }\n\n    private movementFinished() {\n        this.removeMovementFinishedTimer();\n        if (this.m_movementFinishedFunc !== undefined) {\n            this.m_movementFinishedFunc();\n        }\n    }\n\n    private startMovementFinishedTimer(now: number) {\n        if (this.m_throttlingTimerId === undefined) {\n            const remainingTime = Math.max(0, this.m_movementDetectorDeadline - now);\n            this.m_throttlingTimerId = setTimeout(this.onDeadlineTimer, remainingTime) as any;\n        }\n    }\n\n    private onDeadlineTimer = () => {\n        this.m_throttlingTimerId = undefined;\n        const now = performance.now();\n        if (now >= this.m_movementDetectorDeadline) {\n            this.movementFinished();\n        } else {\n            this.startMovementFinishedTimer(now);\n        }\n    };\n\n    private removeMovementFinishedTimer() {\n        if (this.m_throttlingTimerId !== undefined) {\n            clearTimeout(this.m_throttlingTimerId);\n            this.m_throttlingTimerId = undefined;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport { EarthConstants, Projection, ProjectionType } from \"@here/harp-geoutils\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\nconst epsilon = 0.000001;\n\nexport interface ClipPlanesEvaluator {\n    /**\n     * Minimum elevation to be rendered, values beneath the sea level are negative.\n     */\n    minElevation: number;\n\n    /**\n     * Set maximum elevation to be rendered, values above sea level are positive.\n     */\n    maxElevation: number;\n\n    /**\n     * Compute near and far clipping planes distance.\n     *\n     * Evaluation method should be called on every frame  and camera clip planes updated.\n     * This is related to evaluator implementation and its input data, that may suddenly change\n     * such as camera position or angle, projection type or so.\n     * Some evaluators may not depend on all or even any of input objects, but to preserve\n     * compatibility with any evaluator type it is strongly recommended to update on every frame.\n     * @param mapView The [[MapView]] in use.\n     * @note Camera clipping planes aren't automatically updated via #evaluateClipPlanes()\n     * call, user should do it manually if needed.\n     */\n    evaluateClipPlanes(mapView: MapView): ViewRanges;\n}\n\n/**\n * Simplest camera clip planes evaluator, interpolates near/far planes based on ground distance.\n *\n * At general ground distance to camera along the surface normal is used as reference point for\n * planes evaluation, where near plane distance is set as fraction of this distance refereed as\n * [[nearMultiplier]]. Far plane equation has its own multiplier - [[nearFarMultiplier]],\n * which is applied to near plane and offset giving finally far plane distance.\n * This evaluator supports both planar and spherical projections, although it's behavior is\n * slightly different in each case. General algorithm sets near plane between camera and\n * ground level, while far plane is just calculated using scale and bias approach with far offset\n * and multiplier.\n * @deprecated Class contains the legacy (first and original) clip planes evaluation method, which\n * is widelly used in examples thus is still kept for backward compatibility and comparisons.\n */\nexport class InterpolatedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly farMin: number;\n\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n\n    constructor(\n        readonly nearMin: number = 0.1,\n        readonly nearMultiplier: number = 0.1,\n        readonly nearFarMultiplier = 50.0,\n        readonly farOffset = 200.0\n    ) {\n        assert(nearMin > 0);\n        assert(nearFarMultiplier >= 0);\n        assert(farOffset >= 0);\n        this.farMin = nearMin * nearFarMultiplier + farOffset;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(mapView: MapView): ViewRanges {\n        const camera = mapView.camera;\n        const projection = mapView.projection;\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.farMin;\n        if (projection.type === ProjectionType.Spherical) {\n            // near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n            const r = EarthConstants.EQUATORIAL_RADIUS;\n            const d = camera.position.length();\n            const alpha = Math.asin(r / d);\n            // Extract X, Y, Z axes into tmp vectors array.\n            camera.matrixWorld.extractBasis(\n                this.m_tmpVectors[0],\n                this.m_tmpVectors[1],\n                this.m_tmpVectors[2]\n            );\n            // Setup quaternion based on X axis.\n            this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], alpha);\n            // Acquire forward vector based on Z axis reversed (keep it in tmpVectors[2]).\n            const fwd = this.m_tmpVectors[2].negate();\n            // Apply quaternion rotation to forward vector, store it in tmpVectors[1].\n            const fwdRot = this.m_tmpVectors[1].copy(fwd).applyQuaternion(this.m_tmpQuaternion);\n            // Store camera position tmpVectors[0] and reference it with p.\n            const p = this.m_tmpVectors[0].copy(camera.position);\n            p.addScaledVector(fwdRot, Math.sqrt(d * d - r * r));\n            farPlane = p.sub(camera.position).dot(fwd);\n            nearPlane = Math.max(\n                this.nearMin,\n                projection.groundDistance(camera.position) * this.nearMultiplier\n            );\n        } else if (projection.type === ProjectionType.Planar) {\n            const groundDistance = projection.groundDistance(camera.position);\n            nearPlane = Math.max(this.nearMin, groundDistance * this.nearMultiplier);\n            // Will be already clamped to minFar due to clamping above.\n            farPlane = nearPlane * this.nearFarMultiplier + this.farOffset;\n        } else {\n            assert(false, \"Unsupported projection type\");\n        }\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farPlane\n        };\n        return viewRanges;\n    }\n}\n\n/**\n * Abstract evaluator class that adds support for elevation constraints.\n *\n * Classes derived from this should implement algorithms that takes into account rendered\n * features height (elevations), such as ground plane is no more flat (or spherical), but\n * contains geometry that should be overlapped by frustum planes.\n */\nexport abstract class ElevationBasedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    private m_maxElevation: number;\n    private m_minElevation: number;\n\n    constructor(maxElevation: number, minElevation: number) {\n        assert(maxElevation >= minElevation);\n        this.m_minElevation = minElevation;\n        this.m_maxElevation = maxElevation;\n    }\n\n    abstract evaluateClipPlanes(mapView: MapView): ViewRanges;\n\n    /**\n     * Set maximum elevation above sea level to be rendered.\n     *\n     * @param elevation the elevation (altitude) value in world units (meters).\n     * @note If you set this exactly to the maximum rendered feature height (altitude above\n     * the sea, you may notice some flickering or even polygons disappearing related to rounding\n     * errors or depth buffer precision. In such cases increase [[nearFarMargin]] or add a little\n     * bit offset to your assumed maximum elevation.\n     * @note Reasonable values are in between (-DeadSeeDepression, MtEverestHeight>, both values\n     * are defined in [[EarthConstant]] as [[EarthConstant.MIN_ELEVATION]] and\n     * [[EarthConstant.MAX_ELEVATION]] respectively.\n     * @see minElevation for more information about precision and rounding errors.\n     */\n    set maxElevation(elevation: number) {\n        this.m_maxElevation = elevation;\n        // Min elevation should be at least equal or smaller to max elevation.\n        this.m_minElevation = Math.min(elevation, this.m_minElevation);\n    }\n\n    /**\n     * Get maximum elevation to be covered by camera frustum.\n     */\n    get maxElevation(): number {\n        return this.m_maxElevation;\n    }\n\n    /**\n     * Set minimum elevation to be rendered, values beneath the sea level are negative.\n     *\n     * @param elevation the minimum elevation (depression) in world units (meters).\n     * @note If you set this parameter to zero you may not see any features rendered if they are\n     * just below the sea level more than half of [[nearFarMargin]] assumed. Similarly if set to\n     * -100m and rendered features lays exactly in such depression, you may notice that problem.\n     * The errors usually come from projection precision loss and depth buffer nature (significant\n     * precision loss closer to far plane). Thus is such cases either increase the margin (if you\n     * are sure features are just at this elevation, or setup bigger offset for [[minElevation]].\n     * Reasonable values are between <-DeadSeaDepression, MtEverestHeight), where the first denotes\n     * lowest depression on the Earth defined as [[EarthConstants.MIN_ELEVATION]] and the second is\n     * the highest point our planet.\n     * @see https://developer.nvidia.com/content/depth-precision-visualized\n     */\n    set minElevation(elevation: number) {\n        this.m_minElevation = elevation;\n        // Max elevation should be at least equal or bigger than min elevation.\n        this.m_maxElevation = Math.max(elevation, this.m_maxElevation);\n    }\n\n    /**\n     * Get minimum elevation to be covered by camera frustum.\n     */\n    get minElevation(): number {\n        return this.m_minElevation;\n    }\n}\n\n/**\n * Top view, clip planes evaluator that computes view ranges based on ground distance and elevation.\n *\n * This evaluator supports both planar and spherical projections, although it behavior is\n * slightly different in each case. General algorithm sets near plane and far plane close\n * to ground level, but taking into account maximum and minimum elevation of features on the ground.\n *\n * @note This evaluator supports only cameras which are always looking down the ground surface\n * (top-down view) along surface normal and does not preserve correct clip planes when\n * modifying camera pitch (tilt) angle. In simple words it is suitable only for top view camera\n * settings.\n */\nexport class TopViewClipPlanesEvaluator extends ElevationBasedClipPlanesEvaluator {\n    /**\n     * Helper for reducing number of objects created at runtime.\n     */\n    protected m_tmpVectors: THREE.Vector3[] = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n    /**\n     * Helper object for reducing performance impact.\n     */\n    protected m_tmpQuaternion: THREE.Quaternion = new THREE.Quaternion();\n    private m_minimumViewRange: ViewRanges;\n\n    /**\n     * Allows to setup near/far offsets (margins), rendered geometry elevation relative to sea\n     * level as also minimum near plane and maximum far plane distance constraints.\n     * It is strongly recommended to set some reasonable [[nearFarMargin]] (offset) between near\n     * and far planes to avoid flickering.\n     * @param maxElevation defines near plane offset from the ground in the surface normal\n     * direction, positive values allows to render elevated terrain features (mountains,\n     * buildings). Defaults to Burj Khalifa building height.\n     * @param minElevation defines far plane offset from the ground surface, negative values moves\n     * far plane below the ground level (use it to render depressions). Default zero - sea level.\n     * @param nearMin minimum allowable near plane distance from camera, must be bigger than zero.\n     * @param nearFarMarginRatio minimum distance between near and far plane, as a ratio of average\n     * near/far plane distance, it have to be significantly bigger than zero (especially if\n     * [[maxElevation]] and [[minElevation]] are equal), otherwise you may notice flickering when\n     * rendering, or even render empty scene if frustum planes are almost equal.\n     * @param farMaxRatio maximum ratio between ground and far plane distance, allows to limit\n     * viewing distance at overall. Have to be bigger than 1.0.\n     * @note Keep in mind that this evaluator does not evaluate terrain (or building) elevation\n     * automatically, to keep such features rendered (between frustum planes) use [[minElevation]],\n     * [[maxElevation]] constraints. You may change this parameters at any time, but it requires\n     * repeating [[evaluatePlanes]] step, if your camera is moving you need to evaluate planes\n     * anyway.\n     * @note You may treat [[minElevation]] and [[maxElevation]] parameters as the maximum and\n     * minimum renderable elevation respectively along the surface normal, when camera is\n     * constantly looking downwards (top-down view). If you need [[ClipPlanesEvaluator]] for\n     * cameras that support tilt or yaw please use [[TiltViewClipPlanesEvaluator]].\n     * @note [[nearFarMaxRatio]] does not limit far plane when spherical projection is in use,\n     * the algorithm used there estimates distance to point on tangent where line from camera\n     * touches the sphere horizon and there is no reason to clamp it.\n     */\n    constructor(\n        maxElevation: number = EarthConstants.MAX_BUILDING_HEIGHT,\n        minElevation: number = 0,\n        readonly nearMin: number = 1.0,\n        readonly nearFarMarginRatio: number = 0.05,\n        readonly farMaxRatio = 6.0\n    ) {\n        super(maxElevation, minElevation);\n        assert(nearMin > 0);\n        assert(nearFarMarginRatio > epsilon);\n        assert(farMaxRatio > 1.0);\n        const nearFarMargin = nearFarMarginRatio * nearMin;\n        this.m_minimumViewRange = {\n            near: nearMin,\n            far: nearMin + nearFarMargin,\n            minimum: this.nearMin,\n            maximum: Math.max(nearMin * farMaxRatio, nearMin + nearFarMargin)\n        };\n    }\n\n    /** @override */\n    evaluateClipPlanes(mapView: MapView): ViewRanges {\n        if (mapView.projection.type === ProjectionType.Spherical) {\n            return this.evaluateDistanceSphericalProj(mapView);\n        } else if (mapView.projection.type === ProjectionType.Planar) {\n            return this.evaluateDistancePlanarProj(mapView);\n        }\n        assert(false, \"Unsupported projection type\");\n        return { ...this.minimumViewRange };\n    }\n\n    /**\n     * Get minimum view range that is possible to achieve with current evaluator settings.\n     * @note This value will not change after evaluator is constructed.\n     */\n    protected get minimumViewRange(): ViewRanges {\n        return this.m_minimumViewRange;\n    }\n\n    /**\n     * Calculate camera altitude (closest distance) to ground level in world units.\n     * @param camera\n     * @param projection\n     */\n    protected getCameraAltitude(camera: THREE.Camera, projection: Projection): number {\n        return projection.groundDistance(camera.position);\n    }\n\n    protected evaluateDistancePlanarProj(mapView: MapView): ViewRanges {\n        const { camera, projection } = mapView;\n        assert(projection.type !== ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // Calculate distance to closest point on the ground.\n        const groundDistance = this.getCameraAltitude(camera, projection);\n        const farMax = groundDistance * this.farMaxRatio;\n        // We could at least try to keep margins along the eye vector (center of the view) in\n        // tact with pitch angle changes, but this does not solve all tilt angle problems,\n        // rather use more sophisticated evaluator.\n        nearPlane = groundDistance - this.maxElevation;\n        farPlane = groundDistance - this.minElevation;\n\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.min(farPlane, farMax);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: Math.max(farMax, farPlane)\n        };\n        return viewRanges;\n    }\n\n    protected evaluateDistanceSphericalProj(mapView: MapView): ViewRanges {\n        const { camera, projection } = mapView;\n        assert(projection.type === ProjectionType.Spherical);\n\n        let nearPlane: number = this.nearMin;\n        let farPlane: number = this.nearMin * this.farMaxRatio;\n\n        // The near plane calculus is quite straight forward and works the same as for planar\n        // projections. We simply search for the closest point of the ground just above\n        // the camera, then we apply margin (elevation) to it along the sphere surface normal:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        nearPlane = cameraAltitude - this.maxElevation;\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        let d = camera.position.length();\n        d = d === 0 ? epsilon : d;\n        if (camera.type === \"PerspectiveCamera\") {\n            // This solution computes near and far plane for a set up where\n            // the camera is looking at the center of the scene.\n\n            // The far plane distance calculus requires finding the sphere tangent line that is\n            // co-linear with (goes thru) camera position, such tangent creates right angle\n            // with sphere diameter where it touches its surface (point T). Given that sphere is\n            // always at world origin and camera orbits around it we have (see\n            // #getTangentBasedFarPlane):\n            // angle(OTC) = 90\n            // sin(OCT) = sin(alpha) = r / d\n            // alpha = asin(r / d)\n            const alpha = Math.asin(r / d);\n            // If alpha it bigger than half fov angle, our visibility limit is set by tangent\n            // line, otherwise we need to find top (or right) plane intersection with sphere,\n            // which is definitely closer than the tangent point mentioned above.\n            const cam = camera as THREE.PerspectiveCamera;\n            // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n            const aspect = cam.aspect > 1 ? cam.aspect : 1 / cam.aspect;\n            const halfFovAngle = THREE.Math.degToRad((cam.fov * aspect) / 2);\n\n            const farTangent = this.getTangentBasedFarPlane(cam, d, r, alpha);\n            farPlane =\n                halfFovAngle > alpha\n                    ? farTangent\n                    : this.getFovBasedFarPlane(cam, d, r, 2 * halfFovAngle, projection);\n        }\n        // Orthographic camera projection\n        else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n\n        // In extreme cases the largest depression assumed may be further than tangent\n        // based far plane distance, take it into account\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = cameraAltitude * this.farMaxRatio;\n        // Apply the constraints.\n        nearPlane = Math.max(nearPlane, this.nearMin);\n        farPlane = Math.max(farPlane, farMin);\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (nearPlane + farPlane)) / 2;\n        nearPlane = Math.max(nearPlane - nearFarMargin / 2, this.nearMin);\n        farPlane = Math.max(farPlane + nearFarMargin / 2, nearPlane + nearFarMargin);\n\n        const viewRanges: ViewRanges = {\n            near: nearPlane,\n            far: farPlane,\n            minimum: this.nearMin,\n            maximum: farMax\n        };\n        return viewRanges;\n    }\n\n    /**\n     * Calculate distance from a point to the tangent point of a sphere.\n     *\n     * Returns zero if point is below surface or only very slightly above surface of sphere.\n     * @param d Distance from point to center of sphere\n     * @param r Radius of sphere\n     */\n    protected getTangentDistance(d: number, r: number): number {\n        // There may be situations when maximum elevation still remains below sea level\n        // (elevation < 0) or it is negligible (elevation ~ epsilon)\n        if (d - r < epsilon) {\n            return 0;\n        }\n\n        // The distance to tangent point may be described as:\n        // t = sqrt(d^2 - r^2)\n        return Math.sqrt(d * d - r * r);\n    }\n\n    /**\n     * Calculate far plane depending on furthest visible distance from camera position.\n     *\n     * Furthest visible distance is assumed to be distance from camera to horizon\n     * plus distance from elevated geometry to horizon(so that high objects behind horizon\n     * remain visible).\n     * @param camera The camera of the mapview\n     * @param d Distance from camera to origin\n     * @param r Radius of earth\n     * @param alpha Angle between camera eye vector and tangent\n     */\n    protected getTangentBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        alpha: number\n    ): number {\n        // Find tangent point intersection distance\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,        E\n        //   ,           .           ,    . ' far + elev\n        //  ,            .   r + e   , '   /\n        // ,             .     ,  '    ,  /\n        // ,             . O '         , / te\n        // ,             | .           ,/\n        //  ,            |   .  r     ,/\n        //   ,           |      .    ,\n        //     ,         |        , '_____ far\n        //       ' -_, _ | _ ,  ' / T\n        //     near      |      /\n        //               |    / t\n        //             d |  /\n        //               |/\n        //               C\n        const t = this.getTangentDistance(d, r);\n\n        // Because we would like to see elevated geometry that may be visible beyond\n        // the tangent point on ground surface, we need to extend viewing distance along\n        // the tangent line by te (see graph above).\n        const te = this.getTangentDistance(r + this.maxElevation, r);\n\n        // Next step is to project CE vector(length t + te) onto camera eye (forward) vector\n        // to get maximum camera far plane distance.\n        //\n        // Knowing that:\n        // tangentVec.dot(cameraFwdVec) = cos(alpha) * len(tangentVec) * len(cameraFwdVec).\n        // where:\n        // ||cameraFwdVec|| == 1 ^ ||tangentVec|| == t + te\n        // Formula simplifies to:\n        const far = Math.cos(alpha) * (t + te);\n\n        return far;\n    }\n\n    protected getFovBasedFarPlane(\n        camera: THREE.PerspectiveCamera,\n        d: number,\n        r: number,\n        fovAngle: number,\n        projection: Projection\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // Vector from camera to world center\n        const dVec = camera.position;\n        // Extract camera X, Y, Z orientation axes into tmp vectors array.\n        camera.matrixWorld.extractBasis(\n            this.m_tmpVectors[0],\n            this.m_tmpVectors[1],\n            this.m_tmpVectors[2]\n        );\n        // Setup quaternion (X axis based) for angle between frustum plane and camera eye.\n        this.m_tmpQuaternion.setFromAxisAngle(this.m_tmpVectors[0], fovAngle / 2);\n        // Acquire camera (eye) forward vector from Z axis (keep it in tmpVectors[2]).\n        const cameraFwdVec = this.m_tmpVectors[2];\n        // Apply quaternion to forward vector, creating intersection vector, which is\n        // parallel to top or right frustum plane (depending on the aspect ratio).\n        const tVec = this.m_tmpVectors[1].copy(cameraFwdVec).applyQuaternion(this.m_tmpQuaternion);\n        // Calculate camera to origin vector projection onto frustum plane (top or right).\n        // This gives us the length of CTA segment:\n        const cta = dVec.dot(tVec);\n        // If it is negative, it means that the dVec and the tVec points in\n        // opposite directions - there is no intersection - or intersection could\n        // potentially be behind the intersection ray's origin (camera position).\n        if (cta < 0) {\n            // Intersection points are behind camera, camera looks in wrong direction.\n            const groundDistance = this.getCameraAltitude(camera, projection);\n            // Setup far plane to maximum distance.\n            return groundDistance * this.farMaxRatio;\n        }\n        // Knowing the length of |CTA| we just need to subtract the length of |T0TA|\n        // segment from it to get far plane distance.\n        // In order to calculate |T0TA| we firstly need to use use Pythagorean theorem to\n        // find length of |OTA| = a. Here we use the right triangle formed by O-C-TA points:\n        // |OC|^2 = |CTA|^2 + |OTA|^2, where |OTA| = a, |OC| = d, |CTA| = cta\n        // a^2 = d^2 - cta^2\n        const a2 = dVec.dot(dVec) - cta * cta;\n        // Note that if a is greater than sphere radius the ray misses the sphere and\n        // thus there is no intersection at all.\n        const r2 = r * r;\n        assert(a2 <= r2, \"Please use this evaluator only for top view camera poses.\");\n        // Now to find the length of |T0TA| == |T1TA| we use the second right triangle\n        // formed by O-T0-TA points. Of course we know that |T0TA| segment length is\n        // equal to |T1TA|, and |OT0| segment is simply sphere radius.\n        // In order to find |T0TA| length we again use Pythagorean theorem, which says:\n        // |OT0|^2 = |OTA|^2 + |T0TA|^2, where |OTO| = r, |OTA| = a\n        // |T0TA|^2 = r^2 - a^2\n        const tota = Math.sqrt(r2 - a2);\n        // Finally our far plane (intersection point) is defined as:\n        return cta - tota;\n    }\n\n    protected getOrthoBasedFarPlane(d: number, r: number): number {\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,     E\n        //   ,            .--------- ,-.'- far + elev\n        // | ,            .   r + e , `, |\n        // |,             .     , '     ,| te\n        // |,             . O '.........,|..\n        // |,             |        r    ,|  far\n        // | ,            |            , |\n        // |  ,           |           ,  | t\n        // |    ,         |        , '   |\n        // |      ' -_, _ | _ ,  '       |\n        // |    near      | \\/___________| near - elev\n        // |              |              |\n        // |            d |              |\n        // |              |              |\n        //                C\n        // The distance to tangent point may be described as:\n        const t = d;\n        // Tangent extension due to terrain elevation behind the horizon may be calculated\n        // based on the right triangle:\n        // (r+maxElev)^2 = r^2 + te^2\n        // te = sqrt((r+maxElev)^2 - r^2)\n        // although we may not calculate it if elevation is negligible:\n        const te =\n            this.maxElevation < epsilon\n                ? 0\n                : Math.sqrt(r + this.maxElevation) * (r + this.maxElevation) - r * r;\n        // Both near and far planes distances are directly applied to frustum, because tangents'\n        // lines are parallel to camera look at vector.\n        // Now far plane distance is constituted with:\n        return t + te;\n    }\n}\n\n/**\n * Evaluates camera clipping planes taking into account ground distance and camera angles.\n *\n * This evaluator provides support for camera with varying tilt (pitch) angle, the angle\n * between camera __look at__ vector and the ground surface normal.\n */\nexport class TiltViewClipPlanesEvaluator extends TopViewClipPlanesEvaluator {\n    /**\n     * Calculate the camera distance to the ground in direction of look at vector.\n     * This is not equivalent to camera altitude cause value will change according to look at\n     * direction. It simply measures the distance of intersection point between ray from\n     * camera and ground level, yet without taking into account terrain elevation nor buildings.\n     * @param camera\n     * @param projection\n     * @note Use with extreme care cause due to optimizations the internal temporary vectors\n     * are used (m_tmpVectors[0], m_tmpVectors[1]). Those should not be used in outlining\n     * function scope (caller).\n     */\n    protected getCameraLookAtDistance(camera: THREE.Camera, projection: Projection): number {\n        assert(projection.type !== ProjectionType.Spherical);\n        // Using simple trigonometry we may approximate the distance of camera eye vector\n        // intersection with theoretical ground, knowing camera altitude and tilt angle:\n        // cos(tiltAngle) = altitude / groundDistance\n        // groundDistance = altitude / cos(tiltAngle)\n        // where:\n        // cos(tiltAngle) = dot(lookAt, eyeInverse)\n        const lookAt: THREE.Vector3 = this.m_tmpVectors[0];\n        camera.getWorldDirection(lookAt).normalize();\n        const normal: THREE.Vector3 = this.m_tmpVectors[1];\n        projection.surfaceNormal(camera.position, normal);\n        normal.negate();\n        let cosTiltAngle = lookAt.dot(normal);\n        cosTiltAngle = cosTiltAngle === 0 ? epsilon : cosTiltAngle;\n        return this.getCameraAltitude(camera, projection) / cosTiltAngle;\n    }\n\n    /**\n     * Calculate the lengths of frustum planes intersection with the ground plane.\n     * This evaluates distances between eye vector (or eye plane in orthographic projection) and\n     * ground intersections of top and bottom frustum planes.\n     * @note This method assumes the world surface (ground) to be flat and\n     * works only with planar projections.\n     *\n     * @param mapView The [[MapView]] instance in use.\n     */\n    protected getFrustumGroundIntersectionDist(mapView: MapView): { top: number; bottom: number } {\n        assert(mapView.projection.type !== ProjectionType.Spherical);\n        const camera = mapView.camera;\n        const projection = mapView.projection;\n        // This algorithm computes the length of frustum planes before intersecting with a flat\n        // ground surface. Entire computation is split over two projections method and performed\n        // for top and bottom plane, with addition of terrain (ground) elevation which is taken\n        // into account.\n        // The following diagram may help explain the algorithm below.\n        //   🎥\n        //   C\n        //   |\\\n        //   |.\\ .\n        //   | . \\  . t\n        // z |  .  \\   .c2\n        //   |  c1.  \\e ___. max elev\n        //   |     .   \\      .\n        //___|a___D1.____\\E1_____.D2______ g\n        //   C1      .     \\ __. min elev\n        //            .      \\.E2\n        //          b  .    .\n        //              . .\n        //               .\n        // Where:\n        // - C gives the camera position.\n        // - z is the height of the camera above the ground.\n        // - z1 == z2 == z, for perspective camera all planes origin its the same\n        // - a is a right angle.\n        // - e is the look at vector of the camera.\n        // - t and b are the frustum planes of the camera (top and bottom respectively).\n        // - angle between c1 to c2 is the fov.\n        // - c1, c2 - vectors from camera to the ground along frustum planes.\n        // - angles between c1 and e or e and c2 splits fov on equal halves.\n        // - d1 and d2 are the intersection points of the frustum with the world/ground plane.\n        // - angle between z and e is the pitch of the camera.\n        // - angle between g and e is the tilt angle.\n        // - g is the ground/world surface\n        //\n        // The goal is to find distance for top/bottom planes intersections of frustum with ground\n        // plane.\n        // This are the distances from C->D1 and C->D2, and are described as\n        // c1 and c2. Then we may compensate/correct those distances with actual\n        // ground elevations, which is done by simply offsetting camera altitude, as it is\n        // opposite to elevating ground level.\n        const halfPiLimit = Math.PI / 2 - epsilon;\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        const cameraTilt = this.getCameraTilt(mapView);\n        // Angle between z and c2\n        let topAngleRad: number;\n        // Angle between z and c1\n        let bottomAngleRad: number;\n        // Bottom plane origin altitude\n        let z1: number;\n        // Top plane origin altitude\n        let z2: number;\n        // For perspective projection:\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = (camera as any) as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.Math.degToRad((cam.fov * aspect) / 2);\n            topAngleRad = MathUtils.clamp(cameraTilt + halfFovAngle, -halfPiLimit, halfPiLimit);\n            bottomAngleRad = MathUtils.clamp(cameraTilt - halfFovAngle, -halfPiLimit, halfPiLimit);\n            z1 = z2 = cameraAltitude;\n        }\n        // For orthographic projection:\n        else {\n            const cam = (camera as any) as THREE.OrthographicCamera;\n            // For orthogonal camera projections we may simply ignore FOV and use 0 for FOV\n            // the top/bottom planes are simply parallel to the eye vector:\n            topAngleRad = bottomAngleRad = cameraTilt;\n            // Although the ray origin is not always the same (eye position) as for\n            // the perspective projections, thus we need to compensate for ortho-cube\n            // dimensions:\n            // sin(tilt) = zc2 / top\n            // sin(tilt) = zc1 / bottom\n            // zc2 = sin(tilt) * top\n            // zc1 = sin(tilt) * bottom\n            const sinBeta = Math.sin(cameraTilt);\n            z2 = cameraAltitude + sinBeta * cam.top;\n            z1 = cameraAltitude - sinBeta * cam.bottom;\n        }\n        // Distance along the top plane to the ground - c2\n        // cos(topAngle) = (z2 - minElev) / |c2|\n        // |c2| = (z2 - minElev) / cos(topAngle)\n        const topDist = (z2 - this.minElevation) / Math.cos(topAngleRad);\n        // Distance along the bottom plane to the ground - c1\n        // cos(bottomAngle) = (z - minElev) / |c1|\n        // |c1| = (z - minElev) / cos(bottomAngle)\n        const bottomDist = (z1 - this.maxElevation) / Math.cos(bottomAngleRad);\n\n        return {\n            top: Math.max(topDist, 0),\n            bottom: Math.max(bottomDist, 0)\n        };\n    }\n\n    /** @override */\n    protected evaluateDistancePlanarProj(mapView: MapView): ViewRanges {\n        assert(mapView.projection.type !== ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Generally near/far planes are set to keep top/bottom planes intersection distance.\n        // Then elevations margins are applied. Here margins (min/max elevations) are meant to\n        // be defined as distance along the ground normal vector thus during camera\n        // tilt they may affect near/far planes positions differently.\n        const planesDist = this.getFrustumGroundIntersectionDist(mapView);\n        const { camera, projection } = mapView;\n        // Project clipping plane distances for the top/bottom frustum planes (edges), but\n        // only if we deal with perspective camera type, this step is not required\n        // for orthographic projections, cause all clip planes are parallel to eye vector.\n        if (camera.type === \"PerspectiveCamera\") {\n            const cam = camera as THREE.PerspectiveCamera;\n            // Angle between z and c2, note, the fov is vertical, otherwise we would need to\n            // translate it using aspect ratio:\n            // let aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n            const aspect = 1;\n            // Half fov angle in radians\n            const halfFovAngle = THREE.Math.degToRad((cam.fov * aspect) / 2);\n            const cosHalfFov = Math.cos(halfFovAngle);\n            // cos(halfFov) = near / bottomDist\n            // near = cos(halfFov) * bottomDist\n            viewRanges.near = planesDist.bottom * cosHalfFov;\n            // cos(halfFov) = far / topDist\n            // far = cos(halfFov) * topDist\n            viewRanges.far = planesDist.top * cosHalfFov;\n        }\n        // Orthographic camera projection.\n        else {\n            viewRanges.near = planesDist.bottom;\n            viewRanges.far = planesDist.top;\n        }\n\n        // Clamp values to constraints.\n        const lookAtDist = this.getCameraLookAtDistance(camera, projection);\n        const farMax = lookAtDist * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = Math.min(viewRanges.far, farMax);\n\n        // Apply margins\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    /** @override */\n    protected evaluateDistanceSphericalProj(mapView: MapView): ViewRanges {\n        const { camera, projection } = mapView;\n        assert(projection.type === ProjectionType.Spherical);\n        const viewRanges = { ...this.minimumViewRange };\n\n        // Near plane calculus is pretty straightforward and does not depend on camera tilt:\n        const cameraAltitude = this.getCameraAltitude(camera, projection);\n        viewRanges.near = cameraAltitude - this.maxElevation;\n\n        // Take fov directly if it is vertical, otherwise we translate it using aspect ratio:\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        const halfFovAngle = THREE.Math.degToRad((camera.fov * aspect) / 2);\n\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Now we need to account for camera tilt and frustum volume, so the longest\n            // frustum edge does not intersects with sphere, it takes the worst case\n            // scenario regardless of camera tilt, so may be improved little bit with more\n            // sophisticated algorithm.\n            viewRanges.near *= Math.cos(halfFovAngle);\n        }\n\n        // Far plane calculation requires different approaches depending from camera projection:\n        // - perspective\n        // - orthographic\n        const cameraToOrigin = this.m_tmpVectors[0].copy(camera.position).negate();\n        const r = EarthConstants.EQUATORIAL_RADIUS;\n        const d = cameraToOrigin.length();\n        let farPlane: number;\n        if (camera instanceof THREE.PerspectiveCamera) {\n            // Step-wise calculate angle between camera eye vector and tangent\n\n            // Calculate angle between surface normal(below camera position) and tangent.\n            const alpha = Math.asin(r / d);\n\n            // Calculate angle between look at and surface normal(below camera position)\n            const cameraPitch = this.getCameraPitch(cameraToOrigin, camera);\n\n            // Calculate angle between camera eye vector and tangent.\n            const modifiedAlpha = Math.abs(alpha - cameraPitch);\n\n            // Use tangent based far plane if horizon is within field of view\n            const farTangent = this.getTangentBasedFarPlane(camera, d, r, modifiedAlpha);\n            farPlane =\n                halfFovAngle >= modifiedAlpha\n                    ? farTangent\n                    : this.getTiltedFovBasedFarPlane(d, r, halfFovAngle, cameraPitch);\n        } else {\n            farPlane = this.getOrthoBasedFarPlane(d, r);\n        }\n        viewRanges.far = farPlane;\n\n        // Apply the constraints.\n        const farMin = cameraAltitude - this.minElevation;\n        const farMax = mapView.targetDistance * this.farMaxRatio;\n        viewRanges.near = Math.max(viewRanges.near, this.nearMin);\n        viewRanges.far = MathUtils.clamp(viewRanges.far, farMin, farMax);\n\n        // Apply margins.\n        const nearFarMargin = (this.nearFarMarginRatio * (viewRanges.near + viewRanges.far)) / 2;\n        viewRanges.near = Math.max(viewRanges.near - nearFarMargin / 2, this.nearMin);\n        viewRanges.far = Math.max(\n            viewRanges.far + nearFarMargin / 2,\n            viewRanges.near + nearFarMargin\n        );\n\n        // Set minimum and maximum view range.\n        viewRanges.minimum = this.nearMin;\n        viewRanges.maximum = farMax;\n\n        return viewRanges;\n    }\n\n    protected getTiltedFovBasedFarPlane(\n        d: number,\n        r: number,\n        halfFovAngle: number,\n        cameraPitch: number\n    ) {\n        // Find intersection point that is closer to tangent point.\n        //\n        //         , - ~ ~ ~ - ,\n        //     , '               ' ,\n        //   ,           .           ,\n        //  ,            .     r     ,' T1\n        // ,             .     ,  '  / ,\n        // ,             . O.'  a   /  ,\n        // ,             | .  `  . /   ,\n        //  ,            |   .  r / TA,\n        //   ,           |    .  /   ,\n        //     ,         |     ./  ,'_____ far\n        //       ' -_, _ | _ , /' T0\n        //     near      |    /\n        //               |   / t\n        //             d | /\n        //               |/\n        //               C\n        //\n        // See:\n        // tslint:disable-next-line: max-line-length\n        // https://www.scratchapixel.com/lessons/3d-basic-rendering/minimal-ray-tracer-rendering-simple-shapes/ray-sphere-intersection\n\n        // compute length of t (distance to fov intersection with sphere)\n        // with law of cosines:\n        // r² = d² + t² - 2dt * cos(alpha)\n        // solved for t:\n        // t0 = d * cos(alpha) - sqrt(d²*cos²(alpha) - d² + r²)  <-- first intersection\n        // t1 = d * cos(alpha) + sqrt(d²*cos²(alpha) - d² + r²)  <-- second intersection\n        // Use first intersection:\n        const cosAlpha = Math.cos(cameraPitch + halfFovAngle);\n        const dSqr = d * d;\n        const t = d * cosAlpha - Math.sqrt(dSqr * cosAlpha * cosAlpha - dSqr + r * r);\n\n        assert(\n            !isNaN(t),\n            \"Field of view does not intersect sphere. Use tangent based far plane instead.\"\n        );\n\n        // project t onto camera fwd vector\n        const far = Math.cos(halfFovAngle) * t;\n\n        return far;\n    }\n\n    private getCameraPitch(cameraToOrigin: THREE.Vector3, camera: THREE.PerspectiveCamera) {\n        cameraToOrigin.normalize();\n        const lookAt = camera.getWorldDirection(this.m_tmpVectors[1]).normalize();\n        const cosAlpha1 = cameraToOrigin.dot(lookAt);\n        const cameraPitch = Math.acos(MathUtils.clamp(cosAlpha1, -1.0, 1.0));\n\n        return cameraPitch;\n    }\n\n    private getCameraTilt(mapView: MapView): number {\n        return MapViewUtils.extractCameraTilt(mapView.camera, mapView.projection);\n    }\n}\n\n/**\n * Provides the most basic evaluation concept giving fixed values with some constraints.\n */\nexport class FixedClipPlanesEvaluator implements ClipPlanesEvaluator {\n    readonly minFar: number;\n    private m_nearPlane: number;\n    private m_farPlane: number;\n\n    constructor(readonly minNear: number = 1, readonly minFarOffset: number = 10) {\n        this.minFar = minNear + minFarOffset;\n        this.m_nearPlane = minNear;\n        this.m_farPlane = this.minFar;\n    }\n\n    get nearPlane(): number {\n        return this.m_nearPlane;\n    }\n\n    set nearPlane(fixedNear: number) {\n        this.invalidatePlanes(fixedNear, this.m_farPlane);\n    }\n\n    get farPlane(): number {\n        return this.m_farPlane;\n    }\n\n    set farPlane(fixedFar: number) {\n        this.invalidatePlanes(this.m_nearPlane, fixedFar);\n    }\n\n    // tslint:disable-next-line: no-empty\n    set minElevation(elevation: number) {}\n\n    get minElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    // tslint:disable-next-line: no-empty\n    set maxElevation(elevation: number) {}\n\n    get maxElevation(): number {\n        // This evaluator does not support elevation so its always set to 0.\n        return 0;\n    }\n\n    evaluateClipPlanes(mapView: MapView): ViewRanges {\n        // We do not need to perform actual evaluation cause results are precomputed and\n        // kept stable until somebody changes the properties.\n        const viewRanges: ViewRanges = {\n            near: this.m_nearPlane,\n            far: this.m_farPlane,\n            minimum: this.minNear,\n            maximum: this.m_farPlane\n        };\n        return viewRanges;\n    }\n\n    private invalidatePlanes(near: number, far: number) {\n        // When clamping prefer to extend far plane at about minimum distance, giving\n        // near distance setup priority over far.\n        const nearDist: number = Math.max(this.minNear, near);\n        const farDist: number = Math.max(this.minFar, far, nearDist + this.minFarOffset);\n        this.m_nearPlane = nearDist;\n        this.m_farPlane = farDist;\n    }\n}\n\n/**\n * Factory function that creates default [[ClipPlanesEvaluator]] that calculates near plane based\n * on ground distance and camera orientation.\n *\n * Creates [[TiltViewClipPlanesEvaluator]].\n */\nexport const createDefaultClipPlanesEvaluator = () => new TiltViewClipPlanesEvaluator();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport { IPassManager } from \"./IPassManager\";\nexport {\n    IMapAntialiasSettings,\n    IMapRenderingManager,\n    MapRenderingManager\n} from \"./MapRenderingManager\";\nexport { IPass, Pass } from \"./Pass\";\nexport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyShader, MSAAMaterial } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * This enum represents the sampling level to apply to a [[MSAARenderPass]] instance. At level 0,\n * only one sample is performed, which is like disabling the MSAA pass.\n */\nexport enum MSAASampling {\n    \"Level_0\",\n    \"Level_1\",\n    \"Level_2\",\n    \"Level_3\",\n    \"Level_4\",\n    \"Level_5\"\n}\n\n/**\n * [[MapView]]'s MSAA implementation. MSAA stands for Multi Sampling Anti-Aliasing, and its concept\n * is to provide a rendering engine with additional color values for each pixel, so they can include\n * the missing bits between them on a screen. WebGL already comes with a native MSAA implementation\n * with four samples. Because of its native nature, it is more efficient and one may not want to use\n * MapView's MSAA implementation when these four samples are satisfying. However in some situations\n * they are not: on low devices, MSAA can impact the framerate and we may desire to reduce the\n * number of samples at runtime. On the other hand, when the interaction stops, the engine also\n * stops rendering the map, and because a map relies on many line-like patterns, aliasing can then\n * turn very noticeable. In such static renders, the number of samples could be dramatically\n * increased on a last frame to render.\n */\nexport class MSAARenderPass extends Pass {\n    /**\n     * The sampling level determines the number of samples that will be performed per frame.\n     * Renders will happen `2 ^ samplingLevel` time(s). `samplingLevel` stands between `0` and `5`.\n     * Therefore there can be between 1 and 32 samples.\n     *\n     * @default `SamplingLevel.Level_1`\n     */\n    samplingLevel: MSAASampling = MSAASampling.Level_1;\n\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new MSAAMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n\n    /**\n     * The constructor for `MSAARenderPass`. It builds an internal scene with a camera looking at a\n     * quad.\n     *\n     * @param m_scene The scene to render.\n     * @param m_camera The camera to render the scene through.\n     */\n    constructor() {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * The render function of `MSAARenderPass`. At each call of this method, and for each sample,\n     * the [[MapView]] camera provided in the `render` method is offset within the dimension of a\n     * pixel on screen. It then renders the whole scene with this offset to a local\n     * `WebGLRenderTarget` instance, via a `WebGLRenderer` instance. Finally the local camera\n     * created in the constructor shoots the quad and renders to the write buffer or to the frame\n     * buffer. The quad material's opacity is modified so the renders can accumulate in the\n     * targetted buffer.\n     *\n     * The number of samples can be modified at runtime through the enum [[SamplingLevel]].\n     *\n     * If there is no further pass, the [[Pass.renderToScreen]] flag can be set to `true` to\n     * output directly to the framebuffer.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_renderTarget = new THREE.WebGLRenderTarget(readBuffer.width, readBuffer.height, {\n                minFilter: THREE.LinearFilter,\n                magFilter: THREE.LinearFilter,\n                format: THREE.RGBAFormat\n            });\n            this.m_renderTarget.texture.name = \"MSAARenderPass.sample\";\n        }\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n\n        const offsets = MSAARenderPass.OffsetVectors[this.samplingLevel];\n\n        const rendererClearColor = renderer.getClearColor();\n        const oldClearColor = rendererClearColor !== undefined ? rendererClearColor.getHex() : 0;\n\n        // The method `camera.setViewOffset` will be called in the next loop. In order to maintain\n        // its usability externally (like for the triple view in mosaic demo) we must cache the\n        // previous values stored in `camera.view` and re-assign them at the end of the pass.\n\n        // 1. Create a default cache object, with default dimensions the size of our read buffer.\n        const oldView = {\n            enabled: camera.view !== null && camera.view.enabled,\n            fullWidth: readBuffer.width,\n            fullHeight: readBuffer.height,\n            x: 0,\n            y: 0,\n            width: readBuffer.width,\n            height: readBuffer.height\n        };\n\n        // 2. If `camera.view` has been enabled previously, then `setViewOffset` has been called\n        // externally: copy the existing `camera.view` values in the cache. Override the cache\n        // object with the values provided externally.\n        if (oldView.enabled && camera.view !== null) {\n            oldView.fullWidth = camera.view.fullWidth;\n            oldView.fullHeight = camera.view.fullHeight;\n            oldView.x = camera.view.offsetX;\n            oldView.y = camera.view.offsetY;\n            oldView.width = camera.view.width;\n            oldView.height = camera.view.height;\n        }\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        for (let i = 0; i < offsets.length; i++) {\n            // 4. Then for each sample, call `setViewOffset` with our object. This also updates the\n            // `camera.view` object in Three.js.\n            const offset = offsets[i];\n            camera.setViewOffset(\n                oldView.fullWidth,\n                oldView.fullHeight,\n                oldView.x + offset[0] / 16,\n                oldView.y + offset[1] / 16,\n                oldView.width,\n                oldView.height\n            );\n\n            // 5. Divide the opacity of the quad by the number of samples to accumulate on the\n            // target buffer, and reduce the impact of the offset on color to reduce banding. Then\n            // render.\n            const uniformCenteredDistribution = -0.5 + (i + 0.5) / offsets.length;\n            const sampleWeight = 1.0 / offsets.length + uniformCenteredDistribution / 32;\n\n            this.m_quadUniforms.opacity.value = sampleWeight;\n\n            renderer.setRenderTarget(this.m_renderTarget);\n            renderer.clear();\n            renderer.render(scene, camera);\n\n            // 6. Render the quad on top of the previous renders.\n\n            // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n            renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n            if (i === 0) {\n                renderer.setClearColor(0x000000);\n                renderer.clear();\n            }\n            renderer.render(this.m_quadScene, this.m_localCamera);\n            if (i === 0 && rendererClearColor !== undefined) {\n                renderer.setClearColor(oldClearColor);\n            }\n        }\n        renderer.setRenderTarget(oldRenderTarget);\n\n        // 7. Restore `camera.view` as set externally (or not).\n        if (camera.view !== null) {\n            camera.view.enabled = oldView.enabled;\n            camera.view.offsetX = oldView.x;\n            camera.view.offsetY = oldView.y;\n        }\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        if (this.m_renderTarget) {\n            this.m_renderTarget.setSize(width, height);\n        }\n    }\n\n    // tslint:disable:max-line-length\n    /**\n     * The list of offsets to apply to the camera, per sampling level, adapted from :\n     *\n     * @see https://msdn.microsoft.com/en-us/library/windows/desktop/ff476218%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396\n     */\n    // tslint:enable:max-line-length\n    // tslint:disable-next-line:member-ordering\n    static readonly OffsetVectors: number[][][] = [\n        [[0, 0]],\n        [\n            [4, 4],\n            [-4, -4]\n        ],\n        [\n            [-2, -6],\n            [6, -2],\n            [-6, 2],\n            [2, 6]\n        ],\n        [\n            [1, -3],\n            [-1, 3],\n            [5, 1],\n            [-3, -5],\n            [-5, 5],\n            [-7, -1],\n            [3, 7],\n            [7, -7]\n        ],\n        [\n            [1, 1],\n            [-1, -3],\n            [-3, 2],\n            [4, -1],\n            [-5, -2],\n            [2, 5],\n            [5, 3],\n            [3, -5],\n            [-2, 6],\n            [0, -7],\n            [-4, -6],\n            [-6, 4],\n            [-8, 0],\n            [7, -4],\n            [6, 7],\n            [-7, -8]\n        ],\n        [\n            [-4, -7],\n            [-7, -5],\n            [-3, -5],\n            [-5, -4],\n            [-1, -4],\n            [-2, -2],\n            [-6, -1],\n            [-4, 0],\n            [-7, 1],\n            [-1, 2],\n            [-6, 3],\n            [-3, 3],\n            [-7, 6],\n            [-3, 6],\n            [-5, 7],\n            [-1, 7],\n            [5, -7],\n            [1, -6],\n            [6, -5],\n            [4, -4],\n            [2, -3],\n            [7, -2],\n            [1, -1],\n            [4, -1],\n            [2, 1],\n            [6, 2],\n            [0, 4],\n            [4, 4],\n            [2, 5],\n            [7, 5],\n            [5, 6],\n            [3, 7]\n        ]\n    ];\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { RequestController, WorkerServiceProtocol } from \"@here/harp-datasource-protocol\";\nimport {\n    getOptionValue,\n    IWorkerChannelMessage,\n    LoggerManager,\n    LogLevel,\n    WORKERCHANNEL_MSG_TYPE\n} from \"@here/harp-utils\";\n\nimport { WorkerLoader } from \"./workers/WorkerLoader\";\n\nimport * as THREE from \"three\";\n\nconst logger = LoggerManager.instance.create(\"ConcurrentWorkerSet\");\n\nexport function isLoggingMessage(message: IWorkerChannelMessage): message is IWorkerChannelMessage {\n    return message && typeof message.level === \"number\" && message.type === WORKERCHANNEL_MSG_TYPE;\n}\n\ninterface ReadyPromise {\n    count: number;\n    promise?: Promise<void>;\n    resolve: () => void;\n    reject: (reason: any) => void;\n    error?: any;\n}\n\ninterface RequestEntry {\n    promise: Promise<any>;\n    resolver: (error?: Error, response?: object) => void;\n}\n\nexport interface ConcurrentWorkerSetOptions {\n    /**\n     * The URL of the script for each worker to start.\n     */\n    scriptUrl: string;\n\n    /**\n     * The number of Web Workers for processing data.\n     *\n     * Defaults to CLAMP(`navigator.hardwareConcurrency` - 1, 1, 4) or [[DEFAULT_WORKER_COUNT]].\n     */\n    workerCount?: number;\n\n    /**\n     * Timeout in milliseconds, in which each worker should set initial message.\n     *\n     * @default 10 seconds, see [[DEFAULT_WORKER_INITIALIZATION_TIMEOUT]]\n     */\n    workerConnectionTimeout?: number;\n}\n\n/**\n * Interface for an item in the started worker list queue.\n */\ninterface WorkerEntry {\n    worker: Worker;\n    listener: EventListener;\n}\n\n/**\n * Interface for an item in the request queue. Stores the data to be decoded along with an\n * [[AbortController]].\n */\ninterface WorkerRequestEntry {\n    message: WorkerServiceProtocol.RequestMessage;\n    buffers?: ArrayBuffer[] | undefined;\n    requestController?: RequestController;\n}\n\n/**\n * The default number of Web Workers to use if `navigator.hardwareConcurrency` is unavailable.\n */\nconst DEFAULT_WORKER_COUNT = 2;\n\n/**\n * The default timeout for first message from worker.\n *\n * @see [[WorkerLoader.startWorker]]\n */\nexport const DEFAULT_WORKER_INITIALIZATION_TIMEOUT = 10000;\n\n/**\n * A set of concurrent Web Workers. Acts as a Communication Peer for [[WorkerService]] instances\n * running in Web Workers.\n *\n * Starts and manages a certain number of web workers and provides a means to communicate\n * with them using various communication schemes, such as:\n *  - [[addEventListener]] : receive a unidirectional messages\n *  - [[broadcastMessage]] : send unidirectional broadcast message\n *  - [[invokeRequest]] : send a request that waits for a response, with load balancing\n *  - [[postMessage]] : send a unidirectional message, with load balancing\n *\n * The request queue holds all requests before they are stuffed into the event queue, allows for\n * easy (and early) cancelling of requests. The workers now only get a single new RequestMessage\n * when they return their previous result, or if they are idle. When they are idle, they are stored\n * in m_availableWorkers.\n */\nexport class ConcurrentWorkerSet {\n    private m_workerChannelLogger = LoggerManager.instance.create(\"WorkerChannel\");\n    private readonly m_eventListeners = new Map<string, (message: any) => void>();\n    private m_workers = new Array<Worker>();\n\n    // List of idle workers that can be given the next job. It is using a LIFO scheme to reduce\n    // memory consumption in idle workers.\n    private m_availableWorkers = new Array<Worker>();\n    private m_workerPromises = new Array<Promise<WorkerEntry | undefined>>();\n    private m_workerCount: number | undefined;\n\n    private readonly m_readyPromises = new Map<string, ReadyPromise>();\n    private readonly m_requests: Map<number, RequestEntry> = new Map();\n    private m_workerRequestQueue: WorkerRequestEntry[] = [];\n\n    private m_nextMessageId: number = 0;\n    private m_stopped: boolean = true;\n\n    private m_referenceCount: number = 0;\n\n    /**\n     * Creates a new `ConcurrentWorkerSet`.\n     *\n     * Creates as many Web Workers as specified in `options.workerCount`, from the script provided\n     * in `options.scriptUrl`. If `options.workerCount` is not specified, the value specified in\n     * `navigator.hardwareConcurrency` is used instead.\n     *\n     * The worker set is implicitly started when constructed.\n     */\n    constructor(private m_options: ConcurrentWorkerSetOptions) {\n        this.start();\n    }\n\n    /**\n     * Adds an external reference and increments the internal reference counter by one.\n     *\n     * To implement a reference-count based automatic resource cleanup, use this function with\n     * [[removeReference]].\n     */\n    addReference() {\n        this.m_referenceCount += 1;\n        if (this.m_referenceCount === 1 && this.m_stopped) {\n            this.start();\n        }\n    }\n\n    /**\n     * Decrements the internal reference counter by 1.\n     *\n     * When the internal reference counter reaches 0, this function calls [[dispose]] to clear the\n     * resources.\n     *\n     * Use with [[addReference]] to implement reference-count based automatic resource cleanup.\n     */\n    removeReference() {\n        this.m_referenceCount -= 1;\n        if (this.m_referenceCount === 0) {\n            this.destroy();\n        }\n    }\n\n    /**\n     * Starts workers.\n     *\n     * Use to start workers already stopped by [[stop]] or [[destroy]] calls.\n     *\n     * Note: The worker set is implicitly started on construction - no need to call [[start]] on\n     * fresh instance.\n     *\n     * @param options optional, new worker set options\n     */\n    start(options?: ConcurrentWorkerSetOptions) {\n        if (options !== undefined) {\n            this.m_options = options;\n        }\n        if (!this.m_stopped) {\n            throw new Error(\"ConcurrentWorker set already started\");\n        }\n\n        this.m_workerCount = getOptionValue(\n            this.m_options.workerCount,\n            typeof navigator !== \"undefined\" && navigator.hardwareConcurrency !== undefined\n                ? // We need to have at least one worker\n                  THREE.Math.clamp(navigator.hardwareConcurrency - 1, 1, 2)\n                : undefined,\n            DEFAULT_WORKER_COUNT\n        );\n\n        // Initialize the workers. The workers now have an ID to identify specific workers and\n        // handle their busy state.\n        const timeout = getOptionValue(\n            this.m_options.workerConnectionTimeout,\n            DEFAULT_WORKER_INITIALIZATION_TIMEOUT\n        );\n        for (let workerId = 0; workerId < this.m_workerCount; ++workerId) {\n            const workerPromise = WorkerLoader.startWorker(this.m_options.scriptUrl, timeout).then(\n                worker => {\n                    const listener = (evt: Event): void => {\n                        this.onWorkerMessage(workerId, evt as MessageEvent);\n                    };\n\n                    worker.addEventListener(\"message\", listener);\n                    this.m_workers.push(worker);\n                    this.m_availableWorkers.push(worker);\n                    return {\n                        worker,\n                        listener\n                    };\n                }\n            );\n            this.m_workerPromises.push(workerPromise);\n        }\n        this.m_stopped = false;\n    }\n\n    /**\n     * The number of workers started for this worker set. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.m_workerCount;\n    }\n\n    /**\n     * Stops workers.\n     *\n     * Waits for all pending requests to be finished and stops all workers.\n     *\n     * Use [[start]] to start this worker again.\n     *\n     * @returns `Promise` that resolves when all workers are destroyed.\n     */\n    async stop() {\n        this.m_stopped = true;\n\n        await this.waitForAllResponses().then(() => {\n            this.terminateWorkers();\n        });\n    }\n\n    /**\n     * Destroys all workers immediately.\n     *\n     * Resolves all pending request promises with a `worker destroyed` error.\n     *\n     * Use [[start]] to start this worker again.\n     */\n    destroy() {\n        this.m_stopped = true;\n\n        // respond with all pending request\n        this.m_requests.forEach(entry => {\n            entry.resolver(new Error(\"worker destroyed\"));\n        });\n        this.m_requests.clear();\n        this.m_workerRequestQueue = [];\n\n        this.terminateWorkers();\n\n        // clean other stuff\n        this.m_eventListeners.clear();\n    }\n\n    /**\n     * Waits for `service` to be initialized in all workers.\n     *\n     * Each service that starts in a worker sends an [[isInitializedMessage]] to confirm that\n     * it has started successfully. This method resolves when all workers in a set have\n     * `service` initialized.\n     *\n     * Promise is rejected if any of worker fails to start.\n     *\n     * @param serviceId The service identifier.\n     */\n    async connect(serviceId: string): Promise<void> {\n        this.ensureStarted();\n        await Promise.all(this.m_workerPromises);\n        return this.getReadyPromise(serviceId).promise as Promise<void>;\n    }\n\n    /**\n     * Registers an event listener for events that originated in a web worker, for a given\n     * `serviceId`. You can only set one event listener per `serviceId`.\n     *\n     * @param serviceId The service to listen to.\n     * @param callback The callback to invoke for matching events.\n     */\n    addEventListener(serviceId: string, callback: (message: any) => void) {\n        this.m_eventListeners.set(serviceId, callback);\n    }\n\n    /**\n     * Removes a previously set event listener for the given `serviceId`.\n     *\n     * @param serviceId The service from which to remove the event listeners.\n     */\n    removeEventListener(serviceId: string) {\n        this.m_eventListeners.delete(serviceId);\n    }\n\n    /**\n     * Invokes a request that expects a response from a random worker.\n     *\n     * Sends [[RequestMessage]] and resolves when a matching [[ResponseMessage]] is received from\n     * workers. Use this function when interfacing with \"RPC-like\" calls to services.\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     *\n     * @returns A `Promise` that resolves with a response from the service.\n     */\n    invokeRequest<Res>(\n        serviceId: string,\n        request: WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[],\n        requestController?: RequestController\n    ): Promise<Res> {\n        this.ensureStarted();\n\n        const messageId = this.m_nextMessageId++;\n        let resolver: ((error?: any, response?: any) => void) | undefined;\n\n        const promise = new Promise<Res>((resolve, reject) => {\n            resolver = (error?: Error, response?: Res) => {\n                this.m_requests.delete(messageId);\n\n                if (error !== undefined) {\n                    reject(error);\n                } else {\n                    resolve(response as Res);\n                }\n            };\n        });\n        this.m_requests.set(messageId, {\n            promise,\n            resolver: resolver!\n        });\n\n        const message: WorkerServiceProtocol.RequestMessage = {\n            service: serviceId,\n            type: WorkerServiceProtocol.ServiceMessageName.Request,\n            messageId,\n            request\n        };\n        this.postRequestMessage(message, transferList, requestController);\n        return promise;\n    }\n\n    /**\n     * Invokes a request that expects responses from all workers.\n     *\n     * Send [[RequestMessage]]  to all workers and resolves when all workers have sent a matching\n     * [[ResponseMessage]]. Use this function to wait on request that need to happen on all workers\n     * before proceeding (like synchronous worker service creation).\n     *\n     * @param serviceId The name of service, as registered with the [[WorkerClient]] instance.\n     * @param request The request to process.\n     * @param transferList An optional array of `ArrayBuffer`s to transfer to the worker context.\n     *\n     * @returns Array of `Promise`s that resolves with a response from each worker (unspecified\n     * order).\n     */\n    broadcastRequest<Res>(\n        serviceId: string,\n        request:\n            | WorkerServiceProtocol.WorkerServiceManagerRequest\n            | WorkerServiceProtocol.ServiceRequest,\n        transferList?: ArrayBuffer[]\n    ): Promise<Res[]> {\n        this.ensureStarted();\n\n        const promises = [];\n        for (const worker of this.m_workers) {\n            const messageId = this.m_nextMessageId++;\n\n            let resolver: ((error?: any, response?: any) => void) | undefined;\n            const promise = new Promise<Res>((resolve, reject) => {\n                resolver = (error: Error, response: Res) => {\n                    this.m_requests.delete(messageId);\n\n                    if (error !== undefined) {\n                        reject(error);\n                    } else {\n                        resolve(response as Res);\n                    }\n                };\n            });\n            promises.push(promise);\n\n            this.m_requests.set(messageId, {\n                promise,\n                resolver: resolver!\n            });\n\n            const message: WorkerServiceProtocol.RequestMessage = {\n                service: serviceId,\n                type: WorkerServiceProtocol.ServiceMessageName.Request,\n                messageId,\n                request\n            };\n            if (transferList !== undefined) {\n                worker.postMessage(message, transferList);\n            } else {\n                worker.postMessage(message);\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Posts a message to all workers.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the workers.\n     */\n    broadcastMessage(message: any, buffers?: ArrayBuffer[] | undefined) {\n        this.ensureStarted();\n\n        if (buffers !== undefined) {\n            this.m_workers.forEach(worker => worker.postMessage(message, buffers));\n        } else {\n            this.m_workers.forEach(worker => worker.postMessage(message));\n        }\n    }\n\n    /**\n     * The size of the request queue for debugging and profiling.\n     */\n    get requestQueueSize() {\n        return this.m_workerRequestQueue.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numWorkers() {\n        return this.m_workers.length;\n    }\n\n    /**\n     * The number of workers for debugging and profiling.\n     */\n    get numIdleWorkers() {\n        return this.m_availableWorkers.length;\n    }\n\n    /**\n     * Subclasses must call this function when a worker emits an event.\n     *\n     * @param event The event to dispatch.\n     */\n    protected eventHandler(event: any) {\n        if (typeof event.data.type !== \"string\") {\n            return; // not an event generated by us, ignore.\n        }\n\n        this.dispatchEvent(event.data.type, event);\n    }\n\n    /**\n     * Handles messages received from workers. This method is protected so that the message\n     * reception can be simulated through an extended class, to avoid relying on real workers.\n     *\n     * @param workerId The workerId of the web worker.\n     * @param event The event to dispatch.\n     */\n    private onWorkerMessage = (workerId: number, event: MessageEvent) => {\n        if (WorkerServiceProtocol.isResponseMessage(event.data)) {\n            const response = event.data;\n            if (response.messageId === null) {\n                logger.error(`[${this.m_options.scriptUrl}]: Bad ResponseMessage: no messageId`);\n                return;\n            }\n            const entry = this.m_requests.get(response.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad ResponseMessage: invalid messageId`\n                );\n                return;\n            }\n\n            if (workerId >= 0 && workerId < this.m_workers.length) {\n                const worker = this.m_workers[workerId];\n                this.m_availableWorkers.push(worker);\n                // Check if any new work has been put into the queue.\n                this.checkWorkerRequestQueue();\n            } else {\n                logger.error(`[${this.m_options.scriptUrl}]: onWorkerMessage: invalid workerId`);\n            }\n            if (response.errorMessage !== undefined) {\n                const error = new Error(response.errorMessage);\n                if (response.errorStack !== undefined) {\n                    error.stack = response.errorStack;\n                }\n                entry.resolver(error);\n            } else {\n                entry.resolver(undefined, response.response);\n            }\n        } else if (WorkerServiceProtocol.isInitializedMessage(event.data)) {\n            const readyPromise = this.getReadyPromise(event.data.service);\n            if (++readyPromise.count === this.m_workerPromises.length) {\n                readyPromise.resolve();\n            }\n        } else if (isLoggingMessage(event.data)) {\n            switch (event.data.level) {\n                case LogLevel.Trace:\n                    this.m_workerChannelLogger.trace(...event.data.message);\n                    break;\n                case LogLevel.Debug:\n                    this.m_workerChannelLogger.debug(...event.data.message);\n                    break;\n                case LogLevel.Log:\n                    this.m_workerChannelLogger.log(...event.data.message);\n                    break;\n                case LogLevel.Info:\n                    this.m_workerChannelLogger.info(...event.data.message);\n                    break;\n                case LogLevel.Warn:\n                    this.m_workerChannelLogger.warn(...event.data.message);\n                    break;\n                case LogLevel.Error:\n                    this.m_workerChannelLogger.error(...event.data.message);\n                    break;\n            }\n        } else {\n            this.eventHandler(event);\n        }\n    };\n\n    /**\n     * Posts a [[WorkerServiceProtocol.RequestMessage]] to an available worker. If no worker is\n     * available, the request is put into a queue.\n     *\n     * @param message The message to send.\n     * @param buffers Optional buffers to transfer to the worker.\n     * @param requestController An optional [[RequestController]] to store state of cancelling.\n     */\n    private postRequestMessage(\n        message: WorkerServiceProtocol.RequestMessage,\n        buffers?: ArrayBuffer[] | undefined,\n        requestController?: RequestController\n    ) {\n        this.ensureStarted();\n        if (this.m_workers.length === 0) {\n            throw new Error(\"ConcurrentWorkerSet#postMessage: no workers started\");\n        }\n\n        // Check if the requestController has received the abort signal, in which case the request\n        // is ignored.\n        if (requestController !== undefined && requestController.signal.aborted) {\n            const entry = this.m_requests.get(message.messageId);\n            if (entry === undefined) {\n                logger.error(\n                    `[${this.m_options.scriptUrl}]: Bad RequestMessage: invalid messageId`\n                );\n                return;\n            }\n\n            const err = new Error(\"Aborted\");\n            err.name = \"AbortError\";\n\n            entry.resolver(err, undefined);\n            return;\n        }\n\n        if (this.m_availableWorkers.length > 0) {\n            const worker = this.m_availableWorkers.pop()!;\n\n            if (buffers !== undefined) {\n                worker.postMessage(message, buffers);\n            } else {\n                worker.postMessage(message);\n            }\n        } else {\n            // We need a priority to keep sorting stable, so we have to add a RequestController.\n            if (requestController === undefined) {\n                requestController = new RequestController(0);\n            }\n            if (requestController.priority === 0) {\n                // If the requests do not get a priority, they should keep their sorting order.\n                requestController.priority = -this.m_nextMessageId;\n            }\n            this.m_workerRequestQueue.unshift({\n                message,\n                buffers,\n                requestController\n            });\n        }\n    }\n\n    private ensureStarted() {\n        if (this.m_stopped) {\n            throw new Error(\"ConcurrentWorkerSet stopped\");\n        }\n    }\n\n    private async waitForAllResponses(): Promise<any> {\n        const promises = new Array<Promise<void>>();\n        this.m_requests.forEach(entry => {\n            promises.push(entry.promise);\n        });\n        await Promise.all(promises);\n    }\n\n    private dispatchEvent(id: string, message: any) {\n        const callback = this.m_eventListeners.get(id);\n        if (callback === undefined) {\n            return;\n        } // unknown event, ignore.\n        callback(message);\n    }\n\n    private terminateWorkers() {\n        // terminate all workers\n        this.m_workerPromises.forEach(workerPromise => {\n            workerPromise.then(workerEntry => {\n                if (workerEntry === undefined) {\n                    return;\n                }\n                workerEntry.worker.removeEventListener(\"message\", workerEntry.listener);\n                workerEntry.worker.terminate();\n            });\n        });\n        this.m_workers = [];\n        this.m_workerPromises = [];\n        this.m_availableWorkers = [];\n        this.m_readyPromises.clear();\n    }\n\n    private getReadyPromise(id: string): ReadyPromise {\n        const readyPromise = this.m_readyPromises.get(id);\n        if (readyPromise !== undefined) {\n            return readyPromise;\n        }\n\n        const newPromise: ReadyPromise = {\n            count: 0,\n            promise: undefined,\n            resolve: () => {\n                /* placeholder */\n            },\n            reject: (error: any) => {\n                newPromise.error = error;\n            },\n            error: undefined\n        };\n\n        newPromise.promise = new Promise<void>((resolve, reject) => {\n            const that = newPromise;\n\n            if (that.error !== undefined) {\n                reject(that.error);\n            } else if (that.count === this.m_workerPromises.length) {\n                resolve();\n            }\n\n            that.resolve = resolve;\n            that.reject = reject;\n        });\n\n        this.m_readyPromises.set(id, newPromise);\n        return newPromise;\n    }\n\n    /**\n     * Check the worker request queue, if there are any queued up decoding jobs and idle workers,\n     * they will be executed with postRequestMessage. The requests in the queue are sorted before\n     * the request with the highest priority is selected for processing.\n     */\n    private checkWorkerRequestQueue() {\n        if (this.m_workerRequestQueue.length === 0 || this.m_availableWorkers.length === 0) {\n            return;\n        }\n        this.m_workerRequestQueue.sort((a: WorkerRequestEntry, b: WorkerRequestEntry) => {\n            return a.requestController!.priority - b.requestController!.priority;\n        });\n\n        // Get the request with the highest priority and send it (again).\n        while (this.m_availableWorkers.length > 0 && this.m_workerRequestQueue.length > 0) {\n            const request = this.m_workerRequestQueue.pop()!;\n            this.postRequestMessage(request.message, request.buffers, request.requestController);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\n\nimport { getUrlOrigin, LoggerManager } from \"@here/harp-utils\";\nimport { isWorkerBootstrapRequest, WorkerBootstrapResponse } from \"./WorkerBootstrapDefs\";\n\nconst logger = LoggerManager.instance.create(\"WorkerLoader\");\n\n/**\n * Set of `Worker` loading and initialization helpers:\n *  - starting Worker from URL with fallback to XHR+blob [[WorkerLoader.startWorker]]\n *  - waiting for proper worker initialization, see [[WorkerLoader.waitWorkerInitialized]]\n */\nexport class WorkerLoader {\n    static directlyFallbackToBlobBasedLoading: boolean = false;\n    static sourceLoaderCache = new Map<string, Promise<string>>();\n    static dependencyUrlMapping: { [name: string]: string } = {};\n\n    /**\n     * Starts worker by first attempting load from `scriptUrl` using native `Worker` constructor.\n     * Then waits (using [[waitWorkerInitialized]]) for first message that indicates successful\n     * initialization.\n     * If `scriptUrl`'s origin is different than `baseUrl`, then in case of error falls back to\n     * [[startWorkerBlob]].\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     * By default, this method timeouts after 10 seconds (configurable using `timeout` argument).\n     *\n     * This method is needed as browsers in general forbid to load worker if it's not on 'same\n     * origin' regardless of Content-Security-Policy.\n     *\n     * For blob-based fallback work, one need to ensure that Content Security Policy (CSP) allows\n     * loading web worker code from `Blob`s. By default browsers, allow 'blob:' for workers, but\n     * this may change.\n     *\n     * Following snippet setups CSP, so workers can be started from blob urls:\n     *\n     *     <head>\n     *         <meta http-equiv=\"Content-Security-Policy\" content=\"child-src blob:\">\n     *     </head>\n     *\n     * Tested on:\n     *   * Chrome 67 / Linux, Window, OSX, Android\n     *   * Firefox 60 / Linux, Windows, OSX\n     *   * Edge 41 / Windows\n     *   * Safari 11 / OSX\n     *   * Samsung Internet 7.2\n     *\n     * See\n     *  * https://benohead.com/cross-domain-cross-browser-web-workers/\n     *  * MapBox\n     *    * https://stackoverflow.com/questions/21913673/execute-web-worker-from-different-origin\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/2658\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/559\n     *    * https://github.com/mapbox/mapbox-gl-js/issues/6058\n     *\n     * Findings:\n     *\n     * * Chrome reports CSP by exception when constructing [[Worker]] instance.\n     * * Firefox reports CSP errors when loading in first event:\n     *   https://bugzilla.mozilla.org/show_bug.cgi?id=1241888\n     * * Firefox 62, Chrome 67 obeys `<meta http-equiv=\"Content-Security-Policy\">` with\n     *   `worker-src blob:` but doesn't obey `worker-src URL` when used\n     * * Chrome 67 doesn't obey CSP `worker-src URL` despite it's documented as supported\n     *   (https://developer.mozilla.org/docs/Web/HTTP/Headers/Content-Security-Policy/worker-src)\n     *\n     * @param scriptUrl web worker script URL\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     *    (default 10 seconds)\n     */\n    static startWorker(scriptUrl: string, timeout: number = 10000): Promise<Worker> {\n        if (scriptUrl.startsWith(\"blob:\")) {\n            return this.startWorkerImmediately(scriptUrl, timeout);\n        }\n\n        if (this.directlyFallbackToBlobBasedLoading) {\n            return this.startWorkerBlob(scriptUrl, timeout);\n        }\n        return this.startWorkerImmediately(scriptUrl, timeout).catch(error => {\n            if (typeof window !== \"undefined\") {\n                const pageUrl = window.location.href;\n                const fullScriptUrl = new URL(scriptUrl, pageUrl).href;\n                if (getUrlOrigin(fullScriptUrl) === getUrlOrigin(pageUrl)) {\n                    throw error;\n                }\n                logger.log(\n                    \"#startWorker: cross-origin worker construction failed, trying load with blob\"\n                );\n                this.directlyFallbackToBlobBasedLoading = true;\n                return WorkerLoader.startWorkerBlob(scriptUrl, timeout);\n            } else {\n                throw error;\n            }\n        });\n    }\n\n    /**\n     * Start worker, loading it immediately from `scriptUrl`. Waits (using\n     * [[waitWorkerInitialized]]) for successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerImmediately(scriptUrl: string, timeout: number): Promise<Worker> {\n        try {\n            const worker = new Worker(scriptUrl);\n            return this.waitWorkerInitialized(worker, timeout);\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    }\n\n    /**\n     * Start worker \"via blob\" by first loading worker script code with [[fetch]], creating `Blob`\n     * and attempting to start worker from blob url. Waits (using [[waitWorkerInitialized]]) for\n     * successful worker start.\n     *\n     * @param scriptUrl web worker script URL\n     */\n    static startWorkerBlob(scriptUrl: string, timeout: number): Promise<Worker> {\n        return this.fetchScriptSourceToBlobUrl(scriptUrl).then(blobUrl => {\n            return this.startWorkerImmediately(blobUrl, timeout);\n        });\n    }\n\n    /**\n     * Fetch script source as `Blob` url.\n     *\n     * Reuses results, if there are many simultaneous requests.\n     *\n     * @param scriptUrl web worker script URL\n     * @return promise that resolves to url of a `Blob` with script source code\n     */\n    static fetchScriptSourceToBlobUrl(scriptUrl: string): Promise<string> {\n        let loadingPromise = this.sourceLoaderCache.get(scriptUrl);\n        if (loadingPromise !== undefined) {\n            return loadingPromise;\n        }\n        loadingPromise = fetch(scriptUrl)\n            .then(response => response.text())\n            .catch(error => {\n                throw new Error(\n                    `WorkerLoader#fetchScriptSourceToBlob: failed to load worker script: ${error}`\n                );\n            })\n            .then(scriptSource => {\n                this.sourceLoaderCache.delete(scriptUrl);\n                const blob = new Blob([scriptSource], { type: \"application/javascript\" });\n                return URL.createObjectURL(blob);\n            });\n        this.sourceLoaderCache.set(scriptUrl, loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Waits for successful Web Worker start.\n     *\n     * Expects that worker script sends initial message.\n     *\n     * If first event is `message` then assumes that worker has been loaded sussesfully and promise\n     * resolves to `worker` object passed as argument.\n     *\n     * If first event is 'error', then it is assumed that worker failed to load and promise is\n     * rejected.\n     *\n     * (NOTE: The initial 'message' - if received - is immediately replayed using worker's\n     * `dispatchEvent`, so application code can also consume it as confirmation of successful\n     * worker initialization.\n     *\n     * We must resolve/reject promise at some time, so it is expected that any sane application will\n     * be able to load worker code in some amount of time.\n     *\n     * @param worker [[Worker]] instance to be checked\n     * @param timeout timeout in milliseconds, in which worker should set initial message\n     * @returns `Promise` that resolves to `worker` on success\n     */\n    static waitWorkerInitialized(worker: Worker, timeout: number): Promise<Worker> {\n        return new Promise<Worker>((resolve, reject) => {\n            const firstMessageCallback = (event: MessageEvent) => {\n                const message = event.data;\n                if (isWorkerBootstrapRequest(message)) {\n                    const dependencies = message.dependencies;\n                    const resolvedDependencies: string[] = [];\n                    for (const dependency of dependencies) {\n                        const resolved = this.dependencyUrlMapping[dependency];\n                        if (!resolved) {\n                            cleanup();\n                            reject(\n                                new Error(\n                                    `#waitWorkerInitialized: Unable to resolve '${dependency}'` +\n                                        ` as needed by worker script.`\n                                )\n                            );\n                            return;\n                        }\n                        resolvedDependencies.push(resolved);\n                    }\n                    const response: WorkerBootstrapResponse = {\n                        type: \"worker-bootstrap-response\",\n                        resolvedDependencies\n                    };\n                    worker.postMessage(response);\n                    return;\n                }\n\n                cleanup();\n                resolve(worker);\n\n                // We've just consumed first message from worker before client has any chance to\n                // even call `addEventListener` on it, so here after resolve, we wait next tick and\n                // replay message so user has chance to intercept it in its own handler.\n                setTimeout(() => {\n                    worker.dispatchEvent(event);\n                }, 0);\n            };\n            const errorCallback = (error: ErrorEvent) => {\n                cleanup();\n                // Error events do not carry any useful information on tested browsers, so we assume\n                // that any error before 'firstMessageCallback' as failed Worker initialization.\n                let message = \"Error during worker initialization\";\n                if (error.message) {\n                    message = message + `: ${error.message}`;\n                }\n                if (typeof error.filename === \"string\" && typeof error.lineno === \"number\") {\n                    message = message + ` in ${error.filename}:${error.lineno}`;\n                }\n                reject(new Error(message));\n            };\n            const cleanup = () => {\n                clearTimeout(timerId);\n                worker.removeEventListener(\"message\", firstMessageCallback);\n                worker.removeEventListener(\"error\", errorCallback);\n            };\n\n            worker.addEventListener(\"error\", errorCallback);\n            worker.addEventListener(\"message\", firstMessageCallback);\n            const timerId = setTimeout(() => {\n                cleanup();\n                reject(new Error(\"Timeout exceeded when waiting for first message from worker.\"));\n            }, timeout);\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    Definitions,\n    getProjectionName,\n    ITileDecoder,\n    OptionsMap,\n    RequestController,\n    StyleSet,\n    TileInfo,\n    WorkerDecoderProtocol,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { Projection, TileKey } from \"@here/harp-geoutils\";\n\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next decoder worker-service. Used to ensure uniqueness of service ids of decoders\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Decoder based on [[ConcurrentWorkerSet]].\n *\n * Decodes tiles using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends decode requests,\n * - configuration.\n */\nexport class WorkerBasedDecoder implements ITileDecoder {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedDecoder`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param decoderServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly decoderServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.decoderServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tile decoder services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TileDecoderService]]s in all workers to serve decode requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.decoderServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Get [[Tile]] from tile decoder service in worker.\n     *\n     * Invokes [[DecodeTileRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    decodeTile(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<DecodedTile> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.DecodeTileRequest = {\n            type: WorkerDecoderProtocol.Requests.DecodeTileRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Get [[TileInfo]] from tile decoder service in worker.\n     *\n     * Invokes [[TileInfoRequest]] on [[TileDecoderService]] running in worker pool.\n     */\n    getTileInfo(\n        data: ArrayBufferLike,\n        tileKey: TileKey,\n        projection: Projection,\n        requestController?: RequestController\n    ): Promise<TileInfo | undefined> {\n        const tileKeyCode = tileKey.mortonCode();\n\n        const message: WorkerDecoderProtocol.TileInfoRequest = {\n            type: WorkerDecoderProtocol.Requests.TileInfoRequest,\n            tileKey: tileKeyCode,\n            data,\n            projection: getProjectionName(projection)\n        };\n\n        const transferList = data instanceof ArrayBuffer ? [data] : undefined;\n        return this.workerSet.invokeRequest(\n            this.serviceId,\n            message,\n            transferList,\n            requestController\n        );\n    }\n\n    /**\n     * Configure tile decoder service in workers.\n     *\n     * Broadcasts [[ConfigurationMessage]] to all [[TileDecoderService]]s running in worker pool.\n     *\n     * @param styleSet  new [[StyleSet]], undefined means no change\n     * @param languages new list of languages\n     * @param options   new options, undefined options are not changed\n     */\n    configure(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ): void {\n        const message: WorkerDecoderProtocol.ConfigurationMessage = {\n            service: this.serviceId,\n            type: WorkerDecoderProtocol.DecoderMessageName.Configuration,\n            styleSet,\n            definitions,\n            options,\n            languages\n        };\n\n        this.workerSet.broadcastMessage(message);\n    }\n\n    /**\n     * The number of workers started for this decoder. The value is `undefined` until the workers\n     * have been created.\n     */\n    get workerCount(): number | undefined {\n        return this.workerSet.workerCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TilingScheme } from \"@here/harp-geoutils\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\n\n/**\n * Status of the elevation range calculation.\n */\nexport enum CalculationStatus {\n    // Calculated approximately. A more precise result may be available later.\n    PendingApproximate,\n    // Calculation completed. The result is final, won't improve upon retrying.\n    FinalPrecise\n}\n\n/**\n * Elevation range with an optional calculation status.\n */\nexport interface ElevationRange {\n    minElevation: number;\n    maxElevation: number;\n    calculationStatus?: CalculationStatus;\n}\n\n/**\n * Source for elevation ranges per tile. The returned elevation ranges will be used in the visible\n * tile computation to calculate proper bounding boxes.\n */\nexport interface ElevationRangeSource {\n    /**\n     * Compute the elevation range for a given [[TileKey]].\n     * @param tileKey The tile for which the elevation range should be computed.\n     */\n    getElevationRange(tileKey: TileKey): ElevationRange;\n\n    /**\n     * The tiling scheme of this [[ElevationRangeSource]]. [[MapView]] will only apply the elevation\n     * ranges returned by [[getElevationRange]] that have the same [[TilingScheme]].\n     */\n    getTilingScheme(): TilingScheme;\n\n    /**\n     * Connects to the underlying data.\n     */\n    connect(): Promise<void>;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { SimpleTileGeometryLoader, TileGeometryLoader } from \"./TileGeometryLoader\";\n\ntype TileUpdateCallback = (tile: Tile) => void;\n\n/**\n * Manages the content (the geometries) of a tile. Derived classes allow different strategies that\n * control the sequence in which the geometries of the tile are being loaded.\n */\nexport interface TileGeometryManager {\n    /**\n     * The set of geometry kinds that is enabled. Their geometry will be created after decoding.\n     */\n    enabledGeometryKinds: GeometryKindSet;\n\n    /**\n     * The set of geometry kinds that is disabled. Their geometry will not be created after\n     * decoding.\n     */\n    disabledGeometryKinds: GeometryKindSet;\n\n    /**\n     * The set of geometry kinds that is hidden. Their geometry may be created, but it is hidden\n     * until the method `hideKind` with an argument of `addOrRemoveToHiddenSet:false` is called.\n     */\n    hiddenGeometryKinds: GeometryKindSet;\n\n    /**\n     * If set to `true`, the filters of enabled/disabledGeometryKinds are applied, otherwise they\n     * are ignored.\n     */\n    enableFilterByKind: boolean;\n\n    /**\n     * Initialize the [[Tile]] with the TileGeometryManager.\n     */\n    initTile(tile: Tile): void;\n\n    /**\n     * Process the [[Tile]]s for rendering. May alter the content of the tile per frame.\n     */\n    updateTiles(tiles: Tile[]): void;\n\n    /**\n     * Clear the enabled, disabled and hidden sets.\n     */\n    clear(): void;\n\n    /**\n     * Enable a [[GeometryKind]] by adding it to the enabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the enabled set.\n     * @param {boolean} addOrRemoveToEnabledSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean\n    ): void;\n\n    /**\n     * Disable a [[GeometryKind]] by adding it to the disabled set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the disabled set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to add the kind to the set, pass in\n     *      `false` to remove from that set.\n     */\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean\n    ): void;\n\n    /**\n     * Hide a [[GeometryKind]] by adding it to the hidden set, or remove it from that set.\n     *\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind The kind to add or remove\n     *      from the hidden set.\n     * @param {boolean} addOrRemoveToHiddenSet Pass in `true` to hide the kind(s), `false` to show\n     *      it again.\n     */\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean\n    ): void;\n\n    /**\n     * Return all [[GeometryKind]]s that are contained in the tiles.\n     *\n     * @param {IterableIterator<Tile>} tiles The\n     * @returns {GeometryKindSet}\n     */\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet;\n\n    /**\n     * Sets a callback that will be called for every updated tile on [[updateTiles]].\n     *\n     * @param {TileUpdateCallback} callback The callback that will be called after a tile has been\n     * updated, passing the updated tile as argument. If `undefined`, a previously set callback will\n     * be cleared.\n     */\n    setTileUpdateCallback(callback?: TileUpdateCallback): void;\n}\n\n/**\n * Base class for all [[TileGeometryManager]]s. Handles visibility as well as enabling/disabling of\n * kinds of geometry [[GeometryKind]].\n */\nexport abstract class TileGeometryManagerBase implements TileGeometryManager {\n    get enabledGeometryKinds(): GeometryKindSet {\n        return this.enabledKinds;\n    }\n\n    set enabledGeometryKinds(kinds: GeometryKindSet) {\n        this.enabledKinds = kinds;\n    }\n\n    get disabledGeometryKinds(): GeometryKindSet {\n        return this.disabledKinds;\n    }\n\n    set disabledGeometryKinds(kinds: GeometryKindSet) {\n        this.disabledKinds = kinds;\n    }\n\n    get hiddenGeometryKinds(): GeometryKindSet {\n        return this.hiddenKinds;\n    }\n\n    set hiddenGeometryKinds(kinds: GeometryKindSet) {\n        this.hiddenKinds = kinds;\n        this.incrementVisibilityCounter();\n    }\n\n    protected get visibilityCounter(): number {\n        return this.m_visibilityCounter;\n    }\n\n    enableFilterByKind: boolean = true;\n\n    protected enabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected disabledKinds: GeometryKindSet = new GeometryKindSet();\n    protected hiddenKinds: GeometryKindSet = new GeometryKindSet();\n\n    protected m_tileUpdateCallback: TileUpdateCallback | undefined;\n\n    /**\n     * Optimization for evaluation in `update()` method. Only if a kind is hidden/unhidden, the\n     * visibility of the kinds is applied to their geometries.\n     */\n    private m_visibilityCounter: number = 1;\n\n    /**\n     * Creates an instance of `TileGeometryManagerBase` with a reference to the [[MapView]].\n     */\n    constructor(protected mapView: MapView) {}\n\n    abstract initTile(tile: Tile): void;\n\n    abstract updateTiles(tiles: Tile[]): void;\n\n    clear(): void {\n        this.enabledKinds.clear();\n        this.disabledKinds.clear();\n        this.hiddenKinds.clear();\n    }\n\n    enableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToEnabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.enabledKinds, kind, addOrRemoveToEnabledSet);\n    }\n\n    disableKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToDisabledSet: boolean = true\n    ): void {\n        this.enableDisableKinds(this.disabledKinds, kind, addOrRemoveToDisabledSet);\n    }\n\n    hideKind(\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addOrRemoveToHiddenSet: boolean = true\n    ): void {\n        let visibilityHasChanged = false;\n\n        if (Array.isArray(kind) || kind instanceof Set) {\n            for (const oneKind of kind) {\n                const visibilityChange = this.addRemove(\n                    this.hiddenKinds,\n                    oneKind,\n                    addOrRemoveToHiddenSet\n                );\n                visibilityHasChanged = visibilityHasChanged || visibilityChange;\n            }\n        } else {\n            visibilityHasChanged = this.addRemove(this.hiddenKinds, kind, addOrRemoveToHiddenSet);\n        }\n\n        // Will be evaluated in the next update()\n        if (visibilityHasChanged) {\n            this.incrementVisibilityCounter();\n        }\n    }\n\n    getAvailableKinds(tiles: IterableIterator<Tile>): GeometryKindSet {\n        const visibleKinds: GeometryKindSet = new GeometryKindSet();\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader as TileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                const tileKinds = geometryLoader.availableGeometryKinds;\n                if (tileKinds !== undefined) {\n                    for (const kind of tileKinds) {\n                        visibleKinds.add(kind);\n                    }\n                }\n            }\n        }\n        return visibleKinds;\n    }\n\n    /**\n     * Apply the visibility status taken from the `hiddenKinds` to all geometries in the specified\n     * tiles.\n     *\n     * @param {Tile[]} tiles List of [[Tiles]] to process the visibility status of.\n     */\n    updateTileObjectVisibility(tiles: Tile[]): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            if (tile.objects.length === 0 || tile.visibilityCounter === this.visibilityCounter) {\n                continue;\n            }\n            tile.visibilityCounter = this.visibilityCounter;\n\n            for (const object of tile.objects) {\n                const geometryKind: GeometryKind[] | undefined =\n                    object.userData !== undefined ? object.userData.kind : undefined;\n                if (geometryKind !== undefined) {\n                    const nowVisible = !geometryKind.some(kind => this.hiddenKinds.has(kind));\n                    needUpdate = needUpdate || object.visible !== nowVisible;\n                    object.visible = nowVisible;\n                }\n            }\n        }\n        return needUpdate;\n    }\n\n    setTileUpdateCallback(callback?: TileUpdateCallback): void {\n        this.m_tileUpdateCallback = callback;\n    }\n\n    protected incrementVisibilityCounter(): number {\n        return ++this.m_visibilityCounter;\n    }\n\n    /**\n     * Add or remove a kind|array of kinds|set of kinds from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private enableDisableKinds(\n        set: GeometryKindSet,\n        kind: GeometryKind | GeometryKind[] | GeometryKindSet,\n        addToSet: boolean\n    ): void {\n        if (Array.isArray(kind)) {\n            for (const oneKind of kind as GeometryKind[]) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind instanceof Set) {\n            const kindSet = kind as GeometryKindSet;\n            for (const oneKind of kindSet) {\n                this.addRemove(set, oneKind, addToSet);\n            }\n        } else if (kind !== undefined) {\n            this.addRemove(set, kind, addToSet);\n        }\n    }\n\n    /**\n     * Add or remove a single kind from the specified kind set.\n     *\n     * @hidden\n     * @param {GeometryKindSet} set\n     * @param {(GeometryKind | GeometryKind[] | GeometryKindSet)} kind\n     * @param {boolean} addToSet\n     */\n    private addRemove(kindsSet: GeometryKindSet, kind: GeometryKind, addToSet: boolean): boolean {\n        if (addToSet) {\n            if (!kindsSet.has(kind)) {\n                kindsSet.add(kind);\n                return true;\n            }\n        } else {\n            if (kindsSet.has(kind)) {\n                kindsSet.delete(kind);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n/**\n * Implements the simplest for of [[TileGeometryManager]]. Uses a [[SimpleTileGeometryLoader]] to\n * load the geometries of the [[Tile]].\n */\nexport class SimpleTileGeometryManager extends TileGeometryManagerBase {\n    /**\n     * Creates an instance of `SimpleTileGeometryManager` with a reference to the [[MapView]].\n     */\n    constructor(mapView: MapView) {\n        super(mapView);\n    }\n\n    /** @override */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new SimpleTileGeometryLoader(tile);\n        }\n    }\n\n    /** @override */\n    updateTiles(tiles: Tile[]): void {\n        for (const tile of tiles) {\n            const geometryLoader = tile.tileGeometryLoader as TileGeometryLoader;\n            if (geometryLoader !== undefined) {\n                geometryLoader.update(\n                    this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                    this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                );\n                if (this.m_tileUpdateCallback) {\n                    this.m_tileUpdateCallback(tile);\n                }\n            }\n        }\n\n        // If the visibility status of the kinds changed since the last update, the new visibility\n        // status is applied (again).\n        if (this.updateTileObjectVisibility(tiles)) {\n            this.mapView.update();\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\nimport { ImageCache } from \"./ImageCache\";\n\n/**\n * Cache images wrapped into [[ImageItem]]s for a [[MapView]]. An image may have multiple names in\n * a theme, the `MapViewImageCache` will take care of that. Registering multiple images with the\n * same name is invalid.\n *\n * The `MapViewImageCache` uses a global [[ImageCache]] to actually store (and generate) the\n * image data.\n */\nexport class MapViewImageCache {\n    private m_name2Url: Map<string, string> = new Map();\n    private m_url2Name: Map<string, string[]> = new Map();\n\n    /**\n     * The constructor for `MapViewImageCache`.\n     *\n     * @param mapView a [[MapView]] instance.\n     */\n    constructor(public mapView: MapView) {}\n\n    /**\n     * Register an existing image by name.\n     *\n     * @param name Name of the image from [[Theme]].\n     * @param url URL of image.\n     * @param image Optional [[ImageData]] of image.\n     */\n    registerImage(\n        name: string | undefined,\n        url: string,\n        image: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        if (name !== undefined) {\n            if (this.hasName(name)) {\n                throw new Error(\"duplicate name in cache\");\n            }\n\n            const oldNames = this.m_url2Name.get(url);\n            if (oldNames !== undefined) {\n                if (oldNames.indexOf(name) < 0) {\n                    oldNames.push(name);\n                }\n            } else {\n                this.m_url2Name.set(url, [name]);\n            }\n            this.m_name2Url.set(name, url);\n        }\n\n        const imageItem = ImageCache.instance.findImage(url);\n        if (imageItem === undefined) {\n            return ImageCache.instance.registerImage(this.mapView, url, image);\n        }\n        return imageItem;\n    }\n\n    /**\n     * Add an image and optionally start loading it. Once done, the [[ImageData]] or [[ImageBitmap]]\n     * will be stored in the [[ImageItem]].\n     *\n     * @param name Name of image from [[Theme]].\n     * @param url URL of image.\n     * @param startLoading Optional. Pass `true` to start loading the image in the background.\n     */\n    addImage(\n        name: string,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> {\n        const imageItem = this.registerImage(name, url, undefined);\n        if (startLoading === true) {\n            return ImageCache.instance.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] by its name.\n     *\n     * @param name Name of image.\n     */\n    findImageByName(name: string): ImageItem | undefined {\n        const url = this.m_name2Url.get(name);\n        if (url === undefined) {\n            return undefined;\n        }\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Find [[ImageItem]] by URL.\n     *\n     * @param url Url of image.\n     */\n    findImageByUrl(url: string): ImageItem | undefined {\n        return ImageCache.instance.findImage(url);\n    }\n\n    /**\n     * Load an [[ImageItem]]. Returns a promise or a loaded [[ImageItem]].\n     *\n     * @param imageItem ImageItem to load.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        return ImageCache.instance.loadImage(imageItem);\n    }\n\n    /**\n     * Remove all [[ImageItem]]s from the cache. Also removes all [[ImageItem]]s that belong to this\n     * [[MapView]] from the global [[ImageCache]].\n     */\n    clear() {\n        ImageCache.instance.clear(this.mapView);\n        this.m_name2Url = new Map();\n        this.m_url2Name = new Map();\n    }\n\n    /**\n     * Returns number of image names stored in the cache.\n     */\n    get numberOfNames(): number {\n        return this.m_name2Url.size;\n    }\n\n    /**\n     * Returns number of image URLs in the cache.\n     */\n    get numberOfUrls(): number {\n        return this.m_url2Name.size;\n    }\n\n    /**\n     * Return `true` if an image with the given name is known.\n     *\n     * @param name Name of the image.\n     */\n    hasName(name: string): boolean {\n        return this.m_name2Url.get(name) !== undefined;\n    }\n\n    /**\n     * Return `true` if an image with the given URL is known.\n     * @param url URL of image.\n     */\n    hasUrl(url: string): boolean {\n        return this.m_url2Name.get(url) !== undefined;\n    }\n\n    /**\n     * Return the names under which an image with the given URL is saved.\n     */\n    findNames(url: string): string[] | undefined {\n        return this.m_url2Name.get(url);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MapView } from \"../MapView\";\nimport { ImageItem } from \"./Image\";\n\nconst logger = LoggerManager.instance.create(\"ImageCache\");\n\n// override declaration of createImageBitmap, add optional options parameter that\n// was removed in typings for TypeScript 3.1\ndeclare function createImageBitmap(\n    image: ImageBitmapSource,\n    sx: number,\n    sy: number,\n    sw: number,\n    sh: number,\n    options?: any\n): Promise<ImageBitmap>;\n\n/**\n * Combines an [[ImageItem]] with a list of [[MapViews]] that reference it.\n */\nclass ImageCacheItem {\n    /**\n     * The list of [[MapView]]s referencing the [[ImageItem]].\n     */\n    mapViews: MapView[] = [];\n\n    /**\n     * Instantiates `ImageCacheItem`.\n     *\n     * @param imageItem The [[ImageItem]] referenced by the associated [[MapView]]s instances.\n     * @param mapView An optional first [[MapView]] referencing the [[ImageItem]].\n     */\n    constructor(public imageItem: ImageItem, mapView?: MapView) {\n        if (mapView !== undefined) {\n            this.mapViews.push(mapView);\n        }\n    }\n}\n\n/**\n * `ImageCache` is a singleton, so it can be used with multiple MapViews on a single page. This\n * allows to have an image loaded only once for multiple views. THREE is doing something similar,\n * but does not allow to share images that have been loaded from a canvas (which we may need to do\n * if we use SVG images for textures).\n *\n * One application that makes our own cache necessary is the generation of our own textures from\n * data that is not an URL.\n *\n * The `ImageCache` can be improved by adding satistics for memory footprint as well.\n */\nexport class ImageCache {\n    /**\n     * Returns the singleton `instance` of the `ImageCache`.\n     */\n    static get instance(): ImageCache {\n        if (ImageCache.m_instance === undefined) {\n            ImageCache.m_instance = new ImageCache();\n        }\n        return ImageCache.m_instance;\n    }\n\n    /**\n     * Dispose the singleton object. Not normally implemented for singletons, but good for\n     * debugging.\n     */\n    static dispose(): void {\n        ImageCache.m_instance = undefined;\n    }\n\n    private static m_instance: ImageCache | undefined;\n\n    private m_images: Map<string, ImageCacheItem> = new Map();\n\n    /**\n     * Add an image definition to the global cache. Useful when the image data is already loaded.\n     *\n     * @param mapView Specifiy which [[MapView]] requests the image.\n     * @param url URL of image.\n     * @param imageData Optional [ImageData]] containing the image content.\n     */\n    registerImage(\n        mapView: MapView,\n        url: string,\n        imageData: ImageData | ImageBitmap | undefined\n    ): ImageItem {\n        let imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        imageCacheItem = this.findImageCacheItem(url);\n        if (imageCacheItem !== undefined) {\n            if (mapView !== undefined && imageCacheItem.mapViews.indexOf(mapView) < 0) {\n                imageCacheItem.mapViews.push(mapView);\n            }\n            return imageCacheItem.imageItem;\n        }\n\n        const mapViews: MapView[] = [];\n        if (mapView !== undefined) {\n            mapViews.push(mapView);\n        }\n\n        imageCacheItem = {\n            imageItem: {\n                url,\n                imageData,\n                loaded: false\n            },\n            mapViews\n        };\n\n        this.m_images.set(url, imageCacheItem);\n\n        return imageCacheItem.imageItem;\n    }\n\n    /**\n     * Add an image definition, and optionally start loading the content.\n     *\n     * @param mapView [[MapView]] requesting the image.\n     * @param url URL of image.\n     * @param startLoading Optional flag. If `true` the image will be loaded in the background.\n     */\n    addImage(\n        mapView: MapView,\n        url: string,\n        startLoading = true\n    ): ImageItem | Promise<ImageItem | undefined> | undefined {\n        const imageItem = this.registerImage(mapView, url, undefined);\n        if (imageItem !== undefined && startLoading === true) {\n            return this.loadImage(imageItem);\n        }\n\n        return imageItem;\n    }\n\n    /**\n     * Find [[ImageItem]] for the specified URL.\n     *\n     * @param url URL of image.\n     * @returns `ImageItem` for the URL if the URL is registered, `undefined` otherwise.\n     */\n    findImage(url: string): ImageItem | undefined {\n        const imageItem = this.m_images.get(url);\n        if (imageItem !== undefined) {\n            return imageItem.imageItem;\n        }\n        return undefined;\n    }\n\n    /**\n     * Clear all [[ImageItem]]s belonging to a [[MapView]]. May remove cached items if no\n     * [[MapView]] are registered anymore.\n     *\n     * @param mapView MapView to remove all [[ImageItem]]s from.\n     */\n    clear(mapView: MapView) {\n        const itemsToRemove: string[] = [];\n\n        this.m_images.forEach(imageItem => {\n            const mapViewIndex = imageItem.mapViews.indexOf(mapView);\n            if (mapViewIndex >= 0) {\n                imageItem.mapViews.splice(mapViewIndex, 1);\n            }\n            if (imageItem.mapViews.length === 0) {\n                itemsToRemove.push(imageItem.imageItem.url);\n            }\n        });\n\n        for (const keyToDelete of itemsToRemove) {\n            this.m_images.delete(keyToDelete);\n        }\n    }\n\n    /**\n     * Clear all [[ImageItem]]s from all [[MapView]]s.\n     */\n    clearAll() {\n        this.m_images = new Map();\n    }\n\n    /**\n     * Returns the number of all cached [[ImageItem]]s.\n     */\n    get size(): number {\n        return this.m_images.size;\n    }\n\n    /**\n     * Load an [[ImageItem]]. If the loading process is already running, it returns the current\n     * promise.\n     *\n     * @param imageItem `ImageItem` containing the URL to load image from.\n     * @returns An [[ImageItem]] if the image has already been loaded, a promise otherwise.\n     */\n    loadImage(imageItem: ImageItem): ImageItem | Promise<ImageItem | undefined> {\n        if (imageItem.imageData !== undefined) {\n            return imageItem;\n        }\n\n        if (imageItem.loadingPromise !== undefined) {\n            return imageItem.loadingPromise;\n        }\n\n        const imageLoader = new THREE.ImageLoader();\n\n        imageItem.loadingPromise = new Promise(resolve => {\n            logger.debug(`Loading image: ${imageItem.url}`);\n            imageLoader.load(\n                imageItem.url,\n                image => {\n                    logger.debug(`... finished loading image: ${imageItem.url}`);\n                    this.renderImage(imageItem, image)\n                        .then(() => {\n                            imageItem.loadingPromise = undefined;\n                            resolve(imageItem);\n                        })\n                        .catch(ex => {\n                            logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                            resolve(undefined);\n                        });\n                },\n                // Loading events no longer supported\n                undefined,\n                errorEvent => {\n                    logger.error(`... loading image failed: ${imageItem.url} : ${errorEvent}`);\n\n                    imageItem.loadingPromise = undefined;\n                    resolve(undefined);\n                }\n            );\n        });\n        return imageItem.loadingPromise;\n    }\n\n    /**\n     * Find the cached [[ImageItem]] by URL.\n     *\n     * @param url URL of image.\n     */\n    private findImageCacheItem(url: string): ImageCacheItem | undefined {\n        return this.m_images.get(url);\n    }\n\n    /**\n     * Render the `ImageItem` by using `createImageBitmap()` or by rendering the image into a\n     * [[HTMLCanvasElement]].\n     *\n     * @param imageItem [[ImageItem]] to assign image data to.\n     * @param image [[HTMLImageElement]] to\n     */\n    private renderImage(\n        imageItem: ImageItem,\n        image: HTMLImageElement\n    ): Promise<ImageData | ImageBitmap | undefined> {\n        return new Promise((resolve, reject) => {\n            // use createImageBitmap if it is available. It should be available in webworkers as\n            // well\n            if (typeof createImageBitmap === \"function\") {\n                const options: ImageBitmapOptions = {\n                    premultiplyAlpha: \"default\",\n                    imageOrientation: \"flipY\"\n                };\n\n                logger.debug(`Creating bitmap image: ${imageItem.url}`);\n                createImageBitmap(image, 0, 0, image.width, image.height, options)\n                    .then(imageBitmap => {\n                        logger.debug(`... finished creating bitmap image: ${imageItem.url}`);\n\n                        imageItem.loadingPromise = undefined;\n                        imageItem.imageData = imageBitmap;\n                        imageItem.loaded = true;\n                        resolve(imageBitmap);\n                    })\n                    .catch(ex => {\n                        logger.error(`... loading image failed: ${imageItem.url} : ${ex}`);\n                        resolve(undefined);\n                    });\n            } else {\n                try {\n                    if (typeof document === \"undefined\") {\n                        logger.error(\"Error: document is not available, cannot generate image\");\n                        reject(\n                            new Error(\n                                \"ImageCache#renderImage: document is not available, cannot \" +\n                                    \"render image to create texture\"\n                            )\n                        );\n                    }\n\n                    // TODO: Extract the rendering to the canvas part and make it configurable for\n                    // the client, so it does not rely on the `document`.\n\n                    // use the image, e.g. draw part of it on a canvas\n                    const canvas = document.createElement(\"canvas\");\n                    canvas.width = image.width;\n                    canvas.height = image.height;\n\n                    const context = canvas.getContext(\"2d\");\n                    if (context !== null) {\n                        logger.debug(\n                            // tslint:disable-next-line: max-line-length\n                            `... finished creating bitmap image in canvas: ${imageItem.url} ${image}`\n                        );\n                        context.drawImage(\n                            image,\n                            0,\n                            0,\n                            image.width,\n                            image.height,\n                            0,\n                            0,\n                            canvas.width,\n                            canvas.height\n                        );\n                        const imageData = context.getImageData(0, 0, image.width, image.height);\n                        imageItem.imageData = imageData;\n                        imageItem.loaded = true;\n                        resolve(imageData);\n                    } else {\n                        logger.error(`renderImage: no context found`);\n                        reject(new Error(`ImageCache#renderImage: no context found`));\n                    }\n                } catch (ex) {\n                    logger.error(`renderImage failed: ${ex}`);\n                    imageItem.imageData = undefined;\n                    imageItem.loaded = true;\n                    reject(new Error(`ImageCache#renderImage failed: ${ex}`));\n                }\n            }\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils } from \"./Utils\";\n\n/**\n * Manages the fog display in [[MapView]].\n */\nexport class MapViewFog {\n    private m_enabled: boolean = true;\n    private m_fog: THREE.Fog = new THREE.Fog(0x000000); // Default color asked by DefinitelyTyped.\n    private m_fogIsDefined: boolean = false;\n    private m_cachedTheme: Theme = { styles: {} };\n\n    /**\n     * Constructs a `MapViewFog` instance.\n     *\n     * @param m_scene The scene used in [[MapView]] that contains the map objects.\n     */\n    constructor(private m_scene: THREE.Scene) {}\n\n    /**\n     * Allows for disabling the fog, even if it is defined in the theme. Use this property for\n     * custom views like the demo app's debug camera. However, if the theme does not define a\n     * fog, enabling this property here has no effect.\n     *\n     * @param value A boolean that specifies whether the fog should be enabled or disabled.\n     */\n    set enabled(enableFog: boolean) {\n        this.m_enabled = enableFog;\n        if (enableFog && this.m_fogIsDefined && this.m_scene.fog === null) {\n            this.add();\n        } else if (!enableFog && this.m_scene.fog !== null) {\n            this.remove();\n        }\n    }\n\n    /**\n     * Returns the current fog status, enabled or disabled.\n     */\n    get enabled(): boolean {\n        return this.m_enabled;\n    }\n\n    /**\n     * Sets the fog depending on the [[Theme]] instance provided. This function is called when a\n     * theme is loaded. Fog is added only if the theme contains a fog definition with a:\n     * - `color` property, used to set the fog color.\n     * - `startRatio` property, used to set the start distance of the fog as a ratio of the far\n     * clipping plane distance.\n     *\n     * @param theme A [[Theme]] instance.\n     */\n    reset(theme: Theme) {\n        this.m_cachedTheme = theme;\n        if (\n            theme !== undefined &&\n            theme.fog !== undefined &&\n            theme.fog.color !== undefined &&\n            theme.fog.startRatio !== undefined\n        ) {\n            this.m_fogIsDefined = true;\n            this.m_fog.color.set(theme.fog.color);\n            if (this.m_enabled && this.m_scene.fog === null) {\n                this.add();\n            }\n        } else {\n            this.m_fogIsDefined = false;\n            if (this.m_scene.fog !== null) {\n                this.remove();\n            }\n        }\n    }\n\n    /**\n     * Updates the fog at runtime, depending on the camera.\n     *\n     * @param camera An instance of a `THREE.Camera` with a `far` property.\n     */\n    update(mapView: MapView, viewDistance?: number) {\n        if (\n            this.m_scene.fog !== null &&\n            this.m_cachedTheme !== undefined &&\n            this.m_cachedTheme.fog &&\n            this.m_cachedTheme.fog.startRatio !== undefined &&\n            (mapView.camera.far !== undefined || viewDistance !== undefined)\n        ) {\n            // If maximum visibility range is available use it instead of camera.far distance,\n            // this makes fog independent from dynamic camera planes and keeps consistent\n            // distance based \"melting\" (fog) effect during a tilt.\n            const viewRange = viewDistance !== undefined ? viewDistance : mapView.camera.far;\n            // TODO: We may move below constants to theme Fog definition\n            // Density of the fog when viewing straight along the horizon line.\n            const horizontalDensity = 1.0;\n            // Theoretical density of the fog when viewing straight from top to down.\n            const verticalDensity = 0.0;\n            // The fraction of the maximum viewing distance along the eye vector\n            // to start applying the fog.\n            const startRatio = this.m_cachedTheme.fog.startRatio;\n            // The fraction of maximum viewing range at which fog fully covers geometry.\n            const endRatio = 1.0;\n            assert(startRatio <= endRatio);\n            const t = Math.abs(\n                Math.cos(MapViewUtils.extractCameraTilt(mapView.camera, mapView.projection))\n            );\n            const density = MathUtils.smoothStep(horizontalDensity, verticalDensity, t);\n            this.m_fog.near = MathUtils.lerp(viewRange * startRatio, viewRange, 1.0 - density);\n            this.m_fog.far = MathUtils.lerp(viewRange * endRatio, viewRange, density);\n            this.m_fog.near = Math.min(this.m_fog.near, mapView.camera.far);\n            this.m_fog.far = Math.min(this.m_fog.far, mapView.camera.far);\n        }\n    }\n\n    /**\n     * Handles fog addition.\n     */\n    private add() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = this.m_fog;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(true);\n    }\n\n    /**\n     * Handles fog removal.\n     */\n    private remove() {\n        // When the fog is changed, ThreeJS takes care of recompiling its built-in materials...\n        this.m_scene.fog = null;\n        // ...except the `RawShaderMaterial`, on purpose, so it needs to be updated from the app.\n        this.setFogInRawShaderMaterials(false);\n    }\n\n    /**\n     * ThreeJS lets users manage the `RawShaderMaterial` themselves, so they need to be modified\n     * explicitly.\n     *\n     * @see https://github.com/mrdoob/three.js/blob/dev/src/renderers/webgl/WebGLProgram.js#L298\n     */\n    private setFogInRawShaderMaterials(enableFog: boolean) {\n        this.m_scene.traverse(object => {\n            if (!(object instanceof THREE.Mesh)) {\n                return;\n            }\n            if (!(object.material instanceof THREE.Material)) {\n                return;\n            }\n            // HighPrecisionLineMaterial does not support fog\n            if (object.material instanceof HighPrecisionLineMaterial) {\n                return;\n            }\n            // We may skip redundant updates.\n            if (object.material.fog === enableFog) {\n                return;\n            }\n            object.material.fog = enableFog;\n            // Fog properties can't be easily changed at runtime (once the material\n            // is rendered at least once) and thus requires building of new shader\n            // program - force material update.\n            object.material.needsUpdate = true;\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    composeTechniqueTextureName,\n    DecodedTile,\n    getFeatureId,\n    getPropertyValue,\n    ImageTexture,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    LineMarkerTechnique,\n    PoiGeometry,\n    PoiTechnique\n} from \"@here/harp-datasource-protocol\";\nimport { ContextualArabicConverter } from \"@here/harp-text-canvas\";\nimport { assert, assertExists, LoggerManager } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { MapView } from \"../MapView\";\nimport { TextElement } from \"../text/TextElement\";\nimport { DEFAULT_TEXT_DISTANCE_SCALE } from \"../text/TextElementsRenderer\";\nimport { Tile } from \"../Tile\";\nimport { PoiTable } from \"./PoiTableManager\";\n\nconst logger = LoggerManager.instance.create(\"PoiManager\");\n\n/**\n * Interface for the [[ImageTexture]]s that are defined in the atlas.\n */\ninterface ImageTextureDef {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    pixelRatio?: number;\n}\n\n/**\n * POI manager class, responsible for loading the [[PoiGeometry]] objects from the [[DecodedTile]],\n * and preparing them for rendering. Also loads and manages the texture atlases for the icons.\n */\nexport class PoiManager {\n    // Keep track of the missing POI table names, but only warn once.\n    private static m_missingPoiTableName: Map<string, boolean> = new Map();\n    private static m_missingPoiName: Map<string, boolean> = new Map();\n\n    /**\n     * Warn about a missing POI table name, but only once.\n     * @param poiTableName POI mapping table name.\n     * @param poiTable POI table instance.\n     */\n    private static notifyMissingPoiTable(\n        poiTableName: string,\n        poiTable: PoiTable | undefined\n    ): void {\n        if (poiTableName === undefined) {\n            poiTableName = \"undefined\";\n        }\n        if (PoiManager.m_missingPoiTableName.get(poiTableName) === undefined) {\n            PoiManager.m_missingPoiTableName.set(poiTableName, true);\n            if (poiTable !== undefined && !poiTable.loadedOk) {\n                logger.error(`updatePoiFromPoiTable: Could not load POI table '${poiTableName}'!`);\n            } else {\n                logger.error(\n                    `updatePoiFromPoiTable: No POI table with name '${poiTableName}' found!`\n                );\n            }\n        }\n    }\n\n    /**\n     * Warn about a missing POI name, but only once.\n     * @param poiName name of POI.\n     * @param poiTableName POI mapping table name.\n     */\n    private static notifyMissingPoi(poiName: string, poiTableName: string): void {\n        if (poiName === undefined) {\n            poiName = \"undefined\";\n        }\n        const key: string = `${poiTableName}[${poiName}]`;\n        if (PoiManager.m_missingPoiName.get(key) === undefined) {\n            PoiManager.m_missingPoiName.set(key, true);\n            logger.warn(\n                `updatePoiFromPoiTable: ` +\n                    `Cannot find POI info for '${poiName}' in table '${poiTableName}'.`\n            );\n        }\n    }\n\n    private m_imageTextures: Map<string, ImageTexture> = new Map();\n    private m_poiShieldGroups: Map<string, number> = new Map();\n\n    /**\n     * The constructor of the `PoiManager`.\n     *\n     * @param mapView The [[MapView]] instance that should display the POIs.\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Add all POIs from a decoded tile and store them as [[TextElement]]s in the [[Tile]].\n     *\n     * Also handles LineMarkers, which is a recurring marker along a line (road).\n     *\n     * @param tile Tile to add POIs to.\n     * @param decodedTile DecodedTile containing the raw [[PoiGeometry]] objects describing the\n     *  POIs.\n     */\n    addPois(tile: Tile, decodedTile: DecodedTile): void {\n        const poiGeometries = assertExists(decodedTile.poiGeometries);\n        const worldOffsetX = tile.computeWorldOffsetX();\n\n        for (const poiGeometry of poiGeometries) {\n            assert(poiGeometry.technique !== undefined);\n            const techniqueIndex = assertExists(poiGeometry.technique);\n            const technique = decodedTile.techniques[techniqueIndex];\n\n            if (\n                technique.enabled === false ||\n                (!isLineMarkerTechnique(technique) && !isPoiTechnique(technique))\n            ) {\n                continue;\n            }\n\n            // The POI may be in the data, and there may be a Technique, but the technique may\n            // specify to not show it.\n            if (technique.showOnMap === false) {\n                continue;\n            }\n\n            const positions = new THREE.BufferAttribute(\n                new Float32Array(poiGeometry.positions.buffer),\n                poiGeometry.positions.itemCount\n            );\n\n            if (isLineMarkerTechnique(technique) && positions.count > 0) {\n                this.addLineMarker(tile, poiGeometry, technique, positions, worldOffsetX);\n            } else if (isPoiTechnique(technique)) {\n                this.addPoi(tile, poiGeometry, technique, positions, worldOffsetX);\n            }\n        }\n    }\n\n    /**\n     * Load the texture atlas that defines the segments of the texture that should be used for\n     * specific icons. Creates an [[ImageTexture]] for every element in the atlas, such that it can\n     * be addressed in the theme file.\n     *\n     * @param imageName Name of the image from the theme (NOT the url!).\n     * @param atlas URL of the JSON file defining the texture atlas.\n     */\n    addTextureAtlas(imageName: string, atlas: string) {\n        fetch(atlas)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(\n                        `addTextureAtlas: Cannot load textureAtlas: ${response.statusText}`\n                    );\n                }\n\n                return response.json();\n            })\n            .then((jsonAtlas: any | undefined) => {\n                if (jsonAtlas === undefined) {\n                    logger.info(`addTextureAtlas: TextureAtlas empty: ${atlas}`);\n                    return;\n                }\n\n                try {\n                    logger.debug(\n                        `addTextureAtlas: Loading textureAtlas '${atlas}' for image '${imageName}'`\n                    );\n                    for (const textureName of Object.getOwnPropertyNames(jsonAtlas)) {\n                        const imageTextureDef = jsonAtlas[textureName] as ImageTextureDef;\n\n                        const imageTexture: ImageTexture = {\n                            name: textureName,\n                            image: imageName,\n                            xOffset: imageTextureDef.x,\n                            yOffset: imageTextureDef.y,\n                            width: imageTextureDef.width,\n                            height: imageTextureDef.height\n                        };\n\n                        this.addImageTexture(imageTexture);\n                    }\n                } catch (ex) {\n                    logger.error(\n                        `addTextureAtlas: Failed to load textureAtlas ` + `'${atlas}' : ${ex}`\n                    );\n                }\n                this.mapView.update();\n            })\n\n            .catch((reason: any) => {\n                logger.error(`addTextureAtlas: Failed to load textureAtlas '${atlas}' : ${reason}`);\n            });\n    }\n\n    /**\n     * Add an [[ImageTexture]] such that it is available as a named entity for techniques in theme\n     * files.\n     *\n     * @param imageTexture [[ImageTexture]] that should be available for POIs.\n     */\n    addImageTexture(imageTexture: ImageTexture) {\n        if (imageTexture.name === undefined) {\n            logger.error(\"addImageTexture: Name required\", imageTexture);\n            return;\n        }\n        if (this.m_imageTextures.get(imageTexture.name) !== undefined) {\n            logger.warn(\n                `addImageTexture: Name already used: ${imageTexture.name}` + ` (overriding it)`\n            );\n        }\n\n        this.m_imageTextures.set(imageTexture.name, imageTexture);\n    }\n\n    /**\n     * Return the [[ImageTexture]] registered under the specified name.\n     *\n     * @param name Name of the [[ImageTexture]].\n     */\n    getImageTexture(name: string): ImageTexture | undefined {\n        return this.m_imageTextures.get(name);\n    }\n\n    /**\n     * Update the [[TextElement]] with the information taken from the [[PoiTable]] which is\n     * referenced in the [[PoiInfo]] of the pointLabel.\n     *\n     * If the requested [[PoiTable]] is not available yet, the function returns `false`.\n     * If the [[PoiTable]] is not defined, or if the references POI has no entry in\n     * the [[PoiTable]], no action is taken, and the function returns `false`.\n     *\n     * If the [[PoiTable]] has been processed, it returns `true`, indicating that this function\n     * doesn't have to be called again.\n     *\n     * @param pointLabel The [[TextElement]] to update.\n     *\n     * @returns `true` if the [[PoiTable]] has been processed, and the function does not have to be\n     *          called again.\n     */\n    updatePoiFromPoiTable(pointLabel: TextElement): boolean {\n        const poiInfo = pointLabel.poiInfo;\n        // PoiTable requires poiName to be defined otherwise mapping via PoiTable is\n        // not possible, such as table key is not defined.\n        if (\n            poiInfo === undefined ||\n            poiInfo.poiTableName === undefined ||\n            poiInfo.poiName === undefined\n        ) {\n            return true;\n        }\n\n        // Try to acquire PoiTable\n        const poiTableName = poiInfo.poiTableName;\n        const poiTable = this.mapView.poiTableManager.getPoiTable(poiTableName);\n\n        // Check if PoiTable is found, but its still loading.\n        if (poiTable !== undefined && poiTable.isLoading) {\n            // The PoiTable is still loading, we have to try again.\n            return false;\n        }\n\n        // Remove poiTableName to mark this POI as processed.\n        poiInfo.poiTableName = undefined;\n\n        // PoiTable not found or can not be loaded.\n        if (poiTable === undefined || !poiTable.loadedOk) {\n            PoiManager.notifyMissingPoiTable(poiTableName, poiTable);\n            return true;\n        }\n\n        // Try to acquire PoiTableEntry.\n        const poiName = poiInfo.poiName;\n        const poiTableEntry = poiTable.getEntry(poiName);\n        if (poiTableEntry === undefined) {\n            PoiManager.notifyMissingPoi(poiName, poiTableName);\n            return true;\n        }\n\n        if (poiTableEntry.iconName !== undefined && poiTableEntry.iconName.length > 0) {\n            poiInfo.imageTextureName = composeTechniqueTextureName(\n                poiTableEntry.iconName,\n                poiInfo.technique\n            );\n        }\n\n        pointLabel.visible =\n            poiTableEntry.visible !== undefined ? poiTableEntry.visible : pointLabel.visible;\n        pointLabel.priority =\n            poiTableEntry.priority !== undefined ? poiTableEntry.priority : pointLabel.priority;\n        poiInfo.iconMinZoomLevel =\n            poiTableEntry.iconMinLevel !== undefined\n                ? poiTableEntry.iconMinLevel\n                : poiInfo.iconMinZoomLevel;\n        poiInfo.iconMaxZoomLevel =\n            poiTableEntry.iconMaxLevel !== undefined\n                ? poiTableEntry.iconMaxLevel\n                : poiInfo.iconMaxZoomLevel;\n        poiInfo.textMinZoomLevel =\n            poiTableEntry.textMinLevel !== undefined\n                ? poiTableEntry.textMinLevel\n                : poiInfo.textMinZoomLevel;\n        poiInfo.textMaxZoomLevel =\n            poiTableEntry.textMaxLevel !== undefined\n                ? poiTableEntry.textMaxLevel\n                : poiInfo.textMaxZoomLevel;\n\n        pointLabel.updateMinMaxZoomLevelsFromPoiInfo();\n\n        return true;\n    }\n\n    /**\n     * Clear internal state. Applicable when switching themes.\n     */\n    clear() {\n        this.m_imageTextures.clear();\n        this.m_poiShieldGroups.clear();\n    }\n\n    /**\n     * Add the LineMarker as a POI with a series of positions. Make sure that the LineMarkers\n     * having the same visual all get their `shieldGroupIndex` set appropriately, so it can be taken\n     * care of later that not too many of them are rendered (obey `minDistance` attribute).\n     */\n    private addLineMarker(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: LineMarkerTechnique,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        let imageTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        let text: string = \"\";\n        let userData: AttributeMap | undefined;\n        let featureId: number | undefined;\n\n        if (poiGeometry.stringCatalog !== undefined) {\n            assert(poiGeometry.texts.length > 0);\n            text = poiGeometry.stringCatalog[poiGeometry.texts[0]] || \"\";\n            if (poiGeometry.objInfos !== undefined) {\n                userData = poiGeometry.objInfos[0];\n                featureId = getFeatureId(userData);\n            }\n\n            if (poiGeometry.imageTextures !== undefined) {\n                assert(poiGeometry.imageTextures.length > 0);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[0]];\n            }\n        }\n\n        // let the combined image texture name (name of image in atlas, not the URL) and\n        // text of the shield be the group key, at worst scenario it may be:\n        // \"undefined-\"\n        const groupKey = String(imageTextureName) + \"-\" + text;\n        let shieldGroupIndex = this.m_poiShieldGroups.get(groupKey);\n        if (shieldGroupIndex === undefined) {\n            shieldGroupIndex = this.m_poiShieldGroups.size;\n            this.m_poiShieldGroups.set(groupKey, shieldGroupIndex);\n        }\n\n        // Debugging help to identify the group of a shield :\n        // text = groupKey + \": \" + text;\n\n        const positionArray: THREE.Vector3[] = [];\n        for (let i = 0; i < positions.count; i += 3) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n            positionArray.push(new THREE.Vector3(x, y, z));\n        }\n        const textElement = this.checkCreateTextElement(\n            tile,\n            text,\n            technique,\n            imageTextureName,\n            undefined, // TBD for road shields\n            undefined,\n            shieldGroupIndex,\n            featureId,\n            positionArray,\n            undefined,\n            undefined,\n            userData\n        );\n\n        // If the poi icon is rendered, the label that shows text should also be rendered.\n        // The distance rule of the icon should apply, not the one for text (only) labels.\n        textElement.ignoreDistance = false;\n        tile.addTextElement(textElement);\n    }\n\n    /**\n     * Create and add POI [[TextElement]]s to tile with a series of positions.\n     */\n    private addPoi(\n        tile: Tile,\n        poiGeometry: PoiGeometry,\n        technique: PoiTechnique,\n        positions: THREE.BufferAttribute,\n        worldOffsetX: number\n    ) {\n        if (poiGeometry.stringCatalog === undefined) {\n            return;\n        }\n\n        const techniqueTextureName: string | undefined =\n            technique.imageTexture !== undefined\n                ? composeTechniqueTextureName(technique.imageTexture, technique)\n                : undefined;\n\n        const poiTechnique = technique as PoiTechnique;\n        const poiTableName = poiTechnique.poiTable;\n        let poiName = poiTechnique.poiName;\n\n        for (let i = 0; i < positions.count; ++i) {\n            const x = positions.getX(i) + worldOffsetX;\n            const y = positions.getY(i);\n            const z = positions.getZ(i);\n\n            assert(poiGeometry.texts.length > i);\n            let imageTextureName = techniqueTextureName;\n            const text: string = poiGeometry.stringCatalog[poiGeometry.texts[i]] || \"\";\n            const userData =\n                poiGeometry.objInfos !== undefined ? poiGeometry.objInfos[i] : undefined;\n            const featureId = getFeatureId(userData);\n            if (poiGeometry.imageTextures !== undefined && poiGeometry.imageTextures[i] >= 0) {\n                assert(poiGeometry.imageTextures.length > i);\n                imageTextureName = poiGeometry.stringCatalog[poiGeometry.imageTextures[i]];\n            }\n            if (poiTableName !== undefined) {\n                // The POI name to be used is taken from the data, since it will\n                // specify the name of the texture to use.\n\n                // The POI name in the technique may override the POI name from the\n                // data.\n                poiName =\n                    poiTechnique.poiName === undefined ? imageTextureName : poiTechnique.poiName;\n\n                imageTextureName = undefined;\n            }\n\n            const textElement = this.checkCreateTextElement(\n                tile,\n                text,\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                0,\n                featureId,\n                x,\n                y,\n                z,\n                userData\n            );\n\n            tile.addTextElement(textElement);\n        }\n    }\n\n    /**\n     * Create the [[TextElement]] for a POI. Even if the POI has no text, it is required that there\n     * is a [[TextElement]], since POIs are hooked onto [[TextElement]]s for sorting.(Sorted by\n     * priority attribute).\n     */\n    private checkCreateTextElement(\n        tile: Tile,\n        text: string,\n        technique: PoiTechnique | LineMarkerTechnique,\n        imageTextureName: string | undefined,\n        poiTableName: string | undefined,\n        poiName: string | undefined,\n        shieldGroupIndex: number,\n        featureId: number | undefined,\n        x: number | THREE.Vector3[],\n        y: number | undefined,\n        z: number | undefined,\n        userData?: {}\n    ): TextElement {\n        const textElementsRenderer = this.mapView.textElementsRenderer;\n        const priority = technique.priority !== undefined ? technique.priority : 0;\n        const positions = Array.isArray(x) ? (x as THREE.Vector3[]) : new THREE.Vector3(x, y, z);\n\n        // The current zoomlevel of mapview. Since this method is called for all tiles in the\n        // VisibleTileSet we can be sure that the current zoomlevel matches the zoomlevel where\n        // the tile should be shown.\n        const env = this.mapView.env;\n        const fadeNear =\n            technique.fadeNear !== undefined\n                ? getPropertyValue(technique.fadeNear, env)\n                : technique.fadeNear;\n        const fadeFar =\n            technique.fadeFar !== undefined\n                ? getPropertyValue(technique.fadeFar, env)\n                : technique.fadeFar;\n        const xOffset = getPropertyValue(technique.xOffset, env);\n        const yOffset = getPropertyValue(technique.yOffset, env);\n\n        const textElement: TextElement = new TextElement(\n            ContextualArabicConverter.instance.convert(text),\n            positions,\n            textElementsRenderer.styleCache.getRenderStyle(tile, technique),\n            textElementsRenderer.styleCache.getLayoutStyle(tile, technique),\n            getPropertyValue(priority, env),\n            xOffset !== undefined ? xOffset : 0.0,\n            yOffset !== undefined ? yOffset : 0.0,\n            featureId,\n            technique.style,\n            fadeNear,\n            fadeFar,\n            tile.offset\n        );\n\n        textElement.mayOverlap = technique.textMayOverlap === true;\n        textElement.reserveSpace = technique.textReserveSpace !== false;\n        textElement.alwaysOnTop = technique.alwaysOnTop === true;\n        textElement.userData = userData;\n\n        // imageTextureName may be undefined if a poiTable is used.\n        if (imageTextureName === undefined && poiTableName !== undefined) {\n            imageTextureName = \"\";\n        } else if (imageTextureName !== undefined && poiTableName !== undefined) {\n            logger.warn(\n                \"Possible duplicate POI icon definition via imageTextureName and poiTable!\"\n            );\n        }\n\n        if (imageTextureName !== undefined) {\n            const textIsOptional = technique.textIsOptional === true;\n            const iconIsOptional = technique.iconIsOptional !== false;\n            const renderTextDuringMovements = !(technique.renderTextDuringMovements === false);\n            const iconMayOverlap =\n                technique.iconMayOverlap === undefined\n                    ? textElement.textMayOverlap\n                    : technique.iconMayOverlap === true;\n            const iconReserveSpace =\n                technique.iconReserveSpace === undefined\n                    ? textElement.textReservesSpace\n                    : technique.iconReserveSpace !== false;\n\n            textElement.poiInfo = {\n                technique,\n                imageTextureName,\n                poiTableName,\n                poiName,\n                shieldGroupIndex,\n                textElement,\n                textIsOptional,\n                iconIsOptional,\n                renderTextDuringMovements,\n                mayOverlap: iconMayOverlap,\n                reserveSpace: iconReserveSpace,\n                featureId,\n                iconMinZoomLevel: technique.iconMinZoomLevel,\n                iconMaxZoomLevel: technique.iconMaxZoomLevel,\n                textMinZoomLevel: technique.textMinZoomLevel,\n                textMaxZoomLevel: technique.textMaxZoomLevel\n            };\n            textElement.updateMinMaxZoomLevelsFromPoiInfo();\n        } else {\n            // Select the smaller/larger one of the two min/max values, because the TextElement\n            // is a container for both.\n            if (textElement.minZoomLevel === undefined) {\n                textElement.minZoomLevel = technique.textMinZoomLevel;\n            }\n\n            if (textElement.maxZoomLevel === undefined) {\n                textElement.maxZoomLevel = technique.textMaxZoomLevel;\n            }\n        }\n\n        textElement.distanceScale =\n            technique.distanceScale !== undefined\n                ? technique.distanceScale\n                : DEFAULT_TEXT_DISTANCE_SCALE;\n\n        return textElement;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    PoiStackMode,\n    PoiTableDef,\n    PoiTableEntryDef,\n    PoiTableRef,\n    Theme\n} from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { MapView } from \"../MapView\";\n\nconst logger = LoggerManager.instance.create(\"PoiTable\");\n\n/**\n * Class to store and maintain individual POI information for the [[PoiTable]].\n */\nclass PoiTableEntry implements PoiTableEntryDef {\n    /**\n     * Verify that the JSON description of the POI table entry is valid.\n     *\n     * @param jsonEntry JSON description of the POI table entry.\n     *\n     * @returns `true` if the `jsonEntry` is valid.\n     */\n    static verifyJSON(jsonEntry: PoiTableEntryDef): boolean {\n        let isOK =\n            typeof jsonEntry.name === \"string\" &&\n            jsonEntry.name.length > 0 &&\n            (jsonEntry.altNames === undefined || Array.isArray(jsonEntry.altNames)) &&\n            (jsonEntry.stackMode === undefined ||\n                jsonEntry.stackMode === \"yes\" ||\n                jsonEntry.stackMode === \"no\" ||\n                jsonEntry.stackMode === \"parent\") &&\n            (jsonEntry.visible === undefined || typeof jsonEntry.visible === \"boolean\") &&\n            (jsonEntry.priority === undefined || typeof jsonEntry.priority === \"number\") &&\n            (jsonEntry.iconMinLevel === undefined || typeof jsonEntry.iconMinLevel === \"number\") &&\n            (jsonEntry.iconMaxLevel === undefined || typeof jsonEntry.iconMaxLevel === \"number\") &&\n            (jsonEntry.textMinLevel === undefined || typeof jsonEntry.textMinLevel === \"number\") &&\n            (jsonEntry.textMaxLevel === undefined || typeof jsonEntry.textMaxLevel === \"number\");\n\n        if (isOK && jsonEntry.altNames !== undefined) {\n            const altNames = jsonEntry.altNames as string[];\n            for (const str in altNames) {\n                if (typeof str !== \"string\") {\n                    isOK = false;\n                    break;\n                }\n            }\n        }\n\n        return isOK;\n    }\n\n    /** Default name of the POI as the key for looking it up. */\n    name?: string;\n    /** Alternative names of the POI. */\n    altNames?: string[];\n    /** Visibility of the POI. If `false`, the POI will not be rendered. */\n    visible?: boolean;\n    /** Name of the icon, defined in the the texture atlases. */\n    iconName?: string;\n    /** Stacking mode of the POI. For future use. */\n    stackMode?: PoiStackMode;\n    /**\n     * Priority of the POI to select the visible set in case there are more POIs than can be\n     * handled.\n     */\n    priority?: number;\n    /** Minimum zoom level to render the icon on. */\n    iconMinLevel?: number;\n    /** Maximum zoom level to render the icon on. */\n    iconMaxLevel?: number;\n    /** Minimum zoom level to render the text label on. */\n    textMinLevel?: number;\n    /** Maximum zoom level to render the text label on. */\n    textMaxLevel?: number;\n\n    /**\n     * Setup the [[PoiTableEntry]] from the JSON description. It is assumed that the jsonEntry has\n     * been verified with [[PoiTableEntry#verifyJSON]].\n     *\n     * @param jsonEntry JSON description of the POI table entry. Expected to have been verified with\n     *          [[PoiTableEntry#verifyJSON]].\n     */\n    setup(jsonEntry: PoiTableEntryDef) {\n        this.name = jsonEntry.name;\n        this.altNames = jsonEntry.altNames;\n        this.iconName = jsonEntry.iconName;\n        this.visible = jsonEntry.visible;\n        this.priority = jsonEntry.priority;\n        this.iconMinLevel = jsonEntry.iconMinLevel;\n        this.iconMaxLevel = jsonEntry.iconMaxLevel;\n        this.textMinLevel = jsonEntry.textMinLevel;\n        this.textMaxLevel = jsonEntry.textMaxLevel;\n\n        switch (jsonEntry.stackMode) {\n            case \"yes\":\n                this.stackMode = PoiStackMode.Show;\n                break;\n            case \"no\":\n                this.stackMode = PoiStackMode.Hide;\n                break;\n            case \"parent\":\n                this.stackMode = PoiStackMode.ShowParent;\n                break;\n            default:\n        }\n    }\n}\n\n/**\n * The `PoiTable` stores individual information for each POI type. If a [[TextElement]] has a\n * reference to a PoiTable (if TextElement.poiInfo.poiTableName is set), information for the\n * TextElement and its icon are read from the PoiTable.\n *\n * The key to look up the POI is taken from the data, in case of OSM data with TileZen data, the\n * `poiNameField` is set to `kind`, which makes the content of the field `kind` in the data the key\n * to look up the POIs in the [[PoiTable]].\n *\n * On the side of the [[PoiTable]], the key to look up the PoiTableEntry is either the property\n * \"name\" of the [[PoiTableEntry]] (which should be unique), or the alternative list of names\n * `altNames`, where each value should also be unique. If the property `useAltNamesForKey` is set to\n * `true`, the `altNames` will be used.\n */\nexport class PoiTable {\n    /**\n     * Stores the list of [[PoiTableEntry]]s.\n     */\n    private readonly poiList: PoiTableEntry[] = new Array();\n    /**\n     * Dictionary to look up for [[PoiTableEntry]] quickly. The dictionary is either created for\n     * the `name` property of the [[PoiTableEntry]], which will identify POI, or for all of\n     * alternative the names defined in `altNames` of [[PoiTableEntry]] JSON object.\n     * Value assigned to key it is the index to [[poiList]] array which contain actual\n     * [[PoiTabelEntry]] objects.\n     */\n    private readonly poiDict: Map<string, number> = new Map();\n    private m_isLoading = false;\n    private m_loadedOk: boolean | undefined = undefined;\n\n    /**\n     * Creates an instance of PoiTable.\n     *\n     * @param {string} name Name of the `PoiTable`. Must be unique.\n     * @param {boolean} useAltNamesForKey Pass `true` to use the contents of the property `altNames`\n     *          to find a [[PoiTableEntry]] in the table.\n     */\n    constructor(readonly name: string, readonly useAltNamesForKey: boolean) {}\n\n    /**\n     * Returns `true` if the table is currently being loaded, `false` otherwise.\n     *\n     * @readonly\n     */\n    get isLoading(): boolean {\n        return this.m_isLoading;\n    }\n\n    /**\n     * Returns `true` if the table has been loaded correctly, `false` otherwise.\n     *\n     * @readonly\n     */\n    get loadedOk(): boolean {\n        return this.m_loadedOk === true;\n    }\n\n    /**\n     * Gets [[PoiTableEntry]] for poi name specified.\n     *\n     * @param poiName poi name or one of its alternative names if [[useAltNamesForKey]] is\n     * set to `true`.\n     * @returns [[PoiTableEntry]] object or undefined if name was not found in dictionary.\n     */\n    getEntry(poiName: string): PoiTableEntry | undefined {\n        const entryIdx: number | undefined = this.poiDict.get(poiName);\n        if (entryIdx !== undefined) {\n            if (entryIdx < this.poiList.length) {\n                return this.poiList[entryIdx];\n            } else {\n                throw new Error(\"Poi table entry index out of stored list!\");\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Start to load the PoiTable from the specified URL. Can only be called once per table.\n     *\n     * @param {string} poiTableUrl URL that points to the JSON file.\n     *\n     * @returns {Promise<boolean>} Promise is being resolved once the JSON file has been fetched and\n     *          the `PoiTable` has been set up.\n     */\n    async load(poiTableUrl: string): Promise<boolean> {\n        if (this.m_loadedOk !== undefined) {\n            // Only load once.\n            return true;\n        }\n\n        this.m_loadedOk = false;\n\n        const response = await fetch(poiTableUrl);\n\n        if (!response.ok) {\n            throw new Error(\n                `load: Cannot load POI table at ${poiTableUrl}:` + ` ${response.statusText}`\n            );\n        }\n\n        const jsonPoiTable = (await response.json()) as PoiTableDef;\n        if (jsonPoiTable === undefined) {\n            logger.info(`load: TextureAtlas empty: ${poiTableUrl}`);\n            return true;\n        }\n\n        this.startLoading();\n\n        try {\n            logger.debug(`load: Loading POI table '${poiTableUrl}' for table '${this.name}'`);\n\n            if (jsonPoiTable.poiList !== undefined && Array.isArray(jsonPoiTable.poiList)) {\n                for (const tableEntry of jsonPoiTable.poiList) {\n                    if (PoiTableEntry.verifyJSON(tableEntry)) {\n                        const newPoiEntry = new PoiTableEntry();\n                        newPoiEntry.setup(tableEntry);\n                        const entryIdx = this.poiList.push(newPoiEntry) - 1;\n\n                        if (!this.useAltNamesForKey) {\n                            // Use actual name of entry as the key\n                            if (newPoiEntry.name === undefined) {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `. No name set in entry: ${tableEntry}.`\n                                );\n                            } else {\n                                this.poiDict.set(newPoiEntry.name, entryIdx);\n                            }\n                        } else {\n                            if (\n                                newPoiEntry.altNames !== undefined &&\n                                newPoiEntry.altNames.length > 0\n                            ) {\n                                // Use the list of alternative names as keys.\n                                for (const altName of newPoiEntry.altNames) {\n                                    this.poiDict.set(altName, entryIdx);\n                                }\n                            } else {\n                                logger.warn(\n                                    `load: Invalid entry in POI table '${poiTableUrl}' : ` +\n                                        `No alternative names set in entry: ${JSON.stringify(\n                                            tableEntry\n                                        )}.`\n                                );\n                            }\n                        }\n                    } else {\n                        logger.warn(\n                            `load: Invalid entry in POI table '${poiTableUrl}' : ${JSON.stringify(\n                                tableEntry\n                            )}`\n                        );\n                    }\n                }\n            }\n            this.m_loadedOk = true;\n            this.finishedLoading();\n        } catch (ex) {\n            logger.error(`load: Failed to load POI table ` + `'${poiTableUrl}' : ${ex}`);\n            this.m_loadedOk = false;\n            this.finishedLoading();\n            return false;\n        }\n        return true;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishedLoading() {\n        this.m_isLoading = false;\n    }\n}\n\n/**\n * The `PoiTableManager` manages the list of [[PoiTables]] that can be defined in the [[Theme]]\n * file.\n */\nexport class PoiTableManager {\n    private m_isLoading = false;\n    private m_poiTables: Map<string, PoiTable> = new Map();\n\n    /**\n     * Creates an instance of PoiTableManager.\n     * @param {MapView} mapView Owning [[MapView]].\n     */\n    constructor(readonly mapView: MapView) {}\n\n    /**\n     * Load the [[PoiTable]]s that are stored in the [[MapView]]s [[Theme]]. Note that duplicate\n     * names of [[PoiTable]]s in the [[Theme]] will lead to inaccessible [[PoiTable]]s.\n     *\n     * @param {Theme} theme [[Theme]] containing all [[PoiTable]]s to load.\n     *\n     * @returns {Promise<void>} Resolved once all the [[PoiTable]]s in the [[Theme]] have been\n     *          loaded.\n     */\n    async loadPoiTables(theme: Theme): Promise<void> {\n        const finished = new Promise<void>(resolve => {\n            this.clear();\n\n            // Add the POI tables defined in the theme.\n            if (theme.poiTables !== undefined) {\n                this.startLoading();\n\n                // Gather promises to signal the success of having loaded them all\n                const loadPromises: Array<Promise<boolean>> = new Array();\n\n                theme.poiTables.forEach((poiTableRef: PoiTableRef) => {\n                    if (\n                        poiTableRef !== undefined &&\n                        poiTableRef.name !== undefined &&\n                        typeof poiTableRef.name === \"string\"\n                    ) {\n                        const poiTable = new PoiTable(\n                            poiTableRef.name,\n                            poiTableRef.useAltNamesForKey !== false\n                        );\n                        if (poiTableRef.url !== undefined && typeof poiTableRef.url === \"string\") {\n                            this.addTable(poiTable);\n                            loadPromises.push(poiTable.load(poiTableRef.url));\n                        } else {\n                            logger.error(`POI table definition has no valid url: ${poiTableRef}`);\n                        }\n                    } else {\n                        logger.error(`POI table definition has no valid name: ${poiTableRef}`);\n                    }\n                });\n\n                if (loadPromises.length > 0) {\n                    Promise.all(loadPromises).finally(() => {\n                        this.finishLoading();\n                        resolve();\n                    });\n                } else {\n                    this.finishLoading();\n                    resolve();\n                }\n            } else {\n                this.finishLoading();\n                resolve();\n            }\n        });\n\n        return finished;\n    }\n\n    /**\n     * Clear the list of [[PoiTable]]s.\n     */\n    clear() {\n        this.m_poiTables = new Map();\n    }\n\n    /**\n     * Return the map of [[PoiTable]]s.\n     */\n    get poiTables(): Map<string, PoiTable> {\n        return this.m_poiTables;\n    }\n\n    /**\n     * Manually add a [[PoiTable]]. Normally, the [[PoiTables]]s are specified in the [[Theme]].\n     * Ensure that the name is unique.\n     */\n    addTable(poiTable: PoiTable) {\n        this.m_poiTables.set(poiTable.name, poiTable);\n    }\n\n    /**\n     * Retrieve a [[PoiTable]] by name.\n     *\n     * @param {(string | undefined)} poiTableName Name of the [[PoiTable]].\n     *\n     * @returns {(PoiTable | undefined)} The found [[poiTable]] if it could be found, `undefined`\n     *          otherwise.\n     */\n    getPoiTable(poiTableName: string | undefined): PoiTable | undefined {\n        return poiTableName === undefined ? undefined : this.m_poiTables.get(poiTableName);\n    }\n\n    /**\n     * Return `true` if the [[PoiTable]]s have finished loading.\n     *\n     * @readonly\n     */\n    get finishedLoading(): boolean {\n        return !this.m_isLoading;\n    }\n\n    private startLoading() {\n        this.m_isLoading = true;\n    }\n\n    private finishLoading() {\n        this.m_isLoading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { Definitions, StyleSet, Theme } from \"@here/harp-datasource-protocol\";\nimport { MapEnv, StyleSetEvaluator } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    GeoCoordinates,\n    MathUtils,\n    MercatorConstants,\n    polarTilingScheme,\n    TileKey,\n    TilingScheme,\n    TransverseMercatorUtils\n} from \"@here/harp-geoutils\";\n\nimport { DataSource } from \"./DataSource\";\nimport { createMaterial } from \"./DecodedTileHelpers\";\nimport { Tile } from \"./Tile\";\n\nexport interface PolarTileDataSourceOptions {\n    /**\n     * Name of [[TileDataSource]], must be unique.\n     */\n    name?: string;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName?: string;\n\n    /**\n     * Optional minimum zoom level (storage level) for [[Tile]]s. Default is 1.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Optional maximum zoom level (storage level) for [[Tile]]s. Default is 20.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -1.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * Optional level offset of regular tiles from reference datasource to align tiles to.\n     * Default is -1.\n     */\n    geometryLevelOffset?: number;\n\n    /**\n     * Enable debug display for generated tiles.\n     * Default is false.\n     */\n    debugTiles?: boolean;\n}\n\n/**\n * [[DataSource]] providing geometry for poles\n */\nexport class PolarTileDataSource extends DataSource {\n    private m_tilingScheme: TilingScheme = polarTilingScheme;\n    private m_maxLatitude = MathUtils.radToDeg(MercatorConstants.MAXIMUM_LATITUDE);\n    private m_geometryLevelOffset: number;\n    private m_debugTiles: boolean;\n\n    private m_styleSetEvaluator?: StyleSetEvaluator;\n    private m_northPoleMaterial?: THREE.Material;\n    private m_southPoleMaterial?: THREE.Material;\n\n    constructor({\n        name = \"polar\",\n        styleSetName,\n        minZoomLevel,\n        maxZoomLevel,\n        storageLevelOffset = -2,\n        geometryLevelOffset = -1,\n        debugTiles = false\n    }: PolarTileDataSourceOptions) {\n        super(name, styleSetName, minZoomLevel, maxZoomLevel, storageLevelOffset);\n\n        this.m_geometryLevelOffset = geometryLevelOffset;\n        this.m_debugTiles = debugTiles;\n        this.cacheable = false;\n    }\n\n    /** @override */\n    dispose() {\n        if (this.m_northPoleMaterial) {\n            this.m_northPoleMaterial.dispose();\n            delete this.m_northPoleMaterial;\n        }\n        if (this.m_southPoleMaterial) {\n            this.m_southPoleMaterial.dispose();\n            delete this.m_southPoleMaterial;\n        }\n        if (this.m_styleSetEvaluator) {\n            delete this.m_styleSetEvaluator;\n        }\n    }\n\n    createMaterial(kind: string, styleSetEvaluator: StyleSetEvaluator): THREE.Material | undefined {\n        const env = new MapEnv({\n            $geometryType: \"polygon\",\n            $layer: \"earth\",\n            kind\n        });\n\n        const techniques = styleSetEvaluator.getMatchingTechniques(env);\n\n        return techniques.length !== 0\n            ? createMaterial({ technique: techniques[0], env })\n            : undefined;\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.dispose();\n\n        if (styleSet !== undefined) {\n            this.m_styleSetEvaluator = new StyleSetEvaluator(styleSet, definitions);\n\n            this.m_northPoleMaterial = this.createMaterial(\"north_pole\", this.m_styleSetEvaluator);\n            this.m_southPoleMaterial = this.createMaterial(\"south_pole\", this.m_styleSetEvaluator);\n        }\n\n        this.mapView.markTilesDirty(this);\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            (this.styleSetName !== undefined && theme.styles && theme.styles[this.styleSetName]) ||\n            [];\n\n        this.setStyleSet(styleSet, theme.definitions, languages);\n    }\n\n    /** @override */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel !== tileKey.level || tileKey.level < 1) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    shouldSubdivide(zoomLevel: number, tileKey: TileKey): boolean {\n        if (zoomLevel <= tileKey.level) {\n            return false;\n        }\n\n        const { north, south } = this.m_tilingScheme.getGeoBox(tileKey);\n\n        return north > this.m_maxLatitude || south < -this.m_maxLatitude;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile {\n        const tile = new Tile(this, tileKey);\n\n        this.createTileGeometry(tile);\n\n        return tile;\n    }\n\n    get geometryLevelOffset(): number {\n        return this.m_geometryLevelOffset;\n    }\n\n    set geometryLevelOffset(geometryLevelOffset: number) {\n        this.m_geometryLevelOffset = geometryLevelOffset;\n    }\n\n    private intersectEdge(latitude: number, a: GeoCoordinates, b: GeoCoordinates): GeoCoordinates {\n        const latA = a.latitude;\n        const latB = b.latitude;\n\n        let lonA = a.longitude;\n        let lonB = b.longitude;\n\n        if (Math.abs(latA) === 90) {\n            lonA = lonB;\n        }\n        if (Math.abs(latB) === 90) {\n            lonB = lonA;\n        }\n        const deltaLat = latB - latA;\n        const deltaLon = lonB - lonA;\n        const scale = (latitude - latA) / deltaLat;\n\n        return new GeoCoordinates(latitude, lonA + deltaLon * scale, 0);\n    }\n\n    private createTileGeometry(tile: Tile): void {\n        const { north, south } = tile.geoBox;\n\n        const isNorthPole = north > 0 && south >= 0;\n        const material = isNorthPole ? this.m_northPoleMaterial : this.m_southPoleMaterial;\n        if (material === undefined) {\n            tile.forceHasGeometry(true);\n            return;\n        }\n\n        const srcProjection = this.m_tilingScheme.projection;\n        const dstProjection = this.projection;\n\n        const maxLat = this.m_maxLatitude;\n        const poleLat = isNorthPole ? maxLat : -maxLat;\n\n        const box = this.m_tilingScheme.boundingBoxGenerator.getWorldBox(tile.tileKey);\n\n        const pBL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.min.y, 0));\n        const pBR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.min.y, 0));\n        const pTR = srcProjection.unprojectPoint(new THREE.Vector3(box.max.x, box.max.y, 0));\n        const pTL = srcProjection.unprojectPoint(new THREE.Vector3(box.min.x, box.max.y, 0));\n\n        let points: GeoCoordinates[];\n        let needsGeometryCut = false;\n\n        // special case where tile contains half of the hemisphere\n        if (tile.tileKey.level === 1) {\n            const isLeftHalf = box.min.x === 0;\n\n            const poleX = isLeftHalf ? box.max.x : box.min.x;\n            const poleY = (box.max.y + box.min.y) / 2;\n            const pPole = srcProjection.unprojectPoint(new THREE.Vector3(poleX, poleY, 0));\n\n            // coordinates are not used, needed for right position\n            const pXX = isLeftHalf ? pBL : pBR;\n\n            points = isNorthPole\n                ? isLeftHalf\n                    ? [pPole, pTR, pXX, pBR]\n                    : [pPole, pBL, pXX, pTL]\n                : isLeftHalf\n                ? [pPole, pBR, pXX, pTR]\n                : [pPole, pTL, pXX, pBL];\n\n            needsGeometryCut = true;\n        } else {\n            // ccw for north, cw for south\n            points = isNorthPole ? [pBL, pBR, pTR, pTL] : [pBL, pTL, pTR, pBR];\n\n            const lats = points.map(p => p.latitude);\n            const lmax = Math.max(...lats);\n            const lmin = Math.min(...lats);\n\n            const isAllPointsOut = isNorthPole ? lmax < poleLat : lmin > poleLat;\n            if (isAllPointsOut) {\n                return;\n            }\n\n            const isSomePointsOut = isNorthPole ? lmin < poleLat : lmax > poleLat;\n            needsGeometryCut = isSomePointsOut;\n\n            if (needsGeometryCut) {\n                const nearest = lats.indexOf(isNorthPole ? lmax : lmin);\n                if (nearest !== 0) {\n                    for (let i = 0; i < nearest; i++) {\n                        points.push(points.shift() as GeoCoordinates);\n                    }\n                }\n            }\n        }\n\n        if (needsGeometryCut) {\n            const centerX = (box.min.x + box.max.x) / 2;\n            const centerY = (box.min.y + box.max.y) / 2;\n            const center = srcProjection.unprojectPoint(new THREE.Vector3(centerX, centerY, 0));\n\n            TransverseMercatorUtils.alignLongitude(points, center);\n\n            // points aligned as follows:\n            // a - nearest to the pole, always in\n            // b - next to nearest\n            // c - farthes from the pole, always out\n            // d - prev from nearest\n            const a = points[0];\n            const b = points[1];\n            const c = points[2];\n            const d = points[3];\n\n            const inPointB = Math.abs(b.latitude) >= maxLat;\n            const inPointD = Math.abs(d.latitude) >= maxLat;\n\n            const cutStart = inPointB\n                ? this.intersectEdge(poleLat, b, c)\n                : this.intersectEdge(poleLat, a, b);\n\n            const cutEnd = inPointD\n                ? this.intersectEdge(poleLat, d, c)\n                : this.intersectEdge(poleLat, a, d);\n\n            points.splice(inPointB ? 2 : 1, 4, cutStart);\n\n            const level = tile.tileKey.level - this.storageLevelOffset + this.m_geometryLevelOffset;\n            // tslint:disable-next-line:no-bitwise\n            const subdivisions = 1 << Math.max(0, level);\n            const step = 360 / subdivisions;\n\n            const cutIndexStart = Math.floor((cutStart.longitude + 180) / step);\n            const cutIndexEnd = Math.ceil((cutEnd.longitude + 180) / step);\n\n            for (let i = cutIndexStart + 1; i < cutIndexEnd; i++) {\n                points.push(new GeoCoordinates(poleLat, i * step - 180, 0));\n            }\n\n            points.push(cutEnd);\n            if (inPointD) {\n                points.push(d);\n            }\n        }\n\n        const g = new THREE.Geometry();\n\n        for (const point of points) {\n            const projected = dstProjection.projectPoint(point, new THREE.Vector3());\n            g.vertices.push(projected.sub(tile.center));\n        }\n\n        for (let i = 1; i < points.length - 1; i++) {\n            g.faces.push(isNorthPole ? new THREE.Face3(0, i, i + 1) : new THREE.Face3(0, i + 1, i));\n        }\n\n        const geometry = new THREE.BufferGeometry();\n        geometry.fromGeometry(g);\n        g.dispose();\n\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.userData = {\n            dataSource: this.name,\n            tileKey: tile.tileKey\n        };\n\n        if (this.m_debugTiles) {\n            const color = Math.round(Math.abs(Math.sin(11 * tile.tileKey.mortonCode())) * 0xffffff);\n            mesh.material = new THREE.MeshBasicMaterial({ color, transparent: true, opacity: 0.5 });\n\n            tile.objects.push(\n                new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({ color, wireframe: true }))\n            );\n        }\n\n        tile.objects.push(mesh);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky } from \"@here/harp-datasource-protocol\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { CubeTexture, CubeTextureLoader, Texture } from \"three\";\n\nconst logger = LoggerManager.instance.create(\"SkyCubemapTexture\");\n\n/**\n * Number of faces that form a [[SkyCubemapTexture]].\n */\nexport const SKY_CUBEMAP_FACE_COUNT = 6;\n\n/**\n * Maps the faceId to the expected position in the threejs faces array.\n */\nexport enum SkyCubemapFaceId {\n    \"positiveX\",\n    \"negativeX\",\n    \"positiveY\",\n    \"negativeY\",\n    \"positiveZ\",\n    \"negativeZ\"\n}\n\n/**\n * Class that handles loading all 6 faces of a [[CubeTexture]], to be used with [[SkyBackground]].\n */\nexport class SkyCubemapTexture {\n    private m_skybox: CubeTexture;\n\n    /**\n     * Constructs a new `SkyCubemapTexture`.\n     *\n     * @param sky Initial [[CubemapSky]] configuration.\n     */\n    constructor(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        this.m_skybox =\n            faces !== undefined ? new CubeTextureLoader().load(faces) : new CubeTexture();\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skybox.dispose();\n    }\n\n    /**\n     * `SkyCubemapTexture`'s texture resource.\n     */\n    get texture(): Texture {\n        return this.m_skybox;\n    }\n\n    /**\n     * Updates the `SkyCubemapTexture` with new parameters.\n     *\n     * @param params New [[CubemapSky]] configuration.\n     */\n    updateTexture(sky: CubemapSky) {\n        const faces = this.createCubemapFaceArray(sky);\n        if (faces === undefined) {\n            return;\n        }\n        this.m_skybox = new CubeTextureLoader().load(faces);\n    }\n\n    private createCubemapFaceArray(sky: CubemapSky): string[] | undefined {\n        const faces: Array<string | undefined> = [\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined,\n            undefined\n        ];\n        for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n            const face: string | undefined = (sky as any)[SkyCubemapFaceId[i]];\n            if (face === undefined) {\n                logger.error(`Face \"${SkyCubemapFaceId[i]}\" was not defined.`);\n                return;\n            }\n            faces[i] = face;\n        }\n\n        return faces as string[];\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"@here/harp-datasource-protocol\";\nimport {\n    Definitions,\n    FlatTheme,\n    isActualSelectorDefinition,\n    isBoxedDefinition,\n    isJsonExprReference,\n    isLiteralDefinition,\n    ResolvedStyleDeclaration,\n    ResolvedStyleSet,\n    StyleDeclaration,\n    Styles,\n    StyleSet,\n    Theme\n} from \"@here/harp-datasource-protocol/lib/Theme\";\nimport {\n    cloneDeep,\n    composeUriResolvers,\n    ContextLogger,\n    getAppBaseUrl,\n    getOptionValue,\n    IContextLogger,\n    ISimpleChannel,\n    RelativeUriResolver,\n    resolveReferenceUri,\n    UriResolver\n} from \"@here/harp-utils\";\nimport { SKY_CUBEMAP_FACE_COUNT, SkyCubemapFaceId } from \"./SkyCubemapTexture\";\n\nimport \"@here/harp-fetch\";\n\nexport const DEFAULT_MAX_THEME_INTHERITANCE_DEPTH = 4;\n\n/**\n * Options to customize [[Theme]] loading process.\n *\n * @see [[ThemeLoader.load]]\n */\nexport interface ThemeLoadOptions {\n    /**\n     * Whether to resolve `ref` expressions in `definition` and `styles` elements.\n     *\n     * @default `false`, as datasources resolve definitions in [[StyleSetEvaluator]].\n     */\n    resolveDefinitions?: boolean;\n\n    /**\n     * Resolve the URIs to resources like fonts, icons, ...\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveResourceUris?: boolean;\n\n    /**\n     * Resolve the URIs of inherited themes (using `extends` feature).\n     * If true, [[uriResolver]] will be used to resolve the URI\n     * @default true\n     */\n    resolveIncludeUris?: boolean;\n\n    /**\n     * An `AbortSignal` object instance; allows you to communicate with a loading process\n     * (including fetch requests) request and abort it if desired via an `AbortController`.\n     *\n     * Modeled after Web APIs `fetch`s `init.signal`.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/AbortController\n     */\n    signal?: AbortSignal;\n\n    /**\n     * Maximum recursion depth when resolving base themes through [[[Theme]]s `extends` property.\n     *\n     * @default [[DEFAULT_MAX_THEME_INTHERITANCE_DEPTH]]\n     */\n    maxInheritanceDepth?: number;\n\n    /**\n     * Custom logging channel on which diagnostics and warnings will be reported.\n     *\n     * If not specified, [[ThemeLoader.load]] will log to `console`.\n     */\n    logger?: ISimpleChannel;\n\n    /**\n     * Resolve asset `URI`s referenced in `Theme` assets using this resolver.\n     */\n    uriResolver?: UriResolver;\n}\n\n/**\n * Loads and validates a theme from URL objects.\n */\nexport class ThemeLoader {\n    /**\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a\n     * JSON-encoded theme.\n     *\n     * By default, resolves following features of theme:\n     *\n     *  -  `extends` - loads and merges all inherited themes (see [[resolveBaseTheme]])\n     *  -  `ref` - resolves all `ref` instances to their values defined in `definitions` section\n     *     of theme (see [[resolveThemeReferences]])\n     *\n     * Relative URIs of reference resources are resolved to full URL using the document's base URL\n     * (see [[resolveUrls]]).\n     *\n     * Custom URIs (of theme itself and of resources referenced by theme) may be resolved with by\n     * providing [[UriResolver]] using [[ThemeLoadOptions.uriResolver]] option.\n     *\n     * @param theme [[Theme]] instance or theme URL to the theme.\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    static async load(\n        theme: string | Theme | FlatTheme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (typeof theme === \"string\") {\n            const uriResolver = options.uriResolver;\n            const themeUrl = uriResolver !== undefined ? uriResolver.resolveUri(theme) : theme;\n            const response = await fetch(themeUrl, { signal: options.signal });\n            if (!response.ok) {\n                throw new Error(`ThemeLoader#load: cannot load theme: ${response.statusText}`);\n            }\n            theme = (await response.json()) as Theme;\n            theme.url = resolveReferenceUri(getAppBaseUrl(), themeUrl);\n            theme = this.resolveUrls(theme, options);\n        } else if (theme.url === undefined) {\n            // assume that theme url is same as baseUrl\n            theme.url = getAppBaseUrl();\n            theme = this.resolveUrls(theme, options);\n        }\n\n        if (theme === null || theme === undefined) {\n            throw new Error(\"ThemeLoader#load: loaded resource is not valid JSON\");\n        }\n        theme = theme as Theme;\n\n        ThemeLoader.checkTechniqueSupport(theme);\n\n        const resolveDefinitions = getOptionValue<boolean>(options.resolveDefinitions, false);\n        theme = await ThemeLoader.resolveBaseThemes(theme, options);\n        if (resolveDefinitions) {\n            const contextLoader = new ContextLogger(\n                options.logger || console,\n                `when processing Theme ${theme.url}:`\n            );\n            ThemeLoader.resolveThemeReferences(theme, contextLoader);\n        }\n        return theme;\n    }\n\n    /**\n     * Checks if `theme` instance is completely loaded, meaning that `extends` property is resolved.\n     *\n     * @param theme\n     */\n    static isThemeLoaded(theme: Theme | FlatTheme): boolean {\n        return theme.extends === undefined;\n    }\n\n    /**\n     * @deprecated Please use `ThemeLoader.load`\n     *\n     * Loads a [[Theme]] from a remote resource, provided as a URL that points to a JSON-encoded\n     * theme.\n     *\n     * @param themeUrl The URL to the theme.\n     *\n     */\n    static async loadAsync(themeUrl: string): Promise<Theme> {\n        return ThemeLoader.load(themeUrl);\n    }\n\n    /**\n     * Resolves all [[Theme]]'s relatives URLs to full URL using the [[Theme]]'s URL\n     * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n     *\n     * This method mutates original `theme` instance.\n     *\n     * @param theme The [[Theme]] to resolve.\n     */\n    private static resolveUrls(theme: Theme | FlatTheme, options?: ThemeLoadOptions): Theme {\n        // Ensure that all resources referenced in theme by relative URIs are in fact relative to\n        // theme.\n        if (theme.url === undefined) {\n            return theme;\n        }\n\n        const childUrlResolver = composeUriResolvers(\n            options?.uriResolver,\n            new RelativeUriResolver(theme.url)\n        );\n\n        const resolveIncludes = options === undefined || !(options.resolveIncludeUris === false);\n        if (theme.extends && resolveIncludes) {\n            theme.extends = (Array.isArray(theme.extends) ? theme.extends : [theme.extends]).map(\n                baseTheme => {\n                    if (typeof baseTheme === \"string\") {\n                        return childUrlResolver.resolveUri(baseTheme);\n                    } else {\n                        if (baseTheme.url !== undefined) {\n                            return baseTheme;\n                        } else {\n                            baseTheme.url = theme.url;\n                            return this.resolveUrls(baseTheme, options);\n                        }\n                    }\n                }\n            );\n        }\n\n        if (!ThemeLoader.convertFlatTheme(theme)) {\n            return theme;\n        }\n\n        const resolveResources = options === undefined || !(options.resolveResourceUris === false);\n        if (resolveResources) {\n            ThemeLoader.resolveResources(theme, childUrlResolver);\n        }\n\n        return theme;\n    }\n    private static checkTechniqueSupport(theme: Theme) {\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                for (const style of theme.styles[styleSetName]) {\n                    switch ((style as any).technique) {\n                        // TODO: Re-enable this once \"dashed-line\" is deprecated.\n                        /* case \"dashed-line\":\n                            console.warn(\n                                `Using deprecated \"dashed-line\" technique.\n                                Use \"solid-line\" technique instead`\n                            ); */\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Expand all `ref` expressions in [[Theme]] basing on `definitions`.\n     *\n     * This method mutates original `theme` instance.\n     */\n    private static resolveThemeReferences(theme: Theme, contextLogger: IContextLogger): Theme {\n        if (theme.definitions !== undefined) {\n            contextLogger.pushAttr(\"definitions\");\n            /**\n             * First, try to resolve all internal references in definitions, so if we may save few\n             * CPU cycles if some definition is used many times in actual style sets.\n             */\n            for (const definitionName in theme.definitions) {\n                if (!theme.definitions.hasOwnProperty(definitionName)) {\n                    continue;\n                }\n\n                const def = theme.definitions[definitionName];\n                if (isActualSelectorDefinition(def)) {\n                    contextLogger.pushAttr(definitionName);\n                    const resolvedDef = ThemeLoader.resolveStyle(\n                        def,\n                        theme.definitions,\n                        contextLogger\n                    );\n                    contextLogger.pop();\n                    if (resolvedDef === undefined) {\n                        contextLogger.pushAttr(definitionName);\n                        contextLogger.warn(\"skipping invalid style in definition\");\n                        contextLogger.pop();\n                        delete theme.definitions[definitionName];\n                    } else {\n                        theme.definitions[definitionName] = resolvedDef;\n                    }\n                }\n            }\n            contextLogger.pop();\n        }\n        if (theme.styles !== undefined) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                contextLogger.pushAttr(\"styles\");\n                contextLogger.pushAttr(styleSetName);\n\n                theme.styles[styleSetName] = ThemeLoader.resolveStyleSet(\n                    theme.styles[styleSetName],\n                    theme.definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n                contextLogger.pop();\n            }\n        }\n        return theme;\n    }\n\n    /**\n     * Expand all `ref` in [[StyleSet]] basing on `definitions`.\n     */\n    private static resolveStyleSet(\n        styleSet: StyleSet,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleSet {\n        const result: ResolvedStyleSet = [];\n\n        for (let index = 0; index < styleSet.length; ++index) {\n            const currentStyle = styleSet[index];\n            contextLogger.pushIndex(index);\n            const resolvedStyle = ThemeLoader.resolveStyle(\n                currentStyle,\n                definitions,\n                contextLogger\n            );\n            if (resolvedStyle !== undefined) {\n                result.push(resolvedStyle);\n            } else {\n                contextLogger.warn(\"invalid style, ignored\");\n            }\n            contextLogger.pop();\n        }\n        return result;\n    }\n\n    /**\n     * Expand all `ref` in [[Style]] instance basing on `definitions`.\n     */\n    private static resolveStyle(\n        style: StyleDeclaration,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): ResolvedStyleDeclaration | undefined {\n        if (isJsonExprReference(style)) {\n            // expand and instantiate references to style definitions.\n\n            const def = definitions && definitions[style[1]];\n\n            if (!def) {\n                contextLogger.warn(`invalid reference '${style[1]}' - not found`);\n                return undefined;\n            }\n            if (!isActualSelectorDefinition(def)) {\n                contextLogger.warn(`invalid reference '${style[1]}' - expected style definition`);\n                return undefined;\n            }\n\n            // instantiate the style\n            style = cloneDeep(def);\n        }\n        style = style as ResolvedStyleDeclaration;\n\n        if (Array.isArray(style.when)) {\n            contextLogger.pushAttr(\"when\");\n            const resolvedWhen = this.resolveExpressionReferences(\n                style.when,\n                definitions,\n                contextLogger\n            );\n            contextLogger.pop();\n            if (resolvedWhen === undefined) {\n                return undefined;\n            }\n            style.when = resolvedWhen;\n        }\n\n        if (style.attr !== undefined) {\n            const attr = style.attr as any;\n\n            contextLogger.pushAttr(\"attr\");\n            for (const prop in attr) {\n                if (!attr.hasOwnProperty(prop)) {\n                    continue;\n                }\n\n                const value = attr[prop];\n\n                if (!Array.isArray(value)) {\n                    continue; // nothing to do\n                }\n\n                contextLogger.pushAttr(prop);\n                const resolvedValue = this.resolveExpressionReferences(\n                    value,\n                    definitions,\n                    contextLogger\n                );\n                contextLogger.pop();\n\n                if (resolvedValue !== undefined) {\n                    attr[prop] = resolvedValue;\n                } else {\n                    delete attr[prop];\n                }\n            }\n            contextLogger.pop();\n        }\n        return style;\n    }\n\n    /**\n     * Resolve `[ref, ...]` in expressions.\n     *\n     * Returns `undefined` some reference was invalid (missing or wrong type).\n     */\n    private static resolveExpressionReferences<T>(\n        value: T,\n        definitions: Definitions | undefined,\n        contextLogger: IContextLogger\n    ): T | undefined {\n        let failed = false;\n        function resolveInternal(node: any) {\n            if (isJsonExprReference(node)) {\n                const defName = node[1];\n                const def = definitions && definitions[defName];\n                if (def === undefined) {\n                    contextLogger.warn(`invalid reference '${defName}' - not found`);\n                    failed = true;\n                    return undefined;\n                }\n                if (isLiteralDefinition(def) || isJsonExpr(def)) {\n                    return def;\n                }\n                if (isBoxedDefinition(def)) {\n                    return def.value;\n                }\n                contextLogger.warn(`invalid reference '${defName}' - expected value definition`);\n                failed = true;\n                return undefined;\n            } else if (Array.isArray(node)) {\n                const result = [...node];\n                for (let i = 1; i < result.length; ++i) {\n                    result[i] = resolveInternal(result[i]);\n                }\n                return result;\n            } else {\n                return node;\n            }\n        }\n        const r = resolveInternal(value);\n        if (failed) {\n            return undefined;\n        }\n        return r;\n    }\n\n    /**\n     * Realize `extends` clause by merging `theme` with its base [[Theme]].\n     *\n     * @param theme [Theme] object\n     * @param options Optional, a [[ThemeLoadOptions]] objects containing any custom settings for\n     *    this load request.\n     */\n    private static async resolveBaseThemes(\n        theme: Theme,\n        options?: ThemeLoadOptions\n    ): Promise<Theme> {\n        options = options || {};\n        if (theme.extends === undefined) {\n            return theme;\n        }\n\n        const maxInheritanceDepth = getOptionValue(\n            options.maxInheritanceDepth,\n            DEFAULT_MAX_THEME_INTHERITANCE_DEPTH\n        );\n        if (maxInheritanceDepth <= 0) {\n            throw new Error(`maxInheritanceDepth reached when attempting to load base theme`);\n        }\n\n        const baseThemes = !Array.isArray(theme.extends) ? [theme.extends] : theme.extends;\n        delete theme.extends;\n        let baseThemesMerged: Theme = {};\n        for (const baseTheme of baseThemes) {\n            const actualBaseTheme = await ThemeLoader.load(baseTheme, {\n                ...options,\n                resolveDefinitions: false,\n                maxInheritanceDepth: maxInheritanceDepth - 1\n            });\n\n            baseThemesMerged = ThemeLoader.mergeThemes(actualBaseTheme, baseThemesMerged);\n        }\n        return ThemeLoader.mergeThemes(theme, baseThemesMerged);\n    }\n\n    private static mergeThemes(theme: Theme, baseTheme: Theme): Theme {\n        const definitions = { ...baseTheme.definitions, ...theme.definitions };\n\n        let styles!: Styles;\n\n        if (baseTheme.styles && theme.styles) {\n            const currentStyleSets = Object.keys(baseTheme.styles);\n            const incomingStyleSets = Object.keys(theme.styles);\n\n            styles = {};\n\n            currentStyleSets.forEach(styleSetName => {\n                const index = incomingStyleSets.indexOf(styleSetName);\n\n                if (index !== -1) {\n                    // merge the current and incoming styleset\n                    // and add the result to `styles`.\n                    styles[styleSetName] = [\n                        ...baseTheme.styles![styleSetName],\n                        ...theme.styles![styleSetName]\n                    ];\n                    // remove the styleset from the incoming list\n                    incomingStyleSets.splice(index, 1);\n                } else {\n                    // copy the existing style set to `styles`.\n                    styles[styleSetName] = baseTheme.styles![styleSetName];\n                }\n            });\n\n            // add the remaining stylesets to styles.\n            incomingStyleSets.forEach(p => {\n                styles[p] = theme.styles![p];\n            });\n        } else if (baseTheme.styles) {\n            styles = { ...baseTheme.styles };\n        } else if (theme.styles) {\n            styles = { ...theme.styles };\n        }\n        return { ...baseTheme, ...theme, definitions, styles };\n    }\n\n    private static convertFlatTheme(theme: Theme | FlatTheme): theme is Theme {\n        if (Array.isArray(theme.styles)) {\n            // Convert the flat theme to a standard theme.\n            const styles: Styles = {};\n            theme.styles.forEach(style => {\n                if (isJsonExpr(style)) {\n                    throw new Error(\"invalid usage of theme reference\");\n                }\n                const styleSetName = style.styleSet;\n                if (styleSetName === undefined) {\n                    throw new Error(\"missing reference to style set\");\n                }\n                if (!styles[styleSetName]) {\n                    styles[styleSetName] = [];\n                }\n                styles[styleSetName].push(style);\n            });\n            theme.styles = styles;\n        }\n        return true;\n    }\n\n    private static resolveResources(theme: Theme, childUrlResolver: UriResolver) {\n        if (theme.sky && theme.sky.type === \"cubemap\") {\n            for (let i = 0; i < SKY_CUBEMAP_FACE_COUNT; ++i) {\n                const faceUrl: string | undefined = (theme.sky as any)[SkyCubemapFaceId[i]];\n                if (faceUrl !== undefined) {\n                    (theme.sky as any)[SkyCubemapFaceId[i]] = childUrlResolver.resolveUri(faceUrl);\n                }\n            }\n        }\n        if (theme.images) {\n            for (const name of Object.keys(theme.images)) {\n                const image = theme.images[name];\n                image.url = childUrlResolver.resolveUri(image.url);\n                if (image.atlas !== undefined) {\n                    image.atlas = childUrlResolver.resolveUri(image.atlas);\n                }\n            }\n        }\n        if (theme.fontCatalogs) {\n            for (const font of theme.fontCatalogs) {\n                font.url = childUrlResolver.resolveUri(font.url);\n            }\n        }\n        if (theme.poiTables) {\n            for (const poiTable of theme.poiTables) {\n                poiTable.url = childUrlResolver.resolveUri(poiTable.url);\n            }\n        }\n\n        if (theme.styles) {\n            for (const styleSetName in theme.styles) {\n                if (!theme.styles.hasOwnProperty(styleSetName)) {\n                    continue;\n                }\n                const styleSet = theme.styles[styleSetName] as ResolvedStyleDeclaration[];\n                for (const style of styleSet) {\n                    if (!style.attr) {\n                        continue;\n                    }\n                    [\"map\", \"normalMap\", \"displacementMap\", \"roughnessMap\"].forEach(\n                        texturePropertyName => {\n                            const textureProperty = (style.attr! as any)[texturePropertyName];\n                            if (textureProperty && typeof textureProperty === \"string\") {\n                                (style.attr! as any)[\n                                    texturePropertyName\n                                ] = childUrlResolver.resolveUri(textureProperty);\n                            }\n                        }\n                    );\n                }\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { ViewRanges } from \"@here/harp-datasource-protocol/lib/ViewRanges\";\nimport {\n    GeoCoordinates,\n    Projection,\n    TileKey,\n    TileKeyUtils,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { ClipPlanesEvaluator } from \"./ClipPlanesEvaluator\";\nimport { DataSource } from \"./DataSource\";\nimport { ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { FrustumIntersection, TileKeyEntry } from \"./FrustumIntersection\";\nimport { TileGeometryManager } from \"./geometry/TileGeometryManager\";\nimport { Tile } from \"./Tile\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\n/**\n * Way the memory consumption of a tile is computed. Either in number of tiles, or in MegaBytes. If\n * it is in MB, an estimation is used.\n */\nexport enum ResourceComputationType {\n    EstimationInMb = 0,\n    NumberOfTiles\n}\n\n/**\n * Limited set of [[MapViewOptions]] used for [[VisibleTileSet]].\n */\nexport interface VisibleTileSetOptions {\n    /**\n     * The projection of the view.\n     */\n    projection: Projection;\n\n    /**\n     * User-defined camera clipping planes evaluator.\n     */\n    clipPlanesEvaluator: ClipPlanesEvaluator;\n\n    /**\n     * Limit of tiles that can be visible per datasource.\n     */\n    maxVisibleDataSourceTiles: number;\n\n    /**\n     * In addition to the simple frustum culling also do additional checks with [[MapTileCuller]].\n     */\n    extendedFrustumCulling: boolean;\n\n    /**\n     * Missing Typedoc\n     */\n    tileCacheSize: number;\n\n    /**\n     * Missing Typedoc\n     */\n    resourceComputationType: ResourceComputationType;\n\n    /**\n     * Number of levels to go up when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceUp: number;\n\n    /**\n     * Number of levels to go down when searching for fallback tiles.\n     */\n    quadTreeSearchDistanceDown: number;\n}\n\nconst MB_FACTOR = 1.0 / (1024.0 * 1024.0);\n\ntype TileCacheId = string;\n\n/**\n * Wrapper for LRU cache that encapsulates tiles caching for any [[DataSource]] used.\n *\n * Provides LRU based caching mechanism where each tile is identified by its tile key\n * (morton code) and data source name.\n * Tiles are kept in the cache based on last recently used policy, cached tile may be evicted\n * only when cache reaches full saturation and tile is no longer visible.\n * @note Currently cached entries (tiles) are identified by unique tile code (morton code) and\n * data source name, thus it is required that each [[DataSource]] used should have unique\n * name, but implementation could be improved to omit this limitation.\n */\nclass DataSourceCache {\n    /**\n     * Creates unique tile key for caching based on morton code, tile offset and its data source.\n     *\n     * @param mortonCode The tile morton code.\n     * @param offset The tile offset.\n     * @param dataSource The [[DataSource]] from which tile was loaded.\n     */\n    static getKey(mortonCode: number, offset: number, dataSource: DataSource): TileCacheId {\n        return `${dataSource.name}_${mortonCode}_${offset}`;\n    }\n\n    /**\n     * Create unique tile identifier for caching, based on tile object passed in.\n     *\n     * @param tile The tile for which key is generated.\n     */\n    static getKeyForTile(tile: Tile): TileCacheId {\n        return DataSourceCache.getKey(tile.tileKey.mortonCode(), tile.offset, tile.dataSource);\n    }\n\n    private readonly m_tileCache: LRUCache<TileCacheId, Tile>;\n    private readonly m_disposedTiles: Tile[] = [];\n    private m_resourceComputationType: ResourceComputationType;\n\n    constructor(\n        cacheSize: number,\n        rct: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache = new LRUCache<string, Tile>(cacheSize, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n        this.m_tileCache.evictionCallback = (_, tile) => {\n            if (tile.tileLoader !== undefined) {\n                // Cancel downloads as early as possible.\n                tile.tileLoader.cancel();\n            }\n            this.m_disposedTiles.push(tile);\n        };\n        this.m_tileCache.canEvict = (_, tile) => {\n            // Tiles can be evicted that weren't requested in the last frame.\n            return !tile.isVisible;\n        };\n    }\n\n    /**\n     * Get information how cached tiles affects cache space available.\n     *\n     * The way how cache evaluates the __resources size__ have a big influence on entire\n     * caching mechanism, if [[resourceComputationType]] is set to:\n     * [[ResourceComputationType.EstimationInMb]] then each tiles contributes to cache size\n     * differently depending on the memory consumed, on other side\n     * [[ResourceComputationType.NumberOfTiles]] says each tile occupies single slot in cache,\n     * so its real memory consumed does not matter affect caching behavior. Of course in\n     * the second scenario cache may grow significantly in terms of memory usage and thus it\n     * is out of control.\n     *\n     * @return [[ResourceComputationType]] enum that describes if resources are counted by\n     * space occupied in memory or just by number of them.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Get the cache capacity measured as number if megabytes or number of entries.\n     *\n     * The total cached tiles size determines cache saturation, if it reaches the capacity value\n     * then the resources becomes evicted (released) starting from the oldest (the latest used).\n     *\n     * @see size.\n     * @see resourceComputationType.\n     */\n    get capacity(): number {\n        return this.m_tileCache.capacity;\n    }\n\n    /**\n     * Get total cache size described as number of megabytes consumed or number of tiles stored.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     */\n    get size(): number {\n        return this.m_tileCache.size;\n    }\n\n    /**\n     * Set cache capacity and the algorithm used for cache size calculation.\n     *\n     * @see capacity.\n     * @see resourceComputationType.\n     * @param size The new capacity declared in megabytes or number of entires.\n     * @param rct The enum value that determines how size and capacity are evaluated.\n     */\n    setCapacity(size: number, rct: ResourceComputationType) {\n        this.m_resourceComputationType = rct;\n        this.m_tileCache.setCapacityAndMeasure(size, (tile: Tile) => {\n            if (this.m_resourceComputationType === ResourceComputationType.EstimationInMb) {\n                // Default is size in MB.\n                return tile.memoryUsage * MB_FACTOR;\n            } else {\n                return 1;\n            }\n        });\n    }\n\n    /**\n     * Get tile cached or __undefined__ if tile is not yet in cache.\n     *\n     * @param mortonCode En unique tile morton code.\n     * @param offset Tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     */\n    get(mortonCode: number, offset: number, dataSource: DataSource): Tile | undefined {\n        return this.m_tileCache.get(DataSourceCache.getKey(mortonCode, offset, dataSource));\n    }\n\n    /**\n     * Add new tile to the cache.\n     *\n     * @param mortonCode En unique tile code (morton code).\n     * @param offset The tile offset.\n     * @param dataSource A [[DataSource]] the tile comes from.\n     * @param tile The tile reference.\n     */\n    set(mortonCode: number, offset: number, dataSource: DataSource, tile: Tile) {\n        this.m_tileCache.set(DataSourceCache.getKey(mortonCode, offset, dataSource), tile);\n    }\n\n    /**\n     * Delete tile from cache.\n     *\n     * @note This method will not call eviction callback.\n     * @param tile The tile reference to be removed from cache.\n     */\n    delete(tile: Tile) {\n        const tileKey = DataSourceCache.getKeyForTile(tile);\n        this.deleteByKey(tileKey);\n    }\n\n    /**\n     * Delete tile using its unique identifier.\n     *\n     * @note Tile identifier its constructed using information about tile code (morton code) and its\n     * [[DataSource]].\n     * @note This is explicit removal thus eviction callback will not be processed.\n     * @see DataSourceCache.getKey.\n     * @param tileKey The unique tile identifier.\n     */\n    deleteByKey(tileKey: TileCacheId) {\n        this.m_tileCache.delete(tileKey);\n    }\n\n    /**\n     * Dispose all tiles releasing their internal data.\n     */\n    disposeTiles() {\n        this.m_disposedTiles.forEach(tile => {\n            tile.dispose();\n        });\n\n        this.m_disposedTiles.length = 0;\n    }\n\n    /**\n     * Shrink cache to its allowed capacity.\n     *\n     * This method should be called each time after operations are performed on the cache entries,\n     * in order to keep cache size consistent. It informs caching mechanism to invalidate memory\n     * consumed by its entries and check if cache is overgrown, is such case some tiles will be\n     * evicted.\n     */\n    shrinkToCapacity() {\n        this.m_tileCache.shrinkToCapacity();\n    }\n\n    /**\n     * Evict all cached tiles implicitly even without checking if still in use.\n     */\n    evictAll() {\n        this.m_tileCache.evictAll();\n    }\n\n    /**\n     * Evict selected tiles implicitly.\n     *\n     * @param selector The callback used to determine if tile should be evicted.\n     */\n    evictSelected(selector: (tile: Tile, key: TileCacheId) => boolean) {\n        this.m_tileCache.evictSelected(selector);\n    }\n\n    /**\n     * Call functor (callback) on each tile store in cache.\n     *\n     * Optionally you may specify from which [[DataSource]] tiles should be processed.\n     * This limits the tiles visited to a sub-set originating from single [[DataSource]].\n     * @param callback The function to be called for each visited tile.\n     * @param inDataSource The optional [[DataSource]] to which tiles should belong.\n     */\n    forEach(callback: (tile: Tile, key: TileCacheId) => void, inDataSource?: DataSource): void {\n        this.m_tileCache.forEach((entry: Tile, key: TileCacheId) => {\n            if (inDataSource === undefined || entry.dataSource === inDataSource) {\n                callback(entry, key);\n            }\n        });\n    }\n}\n\n/**\n * List of visible tiles for a [[DataSource]].\n */\nexport interface DataSourceTileList {\n    /**\n     * The datasource that was producing the tiles.\n     */\n    dataSource: DataSource;\n\n    /**\n     * The current [[MapView]] zoom level.\n     */\n    zoomLevel: number;\n\n    /**\n     * The storage level of the visibleTiles.\n     * Note: renderedTiles might contain tiles from different levels.\n     */\n    storageLevel: number;\n\n    /**\n     * True if all [[visibleTiles]] are loaded.\n     */\n    allVisibleTileLoaded: boolean;\n\n    /**\n     * The number of tiles which are still loading.\n     */\n    numTilesLoading: number;\n\n    /**\n     * List of tiles we want to render (i.e. the tiles computed from the zoom level and view\n     * frustum). However some might not be renderable yet (e.g. loading). See [[renderedTiles]] for\n     * the actual list of tiles that the user will see.\n     */\n    visibleTiles: Tile[];\n\n    /**\n     * Map of tiles that will be rendered, key is the the combination of tile key and offset, see\n     * [[getKeyForTileKeyAndOffset]]. This includes tiles that are not in the [[visibleTiles]]\n     * list but that are used as fallbacks b/c they are still in the cache.\n     */\n    renderedTiles: Map<number, Tile>;\n}\n\n/**\n * Manages visible [[Tile]]s for [[MapView]].\n *\n * Responsible for election of rendered tiles:\n *  - quad-tree traversal\n *  - frustum culling\n *  - sorting tiles by relevance (visible area) to prioritize load\n *  - limiting number of visible tiles\n *  - caching tiles\n *  - searching cache to replace visible but yet empty tiles with already loaded siblings in nearby\n *    zoom levels\n */\nexport class VisibleTileSet {\n    dataSourceTileList: DataSourceTileList[] = [];\n    allVisibleTilesLoaded: boolean = false;\n    options: VisibleTileSetOptions;\n\n    private readonly m_projectionMatrixOverride = new THREE.Matrix4();\n    private m_dataSourceCache: DataSourceCache;\n    private m_viewRange: ViewRanges = { near: 0.1, far: Infinity, minimum: 0.1, maximum: Infinity };\n\n    private m_resourceComputationType: ResourceComputationType =\n        ResourceComputationType.EstimationInMb;\n\n    constructor(\n        private readonly m_frustumIntersection: FrustumIntersection,\n        private readonly m_tileGeometryManager: TileGeometryManager,\n        options: VisibleTileSetOptions\n    ) {\n        this.options = options;\n        this.m_resourceComputationType =\n            options.resourceComputationType === undefined\n                ? ResourceComputationType.EstimationInMb\n                : options.resourceComputationType;\n        this.m_dataSourceCache = new DataSourceCache(\n            this.options.tileCacheSize,\n            this.m_resourceComputationType\n        );\n    }\n\n    /**\n     * Returns cache size.\n     */\n    getDataSourceCacheSize(): number {\n        return this.options.tileCacheSize;\n    }\n\n    /**\n     * Sets cache size.\n     *\n     * @param size cache size\n     * @param computationType Optional value specifying the way a [[Tile]]s cache usage is computed,\n     *      either based on size in MB (mega bytes) or in number of tiles. Defaults to\n     *      `ResourceComputationType.EstimationInMb`.\n     */\n    setDataSourceCacheSize(\n        size: number,\n        computationType: ResourceComputationType = ResourceComputationType.EstimationInMb\n    ): void {\n        this.options.tileCacheSize = size;\n        // This effectively invalidates DataSourceCache\n        this.resourceComputationType = computationType;\n    }\n\n    /**\n     * Retrieves maximum number of visible tiles.\n     */\n    getNumberOfVisibleTiles() {\n        return this.options.maxVisibleDataSourceTiles;\n    }\n\n    /**\n     * Sets maximum number of visible tiles.\n     *\n     * @param size size of visible tiles array\n     */\n    setNumberOfVisibleTiles(size: number) {\n        this.options.maxVisibleDataSourceTiles = size;\n    }\n\n    /**\n     * The way the cache usage is computed, either based on size in MB (mega bytes) or in number of\n     * tiles.\n     */\n    get resourceComputationType(): ResourceComputationType {\n        return this.m_resourceComputationType;\n    }\n\n    /**\n     * Sets the way tile cache is managing its elements.\n     *\n     * Cache may be either keeping number of elements stored or the memory consumed by them.\n     *\n     * @param computationType Type of algorith used in cache for checking full saturation,\n     * may be counting number of elements or memory consumed by them.\n     */\n    set resourceComputationType(computationType: ResourceComputationType) {\n        this.m_resourceComputationType = computationType;\n        this.m_dataSourceCache.setCapacity(this.options.tileCacheSize, computationType);\n    }\n\n    /**\n     * Evaluate frustum near/far clip planes and visibility ranges.\n     */\n    updateClipPlanes(maxElevation?: number, minElevation?: number): ViewRanges {\n        if (maxElevation !== undefined) {\n            this.options.clipPlanesEvaluator.maxElevation = maxElevation;\n        }\n        if (minElevation !== undefined) {\n            this.options.clipPlanesEvaluator.minElevation = minElevation;\n        }\n        this.m_viewRange = this.options.clipPlanesEvaluator.evaluateClipPlanes(\n            this.m_frustumIntersection.mapView\n        );\n        return this.m_viewRange;\n    }\n\n    /**\n     * Calculates a new set of visible tiles.\n     * @param storageLevel The camera storage level, see [[MapView.storageLevel]].\n     * @param zoomLevel The camera zoom level.\n     * @param dataSources The data sources for which the visible tiles will be calculated.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @returns view ranges and their status since last update (changed or not).\n     */\n    updateRenderList(\n        storageLevel: number,\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource?: ElevationRangeSource\n    ): { viewRanges: ViewRanges; viewRangesChanged: boolean } {\n        let allVisibleTilesLoaded: boolean = true;\n\n        const visibleTileKeysResult = this.getVisibleTileKeysForDataSources(\n            zoomLevel,\n            dataSources,\n            elevationRangeSource\n        );\n        this.dataSourceTileList = [];\n        for (const { dataSource, visibleTileKeys } of visibleTileKeysResult.tileKeys) {\n            // Sort by distance to camera, now the tiles that are further away are at the end\n            // of the list.\n            //\n            // Sort is unstable if distance is equal, which happens a lot when looking top-down.\n            // Unstable sorting makes label placement unstable at tile borders, leading to\n            // flickering.\n            visibleTileKeys.sort((a: TileKeyEntry, b: TileKeyEntry) => {\n                const distanceDiff = a.distance - b.distance;\n\n                // Take care or numerical precision issues\n                const minDiff = (a.distance + b.distance) * 0.000001;\n\n                return Math.abs(distanceDiff) < minDiff\n                    ? a.tileKey.mortonCode() - b.tileKey.mortonCode()\n                    : distanceDiff;\n            });\n\n            const actuallyVisibleTiles: Tile[] = [];\n            let allDataSourceTilesLoaded = true;\n            let numTilesLoading = 0;\n            // Create actual tiles only for the allowed number of visible tiles\n            const displayZoomLevel = dataSource.getDisplayZoomLevel(zoomLevel);\n            for (\n                let i = 0;\n                i < visibleTileKeys.length &&\n                actuallyVisibleTiles.length < this.options.maxVisibleDataSourceTiles;\n                i++\n            ) {\n                const tileEntry = visibleTileKeys[i];\n\n                const tile = this.getTile(dataSource, tileEntry.tileKey, tileEntry.offset);\n                if (tile === undefined) {\n                    continue;\n                }\n\n                tile.prepareTileInfo();\n\n                allDataSourceTilesLoaded = allDataSourceTilesLoaded && tile.allGeometryLoaded;\n                if (!tile.allGeometryLoaded) {\n                    numTilesLoading++;\n                } else {\n                    tile.numFramesVisible++;\n\n                    if (tile.frameNumVisible < 0) {\n                        // Store the fist frame the tile became visible.\n                        tile.frameNumVisible = dataSource.mapView.frameNumber;\n                    }\n                }\n                // Update the visible area of the tile. This is used for those tiles that are\n                // currently loaded and are waiting to be decoded to sort the jobs by area.\n                tile.visibleArea = tileEntry.area;\n                tile.minElevation = tileEntry.minElevation;\n                tile.maxElevation = tileEntry.maxElevation;\n\n                actuallyVisibleTiles.push(tile);\n            }\n\n            this.m_tileGeometryManager.updateTiles(actuallyVisibleTiles);\n\n            this.dataSourceTileList.push({\n                dataSource,\n                storageLevel,\n                zoomLevel: displayZoomLevel,\n                allVisibleTileLoaded: allDataSourceTilesLoaded,\n                numTilesLoading,\n                visibleTiles: actuallyVisibleTiles,\n                renderedTiles: new Map<number, Tile>()\n            });\n            allVisibleTilesLoaded = allVisibleTilesLoaded && allDataSourceTilesLoaded;\n        }\n\n        this.allVisibleTilesLoaded =\n            allVisibleTilesLoaded && visibleTileKeysResult.allBoundingBoxesFinal;\n\n        this.fillMissingTilesFromCache();\n\n        this.forEachCachedTile(tile => {\n            // Remove all tiles that are still being loaded, but are no longer visible. They have to\n            // be reloaded when they become visible again. Hopefully, they are still in the browser\n            // cache by then.\n            if (!tile.isVisible && tile.tileLoader !== undefined && !tile.tileLoader.isFinished) {\n                // The internal TileLoader is cancelled automatically when the Tile is disposed.\n                this.disposeTile(tile);\n            }\n        });\n\n        this.m_dataSourceCache.shrinkToCapacity();\n\n        let minElevation: number | undefined;\n        let maxElevation: number | undefined;\n        this.dataSourceTileList.forEach(renderListEntry => {\n            // Calculate min/max elevation from every data source tiles,\n            // data sources without elevationRangeSource will contribute to\n            // values with zero levels for both elevations.\n            const tiles = renderListEntry.renderedTiles;\n            tiles.forEach(tile => {\n                minElevation = MathUtils.min2(minElevation, tile.minElevation);\n                maxElevation = MathUtils.max2(\n                    maxElevation,\n                    tile.maxElevation + tile.maxGeometryHeight\n                );\n            });\n        });\n\n        if (minElevation === undefined) {\n            minElevation = 0;\n        }\n        if (maxElevation === undefined) {\n            maxElevation = 0;\n        }\n        // If clip planes evaluator depends on the tiles elevation re-calculate\n        // frustum planes and update the camera near/far plane distances.\n        let viewRangesChanged: boolean = false;\n        const oldViewRanges = this.m_viewRange;\n        const newViewRanges = this.updateClipPlanes(maxElevation, minElevation);\n        viewRangesChanged = viewRangesEqual(newViewRanges, oldViewRanges) === false;\n\n        return {\n            viewRanges: newViewRanges,\n            viewRangesChanged\n        };\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset, creating it if\n     * necessary.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if it was found or created, undefined otherwise.\n     */\n    getTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        const cacheOnly = false;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the cache.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found in cache, undefined otherwise.\n     */\n    getCachedTile(dataSource: DataSource, tileKey: TileKey, offset: number = 0): Tile | undefined {\n        assert(dataSource.cacheable);\n        const cacheOnly = true;\n        return this.getTileImpl(dataSource, tileKey, offset, cacheOnly);\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source, key and offset from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param tileKey The key identifying the tile.\n     * @param offset Tile offset.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTile(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        return dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(tileKey, offset)\n        );\n    }\n\n    /**\n     * Gets the tile corresponding to the given data source and location from the rendered tiles.\n     *\n     * @param dataSource The data source the tile belongs to.\n     * @param geoPoint The geolocation included within the tile.\n     * @return The tile if found among the rendered tiles, undefined otherwise.\n     */\n    getRenderedTileAtLocation(\n        dataSource: DataSource,\n        geoPoint: GeoCoordinates,\n        offset: number = 0\n    ): Tile | undefined {\n        const dataSourceVisibleTileList = this.dataSourceTileList.find(list => {\n            return list.dataSource === dataSource;\n        });\n\n        if (dataSourceVisibleTileList === undefined) {\n            return undefined;\n        }\n\n        const tilingScheme = dataSource.getTilingScheme();\n        const visibleLevel = dataSourceVisibleTileList.zoomLevel;\n        const visibleTileKey = tilingScheme.getTileKey(geoPoint, visibleLevel);\n\n        if (!visibleTileKey) {\n            return undefined;\n        }\n\n        let tile = dataSourceVisibleTileList.renderedTiles.get(\n            TileOffsetUtils.getKeyForTileKeyAndOffset(visibleTileKey, offset)\n        );\n\n        if (tile !== undefined) {\n            return tile;\n        }\n\n        const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n            dataSource,\n            visibleLevel\n        );\n\n        let parentTileKey = visibleTileKey;\n        for (let levelOffset = 1; levelOffset <= searchLevelsUp; ++levelOffset) {\n            parentTileKey = parentTileKey.parent();\n\n            tile = dataSourceVisibleTileList.renderedTiles.get(\n                TileOffsetUtils.getKeyForTileKeyAndOffset(parentTileKey, offset)\n            );\n            if (tile !== undefined) {\n                return tile;\n            }\n        }\n\n        const worldPoint = tilingScheme.projection.projectPoint(geoPoint);\n\n        for (let levelOffset = 1; levelOffset <= searchLevelsDown; ++levelOffset) {\n            const childLevel = visibleLevel + levelOffset;\n            const childTileKey = TileKeyUtils.worldCoordinatesToTileKey(\n                tilingScheme,\n                worldPoint,\n                childLevel\n            );\n            if (childTileKey) {\n                tile = dataSourceVisibleTileList.renderedTiles.get(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset)\n                );\n\n                if (tile !== undefined) {\n                    return tile;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * Removes all internal bookkeeping entries and cache related to specified datasource.\n     *\n     * Called by [[MapView]] when [[DataSource]] has been removed from [[MapView]].\n     */\n    removeDataSource(dataSource: DataSource) {\n        this.clearTileCache(dataSource);\n        this.dataSourceTileList = this.dataSourceTileList.filter(\n            tileList => tileList.dataSource !== dataSource\n        );\n    }\n\n    /**\n     * Clear the tile cache.\n     *\n     * Remove the [[Tile]] objects created by cacheable [[DataSource]]. If a [[DataSource]] name is\n     * provided, this method restricts the eviction the [[DataSource]] with the given name.\n     *\n     * @param dataSourceName The name of the [[DataSource]].\n     */\n    clearTileCache(dataSource?: DataSource) {\n        if (dataSource !== undefined) {\n            this.m_dataSourceCache.evictSelected((tile: Tile, _) => {\n                return tile.dataSource === dataSource;\n            });\n        } else {\n            this.m_dataSourceCache.evictAll();\n        }\n    }\n\n    /**\n     * Visit each tile in visible, rendered, and cached sets.\n     *\n     *  * Visible and temporarily rendered tiles will be marked for update and retained.\n     *  * Cached but not rendered/visible will be evicted.\n     *\n     * @param dataSource If passed, only the tiles from this [[DataSource]] instance are processed.\n     *     If `undefined`, tiles from all [[DataSource]]s are processed.\n     */\n    markTilesDirty(dataSource?: DataSource) {\n        if (dataSource === undefined) {\n            this.dataSourceTileList.forEach(renderListEntry => {\n                this.markDataSourceTilesDirty(renderListEntry);\n            });\n        } else {\n            const renderListEntry = this.dataSourceTileList.find(e => e.dataSource === dataSource);\n            if (renderListEntry === undefined) {\n                return;\n            }\n            this.markDataSourceTilesDirty(renderListEntry);\n        }\n    }\n\n    /**\n     * Dispose tiles that are marked for removal by [[LRUCache]] algorithm.\n     */\n    disposePendingTiles() {\n        this.m_dataSourceCache.disposeTiles();\n    }\n\n    /**\n     * Process callback function [[fun]] with each visible tile in set.\n     *\n     * @param fun The callback function to be called.\n     */\n    forEachVisibleTile(fun: (tile: Tile) => void): void {\n        for (const listEntry of this.dataSourceTileList) {\n            listEntry.renderedTiles.forEach(fun);\n        }\n    }\n\n    /**\n     * Process callback function [[fun]] with each tile in the cache.\n     *\n     * Optional [[dataSource]] parameter limits processing to the tiles that belongs to\n     * DataSource passed in.\n     *\n     * @param fun The callback function to be called.\n     * @param dataSource The optional DataSource reference for tiles selection.\n     */\n    forEachCachedTile(fun: (tile: Tile) => void, dataSource?: DataSource): void {\n        this.m_dataSourceCache.forEach((tile, _) => fun(tile), dataSource);\n    }\n\n    /**\n     * Dispose a `Tile` from cache, 'dispose()' is also called on the tile to free its resources.\n     */\n    disposeTile(tile: Tile): void {\n        // TODO: Consider using evict here!\n        this.m_dataSourceCache.delete(tile);\n        tile.dispose();\n    }\n\n    private getCacheSearchLevels(\n        dataSource: DataSource,\n        visibleLevel: number\n    ): { searchLevelsUp: number; searchLevelsDown: number } {\n        const searchLevelsUp = Math.min(\n            this.options.quadTreeSearchDistanceUp,\n            Math.max(0, visibleLevel - dataSource.minZoomLevel)\n        );\n        const searchLevelsDown = Math.min(\n            this.options.quadTreeSearchDistanceDown,\n            Math.max(0, dataSource.maxZoomLevel - visibleLevel)\n        );\n\n        return { searchLevelsUp, searchLevelsDown };\n    }\n\n    /**\n     * Search cache to replace visible but yet empty tiles with already loaded siblings in nearby\n     * zoom levels.\n     *\n     * Useful, when zooming in/out and when \"newly elected\" tiles are not yet loaded. Prevents\n     * flickering by rendering already loaded tiles from upper/higher zoom levels.\n     */\n    private fillMissingTilesFromCache() {\n        this.dataSourceTileList.forEach(renderListEntry => {\n            const dataSource = renderListEntry.dataSource;\n            const displayZoomLevel = renderListEntry.zoomLevel;\n            const renderedTiles = renderListEntry.renderedTiles;\n\n            // Direction in quad tree to search: up -> shallower levels, down -> deeper levels.\n            enum SearchDirection {\n                NONE,\n                UP,\n                DOWN,\n                BOTH\n            }\n            let defaultSearchDirection = SearchDirection.NONE;\n\n            const { searchLevelsUp, searchLevelsDown } = this.getCacheSearchLevels(\n                dataSource,\n                displayZoomLevel\n            );\n\n            defaultSearchDirection =\n                searchLevelsDown > 0 && searchLevelsUp > 0\n                    ? SearchDirection.BOTH\n                    : searchLevelsDown > 0\n                    ? SearchDirection.DOWN\n                    : searchLevelsUp > 0\n                    ? SearchDirection.UP\n                    : SearchDirection.NONE;\n\n            const incompleteTiles: Map<number, SearchDirection> = new Map();\n\n            renderListEntry.visibleTiles.forEach(tile => {\n                const tileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    tile.tileKey,\n                    tile.offset\n                );\n                tile.levelOffset = 0;\n                if (tile.hasGeometry || defaultSearchDirection === SearchDirection.NONE) {\n                    renderedTiles.set(tileCode, tile);\n                } else {\n                    // if dataSource supports cache and it was existing before this render\n                    // then enable searching for loaded tiles in cache\n                    incompleteTiles.set(tileCode, defaultSearchDirection);\n                }\n            });\n\n            if (incompleteTiles.size === 0) {\n                // short circuit, nothing to be done\n                return;\n            }\n\n            // Minor optimization for the fallback search, only check parent tiles once, otherwise\n            // the recursive algorithm checks all parent tiles multiple times, the key is the code\n            // of the tile that is checked and the value is whether a parent was found or not.\n            const checkedTiles = new Map<number, boolean>();\n            // Iterate over incomplete (not loaded tiles) and find their parents or children that\n            // are in cache that can be rendered temporarily until tile is loaded. Note, we favour\n            // falling back to parent tiles rather than children.\n            for (const [tileKeyCode, searchDirection] of incompleteTiles) {\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.UP\n                ) {\n                    if (\n                        this.findUp(\n                            tileKeyCode,\n                            displayZoomLevel,\n                            renderedTiles,\n                            checkedTiles,\n                            dataSource\n                        )\n                    ) {\n                        // Continue to next entry so we don't search down.\n                        continue;\n                    }\n                }\n\n                if (\n                    searchDirection === SearchDirection.BOTH ||\n                    searchDirection === SearchDirection.DOWN\n                ) {\n                    this.findDown(tileKeyCode, displayZoomLevel, renderedTiles, dataSource);\n                }\n            }\n        });\n    }\n\n    private findDown(\n        tileKeyCode: number,\n        displayZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        dataSource: DataSource\n    ) {\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(\n            tileKeyCode\n        );\n        const tileKey = TileKey.fromMortonCode(mortonCode);\n\n        const tilingScheme = dataSource.getTilingScheme();\n        for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n            const childTileCode = TileOffsetUtils.getKeyForTileKeyAndOffset(childTileKey, offset);\n            const childTile = this.m_dataSourceCache.get(\n                childTileKey.mortonCode(),\n                offset,\n                dataSource\n            );\n\n            const nextLevelDiff = Math.abs(childTileKey.level - displayZoomLevel);\n            if (childTile !== undefined && childTile.hasGeometry) {\n                // childTile has geometry, so can be reused as fallback\n                renderedTiles.set(childTileCode, childTile);\n                childTile.levelOffset = nextLevelDiff;\n                continue;\n            }\n\n            // Recurse down until the max distance is reached.\n            if (nextLevelDiff < this.options.quadTreeSearchDistanceDown) {\n                this.findDown(childTileCode, displayZoomLevel, renderedTiles, dataSource);\n            }\n        }\n    }\n\n    /**\n     * Returns true if a tile was found in the cache which is a parent\n     * @param tileKeyCode Morton code of the current tile that should be searched for.\n     * @param displayZoomLevel The current zoom level of tiles that are to be displayed.\n     * @param renderedTiles The list of tiles that are shown to the user.\n     * @param checkedTiles Used to map a given code to a boolean which tells us if an ancestor is\n     * displayed or not.\n     * @param dataSource The provider of tiles.\n     * @returns Whether a parent tile exists.\n     */\n    private findUp(\n        tileKeyCode: number,\n        displayZoomLevel: number,\n        renderedTiles: Map<number, Tile>,\n        checkedTiles: Map<number, boolean>,\n        dataSource: DataSource\n    ): boolean {\n        const parentCode = TileOffsetUtils.getParentKeyFromKey(tileKeyCode);\n        // Check if another sibling has already added the parent.\n        if (renderedTiles.get(parentCode) !== undefined) {\n            return true;\n        }\n        const exists = checkedTiles.get(parentCode)!;\n        if (exists !== undefined) {\n            return exists;\n        }\n\n        const { offset, mortonCode } = TileOffsetUtils.extractOffsetAndMortonKeyFromKey(parentCode);\n        const parentTile = this.m_dataSourceCache.get(mortonCode, offset, dataSource);\n        const parentTileKey = parentTile ? parentTile.tileKey : TileKey.fromMortonCode(mortonCode);\n        const nextLevelDiff = Math.abs(displayZoomLevel - parentTileKey.level);\n        if (parentTile !== undefined && parentTile.hasGeometry) {\n            checkedTiles.set(parentCode, true);\n            // parentTile has geometry, so can be reused as fallback\n            renderedTiles.set(parentCode, parentTile);\n\n            // We want to have parent tiles as -ve, hence the minus.\n            parentTile.levelOffset = -nextLevelDiff;\n\n            return true;\n        } else {\n            checkedTiles.set(parentCode, false);\n        }\n\n        // Recurse up until the max distance is reached or we go to the parent of all parents.\n        if (nextLevelDiff < this.options.quadTreeSearchDistanceUp && parentTileKey.level !== 0) {\n            const foundUp = this.findUp(\n                parentCode,\n                displayZoomLevel,\n                renderedTiles,\n                checkedTiles,\n                dataSource\n            );\n            // If there was a tile upstream found, then add it to the list, so we can\n            // early skip checkedTiles.\n            checkedTiles.set(parentCode, foundUp);\n            if (foundUp) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private getTileImpl(\n        dataSource: DataSource,\n        tileKey: TileKey,\n        offset: number,\n        cacheOnly: boolean\n    ): Tile | undefined {\n        function updateTile(tileToUpdate?: Tile) {\n            if (tileToUpdate === undefined) {\n                return;\n            }\n            // Keep the tile from being removed from the cache.\n            tileToUpdate.frameNumLastRequested = dataSource.mapView.frameNumber;\n        }\n\n        if (!dataSource.cacheable && !cacheOnly) {\n            const resultTile = dataSource.getTile(tileKey);\n            updateTile(resultTile);\n            return resultTile;\n        }\n\n        const tileCache = this.m_dataSourceCache;\n        let tile = tileCache.get(tileKey.mortonCode(), offset, dataSource);\n\n        if (tile !== undefined && tile.offset === offset) {\n            updateTile(tile);\n            return tile;\n        }\n\n        if (cacheOnly) {\n            return undefined;\n        }\n\n        tile = dataSource.getTile(tileKey);\n        // TODO: Update all tile information including area, min/max elevation from TileKeyEntry\n        if (tile !== undefined) {\n            tile.offset = offset;\n            updateTile(tile);\n            tileCache.set(tileKey.mortonCode(), offset, dataSource, tile);\n            this.m_tileGeometryManager.initTile(tile);\n        }\n        return tile;\n    }\n\n    private markDataSourceTilesDirty(renderListEntry: DataSourceTileList) {\n        const dataSourceCache = this.m_dataSourceCache;\n        const retainedTiles: Set<TileCacheId> = new Set();\n\n        function markTileDirty(tile: Tile, tileGeometryManager: TileGeometryManager) {\n            const tileKey = DataSourceCache.getKeyForTile(tile);\n            if (!retainedTiles.has(tileKey)) {\n                retainedTiles.add(tileKey);\n                if (tile.tileGeometryLoader !== undefined) {\n                    tile.tileGeometryLoader.reset();\n                }\n\n                // Prevent label rendering issues when the style set is changing. Prevent Text\n                // element rendering that depends on cleaned font catalog data.\n                tile.clearTextElements();\n\n                tile.load();\n            }\n        }\n\n        renderListEntry.visibleTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n        renderListEntry.renderedTiles.forEach(tile => {\n            markTileDirty(tile, this.m_tileGeometryManager);\n        });\n\n        dataSourceCache.forEach((tile, key) => {\n            if (!retainedTiles.has(key)) {\n                dataSourceCache.deleteByKey(key);\n                tile.dispose();\n            }\n        }, renderListEntry.dataSource);\n    }\n\n    // Computes the visible tile keys for each supplied data source.\n    private getVisibleTileKeysForDataSources(\n        zoomLevel: number,\n        dataSources: DataSource[],\n        elevationRangeSource: ElevationRangeSource | undefined\n    ): {\n        tileKeys: Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>;\n        allBoundingBoxesFinal: boolean;\n    } {\n        const tileKeys = Array<{ dataSource: DataSource; visibleTileKeys: TileKeyEntry[] }>();\n        let allBoundingBoxesFinal: boolean = true;\n\n        if (dataSources.length === 0) {\n            return { tileKeys, allBoundingBoxesFinal };\n        }\n\n        const dataSourceBuckets = new Map<TilingScheme, DataSource[]>();\n        dataSources.forEach(dataSource => {\n            const tilingScheme = dataSource.getTilingScheme();\n            const bucket = dataSourceBuckets.get(tilingScheme);\n            if (bucket === undefined) {\n                dataSourceBuckets.set(tilingScheme, [dataSource]);\n            } else {\n                bucket.push(dataSource);\n            }\n        });\n\n        // If elevation is to be taken into account create extended frustum:\n        // (near ~0, far: maxVisibilityRange) that allows to consider tiles that\n        // are far below ground plane and high enough to intersect the frustum.\n        if (elevationRangeSource !== undefined) {\n            const fp = MapViewUtils.getCameraFrustumPlanes(this.m_frustumIntersection.camera);\n            fp.near = this.m_viewRange.minimum;\n            fp.far = this.m_viewRange.maximum;\n            this.m_projectionMatrixOverride.makePerspective(\n                fp.left,\n                fp.right,\n                fp.bottom,\n                fp.top,\n                fp.near,\n                fp.far\n            );\n            this.m_frustumIntersection.updateFrustum(this.m_projectionMatrixOverride);\n        } else {\n            this.m_frustumIntersection.updateFrustum();\n        }\n\n        // For each bucket of data sources with same tiling scheme, calculate frustum intersection\n        // once using the maximum display level.\n        for (const [tilingScheme, bucket] of dataSourceBuckets) {\n            const zoomLevels = bucket.map(dataSource => dataSource.getDisplayZoomLevel(zoomLevel));\n            const result = this.m_frustumIntersection.compute(\n                tilingScheme,\n                elevationRangeSource,\n                zoomLevels,\n                bucket\n            );\n\n            allBoundingBoxesFinal = allBoundingBoxesFinal && result.calculationFinal;\n\n            for (const dataSource of bucket) {\n                // For each data source check what tiles from the intersection should be rendered\n                // at this zoom level.\n                const visibleTileKeys: TileKeyEntry[] = [];\n                const displayZoomLevel = dataSource.getDisplayZoomLevel(zoomLevel);\n                for (const tileKeyEntry of result.tileKeyEntries.get(displayZoomLevel)!.values()) {\n                    if (dataSource.canGetTile(displayZoomLevel, tileKeyEntry.tileKey)) {\n                        visibleTileKeys.push(tileKeyEntry);\n                    }\n                }\n                tileKeys.push({ dataSource, visibleTileKeys });\n            }\n        }\n\n        return { tileKeys, allBoundingBoxesFinal };\n    }\n}\n\nfunction viewRangesEqual(a: ViewRanges, b: ViewRanges) {\n    return (\n        a.far === b.far && a.maximum === b.maximum && a.minimum === b.minimum && a.near === b.near\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ITiler } from \"@here/harp-datasource-protocol\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\nimport { WorkerBasedTiler } from \"./WorkerBasedTiler\";\n\n/**\n * Default concurrent tiler helper.\n *\n * A convenient singleton that maintains a separate [[ConcurrentWorkerSet]] for each bundle\n * requested. Provides easy access to [[WorkerBasedTiler]]s for data sources.\n */\nexport class ConcurrentTilerFacade {\n    /**\n     * The URL containing a script to fall back (default) to when looking for worker sets\n     * and tilers.\n     */\n    static defaultScriptUrl: string = \"./decoder.bundle.js\";\n\n    /**\n     * The default number of workers.\n     */\n    static defaultWorkerCount: number = 1;\n\n    /**\n     * Returns a [[WorkerBasedTiler]] instance.\n     *\n     * @param tilerServiceType The name of the tiler service type.\n     * @param scriptUrl The optional URL with the workers' script.\n     * @param workerCount The number of web workers to use.\n     */\n    static getTiler(tilerServiceType: string, scriptUrl?: string, workerCount?: number): ITiler {\n        const workerSet = this.getWorkerSet(scriptUrl, workerCount);\n\n        return new WorkerBasedTiler(workerSet, tilerServiceType);\n    }\n\n    /**\n     * Returns a [[ConcurrentWorkerSet]] instance based on the script URL specified.\n     *\n     * @param scriptUrl The optional URL with the workers' script. If not specified,\n     * the function uses [[defaultScriptUrl]] instead.\n     * @param workerCount The number of web workers to use.\n     */\n    static getWorkerSet(scriptUrl?: string, workerCount?: number): ConcurrentWorkerSet {\n        if (scriptUrl === undefined) {\n            scriptUrl = this.defaultScriptUrl;\n        }\n\n        let workerSet = this.workerSets[scriptUrl];\n        if (workerSet === undefined) {\n            workerSet = new ConcurrentWorkerSet({\n                scriptUrl,\n                workerCount: workerCount === undefined ? this.defaultWorkerCount : workerCount\n            });\n            this.workerSets[scriptUrl] = workerSet;\n        }\n        return workerSet;\n    }\n\n    /**\n     * Destroys a [[ConcurrentWorkerSet]] instance.\n     *\n     * @param scriptUrl The worker script URL that was used to create the [[ConcurrentWorkerSet]].\n     */\n    static destroyWorkerSet(scriptUrl: string) {\n        const workerSet = this.workerSets[scriptUrl];\n        if (workerSet !== undefined) {\n            workerSet.destroy();\n            delete this.workerSets[scriptUrl];\n        }\n    }\n\n    /**\n     * Destroys all managed [[ConcurrentWorkerSet]]s.\n     */\n    static destroy() {\n        Object.keys(this.workerSets).forEach(name => {\n            this.workerSets[name].destroy();\n        });\n        this.workerSets = {};\n    }\n\n    /**\n     * The [[ConcurrentWorkerSet]] instances which are stored by the script URL.\n     */\n    private static workerSets: {\n        [bundleUrl: string]: ConcurrentWorkerSet;\n    } = {};\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    GeoJson,\n    ITiler,\n    WorkerServiceProtocol,\n    WorkerTilerProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { ConcurrentWorkerSet } from \"./ConcurrentWorkerSet\";\n\n/**\n * Identifier of next tiler worker-service. Used to ensure uniqueness of service ids of tilers\n * dedicated to different datasources.\n */\nlet nextUniqueServiceId = 0;\n\n/**\n * Tiler based on [[ConcurrentWorkerSet]].\n *\n * Tiles payloads using workers running in separate contexts (also known as `WebWorkers`):\n * - connection establishment,\n * - sends tile requests,\n * - configuration.\n */\nexport class WorkerBasedTiler implements ITiler {\n    private serviceId: string;\n    private m_serviceCreated: boolean = false;\n\n    /**\n     * Creates a new `WorkerBasedTiler`.\n     *\n     * @param workerSet [[ConcurrentWorkerSet]] this tiler will live in.\n     * @param tilerServiceType Service type identifier.\n     */\n    constructor(\n        private readonly workerSet: ConcurrentWorkerSet,\n        private readonly tilerServiceType: string\n    ) {\n        this.workerSet.addReference();\n        this.serviceId = `${this.tilerServiceType}-${nextUniqueServiceId++}`;\n    }\n\n    /**\n     * Dispose of dedicated tiler services in workers and remove reference to underlying\n     * [[ConcurrentWorkerSet]].\n     */\n    dispose() {\n        if (this.m_serviceCreated) {\n            this.workerSet\n                .broadcastRequest(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID, {\n                    type: WorkerServiceProtocol.Requests.DestroyService,\n                    targetServiceId: this.serviceId\n                })\n                .catch(() => {\n                    /* Ignoring these errors as underlying workers possibly do not exist anymore. */\n                });\n        }\n\n        this.workerSet.removeReference();\n    }\n\n    /**\n     * Connects to [[WorkerServiceManager]]s in underlying [[ConcurrentWorkerSet]] and creates\n     * dedicated [[TilerService]]s in all workers to serve tiling requests.\n     */\n    async connect(): Promise<void> {\n        await this.workerSet.connect(WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID);\n        if (!this.m_serviceCreated) {\n            await this.workerSet.broadcastRequest(\n                WorkerServiceProtocol.WORKER_SERVICE_MANAGER_SERVICE_ID,\n                {\n                    type: WorkerServiceProtocol.Requests.CreateService,\n                    targetServiceType: this.tilerServiceType,\n                    targetServiceId: this.serviceId\n                }\n            );\n\n            this.m_serviceCreated = true;\n        }\n    }\n\n    /**\n     * Register index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    registerIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.RegisterIndexRequest = {\n            type: WorkerTilerProtocol.Requests.RegisterIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Update index in the tiler. Indexes registered in the tiler can be later used to retrieved\n     * tiled payloads using `getTile`.\n     *\n     * @param indexId Index identifier.\n     * @param input Url to the index payload, or direct GeoJSON.\n     */\n    updateIndex(indexId: string, input: URL | GeoJson): Promise<void> {\n        const message: WorkerTilerProtocol.UpdateIndexRequest = {\n            type: WorkerTilerProtocol.Requests.UpdateIndex,\n            id: indexId,\n            input: input instanceof URL ? input.href : (input as GeoJson)\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n\n    /**\n     * Retrieves a tile for a previously registered index.\n     *\n     * @param indexId Index identifier.\n     * @param tileKey The [[TileKey]] that identifies the tile.\n     */\n    getTile(indexId: string, tileKey: TileKey): Promise<{}> {\n        const tileKeyCode = tileKey.mortonCode();\n        const message: WorkerTilerProtocol.TileRequest = {\n            type: WorkerTilerProtocol.Requests.TileRequest,\n            index: indexId,\n            tileKey: tileKeyCode\n        };\n        return this.workerSet.invokeRequest(this.serviceId, message);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"@here/harp-geoutils\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\nimport { CopyrightProvider } from \"./CopyrightProvider\";\n\ndeclare const require: any;\n\n// tslint:disable-next-line:no-var-requires\nconst RBush = require(\"rbush\");\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface AreaCopyrightInfo {\n    /**\n     * Minimum zoom level for the specified copyright label.\n     */\n    minLevel?: number;\n\n    /**\n     * Maximum zoom level for the specified copyright label.\n     */\n    maxLevel?: number;\n\n    /**\n     * Copyright text to display after the copyright symbol on the map.\n     */\n    label: string;\n\n    /**\n     * Verbose copyright text of the label to display by mouse over label or info menu entry.\n     */\n    alt?: string;\n\n    /**\n     * The bounding boxes define areas where specific copyrights are valid. A bounding box is\n     * defined by bottom (latitude), left (longitude) and top (latitude), right (longitude).\n     *\n     * The default copyright has no boxes element and covers all other areas.\n     */\n    boxes?: Array<[number, number, number, number]>;\n}\n\n/**\n * Schema of [Map Tile API copyright\n * endpoint](https://developer.here.com/documentation/map-tile/topics/resource-copyright.html) JSON\n * response.\n */\nexport interface CopyrightCoverageResponse {\n    [scheme: string]: AreaCopyrightInfo[];\n}\n\n/**\n * Base class to provide copyrights based on copyright coverage information, defined by geographical\n * bounding boxes and relevant zoom level ranges.\n */\nexport abstract class CopyrightCoverageProvider implements CopyrightProvider {\n    /** Logger instance. */\n    protected readonly logger = LoggerManager.instance.create(\"CopyrightCoverageProvider\");\n\n    private m_cachedTreePromise: Promise<any> | undefined;\n\n    /** Asynchronously retrieves copyright coverage data. */\n    abstract async getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]>;\n\n    /** @inheritdoc */\n    getTree(): Promise<any> {\n        if (this.m_cachedTreePromise !== undefined) {\n            return this.m_cachedTreePromise;\n        }\n\n        this.m_cachedTreePromise = this.getCopyrightCoverageData()\n            .then(coverageInfo => this.initRBush(coverageInfo))\n            .catch(error => {\n                this.logger.error(error);\n                return new RBush();\n            });\n\n        return this.m_cachedTreePromise;\n    }\n\n    /** @inheritdoc */\n    async getCopyrights(geoBox: GeoBox, level: number): Promise<CopyrightInfo[]> {\n        const tree = await this.getTree();\n\n        const result: CopyrightInfo[] = [];\n\n        const matchingEntries: AreaCopyrightInfo[] = tree.search({\n            minX: geoBox.west,\n            minY: geoBox.south,\n            maxX: geoBox.east,\n            maxY: geoBox.north\n        });\n\n        for (const entry of matchingEntries) {\n            const minLevel = getOptionValue(entry.minLevel, 0);\n            const maxLevel = getOptionValue(entry.maxLevel, Infinity);\n\n            if (level >= minLevel && level <= maxLevel) {\n                if (result.find(item => item.id === entry.label) === undefined) {\n                    result.push({ id: entry.label });\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Initializes RBush.\n     *\n     * @param entries Entries for tree.\n     * @returns RBush instance.\n     */\n    initRBush(entries: AreaCopyrightInfo[]): any {\n        const tree = new RBush();\n\n        if (!entries) {\n            this.logger.warn(\"No copyright coverage data provided\");\n            return tree;\n        }\n\n        for (const entry of entries) {\n            const { minLevel, maxLevel, label, alt } = entry;\n\n            if (!entry.boxes) {\n                tree.insert({\n                    minX: -180,\n                    minY: -90,\n                    maxX: 180,\n                    maxY: 180,\n                    minLevel,\n                    maxLevel,\n                    label,\n                    alt\n                });\n            } else {\n                for (const box of entry.boxes) {\n                    const [minY, minX, maxY, maxX] = box;\n                    tree.insert({\n                        minX,\n                        minY,\n                        maxX,\n                        maxY,\n                        minLevel,\n                        maxLevel,\n                        label,\n                        alt\n                    });\n                }\n            }\n        }\n\n        return tree;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./src/TransferManager\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType } from \"@here/harp-datasource-protocol\";\nimport { reconstructLineWidth } from \"@here/harp-lines\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"TileGeometry\");\n\n/**\n * Interface to access lines. Allows read access for some important attributes.\n */\nexport interface ILineAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Get the width. May have to be reconstructed from triangulated line mesh.\n     */\n    width: number | undefined;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isLineAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isLineAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    /**\n     * Get vertices from the object.\n     */\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `ILineAccessor`.\n *\n * @param arg `true` if `arg` is `ILineAccessor`.\n */\nexport function isLineAccessor(arg: any): arg is ILineAccessor {\n    /**\n     * Get vertices from the object.\n     *\n     * @param mode Specifies which part of the vertices should be returned.\n     */\n\n    return typeof arg.isLineAccessor === \"function\" && arg.isLineAccessor() === true;\n}\n\n/**\n * Accessor for unspecified 3D objects, like landmarks.\n */\nexport interface IObject3dAccessor {\n    /**\n     * Hint for the original type of geometry.\n     */\n    geometryType: GeometryType;\n\n    /**\n     * Get the color from materials.\n     */\n    color: THREE.Color | undefined | Array<THREE.Color | undefined>;\n\n    /**\n     * Render order.\n     */\n    renderOrder: number;\n\n    /**\n     * Helper for function `isObject3dAccessor`.\n     *\n     * @returns `true` if it is a line accessor.\n     */\n    isObject3dAccessor(): boolean;\n\n    /**\n     * Clear the object from the mesh.\n     */\n    clear(): void;\n\n    getVertices(): Float32Array | undefined;\n}\n\n/**\n * Helper function to check if an accessor is of type `IObject3dAccessor`.\n *\n * @param arg `true` if `arg` is `IObject3dAccessor`.\n */\nexport function isObject3dAccessor(arg: any): arg is IObject3dAccessor {\n    return typeof arg.isObject3dAccessor === \"function\" && arg.isObject3dAccessor() === true;\n}\n\n/**\n * Basic interface for geometry accessors.\n */\nexport interface IGeometryAccessor {\n    /**\n     * Get the number of primitives (vertices of triangles).\n     *\n     * @returns Number of primitives.\n     */\n    getCount(): number;\n\n    /**\n     * Set range of primitives in this object related to one or more buffers.\n     *\n     * @param start Start index in buffers.\n     * @param end End index in buffers (+1).\n     */\n    setRange(start: number, end: number): void;\n}\n\n/**\n * Geometry accessor for both indexed and nonindexed `BufferedGeometry`.\n */\nexport abstract class BufferedGeometryAccessorBase implements IGeometryAccessor {\n    protected start: number = -1;\n    protected end: number = -1;\n    protected startCapSize: number = 0;\n    protected endCapSize: number = 0;\n    protected position: THREE.BufferAttribute;\n    protected itemSize: number;\n\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        assert(!!object);\n\n        if (bufferGeometry.type !== \"BufferGeometry\") {\n            logger.error(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong \" + \"type\"\n            );\n        }\n        assert(\n            bufferGeometry.type === \"BufferGeometry\",\n            \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has wrong type\"\n        );\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        this.position = this.bufferGeometry.getAttribute(\"position\") as THREE.BufferAttribute;\n        this.itemSize = this.position.itemSize;\n\n        if (!this.position) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry has no position \" +\n                    \"attribute\"\n            );\n        }\n\n        if (this.position.array.constructor !== Float32Array) {\n            logger.warn(\n                \"BufferedGeometryAccessor#constructor: BufferGeometry.position: \" +\n                    \"unsupported ArrayBuffer\"\n            );\n        }\n    }\n\n    /**\n     * Get the number of accessible geometries in this buffer.\n     *\n     * @returns Number of primitives in this geometry.\n     */\n    getCount(): number {\n        return this.position.count;\n    }\n\n    /**\n     * Get `renderOrder` of object.\n     *\n     * @returns `renderOrder` of the object.\n     */\n    get renderOrder(): number {\n        return this.object.renderOrder;\n    }\n\n    setRange(start: number, end: number, startCapSize: number = 0, endCapSize: number = 0) {\n        assert(start >= 0);\n        assert(end >= 0);\n        assert(start <= end);\n        this.start = start;\n        this.end = end;\n        this.startCapSize = startCapSize;\n        this.endCapSize = endCapSize;\n    }\n\n    /**\n     * Get one or more colors from materials.\n     */\n    get color(): THREE.Color | undefined | Array<THREE.Color | undefined> {\n        /**\n         * TODO: Get color(s) from vertex colors\n         */\n        const getColor = (material: THREE.Material) => {\n            const meshMaterial = material as THREE.MeshBasicMaterial;\n            if (\n                meshMaterial.type === \"MeshBasicMaterial\" ||\n                meshMaterial.type === \"MeshStandardMaterial\"\n            ) {\n                return meshMaterial.color;\n            } else if (meshMaterial.type === \"RawShaderMaterial\") {\n                const rawShaderMaterial = material as THREE.RawShaderMaterial;\n\n                if (rawShaderMaterial.name === \"SolidLineMaterial\") {\n                    return rawShaderMaterial.uniforms.diffuse.value as THREE.Color;\n                }\n\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown shader material name\",\n                    rawShaderMaterial.name\n                );\n            } else {\n                logger.warn(\n                    \"BufferedGeometryAccessor#color: unknown material type\",\n                    meshMaterial.type\n                );\n            }\n\n            return undefined;\n        };\n\n        if (Array.isArray(this.object.material)) {\n            const results = new Array<THREE.Color | undefined>();\n            const materials = this.object.material as THREE.Material[];\n\n            for (const material of materials) {\n                results.push(getColor(material));\n            }\n\n            return results;\n        } else {\n            return getColor(this.object.material);\n        }\n    }\n}\n\n/**\n * Abstract base class of an accessor for nonindexed geometry.\n */\nexport abstract class BufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    /**\n     * Create an object of type `BufferedGeometryAccessor`\n     *\n     * @param object - mesh object\n     * @param geometryType - type of geometry to be used\n     * @param bufferGeometry - which buffer geometry to use\n     * @param stride - geometry stride length\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        protected stride: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const positionsArray = this.position.array as number[];\n\n        const start = this.start * this.itemSize;\n        const end = this.end * this.itemSize;\n\n        for (let i = start; i < end; i++) {\n            positionsArray[i] = 0;\n        }\n\n        this.position.needsUpdate = true;\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"BufferedGeometryAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        return (this.position.array as Float32Array).subarray(\n            start * this.itemSize,\n            end * this.itemSize\n        );\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            this.position !== undefined &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.position.count &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for nonindexed line geometry.\n */\nexport class BufferedGeometryLineAccessor extends BufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    get width(): number | undefined {\n        //TODO: There is no implementation of such a line, yet...\n        assert(this.checkSetUp(), \"RoBufferedGeometryLineAccessor not setup\");\n        return undefined;\n    }\n}\n\n/**\n * Accessor for nonindexed unspecified (`Object3D`) geometry.\n */\nexport class BufferedGeometryObject3dAccessor extends BufferedGeometryAccessor\n    implements IObject3dAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 1);\n    }\n\n    isObject3dAccessor(): boolean {\n        return true;\n    }\n\n    /** @override */\n    getVertices(): Float32Array | undefined {\n        return super.getVertices();\n    }\n}\n\n/**\n * Abstract base class of indexed geometry.\n */\nexport abstract class IndexedBufferedGeometryAccessor extends BufferedGeometryAccessorBase {\n    indices: number[];\n\n    /**\n     * Creates an abstract class `IndexedBufferedGeometryAccessor`.\n     *\n     * @param object - mesh to be used\n     * @param geometryType - type of geometry\n     * @param bufferGeometry - geometry used\n     * @param start\n     * @param end\n     */\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        protected readonly bufferGeometry: THREE.BufferGeometry,\n        // tslint:disable-next-line:no-unused-variable\n        start?: number,\n        // tslint:disable-next-line:no-unused-variable\n        end?: number\n    ) {\n        super(object, geometryType, bufferGeometry);\n\n        this.indices =\n            this.bufferGeometry.index !== null\n                ? (this.bufferGeometry.index.array as number[])\n                : ((undefined as any) as number[]);\n\n        if (!this.indices) {\n            logger.warn(\n                \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry has no \" + \"index\"\n            );\n            assert(!!this.indices);\n        } else {\n            if (!(this.indices instanceof Uint32Array)) {\n                logger.warn(\n                    \"IndexedBufferedGeometryAccessor#constructor: BufferGeometry index \" +\n                        \"has wrong type\"\n                );\n                assert(this.indices instanceof Uint32Array);\n            }\n        }\n    }\n\n    /**\n     * Returns number of primitives, which is not known in this base class, so we return the number\n     * of indices.\n     *\n     * @returns The number of indices in the geometry.\n     * @override\n     */\n    getCount(): number {\n        return this.indices.length;\n    }\n\n    protected checkSetUp(): boolean {\n        return (\n            !!this.indices &&\n            this.start !== undefined &&\n            this.end !== undefined &&\n            this.start >= 0 &&\n            this.end <= this.indices.length &&\n            this.start <= this.end\n        );\n    }\n}\n\n/**\n * Accessor for lines in an indexed geometry.\n */\nexport class IndexedBufferedGeometryLineAccessor extends IndexedBufferedGeometryAccessor\n    implements ILineAccessor {\n    constructor(\n        readonly object: THREE.Mesh,\n        readonly geometryType: GeometryType,\n        readonly bufferGeometry: THREE.BufferGeometry\n    ) {\n        super(object, geometryType, bufferGeometry, 3);\n    }\n\n    isLineAccessor(): boolean {\n        return true;\n    }\n\n    /**\n     * Reconstructs line width from triangulated geometry.\n     *\n     * @returns Line width.\n     */\n    get width(): number | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        if (this.geometryType === GeometryType.ExtrudedLine) {\n            const start = this.start + this.startCapSize;\n            const positionArray = this.position.array as Float32Array;\n            return reconstructLineWidth(positionArray, start);\n        }\n\n        return undefined;\n    }\n\n    clear(): void {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const start = this.start;\n        const end = this.end;\n\n        for (let i = start; i < end; i++) {\n            this.indices[i] = 0;\n        }\n\n        if (this.bufferGeometry.index !== null) {\n            this.bufferGeometry.index.needsUpdate = true;\n        }\n    }\n\n    getVertices(): Float32Array | undefined {\n        assert(this.checkSetUp(), \"RoIndexedBufferedGeometryLineAccessor not setup\");\n\n        const itemSize = this.itemSize;\n\n        const start = this.start;\n        const end = this.end;\n\n        const result = new Float32Array((end - start) * itemSize);\n        const positionArray = this.position.array;\n\n        if (itemSize === 2) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n            }\n        }\n        if (itemSize === 3) {\n            for (let i = start, j = 0; i < end; i++, j += itemSize) {\n                const index = this.indices[i];\n                result[j + 0] = positionArray[index * itemSize + 0];\n                result[j + 1] = positionArray[index * itemSize + 1];\n                result[j + 2] = positionArray[index * itemSize + 2];\n            }\n        } else {\n            for (let i = start, j = 0; i < end; i++, j++) {\n                const index = this.indices[i];\n                for (let k = 0; k < itemSize; k++) {\n                    result[j * itemSize + k] = positionArray[index * itemSize + k];\n                }\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst UNIT_Z = new THREE.Vector3(0, 0, 1);\nconst POINTS = [0, 1, 2, 1, 3, 2];\nconst BEVEL_POINTS = [0, 1, 3, 3, 1, 2, 0, 3, 4, 5, 4, 3];\n\nconst SECTORS_IN_CIRCLE = 8;\nconst STEP = Math.PI / SECTORS_IN_CIRCLE;\n\n/**\n * Adds a half-circle geometry to original line\n *\n * @param x The line end X (used as circle center X)\n * @param y The line end Y (used as circle center Y)\n * @param lineAngle The cap incline angle\n * @param radius The cap (circle) radius\n * @param vertices The input vertex buffer (cap vertices are added there)\n * @param indices The input index buffer (cap indices are is added there)\n */\nfunction addCircle(\n    x: number,\n    y: number,\n    lineAngle: number,\n    radius: number,\n    vertices: number[],\n    indices: number[]\n) {\n    const baseVertex = vertices.length / 3;\n\n    // Add cap center to vertices directly (it doesn't need rotation)\n    vertices.push(x, y, 0);\n\n    for (let i = 0; i < SECTORS_IN_CIRCLE + 1; ++i) {\n        const angle = STEP * i + Math.PI / 2 + lineAngle; // Start angle is -90deg\n        vertices.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle), 0);\n\n        indices.push(\n            baseVertex,\n            baseVertex + i + 1,\n            baseVertex + ((i + 1) % (SECTORS_IN_CIRCLE + 1)) + 1\n        );\n    }\n}\n\n/**\n * Returns the number of points in circle used for caps.\n *\n * @param lineWidth Width of line.\n */\n// tslint:disable-next-line:no-unused-variable\nexport function numCirclePoints(lineWidth: number): number {\n    return SECTORS_IN_CIRCLE + 1;\n}\n\n/**\n * Create a triangle mesh from the given polyline.\n *\n * @param points Sequence of (x,y,z) coordinates.\n * @param width The width of the extruded line.\n * @param vertices The output vertex buffer.\n * @param indices The output index buffer.\n * @param startWithCircle `true` if the line should start will a circle.\n * @param endWithCircle `true` if the line should end with a circle.\n */\nexport function triangulateLine(\n    points: ArrayLike<number>,\n    width: number,\n    vertices: number[],\n    indices: number[],\n    startWithCircle = true,\n    endWithCircle = startWithCircle\n) {\n    if (points.length < 3) {\n        return;\n    }\n\n    // This vector is used for computing cap angle\n    const angleVec = new THREE.Vector2();\n\n    if (startWithCircle) {\n        // Define lineAngle as (direction - origin) vector angle to X axis\n        const lineAngle =\n            points.length !== 3\n                ? angleVec.set(points[3] - points[0], points[4] - points[1]).angle()\n                : 0;\n\n        addCircle(points[0], points[1], lineAngle, width, vertices, indices);\n    }\n\n    const baseVertex = vertices.length / 3;\n\n    // bt = Bitangent (i.e. extrusion vector)\n    const prevBt = new THREE.Vector3();\n    const p = new THREE.Vector3(); // current point\n    const n = new THREE.Vector3(); // next point\n    const bt = new THREE.Vector3();\n    const averageBt = new THREE.Vector3();\n    const p0 = new THREE.Vector3();\n    const p1 = new THREE.Vector3();\n    const p2 = new THREE.Vector3();\n    const p3 = new THREE.Vector3();\n\n    const N = points.length / 3;\n\n    let vertexOffset = 0;\n    for (let i = 0; i < N; ++i) {\n        let useBevel = false;\n        p.set(points[i * 3], points[i * 3 + 1], points[i * 3 + 2]);\n\n        if (i + 1 < N) {\n            n.set(points[(i + 1) * 3], points[(i + 1) * 3 + 1], points[(i + 1) * 3 + 2]);\n\n            bt.copy(n)\n                .sub(p)\n                .normalize()\n                .cross(UNIT_Z);\n\n            averageBt.copy(bt);\n\n            if (i > 0) {\n                averageBt.add(prevBt).multiplyScalar(1.0 - 0.5 * bt.dot(prevBt));\n\n                useBevel = prevBt.angleTo(bt) > Math.PI / 2;\n\n                if (useBevel) {\n                    const inclineWidth = width / Math.cos(bt.angleTo(prevBt) / 2);\n\n                    p0.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(-inclineWidth)\n                        .add(p);\n\n                    p1.copy(prevBt)\n                        .multiplyScalar(width)\n                        .add(p);\n\n                    // p2 is used for \"miter\" connections\n                    p2.copy(bt)\n                        .add(prevBt)\n                        .normalize()\n                        .multiplyScalar(inclineWidth)\n                        .add(p);\n\n                    p3.copy(bt)\n                        .multiplyScalar(width)\n                        .add(p);\n                }\n            }\n\n            if (useBevel) {\n                vertices.push(\n                    p0.x,\n                    p0.y,\n                    p0.z,\n                    p1.x,\n                    p1.y,\n                    p1.z,\n                    p2.x,\n                    p2.y,\n                    p2.z,\n                    p3.x,\n                    p3.y,\n                    p3.z\n                );\n            } else {\n                p0.copy(averageBt)\n                    .multiplyScalar(-width)\n                    .add(p);\n\n                p1.copy(averageBt)\n                    .multiplyScalar(width)\n                    .add(p);\n\n                vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n            }\n\n            prevBt.copy(bt);\n        } else {\n            p0.copy(prevBt)\n                .multiplyScalar(-width)\n                .add(p);\n\n            p1.copy(prevBt)\n                .multiplyScalar(width)\n                .add(p);\n\n            vertices.push(p0.x, p0.y, p0.z, p1.x, p1.y, p1.z);\n        }\n\n        if (i !== N - 1) {\n            (useBevel ? BEVEL_POINTS : POINTS).forEach(o =>\n                indices.push(baseVertex + vertexOffset + o)\n            );\n            vertexOffset += useBevel ? 4 : 2;\n        }\n    }\n\n    if (endWithCircle) {\n        const lineAngle =\n            points.length !== 2\n                ? angleVec\n                      .set(\n                          points[(N - 3) * 3] - points[(N - 2) * 3],\n                          points[(N - 3) * 3 + 1] - points[(N - 2) * 3 + 1]\n                      )\n                      .angle()\n                : Math.PI;\n\n        addCircle(\n            points[(N - 2) * 3],\n            points[(N - 2) * 3 + 1],\n            lineAngle,\n            width,\n            vertices,\n            indices\n        );\n    }\n}\n\n/**\n * Reconstruct the original points of a line from the vertices of the triangulated line.\n *\n * @param inBuffer Buffer with vertices.\n * @param startOffset Start index, will differ from `0` if the line has caps.\n * @returns Buffer containing the original points of the triangulated line.\n */\nexport function reconstructLine(inBuffer: Float32Array, startOffset: number): Float32Array {\n    const outBuffer = new Float32Array(inBuffer.length / 2);\n\n    for (let i = startOffset * 3, i2 = i * 2; i < outBuffer.length; i += 3, i2 += 6) {\n        outBuffer[i] = inBuffer[i2] + (inBuffer[i2 + 3] - inBuffer[i2]) * 0.5;\n        outBuffer[i + 1] = inBuffer[i2 + 1] + (inBuffer[i2 + 3 + 1] - inBuffer[i2 + 1]) * 0.5;\n        outBuffer[i + 2] = inBuffer[i2 + 2] + (inBuffer[i2 + 3 + 2] - inBuffer[i2 + 2]) * 0.5;\n    }\n    return outBuffer;\n}\n\n/**\n * Extract the line width from a triangulated line.\n *\n * @param inBuffer Array of vertex elements of a triangulated line.\n * @param startIndex Start index, will differ from `0` if the line has caps.\n */\nexport function reconstructLineWidth(inBuffer: Float32Array, startIndex: number): number {\n    const xd = inBuffer[startIndex * 2 + 3] - inBuffer[startIndex * 2];\n    const yd = inBuffer[startIndex * 2 + 3 + 1] - inBuffer[startIndex * 2 + 1];\n    const zd = inBuffer[startIndex * 2 + 3 + 2] - inBuffer[startIndex * 2 + 2];\n\n    return Math.sqrt(xd * xd + yd * yd + zd * zd) * 0.5;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HighPrecisionLineMaterial } from \"@here/harp-materials\";\n\nimport * as THREE from \"three\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Declare interface for `HighPrecisionObject` which describes additional functionality to render\n * high-precision vertices.\n */\nexport interface HighPrecisionObject extends THREE.Object3D {\n    /**\n     * Allow direct access to [[BufferGeometry]] without cast.\n     */\n    bufferGeometry: THREE.BufferGeometry;\n\n    /**\n     * Allow direct access to [[ShaderMaterial]] without cast.\n     */\n    shaderMaterial: THREE.ShaderMaterial;\n\n    /**\n     * Inversed World Matrix.\n     */\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Sets up attributes for position (one attribute for major 32 bits position \"halve\", and one\n     * attribute for lower 32 bits).\n     */\n    setPositions(positions: number[] | THREE.Vector3[]): void;\n\n    /**\n     * Prepare the objects \"`onBeforeRender()`\" callback to generate proper high-precision camera\n     * position.\n     */\n    setupForRendering(): void;\n}\n\n/**\n * Class used to render high-precision wireframe lines.\n */\nexport class HighPrecisionWireFrameLine extends THREE.Line implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionWireFrameLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n\n/**\n * Class used to render high-precision lines.\n */\nexport class HighPrecisionLine extends THREE.Mesh implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Creates a `HighPrecisionLine` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered line.\n     * @param opacity Opacity of the rendered line.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionLineMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        if (material === undefined) {\n            material = new HighPrecisionLineMaterial({\n                color: color ? color : HighPrecisionLineMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : HighPrecisionLineMaterial.DEFAULT_OPACITY\n            });\n        }\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport \"@here/harp-fetch\";\n\nimport {\n    DecodedTile,\n    ITileDecoder,\n    RequestController,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { DataSource, TileLoaderState } from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nimport { DataProvider } from \"./DataProvider\";\n\n/**\n * Logger to write to console etc.\n */\nconst logger = LoggerManager.instance.create(\"TileLoader\");\n\n/**\n * The [[TileLoader]] manages the different states of loading and decoding for a [[Tile]]. Used by\n * the [[TileDataSource]].\n */\nexport class TileLoader {\n    /**\n     * Current state of `TileLoader`.\n     */\n    state: TileLoaderState = TileLoaderState.Initialized;\n\n    /**\n     * Error object if loading or decoding failed.\n     */\n    error?: Error;\n\n    /**\n     * The binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    payload?: ArrayBufferLike | {};\n\n    /**\n     * The result of decoding the `payload`: The [[DecodedTile]].\n     */\n    decodedTile?: DecodedTile;\n\n    /**\n     * The abort controller notifying the [[DataProvider]] to cancel loading.\n     */\n    protected loadAbortController = new AbortController();\n\n    /**\n     * The  notifying the [[ITileDecoder]] to cancel decoding.\n     */\n    protected requestController?: RequestController;\n\n    /**\n     * The promise which is resolved when loading and decoding have finished.\n     */\n    protected donePromise?: Promise<TileLoaderState>;\n\n    /**\n     * The internal function that is called when loading and decoding have finished successfully.\n     */\n    protected resolveDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * The internal function that is called when loading and decoding failed.\n     */\n    protected rejectedDonePromise?: (state: TileLoaderState) => void;\n\n    /**\n     * Set up loading of a single [[Tile]].\n     *\n     * @param dataSource The [[DataSource]] the tile belongs to.\n     * @param tileKey The quadtree address of a [[Tile]].\n     * @param dataProvider The [[DataProvider]] that retrieves the binary tile data.\n     * @param tileDecoder The [[ITileDecoder]] that decodes the binary tile to a [[DecodeTile]].\n     * @param priority The priority given to the loading job. Highest number will be served first.\n     */\n    constructor(\n        protected dataSource: DataSource,\n        protected tileKey: TileKey,\n        protected dataProvider: DataProvider,\n        protected tileDecoder: ITileDecoder,\n        public priority: number\n    ) {}\n\n    /**\n     * Start loading and/or proceed through the various states of loading of this tile.\n     *\n     * @returns A promise which resolves the [[TileLoaderState]].\n     */\n    loadAndDecode(): Promise<TileLoaderState> {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n            case TileLoaderState.Loaded:\n            case TileLoaderState.Decoding:\n                // tile is already loading\n                return this.donePromise!;\n\n            case TileLoaderState.Ready:\n            case TileLoaderState.Failed:\n            case TileLoaderState.Initialized:\n            case TileLoaderState.Canceled:\n                // restart loading\n                this.startLoading();\n                return this.donePromise!;\n        }\n    }\n\n    /**\n     * Return the current state in form of a promise. Caller can then wait for the promise to be\n     * resolved.\n     *\n     * @returns A promise which resolves the current [[TileLoaderState]].\n     */\n    waitSettled(): Promise<TileLoaderState> {\n        if (!this.donePromise) {\n            return Promise.resolve(this.state);\n        }\n        return this.donePromise;\n    }\n\n    /**\n     * Cancel loading of the [[Tile]].\n     * Cancellation token is notified, an internal state is cleaned up.\n     */\n    cancel() {\n        switch (this.state) {\n            case TileLoaderState.Loading:\n                this.loadAbortController.abort();\n                this.loadAbortController = new AbortController();\n                break;\n\n            case TileLoaderState.Decoding:\n                if (this.requestController) {\n                    this.requestController.abort();\n                    this.requestController = undefined;\n                }\n                break;\n        }\n\n        this.onDone(TileLoaderState.Canceled);\n    }\n\n    /**\n     * Return `true` if [[Tile]] is still loading, `false` otherwise.\n     */\n    get isFinished(): boolean {\n        return (\n            this.state === TileLoaderState.Ready ||\n            this.state === TileLoaderState.Canceled ||\n            this.state === TileLoaderState.Failed\n        );\n    }\n\n    /**\n     * Update the priority of this [[Tile]]'s priority. Is effective to sort the decoding requests\n     * in the request queue (used during heavy load).\n     */\n    updatePriority(priority: number): void {\n        this.priority = priority;\n        if (this.requestController !== undefined) {\n            this.requestController.priority = priority;\n        }\n    }\n\n    /**\n     * Start loading. Only call if loading did not start yet.\n     */\n    protected startLoading() {\n        const myLoadCancellationToken = this.loadAbortController.signal;\n        this.dataProvider\n            .getTile(this.tileKey, myLoadCancellationToken)\n            .then(payload => {\n                if (myLoadCancellationToken.aborted) {\n                    // safety belt if getTile doesn't really support cancellation tokens\n                    const err = new Error(\"Aborted\");\n                    err.name = \"AbortError\";\n                    throw err;\n                }\n                this.onLoaded(payload);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    return;\n                }\n                this.onError(error);\n            });\n\n        if (this.donePromise === undefined) {\n            this.donePromise = new Promise<TileLoaderState>((resolve, reject) => {\n                this.resolveDonePromise = resolve;\n                this.rejectedDonePromise = reject;\n            });\n        }\n        this.state = TileLoaderState.Loading;\n    }\n\n    /**\n     * Called when binary data has been loaded. The loading state is now progressing to decoding.\n     *\n     * @param payload Binary data in form of [[ArrayBufferLike]], or any object.\n     */\n    protected onLoaded(payload: ArrayBufferLike | {}) {\n        this.state = TileLoaderState.Loaded;\n        this.payload = payload;\n\n        if ((payload as ArrayBufferLike).byteLength !== undefined) {\n            if ((payload as ArrayBufferLike).byteLength === 0) {\n                this.onDone(TileLoaderState.Ready);\n                return;\n            }\n        }\n        // Object is empty\n        if ((payload as {}) === {}) {\n            this.onDone(TileLoaderState.Ready);\n            return;\n        }\n\n        // TBD: we might suspend decode if tile is not visible ... ?\n        this.startDecodeTile();\n    }\n\n    /**\n     * Start decoding the payload.\n     */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .decodeTile(payload, this.tileKey, dataSource.projection, requestController)\n            .then(decodedTile => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n\n                this.onDecoded(decodedTile);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n\n    /**\n     * Called when the decoding is finished, and the [[DecodedTile]] has been created.\n     *\n     * @param decodedTile The [[DecodedTile]].\n     */\n    protected onDecoded(decodedTile: DecodedTile) {\n        this.decodedTile = decodedTile;\n        this.onDone(TileLoaderState.Ready);\n    }\n\n    /**\n     * Cancel the decoding process.\n     */\n    protected cancelDecoding() {\n        if (this.requestController !== undefined) {\n            // we should cancel any decodes already in progress!\n            this.requestController.abort();\n            this.requestController = undefined;\n        }\n    }\n\n    /**\n     * Called when loading and decoding has finished successfully. Resolves loading promise if the\n     * state is Ready, otherwise it rejects the promise with the supplied state.\n     *\n     * @param doneState The latest state of loading.\n     */\n    protected onDone(doneState: TileLoaderState) {\n        if (this.resolveDonePromise && doneState === TileLoaderState.Ready) {\n            this.resolveDonePromise(doneState);\n        } else if (this.rejectedDonePromise) {\n            this.rejectedDonePromise(doneState);\n        }\n        this.resolveDonePromise = undefined;\n        this.rejectedDonePromise = undefined;\n        this.donePromise = undefined;\n        this.state = doneState;\n    }\n\n    /**\n     * Called when loading or decoding has finished with an error.\n     *\n     * @param error Error object describing the failing.\n     */\n    protected onError(error: Error) {\n        if (this.state === TileLoaderState.Canceled) {\n            // If we're canceled, we should simply ignore any state transitions and errors from\n            // underlying load/decode ops.\n            return;\n        }\n        const dataSource = this.dataSource;\n        logger.error(\n            `[${dataSource.name}]: failed to load tile ${this.tileKey.mortonCode()}`,\n            error\n        );\n\n        this.error = error;\n\n        this.onDone(TileLoaderState.Failed);\n    }\n}\n\n/**\n * Subclass of [[TileLoader]] which is used by [[TileDataSource]] to load the [[TileInfo]] meta\n * data, not the tile data itself.\n */\nexport class TileInfoLoader extends TileLoader {\n    tileInfo?: TileInfo;\n\n    /** @override */\n    protected startDecodeTile() {\n        const payload = this.payload;\n        if (payload === undefined) {\n            logger.error(\"TileInfoLoader#startDecodeTile: Cannot decode without payload\");\n            return;\n        }\n\n        this.state = TileLoaderState.Decoding;\n        this.payload = undefined;\n\n        // Save our cancellation point, so we can be reliably cancelled by any subsequent decode\n        // attempts\n        const requestController = new RequestController(this.priority);\n        this.requestController = requestController;\n\n        const dataSource = this.dataSource;\n        this.tileDecoder\n            .getTileInfo(payload, this.tileKey, dataSource.projection, requestController)\n            .then(tileInfo => {\n                if (requestController.signal.aborted) {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.tileInfo = tileInfo;\n\n                this.onDone(TileLoaderState.Ready);\n            })\n            .catch(error => {\n                // Handle abort messages from fetch and also our own.\n                if (error.name === \"AbortError\" || error.message === \"AbortError: Aborted\") {\n                    // our flow is cancelled, silently return\n                    return;\n                }\n                this.onError(error);\n            });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport \"@here/harp-fetch\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport { DataProvider } from \"@here/harp-mapview-decoder\";\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport { LoggerManager } from \"@here/harp-utils\";\n\nconst logger = LoggerManager.instance.create(\"OmvRestClient\");\n\n// tslint:disable:max-line-length\nexport enum APIFormat {\n    /**\n     * Use the REST API format of HERE Vector Tiles Server component version 1.\n     *\n     * Usage:\n     *\n     *     <OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>/omv\n     *\n     * If [[OmvRestClientParams.authenticationToken]] is provided, it will be added as HTTP header:\n     *\n     *     Authorization: Bearer $authenticationToken\n     *\n     * Format definition:\n     * `//http|s://<base-url>/{API version}/{layers}/{projection}/{z}/{x}/{y}/{format}`\n     *\n     * Default authentication method used: [[AuthenticationTypeBearer]].\n     */\n    HereV1,\n\n    /**\n     * Use the REST API format of Mapbox Vector Tile API v4.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/v4/{map_id}/{z}/{x}/{y}{@2x}.{format}?[style]&access_token={access_token}`\n     *\n     * Sample URL:\n     * `http://a.tiles.mapbox.com/v4/mapbox.mapbox-streets-v7/14/4823/6160.mvt?access_token=your-mapbox-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    MapboxV4,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in MVT format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.mvt?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZMVT,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in JSON format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/omsbase/256/<zoom>/<X>/<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/{layers}/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/osmbase/256/all/16/19293/24641.json?access_token=your-xyz-api-key`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZJson,\n\n    /**\n     * Use the REST API format of XYZ Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/tiles/herebase.02/<zoom>/<X>/<Y>/omv?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/tiles/herebase.02/{z}/{x}/{y}/{format}?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/tiles/herebase.02/14/2649/6338/omv?access_token=your-xyz-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZOMV,\n\n    /**\n     * Use the REST API format of Tomtoms Vector Tile API v1.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/<zoom>/<X>/<Y>.pbf?key=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `<http|https>://<baseURL>/map/<versionNumber>/tile/<layer>/<style>/<zoom>/<X>/<Y>.<format>?key=<apiKey>[&view=<view>][&language=<language>]`\n     *\n     * Sample URL:\n     * `http://api.tomtom.com/map/1/tile/basic/main/0/0/0.pbf?key=<apiKey>`\n     *\n     * Default authentication method used: [[AuthenticationTypeTomTomV1]].\n     */\n    TomtomV1,\n\n    /**\n     * Use the REST API format of XYZ Space Vector Tile API in OMV format.\n     *\n     * Usage:\n     * `<OmvRestClientParams.baseUrl>/hub/spaces/<space-id>/tile/web/<zoom>_<X>_<Y>.mvt?access_token=<OmvRestClientParams.authenticationCode>`\n     *\n     * Format definition:\n     * `http|s://<base-url>/hub/spaces/{spaceId}/tile/web/{z}_{x}_{y}.mvt?access_token={access_token}`\n     *\n     * Sample URL:\n     * `https://xyz.api.here.com/hub/spaces/your-space-id/tile/web/{z}_{x}_{y}.mvt?access_token=your-access-token`\n     *\n     * Default authentication method used: [[AuthenticationTypeAccessToken]].\n     */\n    XYZSpace\n}\n// tslint:enable:max-line-length\n\n/**\n * Authentication token/code provider used by [[OmvRestClient]] before each call to currently valid\n * authentication code/token.\n */\nexport type AuthenticationCodeProvider = () => Promise<string>;\n\nexport enum AuthenticationMethod {\n    QueryString,\n    AuthorizationHeader\n}\n\nexport interface AuthenticationMethodInfo {\n    method: AuthenticationMethod;\n    name?: string;\n}\n\n/**\n * Authentication method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeBearer: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.AuthorizationHeader,\n    name: \"Bearer\"\n};\n\n/**\n * TomTomV1 API compatible authorization method, where token will be provided as HTTP Header:\n *\n *    Authorization: Bearer $authenticationToken\n */\nexport const AuthenticationTypeTomTomV1: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"key\"\n};\n\nexport const AuthenticationTypeAccessToken: AuthenticationMethodInfo = {\n    method: AuthenticationMethod.QueryString,\n    name: \"access_token\"\n};\n\nexport interface OmvRestClientParameters {\n    /**\n     * `URL` pattern used to fetch tile files.\n     *\n     * `URL` with special keywords replaced to retrieve specific tile:\n     *  - `{z}` - zoom level of tile, @see [[TileKey.level]]\n     *  - `{x}` - horizontal coordinate of tile (column number), @see [[TileKey.column]]\n     *  - `{y}` - vertical coordinate of Tile (row number), @see [[TileKey.row]]\n     *\n     * Examples of `url` patterns:\n     * ```\n     *   https://my-base-url.com/vector-tiles/{z}/{x}/{y}.mvt\n     *   https://xyz.api.here.com/tiles/herebase.02/{z}/{x}/{y}/omv\n     *   https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\n     * ```\n     *\n     * Note: To add authentication headers and/or query params, use [[authMethod]], [[urlParams]]\n     * properties or embed token directly in `url`.\n     *\n     * Complete examples:\n     * ```\n     * // XYZ OSM with authentication using query param\n     * {\n     *     url: \"https://xyz.api.here.com/tiles/osmbase/512/all/{z}/{x}/{y}.mvt\",\n     *     urlParams: {\n     *           access_token: accessToken\n     *     },\n     * }\n     * // HERE Vector Tile with authentication using bearer token retrieved by callback\n     * {\n     *     url: \"https://vector.hereapi.com/v2/vectortiles/base/mc/{z}/{x}/{y}/omv\",\n     *     authenticationMethod: AuthenticationTypeBearer,\n     *     authenticationCode: () => getBearerToken()\n     * }\n     * ```\n     */\n    url?: string;\n\n    /**\n     * The base URL of the REST Tile Service.\n     * @see [[APIFormat]] for the definition of `baseUrl`.\n     */\n    baseUrl?: string;\n\n    /**\n     * Authentication code used for the different APIs.\n     *\n     * When [[AuthenticationCodeProvider]] is is used as value, the provider is called before each\n     * to get currently valid authentication code/token.\n     *\n     * @see [[APIFormat]] for the query parameter this is used with.\n     */\n    authenticationCode?: string | AuthenticationCodeProvider;\n\n    /**\n     * Specifies [[AuthMethod]] to be used when requesting tiles.\n     *\n     * Defaults for each [[APIFormat]] are documented with each format type.\n     */\n    authenticationMethod?: AuthenticationMethodInfo;\n\n    /**\n     * The REST API format to use for the tile path generation, will default to the HERE Vector Tile\n     * API.\n     */\n    apiFormat?: APIFormat;\n\n    /**\n     * Tiling scheme is used in some of the APIs, not implemented yet.\n     */\n    tilingScheme?: TilingScheme;\n\n    /**\n     * Transfer Manager to use; creates an own instance if none passed.\n     */\n    downloadManager?: TransferManager;\n\n    /**\n     * Function to retrieve the Bearer Token\n     *\n     * @deprecated Please use [[authenticationCode]].\n     */\n    getBearerToken?: () => Promise<string>;\n\n    /**\n     * Array of query parameters to be appended at the end of the url.\n     * It is empty by default.\n     */\n    urlParams?: { [key: string]: string };\n}\n\n/**\n * REST client supporting getting protobuf OMV Tile from REST-based servers.\n */\nexport class OmvRestClient implements DataProvider {\n    private readonly downloadManager: TransferManager;\n    private readonly urlParams: { [key: string]: string };\n\n    constructor(readonly params: OmvRestClientParameters) {\n        this.downloadManager =\n            params.downloadManager === undefined\n                ? TransferManager.instance()\n                : params.downloadManager;\n        this.urlParams = params.urlParams === undefined ? {} : params.urlParams;\n    }\n\n    /** Overriding abstract method, in this case doing nothing. */\n    async connect(): Promise<void> {\n        // not needed\n    }\n\n    /** Overriding abstract method, in this case always returning `true`. */\n    ready(): boolean {\n        return true;\n    }\n\n    /**\n     * Asynchronously fetches a tile from this restful server.\n     *\n     * **Note:** If the tile doesn't exist, a successful response with a `404` status code is\n     * returned.\n     *\n     * @example\n     * ```typescript\n     * const response = layer.getTile(tileKey);\n     * if (!response.ok) {\n     *     // a network error happened\n     *     console.error(\"Unable to download tile\", response.statusText);\n     *     return;\n     * }\n     * if (response.status === 404) {\n     *     // 404 -, no data exists at the given tile. Do nothing.\n     *     return;\n     * }\n     *\n     * // the response is ok and contains data, access it e.g. as arrayBuffer:\n     * const payload = await response.arrayBuffer();\n     * ```\n     *\n     * @param tileKey The tile key of the tile.\n     * @param tileRequestInit Optional request options to be passed to fetch when downloading a\n     * tile.\n     * @returns A `Promise` of the HTTP response that contains the payload of the requested tile.\n     */\n    async getTile(\n        tileKey: TileKey,\n        abortSignal?: AbortSignal | undefined\n    ): Promise<ArrayBufferLike | {}> {\n        const init: RequestInit = { signal: abortSignal };\n\n        let tileUrl = this.dataUrl(tileKey);\n\n        const authenticationCode = await this.getActualAuthenticationCode();\n\n        tileUrl = this.applyAuthCode(tileUrl, init, authenticationCode);\n        tileUrl = this.addQueryParams(tileUrl, this.urlParams);\n\n        if (this.params.apiFormat === APIFormat.XYZJson) {\n            return this.downloadManager.downloadJson(tileUrl, init);\n        }\n\n        return this.downloadManager.downloadArrayBuffer(tileUrl, init);\n    }\n\n    /**\n     * Get actual authentication code/token for this request according to configuration.\n     */\n    private async getActualAuthenticationCode() {\n        if (typeof this.params.authenticationCode === \"string\") {\n            return this.params.authenticationCode;\n        } else if (this.params.authenticationCode !== undefined) {\n            return this.params.authenticationCode();\n        } else if (this.params.getBearerToken !== undefined) {\n            return this.params.getBearerToken();\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Get default authnentication method basing on apiFormat and other params.\n     */\n    private getDefaultAuthMethod() {\n        if (this.params.getBearerToken !== undefined) {\n            return AuthenticationTypeBearer;\n        }\n\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n                return AuthenticationTypeBearer;\n            case APIFormat.MapboxV4:\n            case APIFormat.XYZOMV:\n            case APIFormat.XYZMVT:\n            case APIFormat.XYZSpace:\n            case APIFormat.XYZJson:\n                return AuthenticationTypeAccessToken;\n            case APIFormat.TomtomV1:\n                return AuthenticationTypeTomTomV1;\n            default:\n                logger.warn(\n                    `#getDefaultAuthMethod: Not supported API format: ${this.params.apiFormat}`\n                );\n                return undefined;\n        }\n    }\n\n    /**\n     * Apply athentication code/token using configured (or default) authentication method.\n     *\n     * @param url\n     * @param init request extra data\n     * @param authenticationCode authentication/token to be applied\n     * @return new url to be used\n     */\n    private applyAuthCode(url: string, init: RequestInit, authenticationCode: string | undefined) {\n        if (authenticationCode === undefined) {\n            return url;\n        }\n        const authMethod = this.params.authenticationMethod || this.getDefaultAuthMethod();\n        if (authMethod === undefined) {\n            return url;\n        }\n\n        if (authMethod.method === AuthenticationMethod.AuthorizationHeader) {\n            if (init.headers === undefined) {\n                init.headers = new Headers();\n            }\n            const authType = authMethod.name || \"Bearer\";\n            (init.headers as Headers).append(\"Authorization\", `${authType} ${authenticationCode}`);\n        } else if (authMethod.method === AuthenticationMethod.QueryString) {\n            const attrName: string = authMethod.name || \"access_token\";\n            const authParams: { [key: string]: string } = {};\n            authParams[attrName] = authenticationCode;\n            url = this.addQueryParams(url, authParams);\n        }\n        return url;\n    }\n\n    /**\n     * Get actual tile URL depending on configured API format.\n     */\n    private dataUrl(tileKey: TileKey): string {\n        if (this.params.url !== undefined) {\n            return this.params.url\n                .replace(\"{x}\", String(tileKey.column))\n                .replace(\"{y}\", String(tileKey.row))\n                .replace(\"{z}\", String(tileKey.level));\n        }\n        let path = [`/${tileKey.level}`, tileKey.column, tileKey.row].join(\n            this.params.apiFormat === APIFormat.XYZSpace ? \"_\" : \"/\"\n        );\n        switch (this.params.apiFormat) {\n            case APIFormat.HereV1:\n            case APIFormat.XYZOMV:\n                path += \"/omv\";\n                break;\n            case APIFormat.MapboxV4:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZMVT:\n                path += \".mvt\";\n                break;\n            case APIFormat.XYZJson:\n                path += \".json\";\n                break;\n            case APIFormat.XYZSpace:\n                path += \".mvt\";\n                break;\n            case APIFormat.TomtomV1:\n                path += \".pbf\";\n                break;\n            default:\n                logger.warn(`Not supported API format: ${this.params.apiFormat}`);\n                break;\n        }\n\n        return this.params.baseUrl + path;\n    }\n\n    private addQueryParams(url: string, queryParams: { [key: string]: string }): string {\n        let queryString = \"\";\n        let concatinator = url.indexOf(\"?\") !== -1 ? \"&\" : \"?\";\n        Object.getOwnPropertyNames(queryParams).forEach(property => {\n            const prop = property as keyof typeof queryParams;\n            queryString += concatinator + prop + \"=\" + queryParams[prop];\n            if (concatinator === \"?\") {\n                concatinator = \"&\";\n            }\n        });\n        return url + queryString;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// tslint:disable-next-line:no-implicit-dependencies\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { GeoCoordinates } from \"@here/harp-geoutils\";\nimport { MapView, MapViewEventNames } from \"@here/harp-mapview\";\nimport { APIFormat, OmvDataSource } from \"@here/harp-omv-datasource\";\nimport { accessToken } from \"../../@here/harp-examples/config\";\n\n// tslint:disable-next-line:no-var-requires\nconst theme = require(\"../resources/theme.json\");\n\nimport \"../css/index.css\";\n\nconst s3Base = \"https://www.harp.gl/docs/\";\n\n//Update initial links to s3 base\ndocument.querySelector<HTMLAnchorElement>(\".examples-link\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav\")!.href = s3Base + \"master/doc/\";\ndocument.querySelector<HTMLAnchorElement>(\"#examples-nav\")!.href = s3Base + \"master/examples/\";\ndocument.querySelector<HTMLAnchorElement>(\"#docs-nav-mobile\")!.href = s3Base + \"master/doc/\";\n\n//Update year\n(document.getElementById(\"year\") as HTMLDivElement).innerText = `${new Date().getFullYear()}`;\n\nconst releases = [\n    {\n        date: \"latest\",\n        hash: \"master\",\n        version: \"latest-dev\"\n    }\n];\nconst dropdown = document.querySelector(\"select[name=versions]\") as HTMLSelectElement;\n\nfetch(\"./releases.json\")\n    .then(res => res.json())\n    .then(res => {\n        releases.push(...res);\n        releases.forEach(release => {\n            const option = document.createElement(\"option\");\n            option.innerText = release.version;\n            dropdown.appendChild(option);\n        });\n\n        dropdown.onchange = () => {\n            const selected = dropdown.querySelector<HTMLOptionElement>(\"option:checked\")!;\n            const release = releases.find(x => x.version === selected.innerText);\n            if (!release) {\n                return;\n            }\n            const hash = release.hash;\n            const version = release.version;\n\n            //Update examples button and link\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.href =\n                s3Base + hash + \"/examples/\";\n            document.querySelector<HTMLAnchorElement>(\".examples-link\")!.innerText =\n                \"Examples\" + (hash !== \"master\" ? ` (${version})` : \"\");\n\n            //Update docs button and link\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.href = s3Base + hash + \"/doc/\";\n            document.querySelector<HTMLAnchorElement>(\".docs-link\")!.innerText =\n                \"Documentation\" + (hash !== \"master\" ? ` (${version})` : \"\");\n        };\n    })\n    .catch(() => {\n        //In case network request to build information fails, add master link\n        const option = document.createElement(\"option\");\n        option.innerText = \"master\";\n        dropdown.appendChild(option);\n    });\n\nfunction main() {\n    const canvas = document.getElementById(\"map\") as HTMLCanvasElement;\n    const map = new MapView({\n        canvas,\n        decoderUrl: \"decoder.bundle.js\",\n        theme: (theme as unknown) as Theme,\n        maxVisibleDataSourceTiles: 40,\n        enableMixedLod: false,\n        tileCacheSize: 100\n    });\n    map.animatedExtrusionHandler.enabled = false;\n\n    const omvDataSource = new OmvDataSource({\n        baseUrl: \"https://xyz.api.here.com/tiles/herebase.02\",\n        apiFormat: APIFormat.XYZOMV,\n        styleSetName: \"tilezen\",\n        authenticationCode: accessToken\n    });\n    map.addDataSource(omvDataSource);\n\n    map.resize(window.innerWidth, 500);\n    window.addEventListener(\"resize\", () => map.resize(window.innerWidth, 500));\n\n    const options = { tilt: 34.3, distance: 1400 };\n    const Boston = new GeoCoordinates(42.361145, -71.057083);\n    let azimuth = 135;\n    map.lookAt(Boston, options.distance, options.tilt, azimuth);\n\n    map.addEventListener(MapViewEventNames.FrameComplete, () => {\n        canvas.style.opacity = \"1\";\n\n        map.addEventListener(MapViewEventNames.Render, () =>\n            map.lookAt(Boston, options.distance, options.tilt, (azimuth += 0.1))\n        );\n        setTimeout(() => {\n            map.beginAnimation();\n        }, 0.5);\n    });\n}\n\nmain();\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\nclass IdentityProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Planar;\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    worldExtent<WorldBoundingBox extends Box3Like>(\n        minAltitude: number,\n        maxAltitude: number,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        result.min.x = -Math.PI;\n        result.min.y = -Math.PI * 0.5;\n        result.min.z = minAltitude;\n        result.max.x = Math.PI;\n        result.max.y = Math.PI * 0.5;\n        result.max.z = maxAltitude;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result?: WorldCoordinates\n    ): WorldCoordinates {\n        if (!result) {\n            // tslint:disable-next-line:no-object-literal-type-assertion\n            result = { x: 0, y: 0, z: 0 } as WorldCoordinates;\n        }\n        result.x = THREE.Math.degToRad(geoPoint.longitude);\n        result.y = THREE.Math.degToRad(geoPoint.latitude);\n        result.z = geoPoint.altitude || 0;\n        return result;\n    }\n\n    /** @override */\n    unprojectPoint(worldPoint: Vector3Like): GeoCoordinates {\n        const geoPoint = GeoCoordinates.fromRadians(worldPoint.y, worldPoint.x, worldPoint.z);\n        return geoPoint;\n    }\n\n    /** @override */\n    unprojectAltitude(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    projectBox<WorldBoundingBox extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result?: WorldBoundingBox\n    ): WorldBoundingBox {\n        if (!result) {\n            result = MathUtils.newEmptyBox3() as WorldBoundingBox;\n        }\n        const min = this.projectPoint(\n            new GeoCoordinates(geoBox.south, geoBox.west, geoBox.minAltitude)\n        );\n        const max = this.projectPoint(\n            new GeoCoordinates(geoBox.north, geoBox.east, geoBox.maxAltitude)\n        );\n        if (isBox3Like(result)) {\n            result.min.x = min.x;\n            result.min.y = min.y;\n            result.min.z = min.z;\n            result.max.x = max.x;\n            result.max.y = max.y;\n            result.max.z = max.z;\n        } else if (isOrientedBox3Like(result)) {\n            MathUtils.newVector3(1, 0, 0, result.xAxis);\n            MathUtils.newVector3(0, 1, 0, result.yAxis);\n            MathUtils.newVector3(0, 0, 1, result.zAxis);\n            result.position.x = (min.x + max.x) * 0.5;\n            result.position.y = (min.y + max.y) * 0.5;\n            result.position.z = (min.z + max.z) * 0.5;\n            result.extents.x = (max.x - min.x) * 0.5;\n            result.extents.y = (max.y - min.y) * 0.5;\n            result.extents.z = Math.max(Number.EPSILON, (max.z - min.z) * 0.5);\n        }\n        return result;\n    }\n\n    /** @override */\n    unprojectBox(worldBox: Box3Like): GeoBox {\n        const minGeo = this.unprojectPoint(worldBox.min);\n        const maxGeo = this.unprojectPoint(worldBox.max);\n        return GeoBox.fromCoordinates(minGeo, maxGeo);\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return worldPoint.z;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        worldPoint.z = 0;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(_worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 1 };\n        } else {\n            normal.x = 0;\n            normal.y = 0;\n            normal.z = 1;\n        }\n        return normal;\n    }\n}\n\n/**\n * Identity [[Projection]] used to convert geo coordinates to unit coordinates and vice versa.\n */\nexport const identityProjection: Projection = new IdentityProjection(1);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { GeoCoordinates } from \"../coordinates/GeoCoordinates\";\nimport { GeoCoordinatesLike } from \"../coordinates/GeoCoordinatesLike\";\nimport { Box3Like, isBox3Like } from \"../math/Box3Like\";\nimport { MathUtils } from \"../math/MathUtils\";\nimport { isOrientedBox3Like, OrientedBox3Like } from \"../math/OrientedBox3Like\";\nimport { TransformLike } from \"../math/TransformLike\";\nimport { Vector3Like } from \"../math/Vector3Like\";\nimport { EarthConstants } from \"./EarthConstants\";\nimport { mercatorProjection, webMercatorProjection } from \"./MercatorProjection\";\nimport { Projection, ProjectionType } from \"./Projection\";\n\nimport * as THREE from \"three\";\n\n/**\n * Transforms the given vector using the provided basis.\n */\nfunction apply(\n    xAxis: Vector3Like,\n    yAxis: Vector3Like,\n    zAxis: Vector3Like,\n    v: Vector3Like\n): Vector3Like {\n    const x = xAxis.x * v.x + yAxis.x * v.y + zAxis.x * v.z;\n    const y = xAxis.y * v.x + yAxis.y * v.y + zAxis.y * v.z;\n    const z = xAxis.z * v.x + yAxis.z * v.y + zAxis.z * v.z;\n    v.x = x;\n    v.y = y;\n    v.z = z;\n    return v;\n}\n\n/**\n * Returns the quadrants for the given longitude. The quadrant is defined as:\n *  - quadrant(+Math.PI * -1.0) = 0\n *  - quadrant(+Math.PI * -0.5) = 1\n *  - quadrant(+Math.PI *  0.0) = 2\n *  - quadrant(+Math.PI *  0.5) = 3\n *  - quadrant(+Math.PI *  1.0) = 4\n *\n * @param longitude The longitude in radians.\n */\nfunction getLongitudeQuadrant(longitude: number) {\n    const oneOverPI = 1 / Math.PI;\n    const quadrantIndex = Math.floor(2 * (longitude * oneOverPI + 1));\n    return THREE.Math.clamp(quadrantIndex, 0, 4);\n}\n\nfunction lengthOfVector3(worldPoint: Vector3Like): number {\n    const d = Math.sqrt(\n        worldPoint.x * worldPoint.x + worldPoint.y * worldPoint.y + worldPoint.z * worldPoint.z\n    );\n    return d;\n}\n\n/**\n * Creates a Box3 enclosing the geobox.\n *\n * @param geoBox Ghe given geobox\n * @param worldBox The resulting axis aligned bounding box.\n */\nfunction makeBox3<Bounds extends Box3Like>(\n    geoBox: GeoBox,\n    worldBox: Bounds,\n    unitScale: number\n): Bounds {\n    const halfEquatorialRadius = (unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n\n    const minLongitude = THREE.Math.degToRad(geoBox.west);\n    const maxLongitude = THREE.Math.degToRad(geoBox.east);\n\n    const minLongitudeQuadrant = getLongitudeQuadrant(minLongitude);\n    const maxLongitudeQuadrant = getLongitudeQuadrant(maxLongitude);\n\n    let xMin = Math.cos(minLongitude);\n    let xMax = xMin;\n    let yMin = Math.sin(minLongitude);\n    let yMax = yMin;\n\n    for (\n        let quadrantIndex = minLongitudeQuadrant + 1;\n        quadrantIndex <= maxLongitudeQuadrant;\n        quadrantIndex++\n    ) {\n        // tslint:disable-next-line: no-bitwise\n        const x = ((quadrantIndex + 1) & 1) * ((quadrantIndex & 2) - 1);\n        xMin = Math.min(x, xMin);\n        xMax = Math.max(x, xMax);\n\n        // tslint:disable-next-line: no-bitwise\n        const y = (quadrantIndex & 1) * ((quadrantIndex & 2) - 1);\n        yMin = Math.min(y, yMin);\n        yMax = Math.max(y, yMax);\n    }\n\n    const cosMaxLongitude = Math.cos(maxLongitude);\n    xMin = Math.min(cosMaxLongitude, xMin);\n    xMax = Math.max(cosMaxLongitude, xMax);\n\n    const sinMaxLongitude = Math.sin(maxLongitude);\n    yMin = Math.min(sinMaxLongitude, yMin);\n    yMax = Math.max(sinMaxLongitude, yMax);\n\n    const xCenter = (xMax + xMin) * halfEquatorialRadius;\n    const xExtent = (xMax - xMin) * halfEquatorialRadius;\n\n    const yCenter = (yMax + yMin) * halfEquatorialRadius;\n    const yExtent = (yMax - yMin) * halfEquatorialRadius;\n\n    // Calculate Z boundaries.\n    const minLatitude = THREE.Math.degToRad(geoBox.south);\n    const maxLatutide = THREE.Math.degToRad(geoBox.north);\n\n    const zMax = Math.sin(maxLatutide);\n    const zMin = Math.sin(minLatitude);\n\n    const zCenter = (zMax + zMin) * halfEquatorialRadius;\n    const zExtent = (zMax - zMin) * halfEquatorialRadius;\n\n    worldBox.min.x = xCenter - xExtent;\n    worldBox.min.y = yCenter - yExtent;\n    worldBox.min.z = zCenter - zExtent;\n    worldBox.max.x = xCenter + xExtent;\n    worldBox.max.y = yCenter + yExtent;\n    worldBox.max.z = zCenter + zExtent;\n\n    return worldBox;\n}\n\n/**\n * Computes the spherical projection of the given geo coordinates.\n *\n * @param geoPoint The geo coordinates.\n * @param worldpoint The resulting world coordinates.\n */\nfunction project<WorldCoordinates extends Vector3Like>(\n    geoPoint: GeoCoordinatesLike,\n    worldpoint: WorldCoordinates,\n    unitScale: number\n): typeof worldpoint {\n    const radius = unitScale + (geoPoint.altitude || 0);\n    const latitude = THREE.Math.degToRad(geoPoint.latitude);\n    const longitude = THREE.Math.degToRad(geoPoint.longitude);\n    const cosLatitude = Math.cos(latitude);\n    worldpoint.x = radius * cosLatitude * Math.cos(longitude);\n    worldpoint.y = radius * cosLatitude * Math.sin(longitude);\n    worldpoint.z = radius * Math.sin(latitude);\n    return worldpoint;\n}\n\nclass SphereProjection extends Projection {\n    /** @override */\n    readonly type: ProjectionType = ProjectionType.Spherical;\n\n    /** @override */\n    worldExtent<Bounds extends Box3Like>(\n        _minElevation: number,\n        maxElevation: number,\n        result: Bounds = MathUtils.newEmptyBox3() as Bounds\n    ): Bounds {\n        const radius = this.unitScale + maxElevation;\n        result.min.x = -radius;\n        result.min.y = -radius;\n        result.min.z = -radius;\n        result.max.x = radius;\n        result.max.y = radius;\n        result.max.z = radius;\n        return result;\n    }\n\n    /** @override */\n    projectPoint<WorldCoordinates extends Vector3Like>(\n        geoPoint: GeoCoordinatesLike,\n        result: WorldCoordinates = MathUtils.newVector3(0, 0, 0) as WorldCoordinates\n    ): WorldCoordinates {\n        return project(geoPoint, result, this.unitScale);\n    }\n\n    /** @override */\n    unprojectPoint(point: Vector3Like): GeoCoordinates {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y;\n        const parallelRadius = Math.sqrt(parallelRadiusSq);\n        const v = point.z / parallelRadius;\n\n        if (isNaN(v)) {\n            return GeoCoordinates.fromRadians(0, 0, -this.unitScale);\n        }\n\n        const radius = Math.sqrt(parallelRadiusSq + point.z * point.z);\n\n        return GeoCoordinates.fromRadians(\n            Math.atan(v),\n            Math.atan2(point.y, point.x),\n            radius - this.unitScale\n        );\n    }\n\n    /** @override */\n    unprojectAltitude(point: Vector3Like): number {\n        const parallelRadiusSq = point.x * point.x + point.y * point.y + point.z * point.z;\n        return Math.sqrt(parallelRadiusSq) - EarthConstants.EQUATORIAL_RADIUS;\n    }\n\n    /** @override */\n    projectBox<Bounds extends Box3Like | OrientedBox3Like>(\n        geoBox: GeoBox,\n        result: Bounds = MathUtils.newEmptyBox3() as Bounds\n    ): Bounds {\n        if (isBox3Like(result)) {\n            return makeBox3(geoBox, result, this.unitScale);\n        } else if (isOrientedBox3Like(result)) {\n            if (geoBox.longitudeSpan >= 90) {\n                const bounds = makeBox3(geoBox, MathUtils.newEmptyBox3(), this.unitScale);\n                MathUtils.newVector3(1, 0, 0, result.xAxis);\n                MathUtils.newVector3(0, 1, 0, result.yAxis);\n                MathUtils.newVector3(0, 0, 1, result.zAxis);\n                result.position.x = (bounds.max.x + bounds.min.x) * 0.5;\n                result.position.y = (bounds.max.y + bounds.min.y) * 0.5;\n                result.position.z = (bounds.max.z + bounds.min.z) * 0.5;\n                result.extents.x = (bounds.max.x - bounds.min.x) * 0.5;\n                result.extents.y = (bounds.max.y - bounds.min.y) * 0.5;\n                result.extents.z = (bounds.max.z - bounds.min.z) * 0.5;\n                return result;\n            }\n\n            const { south, west, north, east, center: mid } = geoBox;\n            const midX = mid.longitude;\n            const midY = mid.latitude;\n            const cosSouth = Math.cos(THREE.Math.degToRad(south));\n            const sinSouth = Math.sin(THREE.Math.degToRad(south));\n            const cosWest = Math.cos(THREE.Math.degToRad(west));\n            const sinWest = Math.sin(THREE.Math.degToRad(west));\n            const cosNorth = Math.cos(THREE.Math.degToRad(north));\n            const sinNorth = Math.sin(THREE.Math.degToRad(north));\n            const cosEast = Math.cos(THREE.Math.degToRad(east));\n            const sinEast = Math.sin(THREE.Math.degToRad(east));\n            const cosMidX = Math.cos(THREE.Math.degToRad(midX));\n            const sinMidX = Math.sin(THREE.Math.degToRad(midX));\n            const cosMidY = Math.cos(THREE.Math.degToRad(midY));\n            const sinMidY = Math.sin(THREE.Math.degToRad(midY));\n\n            // Build the orientation of the OBB using the normal vector and its partial derivates.\n\n            // the sperical coordinates of the mid point of the geobox.\n            MathUtils.newVector3(cosMidX * cosMidY, sinMidX * cosMidY, sinMidY, result.zAxis);\n\n            // the partial derivates of the normal vector.\n            MathUtils.newVector3(-sinMidX, cosMidX, 0, result.xAxis);\n            MathUtils.newVector3(-cosMidX * sinMidY, -sinMidX * sinMidY, cosMidY, result.yAxis);\n\n            let width: number;\n            let minY: number;\n            let maxY: number;\n\n            if (south >= 0) {\n                // abs(dot(southWest - southEast, xAxis))\n                width = Math.abs(\n                    cosSouth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                );\n\n                // dot(south, yAxis)\n                minY = cosMidY * sinSouth - sinMidY * cosSouth;\n\n                // dot(northEast, zAxis)\n                maxY =\n                    cosMidY * sinNorth -\n                    sinMidY * cosNorth * (cosMidX * cosEast + sinMidX * sinEast);\n            } else {\n                if (north <= 0) {\n                    // abs(dot(northWest - northEast, xAxis))\n                    width = Math.abs(\n                        cosNorth * (cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest))\n                    );\n\n                    // dot(north, yAxis)\n                    maxY = cosMidY * sinNorth - sinMidY * cosNorth;\n                } else {\n                    // abs(dot(west - east, xAxis))\n                    width = Math.abs(cosMidX * (sinWest - sinEast) + sinMidX * (cosEast - cosWest));\n\n                    // dot(northEast, yAxis)\n                    maxY =\n                        cosMidY * sinNorth -\n                        sinMidY * cosNorth * (sinMidX * sinEast + cosMidX * cosEast);\n                }\n\n                // dot(southEast, yAxis)\n                minY =\n                    cosMidY * sinSouth -\n                    sinMidY * cosSouth * (cosMidX * cosEast + sinMidX * sinEast);\n            }\n\n            const rMax = (this.unitScale + (geoBox.maxAltitude || 0)) * 0.5;\n            const rMin = (this.unitScale + (geoBox.minAltitude || 0)) * 0.5;\n\n            // min(dot(southEast, zAxis), dot(northEast, zAxis))\n\n            const d = cosMidY * (cosMidX * cosEast + sinMidX * sinEast);\n\n            const minZ = Math.min(\n                cosNorth * d + sinNorth * sinMidY,\n                cosSouth * d + sinSouth * sinMidY\n            );\n\n            MathUtils.newVector3(\n                width * rMax,\n                (maxY - minY) * rMax,\n                rMax - minZ * rMin,\n                result.extents\n            );\n\n            MathUtils.newVector3(0, (minY + maxY) * rMax, rMax + rMax, result.position);\n\n            apply(result.xAxis, result.yAxis, result.zAxis, result.position);\n\n            result.position.x = result.position.x - result.zAxis.x * result.extents.z;\n            result.position.y = result.position.y - result.zAxis.y * result.extents.z;\n            result.position.z = result.position.z - result.zAxis.z * result.extents.z;\n\n            return result;\n        }\n\n        throw new Error(\"Invalid bounding box\");\n    }\n\n    /** @override */\n    unprojectBox(_worldBox: Box3Like): GeoBox {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /** @override */\n    getScaleFactor(_worldPoint: Vector3Like): number {\n        return 1;\n    }\n\n    /** @override */\n    groundDistance(worldPoint: Vector3Like): number {\n        return lengthOfVector3(worldPoint) - this.unitScale;\n    }\n\n    /** @override */\n    scalePointToSurface(worldPoint: Vector3Like): Vector3Like {\n        const scale = this.unitScale / (lengthOfVector3(worldPoint) || 1);\n        worldPoint.x *= scale;\n        worldPoint.y *= scale;\n        worldPoint.z *= scale;\n        return worldPoint;\n    }\n\n    /** @override */\n    surfaceNormal(worldPoint: Vector3Like, normal?: Vector3Like) {\n        if (normal === undefined) {\n            normal = { x: 0, y: 0, z: 0 };\n        }\n        const scale = 1 / (lengthOfVector3(worldPoint) || 1);\n        normal.x = worldPoint.x * scale;\n        normal.y = worldPoint.y * scale;\n        normal.z = worldPoint.z * scale;\n        return normal;\n    }\n\n    /** @override */\n    reprojectPoint(\n        sourceProjection: Projection,\n        worldPos: Vector3Like,\n        result?: Vector3Like\n    ): Vector3Like {\n        if (sourceProjection === mercatorProjection || sourceProjection === webMercatorProjection) {\n            const { x, y, z } = worldPos;\n            const r = this.unitScale;\n            const mx = x / r - Math.PI;\n            const my = y / r - Math.PI;\n            const w = Math.exp(my);\n            const d = w * w;\n            const gx = (2 * w) / (d + 1);\n            const gy = (d - 1) / (d + 1);\n            const scale = r + z;\n\n            if (result === undefined) {\n                // tslint:disable-next-line: no-object-literal-type-assertion\n                result = {} as Vector3Like;\n            }\n\n            result.x = Math.cos(mx) * gx * scale;\n            result.y = Math.sin(mx) * gx * scale;\n            result.z = gy * scale;\n\n            if (sourceProjection === webMercatorProjection) {\n                result.z = -result.z;\n            }\n\n            return result;\n        }\n\n        return super.reprojectPoint(sourceProjection, worldPos, result!);\n    }\n\n    /** @override */\n    localTangentSpace(geoPoint: GeoCoordinatesLike, result: TransformLike): TransformLike {\n        const latitude = THREE.Math.degToRad(geoPoint.latitude);\n        const longitude = THREE.Math.degToRad(geoPoint.longitude);\n\n        const cosLongitude = Math.cos(longitude);\n        const sinLongitude = Math.sin(longitude);\n        const cosLatitude = Math.cos(latitude);\n        const sinLatitude = Math.sin(latitude);\n\n        MathUtils.newVector3(\n            cosLongitude * cosLatitude,\n            sinLongitude * cosLatitude,\n            sinLatitude,\n            result.zAxis\n        );\n\n        MathUtils.newVector3(-sinLongitude, cosLongitude, 0, result.xAxis);\n\n        MathUtils.newVector3(\n            -cosLongitude * sinLatitude,\n            -sinLongitude * sinLatitude,\n            cosLatitude,\n            result.yAxis\n        );\n\n        this.projectPoint(geoPoint, result.position);\n\n        return result;\n    }\n}\n\nexport const sphereProjection: Projection = new SphereProjection(EarthConstants.EQUATORIAL_RADIUS);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoBox } from \"../coordinates/GeoBox\";\nimport { TileKey } from \"./TileKey\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A class used to represent a quadtree.\n */\nexport class QuadTree {\n    /**\n     * Constructs a new `QuadTree` for the given [[TilingScheme]].\n     *\n     * Example:\n     * ```typescript\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * const geoBox = quadTree.getGeoBox(tileKey);\n     * console.log(geoBox.center);\n     * ```\n     *\n     * @param tilingScheme The TilingScheme used by this `QuadTree`.\n     */\n    constructor(readonly tilingScheme: TilingScheme) {}\n\n    /**\n     * Visits this `QuadTree` and invoke the given accept method with the current [[TileKey]] and\n     * its bounding box in geo coordinates.\n     *\n     * Example:\n     * ```typescript\n     * const geoPos = new GeoCoordinates(latitude, longitude);\n     * const quadTree = new QuadTree(hereTilingScheme);\n     * quadTree.visit((tileKey, geoBox) => {\n     *     if (geoBox.contains(geoPos)) {\n     *         console.log(\"tile\", tileKey, \"contains\", geoPos);\n     *         return tileKey.level < 14; // stop visiting the quadtree if the level is >= 14.\n     *     }\n     *     return false; // stop visiting the quadtree,\n     *                   // the tile's geoBox doesn't contain the given coordinates.\n     * });\n     * ```\n     *\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visit(accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        this.visitTileKey(TileKey.fromRowColumnLevel(0, 0, 0), accept);\n    }\n\n    /**\n     * Visits the subtree starting from the given tile.\n     *\n     * @param tileKey The root of the subtree that should be visited.\n     * @param accept A function that takes a [[TileKey]] and its bounding box in geo coordinates and\n     * returns `true` if the visit of the `QuadTree` should continue; otherwise `false`.\n     */\n    visitTileKey(tileKey: TileKey, accept: (tileKey: TileKey, geoBox: GeoBox) => boolean) {\n        const geoBox = this.tilingScheme.getGeoBox(tileKey);\n\n        if (!accept(tileKey, geoBox)) {\n            return;\n        }\n\n        for (const subTileKey of this.tilingScheme.getSubTileKeys(tileKey)) {\n            this.visitTileKey(subTileKey, accept);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { normalizedEquirectangularProjection } from \"../projection/EquirectangularProjection\";\nimport { halfQuadTreeSubdivisionScheme } from \"./HalfQuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * [[TilingScheme]] used by most of the data published by HERE.\n *\n * The `hereTilingScheme` features a half quadtree subdivision scheme and an equirectangular\n * projection.\n */\nexport const hereTilingScheme = new TilingScheme(\n    halfQuadTreeSubdivisionScheme,\n    normalizedEquirectangularProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { webMercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and web Mercator projection.\n */\nexport const webMercatorTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    webMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { mercatorProjection } from \"../projection/MercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * The [[TilingScheme]] used by the HERE web tiles.\n *\n * The `mercatorTilingScheme` features a quadtree subdivision scheme and a Mercator projection.\n */\nexport const mercatorTilingScheme = new TilingScheme(quadTreeSubdivisionScheme, mercatorProjection);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { transverseMercatorProjection } from \"../projection/TransverseMercatorProjection\";\nimport { quadTreeSubdivisionScheme } from \"./QuadTreeSubdivisionScheme\";\nimport { TilingScheme } from \"./TilingScheme\";\n\n/**\n * A [[TilingScheme]] featuring quadtree subdivision scheme and\n * transverse Mercator projection.\n */\nexport const polarTilingScheme = new TilingScheme(\n    quadTreeSubdivisionScheme,\n    transverseMercatorProjection\n);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Interface representing a Vector3.\n */\nexport interface Vector3Like {\n    /**\n     * The X position.\n     */\n    x: number;\n\n    /**\n     * The Y position.\n     */\n    y: number;\n\n    /**\n     * The Z position.\n     */\n    z: number;\n}\n\nexport function isVector3Like(v: any): v is Vector3Like {\n    return v && typeof v.x === \"number\" && typeof v.y === \"number\" && typeof v.z === \"number\";\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"./Vector3Like\";\n\n/**\n * The interface [[TransformLike]] is used to represent transforms with\n * only translation and rotation.\n */\nexport interface TransformLike {\n    /**\n     * The position of this transform.\n     */\n    readonly position: Vector3Like;\n\n    /**\n     * The x-axis of this transform.\n     */\n    readonly xAxis: Vector3Like;\n\n    /**\n     * The y-axis of this transform.\n     */\n    readonly yAxis: Vector3Like;\n\n    /**\n     * The z-axis of this transform.\n     */\n    readonly zAxis: Vector3Like;\n}\n\n/**\n * Returns true if the given object implements the interface [[TransformLike]].\n *\n * @param object The object.\n */\nexport function isTransformLike(object: {}): object is TransformLike {\n    const transform = object as Partial<TransformLike>;\n    return (\n        transform.position !== undefined &&\n        transform.xAxis !== undefined &&\n        transform.yAxis !== undefined &&\n        transform.zAxis !== undefined\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Frustum, Matrix4, Plane, Vector3 } from \"three\";\nimport { OrientedBox3Like } from \"./OrientedBox3Like\";\n\nexport class OrientedBox3 implements OrientedBox3Like {\n    /**\n     * The position of the center of this `OrientedBox3`.\n     */\n    readonly position = new Vector3();\n\n    /**\n     * The x-axis of this `OrientedBox3`.\n     */\n    readonly xAxis = new Vector3(1, 0, 0);\n\n    /**\n     * The y-axis of this `OrientedBox3`.\n     */\n    readonly yAxis = new Vector3(0, 1, 0);\n\n    /**\n     * The z-axis of this `OrientedBox3`.\n     */\n    readonly zAxis = new Vector3(0, 0, 1);\n\n    /**\n     * The extents of this `OrientedBox3`.\n     */\n    readonly extents = new Vector3();\n\n    /**\n     * Creates a new `OrientedBox3`.\n     */\n    constructor();\n\n    /**\n     * Creates a new `OrientedBox3` with the given position, orientation and extents.\n     *\n     * @param position The position of the center of the `OrientedBox3`.\n     * @param rotationMatrix The rotation of the `OrientedBox3`.\n     * @param extents The extents of the `OrientedBox3`.\n     */\n    constructor(position: Vector3, rotationMatrix: Matrix4, extents: Vector3);\n\n    /**\n     * Creates a new `OrientedBox3`.\n     *\n     * @hideconstructor\n     */\n    constructor(position?: Vector3, rotationMatrix?: Matrix4, extents?: Vector3) {\n        if (position !== undefined) {\n            this.position.copy(position);\n        }\n\n        if (rotationMatrix !== undefined) {\n            rotationMatrix.extractBasis(this.xAxis, this.yAxis, this.zAxis);\n        }\n\n        if (extents !== undefined) {\n            this.extents.copy(extents);\n        }\n    }\n\n    /**\n     * Create a copy of this [[OrientedBoundingBox]].\n     */\n    clone(): OrientedBox3 {\n        const newBox = new OrientedBox3();\n        newBox.copy(this);\n        return newBox;\n    }\n\n    /**\n     * Copies the values of `other` to this [[OrientedBox3]].\n     * @param other The other [[OrientedBox3]] to copy.\n     */\n    copy(other: OrientedBox3) {\n        this.position.copy(other.position);\n        this.xAxis.copy(other.xAxis);\n        this.yAxis.copy(other.yAxis);\n        this.zAxis.copy(other.zAxis);\n        this.extents.copy(other.extents);\n    }\n\n    /**\n     * Gets the center position of this [[OrientedBox3]].\n     *\n     * @param center The returned center position.\n     */\n    getCenter(center = new Vector3()): Vector3 {\n        return center.copy(this.position);\n    }\n\n    /**\n     * Gets the size of this [[OrientedBox3]].\n     *\n     * @param size The returned size.\n     */\n    getSize(size = new Vector3()): Vector3 {\n        return size.copy(this.extents).multiplyScalar(2);\n    }\n\n    /**\n     * Gets the orientation matrix of this `OrientedBox3`.\n     * @param matrix The output orientation matrix.\n     */\n    getRotationMatrix(matrix: Matrix4 = new Matrix4()): Matrix4 {\n        return matrix.makeBasis(this.xAxis, this.yAxis, this.zAxis);\n    }\n\n    /**\n     * Checks intersection with the given `THREE.Frustum` or array of `THREE.Plane`s.\n     *\n     * @param frustumOrPlanes Frustum or array of planes.\n     */\n    intersects(frustumOrPlanes: Plane[] | Frustum): boolean {\n        const planes: Plane[] = Array.isArray(frustumOrPlanes)\n            ? frustumOrPlanes\n            : frustumOrPlanes.planes;\n\n        for (const plane of planes) {\n            const r =\n                Math.abs(plane.normal.dot(this.xAxis) * this.extents.x) +\n                Math.abs(plane.normal.dot(this.yAxis) * this.extents.y) +\n                Math.abs(plane.normal.dot(this.zAxis) * this.extents.z);\n\n            const d = plane.distanceToPoint(this.position);\n\n            if (d + r < 0) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns true if this [[OrientedBox3]] contains the given point.\n     *\n     * @param point A valid point.\n     */\n    contains(point: Vector3): boolean {\n        const dx = point.x - this.position.x;\n        const dy = point.y - this.position.y;\n        const dz = point.z - this.position.z;\n        const x = Math.abs(dx * this.xAxis.x + dy * this.xAxis.y + dz * this.xAxis.z);\n        const y = Math.abs(dx * this.yAxis.x + dy * this.yAxis.y + dz * this.yAxis.z);\n        const z = Math.abs(dx * this.zAxis.x + dy * this.zAxis.y + dz * this.zAxis.z);\n        if (x > this.extents.x || y > this.extents.y || z > this.extents.z) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPoint(point: Vector3): number {\n        return Math.sqrt(this.distanceToPointSquared(point));\n    }\n\n    /**\n     * Returns the squared distance from this [[OrientedBox3]] and the given `point`.\n     *\n     * @param point A point.\n     */\n    distanceToPointSquared(point: Vector3): number {\n        const d = new Vector3();\n        d.subVectors(point, this.position);\n\n        const lengths = [d.dot(this.xAxis), d.dot(this.yAxis), d.dot(this.zAxis)];\n\n        let result = 0;\n\n        for (let i = 0; i < 3; ++i) {\n            const length = lengths[i];\n            const extent = this.extents.getComponent(i);\n            if (length < -extent) {\n                const dd = extent + length;\n                result += dd * dd;\n            } else if (length > extent) {\n                const dd = length - extent;\n                result += dd * dd;\n            }\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport { enforceBlending } from \"./Utils\";\n\nconst vertexShader: string = `\nuniform float size;\n\nvoid main() {\n    vec3 transformed = vec3(position);\n    vec4 mvPosition = modelViewMatrix * vec4(transformed, 1.0);\n\n    gl_Position = projectionMatrix * mvPosition;\n    gl_PointSize = size;\n}\n`;\n\nconst fragmentShader: string = `\nuniform vec3 diffuse;\nuniform float opacity;\n\nvoid main() {\n    float alpha = opacity;\n\n    float radius = 0.5;\n    vec2 coords = gl_PointCoord.xy - vec2(0.5);\n    float len = length(coords);\n    float falloff = fwidth(len);\n    float threshold = 1.0 - smoothstep(radius - falloff, radius, len);\n    alpha *= threshold;\n\n    gl_FragColor = vec4(diffuse, alpha);\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface CirclePointsMaterialParameters extends THREE.ShaderMaterialParameters {\n    /**\n     * Point size.\n     */\n    size?: number;\n\n    /**\n     * Point color.\n     */\n    color?: THREE.Color;\n}\n\n/**\n * Material designed to render circle points. Note that it is always transparent since the circle\n * shape is created with an alpha channel to benefit an antialising that a mere `discard` could\n * not bring.\n */\nexport class CirclePointsMaterial extends THREE.ShaderMaterial {\n    static readonly DEFAULT_CIRCLE_SIZE = 1;\n\n    private m_color: THREE.Color;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `CirclePointsMaterial`.\n     *\n     * @param parameters The constructor's parameters.\n     */\n    constructor(parameters: CirclePointsMaterialParameters = {}) {\n        const { size, color, opacity, ...shaderParams } = parameters;\n        shaderParams.name = \"CirclePointsMaterial\";\n        shaderParams.vertexShader = vertexShader;\n        shaderParams.fragmentShader = fragmentShader;\n        shaderParams.uniforms = {\n            size: new THREE.Uniform(CirclePointsMaterial.DEFAULT_CIRCLE_SIZE),\n            diffuse: new THREE.Uniform(new THREE.Color()),\n            opacity: new THREE.Uniform(1.0)\n        };\n        shaderParams.depthTest = false;\n        shaderParams.extensions = {\n            ...shaderParams.extensions,\n            derivatives: true\n        };\n\n        super(shaderParams);\n        // Blending needs to always be enabled to support smooth edges\n        enforceBlending(this);\n\n        this.type = \"CirclePointsMaterial\";\n        this.m_color = this.uniforms.diffuse.value;\n        this.m_opacity = this.uniforms.opacity.value;\n\n        if (size !== undefined) {\n            this.size = size;\n        }\n        if (color !== undefined) {\n            this.color = color;\n        }\n        if (opacity !== undefined) {\n            this.opacity = opacity;\n        }\n    }\n\n    /**\n     * Gets the circle screen size.\n     */\n    get size(): number {\n        return this.uniforms.size.value;\n    }\n\n    /**\n     * Sets the circle screen size.\n     */\n    set size(size: number) {\n        this.uniforms.size.value = size;\n    }\n\n    /**\n     * Get circle opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n\n    /**\n     * Set circle opacity.\n     */\n    set opacity(opacity: number) {\n        this.m_opacity = opacity;\n\n        // Base constructor may set opacity before uniform being created.\n        if (this.uniforms && this.uniforms.opacity) {\n            this.uniforms.opacity.value = opacity;\n        }\n    }\n\n    /**\n     * Gets the diffuse.\n     */\n    get color(): THREE.Color {\n        return this.m_color;\n    }\n\n    /**\n     * Sets the diffuse.\n     */\n    set color(color: THREE.Color) {\n        this.m_color.set(color);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/GroupedPriorityList\";\nexport * from \"./lib/Logger\";\nexport * from \"./lib/Math2D\";\nexport * from \"./lib/MathUtils\";\nexport * from \"./lib/Mixins\";\nexport * from \"./lib/assert\";\nexport * from \"./lib/CachedResource\";\nexport * from \"./lib/ContextLogger\";\nexport * from \"./lib/PerformanceTimer\";\nexport * from \"./lib/ObjectUtils\";\nexport * from \"./lib/OptionsUtils\";\nexport * from \"./lib/UriResolver\";\nexport * from \"./lib/UrlUtils\";\nexport * from \"./lib/Functions\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * A `PriorityListElement` has a priority to assist in sorting. The idea is that the items in a\n * grouped priority list will not modify their priority during processing to such an amount, that\n * they will change into another group. Smaller lists are smaller to sort, and in case of resource\n * limitation (maximum number of rendered objects reached), not all items have to be sorted at all.\n */\nexport interface PriorityListElement {\n    /**\n     * The integer value of this priority is used to group objects of \"same\" priority.\n     */\n    priority: number;\n}\n\n/**\n * The `PriorityListGroup` contains a list of [[PriorityListElement]]s that all have the same\n * (integer) priority.\n */\nexport class PriorityListGroup<T extends PriorityListElement> {\n    constructor(readonly priority: number, public elements: T[] = new Array()) {}\n\n    /**\n     * Create and return a deep copy of the `PriorityListGroup<T>`.\n     *\n     * @returns A clone of the `PriorityListGroup<T>`.\n     */\n    clone(): PriorityListGroup<T> {\n        return new PriorityListGroup<T>(this.priority, this.elements.slice());\n    }\n}\n\n/**\n * The `PriorityListGroupMap` is a map to map the (integer) priority to a [[PriorityListGroup]].\n */\nexport type PriorityListGroupMap<T extends PriorityListElement> = Map<number, PriorityListGroup<T>>;\n\n/**\n * The `GroupedPriorityList` contains a [[PriorityListGroupMap]] to manage a larger number of items\n * in priority groups.\n */\nexport class GroupedPriorityList<T extends PriorityListElement> {\n    readonly groups: PriorityListGroupMap<T> = new Map();\n    private m_sortedGroups: Array<PriorityListGroup<T>> | undefined;\n    /**\n     * Add an element to the `GroupedPriorityList`. Selects group based on the elements priority.\n     *\n     * @param element Element to be added.\n     */\n    add(element: T): void {\n        this.getGroup(element.priority).elements.push(element);\n    }\n\n    /**\n     * Remove an element from the `GroupedPriorityList`.\n     *\n     * Note: It is required that the priority is the same as it was when the element has been added.\n     * Otherwise, the removal will fail.\n     *\n     * @param element Element to be removed.\n     * @returns `True` if the element was removed, `false` otherwise.\n     */\n    remove(element: T): boolean {\n        const group = this.getGroup(element.priority);\n        if (group !== undefined) {\n            const foundIndex = group.elements.indexOf(element);\n            if (foundIndex >= 0) {\n                group.elements.splice(foundIndex, 1);\n                if (group.elements.length === 0) {\n                    const normalizedPriority = Math.floor(element.priority);\n                    this.groups.delete(normalizedPriority);\n                    if (this.m_sortedGroups) {\n                        this.m_sortedGroups = [];\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Remove all internal [[PriorityListGroup]]s.\n     */\n    clear(): void {\n        this.groups.clear();\n        if (this.m_sortedGroups) {\n            this.m_sortedGroups = [];\n        }\n    }\n\n    /**\n     * Merge another [[GroupedPriorityList]] into this one.\n     *\n     * @param other Other group to merge.\n     */\n    merge(other: GroupedPriorityList<T>): GroupedPriorityList<T> {\n        for (const otherGroup of other.groups) {\n            const group = this.findGroup(otherGroup[1].priority);\n            if (group === undefined) {\n                this.groups.set(Math.floor(otherGroup[1].priority), otherGroup[1].clone());\n                if (this.m_sortedGroups) {\n                    this.m_sortedGroups = [];\n                }\n                continue;\n            }\n            group.elements = group.elements.concat(otherGroup[1].elements);\n        }\n        return this;\n    }\n\n    /**\n     * Return a sorted list of [[PriorityListGroup]]s.\n     */\n    get sortedGroups(): Array<PriorityListGroup<T>> {\n        if (this.m_sortedGroups && this.m_sortedGroups.length > 0) {\n            return this.m_sortedGroups;\n        }\n\n        if (!this.m_sortedGroups) {\n            this.m_sortedGroups = [];\n        }\n        for (const priorityList of this.groups) {\n            this.m_sortedGroups.push(priorityList[1]);\n        }\n\n        this.m_sortedGroups.sort((a: PriorityListGroup<T>, b: PriorityListGroup<T>) => {\n            return b.priority - a.priority;\n        });\n        return this.m_sortedGroups;\n    }\n\n    /**\n     * Apply function to all elements in this `GroupedPriorityList`.\n     *\n     * @param {(element: T) => void} fun Function to apply.\n     */\n    forEach(fun: (element: T) => void): void {\n        for (const group of this.groups) {\n            group[1].elements.forEach(fun);\n        }\n    }\n\n    /**\n     * Count the number of elements in this `GroupedPriorityList`.\n     */\n    count(): number {\n        let n = 0;\n        for (const group of this.groups) {\n            n += group[1].elements.length;\n        }\n        return n;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private findGroup(priority: number): PriorityListGroup<T> | undefined {\n        const normalizedPriority = Math.floor(priority);\n        const group = this.groups.get(normalizedPriority);\n        return group;\n    }\n\n    /**\n     * Get group of elements that have the same (integer) priority.\n     *\n     * @param priority The priority to retrieve all elements from.\n     */\n    private getGroup(priority: number): PriorityListGroup<T> {\n        let group = this.findGroup(priority);\n\n        if (group === undefined) {\n            const normalizedPriority = Math.floor(priority);\n            group = new PriorityListGroup<T>(normalizedPriority);\n            this.groups.set(normalizedPriority, group);\n            if (this.m_sortedGroups) {\n                this.m_sortedGroups = [];\n            }\n        }\n\n        return group;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./ConsoleChannel\";\nexport * from \"./IChannel\";\nexport * from \"./ILogger\";\nexport * from \"./Logger\";\nexport * from \"./LoggerManager\";\nexport * from \"./MultiChannel\";\nexport * from \"./WorkerChannel\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { LoggerManagerImpl } from \"./LoggerManagerImpl\";\n\n/**\n * The LoggerManager class implements a singleton object that handles logging.\n *\n * Example:\n *\n * ```typescript\n *\n * const logger = LoggerManager.instance.create(\"MyFontLoaderClass\");\n * if (missingFonts.length > 0) {\n *     logger.error(\"These fonts can not be loaded: \", missingFonts);\n * } else {\n *     logger.log(\"All fonts have been loaded.\");\n * }\n * ```\n */\nexport class LoggerManager {\n    private static m_instance: ILoggerManager;\n\n    static get instance(): ILoggerManager {\n        return this.m_instance || (this.m_instance = new LoggerManagerImpl());\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ConsoleChannel } from \"./ConsoleChannel\";\nimport { IChannel } from \"./IChannel\";\nimport { ILogger, LoggerOptions, LogLevel } from \"./ILogger\";\nimport { ILoggerManager } from \"./ILoggerManager\";\nimport { Logger } from \"./Logger\";\nimport { WorkerChannel } from \"./WorkerChannel\";\n\n/**\n * LoggerManagerImpl is the class for the singleton instance of the logger manager.\n * It handles channels and loggers.\n */\n\nexport class LoggerManagerImpl implements ILoggerManager {\n    channel: IChannel;\n    private readonly m_loggers: ILogger[] = [];\n    private m_levelSetForAll?: LogLevel;\n\n    constructor() {\n        this.channel =\n            typeof self === \"undefined\" || typeof self.document !== \"undefined\"\n                ? new ConsoleChannel()\n                : new WorkerChannel();\n    }\n\n    getLoggerNames(): string[] {\n        return this.m_loggers.map(logger => logger.name);\n    }\n\n    getLogger(name: string): ILogger | undefined {\n        return this.m_loggers.find(logger => logger.name === name);\n    }\n\n    create(loggerName: string, options: LoggerOptions = {}): ILogger {\n        if (\n            this.m_levelSetForAll !== undefined &&\n            (options.level === undefined || options.level < this.m_levelSetForAll)\n        ) {\n            options.level = this.m_levelSetForAll;\n        }\n        const logger = new Logger(loggerName, this.channel, options);\n        this.m_loggers.push(logger);\n        return logger;\n    }\n\n    dispose(logger: ILogger) {\n        const found = this.m_loggers.indexOf(logger);\n        if (found < 0) {\n            throw new Error(`Cannot unregister \"${logger}\" : no such logger registered.`);\n        }\n        this.m_loggers.splice(found, 1);\n    }\n\n    updateAll(options: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            logger.update(options);\n        }\n    }\n\n    update(loggerName: string, config: LoggerOptions) {\n        for (const logger of this.m_loggers) {\n            if (logger.name === loggerName) {\n                logger.update(config);\n            }\n        }\n    }\n\n    enableAll(enabled: boolean) {\n        for (const logger of this.m_loggers) {\n            logger.enabled = enabled;\n        }\n    }\n\n    enable(loggerName: string, value: boolean) {\n        this.update(loggerName, { enabled: value });\n    }\n\n    setLogLevelForAll(level: LogLevel) {\n        this.m_levelSetForAll = level;\n        for (const logger of this.m_loggers) {\n            logger.level = level;\n        }\n    }\n\n    setLogLevel(loggerName: string, level: LogLevel) {\n        this.update(loggerName, { level });\n    }\n\n    setChannel(channel: IChannel) {\n        this.channel = channel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"./IChannel\";\n\n/**\n * Class allowing mixing several channels.\n */\nexport class MultiChannel implements IChannel {\n    private readonly channels: IChannel[] = [];\n    constructor(...channels: IChannel[]) {\n        this.channels = channels;\n    }\n\n    error(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.error(message, ...optionalParams);\n        }\n    }\n\n    debug(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.debug(message, ...optionalParams);\n        }\n    }\n\n    info(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.info(message, ...optionalParams);\n        }\n    }\n\n    log(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.log(message, ...optionalParams);\n        }\n    }\n\n    trace(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.trace(message, ...optionalParams);\n        }\n    }\n\n    warn(message?: any, ...optionalParams: any[]) {\n        for (const channel of this.channels) {\n            channel.warn(message, ...optionalParams);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace Math2D {\n    /**\n     * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n     * objects with two numbers each). Should be faster.\n     */\n    export class Box {\n        /**\n         * Alternative 2D box object with less memory impact (four numbers instead of two min/max\n         * objects with two numbers each). Should be faster.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        constructor(public x = 0, public y = 0, public w = 0, public h = 0) {}\n\n        /**\n         * Set new values to all properties of the box.\n         *\n         * @param x New X value.\n         * @param y New y value.\n         * @param w New w value.\n         * @param h New h value.\n         */\n        set(x: number, y: number, w: number, h: number) {\n            this.x = x;\n            this.y = y;\n            this.w = w;\n            this.h = h;\n        }\n\n        /**\n         * Test box for inclusion of point.\n         *\n         * @param x X coordinate of point.\n         * @param y Y coordinate of point.\n         */\n        contains(x: number, y: number): boolean {\n            return this.x <= x && this.x + this.w >= x && this.y <= y && this.y + this.h >= y;\n        }\n\n        /**\n         * Test box for inclusion of another box.\n         *\n         * @param other Box 2 to test for inclusion.\n         */\n        containsBox(other: Box): boolean {\n            const xmax = other.x + other.w;\n            const ymax = other.y + other.h;\n            return (\n                this.contains(other.x, other.y) &&\n                this.contains(xmax, other.y) &&\n                this.contains(other.x, ymax) &&\n                this.contains(xmax, ymax)\n            );\n        }\n\n        /**\n         * Test two boxes for intersection.\n         *\n         * @param other Box 2 to test for intersection.\n         */\n        intersects(other: Box): boolean {\n            return (\n                this.x <= other.x + other.w &&\n                this.x + this.w >= other.x &&\n                this.y <= other.y + other.h &&\n                this.y + this.h >= other.y\n            );\n        }\n    }\n\n    /**\n     * Box to store UV coordinates.\n     */\n    export interface UvBox {\n        s0: number;\n        t0: number;\n        s1: number;\n        t1: number;\n    }\n\n    /**\n     * Compute squared distance between two 2D points `a` and `b`.\n     *\n     * @param ax Point a.x\n     * @param ay Point a.y\n     * @param bx Point b.x\n     * @param by Point b.y\n     * @returns Squared distance between the two points\n     */\n    export function distSquared(ax: number, ay: number, bx: number, by: number): number {\n        return (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n    }\n\n    /**\n     * Computes the squared length of a line.\n     *\n     * @param line An array of that forms a line via [x,y,z,x,y,z,...] tuples.\n     */\n    export function computeSquaredLineLength(line: number[]): number {\n        let squaredLineLength: number = 0;\n\n        const length = line.length - 4;\n        for (let i = 0; i < length; i += 3) {\n            const xDiff = line[i + 3] - line[i];\n            const yDiff = line[i + 4] - line[i + 1];\n            squaredLineLength += xDiff * xDiff + yDiff * yDiff;\n        }\n        return squaredLineLength;\n    }\n\n    /**\n     * Compute squared distance between a 2D point and a 2D line segment.\n     *\n     * @param px Test point X\n     * @param py Test point y\n     * @param l0x Line segment start X\n     * @param l0y Line segment start Y\n     * @param l1x Line segment end X\n     * @param l1y Line segment end Y\n     * @returns Squared distance between point and line segment\n     */\n    export function distToSegmentSquared(\n        px: number,\n        py: number,\n        l0x: number,\n        l0y: number,\n        l1x: number,\n        l1y: number\n    ): number {\n        const lineLengthSuared = distSquared(l0x, l0y, l1x, l1y);\n        if (lineLengthSuared === 0) {\n            return distSquared(px, py, l0x, l0y);\n        }\n        let t = ((px - l0x) * (l1x - l0x) + (py - l0y) * (l1y - l0y)) / lineLengthSuared;\n        t = Math.max(0, Math.min(1, t));\n        return distSquared(px, py, l0x + t * (l1x - l0x), l0y + t * (l1y - l0y));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport namespace MathUtils {\n    /**\n     * Ensures that input value fits in a given range.\n     *\n     * @param value The value to be clamped.\n     * @param min Minimum value.\n     * @param max Maximum value.\n     *\n     * @returns Clamped value.\n     */\n    export function clamp(value: number, min: number, max: number): number {\n        return value < min ? min : value > max ? max : value;\n    }\n\n    /**\n     * Returns a linear interpolation between the values of edge0 and edge1 based on the factor.\n     *\n     * Given two known points the linear interpolant between these points may be presented as\n     * straight line. This means that for given factor change the resulting change of return\n     * value is always const.\n     * @see https://en.wikipedia.org/wiki/Linear_interpolation\n     *\n     * @param edge0\n     * @param edge1\n     * @param factor Interpolation factor that ranges between: 0 <= x <= 1.\n     */\n    export function lerp(edge0: number, edge1: number, factor: number): number {\n        return edge0 * (1 - factor) + edge1 * factor;\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smoothStep(edge0: number, edge1: number, x: number) {\n        // Scale, bias and saturate x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * (3 - 2 * x);\n    }\n\n    /**\n     * Returns a smooth interpolation between the values edge0 and edge1 based on the interpolation\n     * factor x. `0 <= x <= 1`.\n     *\n     * Improved version by Ken Perlin, which has zero 1st- and 2nd-order derivatives at `x = 0` and\n     * `x = 1`:\n     *\n     * @see https://en.wikipedia.org/wiki/Smoothstep\n     *\n     * @param edge0\n     * @param edge1\n     * @param x\n     */\n    export function smootherStep(edge0: number, edge1: number, x: number) {\n        // Scale, and clamp x to 0..1 range\n        x = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n        // Evaluate polynomial\n        return x * x * x * (x * (x * 6 - 15) + 10);\n    }\n\n    /**\n     * Maps a number from one range to another.\n     *\n     * @param val The incoming value to be converted.\n     * @param inMin Lower bound of the value's current range.\n     * @param inMax Upper bound of the value's current range.\n     * @param outMin Lower bound of the value's target range.\n     * @param outMax Upper bound of the value's target range.\n     */\n    export function map(val: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n        return ((val - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n    }\n\n    /**\n     * Returns the smaller of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function min2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.min(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the larger of the two given numbers. Both numbers may be undefined, in which case\n     * the result is undefined. If only one of the numbers is undefined, the other number is\n     * returned.\n     *\n     * @param a First number.\n     * @param b Second number.\n     */\n    export function max2(a: number | undefined, b: number | undefined): number | undefined {\n        let result: number | undefined;\n\n        if (a !== undefined) {\n            result = a;\n        }\n        if (b !== undefined) {\n            result = result === undefined ? b : Math.max(result, b);\n        }\n\n        return result;\n    }\n\n    /**\n     * Checks if the value of a given number is inside an upper or lower bound. The bounds may be\n     * undefined, in which case their value is ignored.\n     *\n     * @param value Value to check.\n     * @param lowerBound The lower bound to check the value against.\n     * @param upperBound The upper bound to check the value against.\n     *\n     * @returns `true` if value is inside the bounds or if the bounds are `undefined`, `false`\n     *          otherwise.\n     */\n    export function isClamped(\n        value: number,\n        lowerBound: number | undefined,\n        upperBound: number | undefined\n    ): boolean {\n        if (lowerBound !== undefined && value < lowerBound) {\n            return false;\n        }\n        if (upperBound !== undefined && value > upperBound) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Smoothly interpolates between two values using cubic formula\n     *\n     * @param startValue\n     * @param endValue\n     * @param time\n     * @returns Result of the interpolation within the range of `[startValue, endValue]`\n     */\n    export function easeInOutCubic(startValue: number, endValue: number, time: number): number {\n        const timeValue =\n            time < 0.5 ? 4 * time * time * time : (time - 1) * (2 * time - 2) * (2 * time - 2) + 1;\n        return startValue + (endValue - startValue) * timeValue;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Copy methods and properties from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods and properties into.\n * @param baseCtors Class to take all methods and properties from.\n */\nexport function applyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            derivedCtor.prototype[name] = baseCtor.prototype[name];\n        });\n    });\n}\n\n/**\n * Copy methods from one prototype into another.\n *\n * @see https://www.typescriptlang.org/docs/handbook/mixins.html\n *\n * @param derivedCtor Class to mix methods into.\n * @param baseCtors Class to take all methods from.\n */\nexport function applyMixinsWithoutProperties(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n        Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n            const descriptor = Object.getOwnPropertyDescriptor(baseCtor.prototype, name);\n            if (\n                descriptor !== undefined &&\n                descriptor.get === undefined &&\n                name !== \"constructor\"\n            ) {\n                derivedCtor.prototype[name] = baseCtor.prototype[name];\n            }\n        });\n    });\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\ndeclare const process: any;\n\n// cache value, because access to process.env.NODE_ENV is SLOW!\nconst isProduction = process.env.NODE_ENV === \"production\";\n\n//TODO: Make assertHandler configurable\n\n/**\n * Implementation of assert as a development help\n *\n * Note - this is deliberately a global function so that minimizers remove the\n * entire call when building for production.\n *\n * @hidden\n * @param condition Condition to match, if false, throws an Error(message)\n * @param message Optional message, defaults to \"ASSERTION failed\"\n */\nexport function assert(condition: boolean, message?: string): void {\n    if (!isProduction) {\n        if (!condition) {\n            throw new Error(message !== undefined ? message : \"ASSERTION failed\");\n        }\n    }\n}\n\nexport function assertExists<T>(element: T | undefined, message?: string): T {\n    if (!isProduction) {\n        if (element === undefined || element === null) {\n            throw new Error(\n                message !== undefined ? message : \"ASSERTION failed: Element is undefined or null\"\n            );\n        }\n    }\n    return element!;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Refinement of `console` interface only for important information i.e `info`, `warn` and `errors`.\n */\nexport interface ISimpleChannel {\n    info(message?: any, ...optionalParams: any[]): void;\n    warn(message?: any, ...optionalParams: any[]): void;\n    error(message?: any, ...optionalParams: any[]): void;\n}\n\n/**\n * Extension of [[ISimpleChannel]] to support contextual logging by adding stack of prefixes.\n */\nexport interface IContextLogger extends ISimpleChannel {\n    /**\n     * Push \"attribute-like\" context.\n     */\n    pushAttr(name: string): void;\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number): void;\n\n    /**\n     * Remove current context from top of stack.\n     */\n    pop(): void;\n}\n\n/**\n * Context-aware logger that decorates log message with stack-based prefix, emits `headerMessage`\n * before first actual log message.\n */\nexport class ContextLogger implements IContextLogger {\n    private readonly context: string[] = [];\n    private m_headerLogged = false;\n\n    /**\n     * Construct a context-aware logger that logs to `m_logger`.\n     */\n    constructor(readonly m_logger: ISimpleChannel, readonly headerMessage: string) {}\n\n    /**\n     * Push \"attribute-like\" context.\n     *\n     * Following log messages will be prefixed with `name` or `.name` depending on current context.\n     */\n    pushAttr(name: string) {\n        this.context.push(`${this.context.length > 0 ? \".\" : \"\"}${name}`);\n    }\n\n    /**\n     * Push \"index-like\" context.\n     *\n     * Following log messages will be prefixed with `[index]`.\n     */\n    pushIndex(index: string | number) {\n        this.context.push(`[${index}]`);\n    }\n\n    pop() {\n        this.context.pop();\n    }\n\n    // They, are public member functions it's just tslint who doesn't understand this.\n\n    // tslint:disable:member-ordering\n    warn = this.createLogMethod(\"warn\");\n    info = this.createLogMethod(\"info\");\n    error = this.createLogMethod(\"error\");\n    // tslint:enable:member-ordering\n\n    private createLogMethod(severity: \"warn\" | \"info\" | \"error\") {\n        return (message: string, ...rest: any[]) => {\n            if (!this.m_headerLogged) {\n                this.m_logger.info(this.headerMessage);\n                this.m_headerLogged = true;\n            }\n            this.m_logger[severity](`${this.context.join(\"\")}: ${message}`, ...rest);\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/* tslint:disable:max-line-length */\n/**\n * See:\n * https://developers.google.com/web/updates/2012/08/When-milliseconds-are-not-enough-performance-now\n */\n/* tslint:ensable:max-line-length */\n\nexport class PerformanceTimer {\n    /**\n     * Returns timestamp in milliseconds since page load.\n     *\n     * If the [[DOMHighResTimeStamp]] is supported, the resolution is up to 5 microseconds,\n     * otherwise it is in milliseconds. Timespans are computed by taking the difference between two\n     * samples.\n     *\n     * Example:\n     * ```typescript\n     * const now = PerformanceTimer.now();\n     * // call some expensive function for which you want to check the duration.\n     * const end = PerformanceTimer.now();\n     * const elapsedTime = end - now;\n     * ```\n     */\n    static now(): number {\n        return PerformanceTimer.nowFunc();\n    }\n\n    // tslint:disable-next-line:no-unused-variable\n    private static readonly instance = new PerformanceTimer();\n\n    private static readonly nowFunc: () => number = PerformanceTimer.getNowFunc();\n\n    private static getNowFunc() {\n        if (typeof performance !== \"undefined\" && typeof performance.now !== \"undefined\") {\n            return () => performance.now();\n        }\n\n        // fall back to Date.getTime()\n        return () => {\n            return new Date().getTime();\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Deep clone of object.\n *\n * Like `JSON.parse(JSON.stringify(obj))`, but supports basic javascript types (string, number,\n * object), `Date` and `RegExp`s and cycles.\n *\n * Throws error if enounters object with `prototype` assuming that in general class instances\n * cannot be reliably cloned by generic algorithm.\n */\nexport function cloneDeep<T>(obj: T): T {\n    const cache: Map<object, object> = new Map();\n    function cloneInternal(src: any): any {\n        if (src === null) {\n            return null;\n        } else if (typeof src === \"object\") {\n            const cached = cache.get(src);\n            if (cached !== undefined) {\n                return cached;\n            }\n\n            if (Array.isArray(src)) {\n                const result: any[] = [];\n                cache.set(src, result);\n                result.length = src.length;\n                for (let i = 0; i < result.length; ++i) {\n                    result[i] = cloneInternal(src[i]);\n                }\n                return result;\n            } else if (src instanceof Date) {\n                const result = new Date(src.getTime());\n                cache.set(src, result);\n                return result;\n            } else if (src instanceof RegExp) {\n                const result = new RegExp(src.source, src.flags);\n                cache.set(src, result);\n                return result;\n            } else if (src.constructor !== Object) {\n                throw new Error(\"cloneDeep doesn't support objects with custom prototypes\");\n            } else {\n                const result: typeof src = {};\n                cache.set(src, result);\n                for (const key in src) {\n                    if (src.hasOwnProperty(key)) {\n                        result[key] = cloneInternal(src[key]);\n                    }\n                }\n                return result;\n            }\n        } else {\n            // string, number, boolean, undefined and functions are returned as is\n            return src;\n        }\n    }\n\n    const r = cloneInternal(obj);\n    cache.clear();\n    return r;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Get first defined value.\n *\n * Specialized \"replacement\" for `a || b || c` used frequently to get value from various sources\n * (defaults, configs  constants).\n * In contrast to `||`, this function provides proper typing for usual use cases (constant as last\n * argument) and correct treatment of `null` and `undefined`.\n *\n * If last parameter is \"defined\" then return type is `T`, otherwise return type is `T | undefined`.\n *\n * Usage example:\n *\n *     interface Config {\n *         x?: number;\n *     }\n *     const someConfig: Config = {};\n *     const val: number | undefined = undefined;\n *     const DEFAULT = 5;\n *     const x = getOptionValue(val, someConfig.x, DEFAULT);\n *         // typeof x === 'number' because DEFAULT is defined\n *     const y = getOptionValue(val, someConfig.x);\n *         // typeof y === 'number | undefined' because someConfig.x is possibly undefined\n */\n// specialized overloads with last param defined params overload\nexport function getOptionValue<T>(a: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T): T;\nexport function getOptionValue<T>(a: T | undefined, b: T | undefined, c: T | undefined, d: T): T;\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined;\n\nexport function getOptionValue<T>(...values: Array<T | undefined>): T | undefined {\n    for (const candidate of values) {\n        if (candidate !== undefined && candidate !== null) {\n            return candidate;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Merge options into existing parameters object.\n *\n * Convenience helper with _similar_ semantics as:\n *\n *     const finalParams1 = { ...defaults, ... options };\n *     const finalParams2 = Object.assign({}, defaults, options);\n *\n * This function doesn't copy _extra_ properties of `options` that doesn't exist in `defaults`.\n * `defaults` is used as _parameters_ template.\n *\n * This doc uses following notion of `option` and `parameter` terms:\n * * `parameter` is a variable, or 'almost constant' of procedure/function/algorith/object\n *    * `parameter` usually have sensible and usually used default\n *    * `parameter` is always defined (no `undefined`, `null` or `?` in type)\n *    * `parameter` can be overriden by specyfying `option` with same name\n * * `option` means value that may be passed optionally, overrides `parameter` value with same name\n *\n * Usage:\n *\n *     interface FooParams {\n *         useTextures: boolean;\n *         opacity: number;\n *     }\n *\n *     const FOO_DEFAULTS: FooParams = {\n *         useTextures: true,\n *         opacity: 0.8\n *     };\n *\n *     type FooOptions = Partial<FooParams>;\n *\n *     function doSomething(options: FooOptions) {\n *         const params = mergeWithOptions(FOO_DEFAULTS, options);\n *             // typeof params === FooParams\n *             // params.opacity = 0.5\n *             // params.useTextures = true\n *             // params.someOtherOptionFromOtherApi is not defined\n *     }\n *     const opt = {opacity: 0.5, someOtherOptionFromOtherApi: 'aaa'};\n *     doSomething(opt);\n *\n * Rationale:\n *   * both `Object.assign` and spread operator copy extra options\n *   * `Object.assign` & `spread operator` may copy `undefined` and `null`s if they really exist\n *     in options object\n *\n * @param parameters parmeters template object holding all expected parameters\n * @param options options object\n * @returns new object with `parameters` overriden by values from `options`\n */\nexport function mergeWithOptions<T extends object>(parameters: T, options?: Partial<T>): T {\n    // NOTE: `as object` needed due to TypeScript bug:\n    //       https://github.com/Microsoft/TypeScript/issues/14409\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    const result = { ...(parameters as object) } as T;\n    if (options === undefined || options === null) {\n        return result;\n    }\n    for (const prop in parameters) {\n        if (parameters.hasOwnProperty(prop)) {\n            const optionValue = options[prop];\n            if (optionValue !== undefined && optionValue !== null) {\n                result[prop] = optionValue as any;\n            }\n        }\n    }\n    return result;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { resolveReferenceUri } from \"./UrlUtils\";\n\n/**\n * Custom, app-specific URI resolver interface.\n */\nexport interface UriResolver {\n    /**\n     * Attempt to resolve `URI` to `URL`.\n     *\n     * If given resolver doesn't know about this specific kind of `URI`, it should return string as\n     * received.\n     *\n     * @param input `URI`\n     * @returns actual `URL` if this handler knows how locate given `uri` or original `uri`\n     */\n    resolveUri(uri: string): string;\n}\n\nexport interface PrefixUriResolverDefinition {\n    [prefix: string]: string;\n}\n\n/**\n * Basic, import-map like [[UriResolver]].\n *\n * Resolves `uris` basing on exact or prefix match of `key` from `definitions`.\n *\n * In definitions, `key` is matched against input uri with following strategy:\n *  - `key` without trailing `/` -> `key` and input `uri` must be identical\n *  - `key` with trailing `/`, -> `key` is treated as \"package prefix\", so `uri` must start with\n *    `key`\n *\n * Example:\n * ```\n * {\n *     \"local://poiMasterList\": \"/assets/poiMasterList.json\"\n *        // will match only 'local://poiMasterList' and resolve `/assets/poiMasterList.json`\n *     \"local://icons/\": \"/assets/icons/\"\n *        // will match only 'local://icons/ANYPATH' (and similar) and resolve to\n *        // `/assets/icons/ANYPATH\n * }\n * ```\n * Inspired by [`WICG` import maps proposal](https://github.com/WICG/import-maps#the-import-map).\n */\nexport class PrefixMapUriResolver implements UriResolver {\n    constructor(readonly definitions: PrefixUriResolverDefinition) {}\n\n    resolveUri(uri: string) {\n        return Object.keys(this.definitions).reduce((r, key) => {\n            if (key.endsWith(\"/\") && r.startsWith(key)) {\n                const newPrefix = this.definitions[key];\n                return newPrefix + r.substr(key.length);\n            } else if (r === key) {\n                return this.definitions[key];\n            }\n            return r;\n        }, uri);\n    }\n}\n\n/**\n * [UriResolver] that resolve relative `uri`s against to parent resource `uri`.\n */\nexport class RelativeUriResolver implements UriResolver {\n    constructor(readonly parentUri: string) {}\n\n    resolveUri(uri: string) {\n        return resolveReferenceUri(this.parentUri, uri);\n    }\n}\n\n/**\n * Compose URI resolvers.\n *\n * Creates new [[UriResolver]] that applies resolvers in orders or arguments.\n *\n * Example:\n *\n *     const themeUrl = ...; // url of parent object\n *     const childUrlResolver = composeUrlResolvers(\n *           new RelativeUriResolver(themeUrl),\n *           defaultUrlResolver\n *     );\n */\nexport function composeUriResolvers(...resolvers: Array<UriResolver | undefined>): UriResolver {\n    return {\n        resolveUri(originalUrl: string) {\n            return resolvers.reduce((url, resolver) => {\n                if (resolver !== undefined) {\n                    return resolver.resolveUri(url);\n                } else {\n                    return url;\n                }\n            }, originalUrl);\n        }\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Chains two functions for further assigning as one wrapped callback function\n */\nexport function chainCallbacks<T extends (this: unknown, ...args: any[]) => any>(\n    f1: T | null | undefined,\n    f2: T\n): T {\n    return function(this: any, ...args: any[]): ReturnType<T> {\n        if (f1) {\n            f1.apply(this, args);\n        }\n        return f2.apply(this, args);\n    } as T;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { baseUrl } from \"./UrlUtils\";\n\n/**\n * Get base URL for from where relative URLs will be loaded.\n *\n * * In browser, it resolves to `baseUrl(location.href)` i.e document's base URL\n * (see: https://www.w3.org/TR/WD-html40-970917/htmlweb.html#h-5.1.2).\n *\n * * In node, it resolves to `file://${process.cwd()}`.\n */\nexport function getAppBaseUrl() {\n    return baseUrl(window.location.href);\n}\n","/*\n * Copyright (C) 2017-2020 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { HiddenThreeJSMaterialProperties } from \"./MapMeshMaterials\";\n\n/**\n * Parameters used when constructing a new implementor of [[DisplacementFeature]].\n */\nexport interface DisplacementFeatureParameters {\n    /**\n     * Texture used for vertex displacement along their normals.\n     */\n    displacementMap?: THREE.Texture;\n}\n\n/**\n * Interface to be implemented by materials that use displacement maps to overlay geometry\n * on elevation data.\n */\nexport interface DisplacementFeature extends HiddenThreeJSMaterialProperties {\n    displacementMap: THREE.Texture | null;\n}\n\n/**\n * Determines whether a given material supports displacement maps for elevation overlay.\n * @param material The material to check.\n * @returns Whether the given material supports displacement maps for elevation overlay.\n */\nexport function hasDisplacementFeature(material: any): material is DisplacementFeature {\n    return \"displacementMap\" in material;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport {\n    ExtrusionFeature,\n    ExtrusionFeatureParameters,\n    FadingFeature,\n    FadingFeatureParameters\n} from \"./MapMeshMaterials\";\nimport { ExtrusionFeatureDefs } from \"./MapMeshMaterialsDefs\";\nimport { enforceBlending, setShaderDefine, setShaderMaterialDefine } from \"./Utils\";\n\nconst vertexSource: string = `\n#define EDGE_DEPTH_OFFSET 0.0001\n\nattribute vec3 position;\nattribute vec4 color;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 edgeColor;\nuniform float edgeColorMix;\n\n#ifdef USE_DISPLACEMENTMAP\nattribute vec3 normal;\nattribute vec2 uv;\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_vertex>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\nvoid main() {\n\n    #ifdef USE_COLOR\n    vColor = mix(edgeColor.rgb, color.rgb, edgeColorMix);\n    #else\n    vColor = edgeColor.rgb;\n    #endif\n\n    vec3 transformed = vec3( position );\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_vertex>\n    #endif\n\n    #ifdef USE_DISPLACEMENTMAP\n    transformed += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n\n    vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n    gl_Position = projectionMatrix * mvPosition;\n    // After projection gl_Position contains clip space coordinates of each vertex\n    // before perspective division (1 / w), thus only vertexes with -w < z < w should\n    // be displayed and offset. We offset only those edges which z coordinate in NDC\n    // space is between: -inf < z < 1\n    float depthOffset = step(-1.0, -gl_Position.z / gl_Position.w) * EDGE_DEPTH_OFFSET;\n    gl_Position.z -= depthOffset;\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nvarying vec3 vColor;\n\n#ifdef USE_EXTRUSION\n#include <extrusion_pars_fragment>\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\nvoid main() {\n    float alphaValue = 1.0;\n    gl_FragColor = vec4(vColor, alphaValue);\n\n    #ifdef USE_EXTRUSION\n    #include <extrusion_fragment>\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[EdgeMaterial]].\n */\nexport interface EdgeMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters,\n        ExtrusionFeatureParameters {\n    /**\n     * Edge color.\n     */\n    color?: number | string;\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    colorMix?: number;\n}\n\n/**\n * Material designed to render the edges of extruded buildings using GL_LINES. It supports solid\n * colors, vertex colors, color mixing and distance fading.\n */\nexport class EdgeMaterial extends THREE.RawShaderMaterial\n    implements FadingFeature, ExtrusionFeature, DisplacementFeature {\n    static DEFAULT_COLOR: number = 0x000000;\n    static DEFAULT_COLOR_MIX: number = 0.0;\n\n    /**\n     * Constructs a new `EdgeMaterial`.\n     *\n     * @param params `EdgeMaterial` parameters.\n     */\n    constructor(params?: EdgeMaterialParameters) {\n        const defines: { [key: string]: any } = {};\n        const hasDisplacementMap = params !== undefined && params.displacementMap !== undefined;\n        const hasExtrusion =\n            params !== undefined &&\n            params.extrusionRatio !== undefined &&\n            params.extrusionRatio >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN &&\n            params.extrusionRatio < ExtrusionFeatureDefs.DEFAULT_RATIO_MAX;\n        if (hasDisplacementMap) {\n            setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n        }\n        if (hasExtrusion) {\n            setShaderDefine(defines, \"USE_EXTRUSION\", true);\n        }\n\n        const shaderParams = {\n            name: \"EdgeMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                edgeColor: new THREE.Uniform(new THREE.Color(EdgeMaterial.DEFAULT_COLOR)),\n                edgeColorMix: new THREE.Uniform(EdgeMaterial.DEFAULT_COLOR_MIX),\n                fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                extrusionRatio: new THREE.Uniform(ExtrusionFeatureDefs.DEFAULT_RATIO_MAX),\n                displacementMap: new THREE.Uniform(\n                    hasDisplacementMap ? params!.displacementMap : new THREE.Texture()\n                )\n            },\n            depthWrite: false,\n            defines\n        };\n        super(shaderParams);\n        enforceBlending(this);\n\n        FadingFeature.patchGlobalShaderChunks();\n        ExtrusionFeature.patchGlobalShaderChunks();\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                // Color may be set directly on object (omitting class setter), because we already\n                // know that is does no require any special handling nor material update\n                // (see: set color()).\n                this.color.set(params.color as any);\n            }\n            if (params.colorMix !== undefined) {\n                this.colorMix = params.colorMix;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.extrusionRatio !== undefined) {\n                this.extrusionRatio = params.extrusionRatio;\n            }\n        }\n    }\n\n    /**\n     * Edge color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.edgeColor.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.edgeColor.value.copy(value);\n    }\n\n    /**\n     * Color mix value. Mixes between vertexColors and edgeColor.\n     */\n    get colorMix(): number {\n        return this.uniforms.edgeColorMix.value as number;\n    }\n    set colorMix(value: number) {\n        if (this.uniforms.edgeColorMix.value === value) {\n            return;\n        }\n        this.uniforms.edgeColorMix.value = value;\n        setShaderMaterialDefine(this, \"USE_COLOR\", value > 0.0);\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        if (this.uniforms.fadeFar.value === value) {\n            return;\n        }\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get extrusionRatio(): number {\n        return this.uniforms.extrusionRatio.value as number;\n    }\n    set extrusionRatio(value: number) {\n        if (this.uniforms.extrusionRatio.value === value) {\n            return;\n        }\n        this.uniforms.extrusionRatio.value = value;\n        // NOTE: We could also disable shader extrusion chunks when it hits\n        // ExtrusionFeatureDefs.DEFAULT_RATIO_MAX value, but this would cause shader re-compile.\n        const useExtrusion = value >= ExtrusionFeatureDefs.DEFAULT_RATIO_MIN;\n        setShaderMaterialDefine(this, \"USE_EXTRUSION\", useExtrusion);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { ExtrusionFeatureDefs } from \"../MapMeshMaterialsDefs\";\n\nconst MIN_BUILDING_HEIGHT_SQUARED =\n    ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT * ExtrusionFeatureDefs.MIN_BUILDING_HEIGHT;\n\nexport default {\n    extrusion_pars_vertex: `\n// Extrusion axis (xyz: vector, w: factor).\nattribute vec4 extrusionAxis;\nuniform float extrusionRatio;\nvarying vec4 vExtrusionAxis;\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#endif\n`,\n    extrusion_vertex: `\n#ifdef ZFIGHTING_WORKAROUND\n// Cancel extrusionRatio (meaning, force to 1) if extrusionAxisLen < MIN_BUILDING_HEIGHT.\nconst float MIN_BUILDING_HEIGHT_SQUARED = ${MIN_BUILDING_HEIGHT_SQUARED};\nfloat extrusionAxisLenSquared = dot(extrusionAxis.xyz, extrusionAxis.xyz);\nvExtrusionRatio = (extrusionAxisLenSquared < MIN_BUILDING_HEIGHT_SQUARED) ? 1.0 : extrusionRatio;\n#else\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ntransformed = transformed + extrusionAxis.xyz * (vExtrusionRatio - 1.0);\nvExtrusionAxis = vec4(normalMatrix * extrusionAxis.xyz, extrusionAxis.w);\n`,\n    // Modified version of THREE <normal_fragment_begin> shader chunk which, for flat shaded\n    // geometries, computes the normal either with the extrusion axis or fragment derivatives based\n    // on the extrusion factor (1.0 = ceiling, 0.0 = footprint).\n    extrusion_normal_fragment_begin: `\n#ifdef FLAT_SHADED\n    // Flattened this divergent path to prevent undefined behaviour in the following derivatives\n    // functions. For more info:\n    // http://www.aclockworkberry.com/shader-derivative-functions/#Derivatives_and_branches\n\n    // Workaround for Adreno/Nexus5 not able able to do dFdx( vViewPosition ) ...\n    vec3 fdx = vec3(dFdx(vViewPosition.x), dFdx(vViewPosition.y), dFdx(vViewPosition.z));\n    vec3 fdy = vec3(dFdy(vViewPosition.x), dFdy(vViewPosition.y), dFdy(vViewPosition.z));\n    vec3 normal = cross( fdx, fdy );\n    if (vExtrusionAxis.w > 0.999999) {\n        normal = vExtrusionAxis.xyz;\n    }\n    normal = normalize(normal);\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t\tbitangent = bitangent * (float(gl_FrontFacing) * 2.0 - 1.0);\n\t\t#endif\n\t#endif\n#endif\n// non perturbed normal for clearcoat among others\nvec3 geometryNormal = normal;\n`,\n    extrusion_pars_fragment: `\n#ifdef ZFIGHTING_WORKAROUND\nvarying float vExtrusionRatio;\n#else\nuniform float extrusionRatio;\n#endif\nvarying vec4 vExtrusionAxis;\n`,\n    extrusion_fragment: `\n#ifndef ZFIGHTING_WORKAROUND\nfloat vExtrusionRatio = extrusionRatio;\n#endif\ngl_FragColor.a *= smoothstep( 0.0, 0.25, vExtrusionRatio );\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * The shader chunks have their lines \"#ifdef USE_FADING\" commented out, because currently the\n * mesh materials use individually created shader strings based on the materials settings.\n * @see [[FadingMeshBasicMaterial]]\n **/\n\nexport default {\n    fading_pars_vertex: `\nvarying float fadingDepth;\n`,\n\n    fading_vertex: `\nfadingDepth = -mvPosition.z;\n`,\n\n    fading_pars_fragment: `\nvarying float fadingDepth;\nuniform float fadeNear;\nuniform float fadeFar;\n`,\n\n    fading_fragment: `\n\n// lerp with \"hard\" edges\n//float fadingFactor = 1.0 - clamp((fadingDepth - fadeNear) / (fadeFar - fadeNear), 0.0, 1.0);\n\n// smooth transitions\nfloat fadingFactor = smoothstep( fadeNear, fadeFar, fadingDepth );\n\ngl_FragColor.a *= 1.0 - fadingFactor;\n\n// debugging color:\n// gl_FragColor = vec4(1., fadingFactor, fadingFactor, 1.0);\n`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nattribute vec4 color;\nvarying vec3 vColor;\n#endif\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 position;        // high part\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifdef USE_COLOR\nvarying vec3 color;\n#endif\n\nvoid main() {\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( diffuse * vColor, opacity );\n    #else\n    gl_FragColor = vec4( diffuse, opacity );\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface HighPrecisionLineMaterialParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n}\n\n/**\n * Material designed to render high precision lines (ideal for position-sensible data).\n */\nexport class HighPrecisionLineMaterial extends THREE.RawShaderMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n\n    isHighPrecisionLineMaterial: boolean;\n\n    /**\n     * Constructs a new `HighPrecisionLineMaterial`.\n     *\n     * @param params `HighPrecisionLineMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = {\n            name: \"HighPrecisionLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                diffuse: new THREE.Uniform(\n                    new THREE.Color(HighPrecisionLineMaterial.DEFAULT_COLOR)\n                ),\n                opacity: new THREE.Uniform(HighPrecisionLineMaterial.DEFAULT_OPACITY),\n                u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n                u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n                u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n            }\n        };\n        Object.assign(shaderParams, params);\n        super(shaderParams);\n\n        this.type = \"HighPrecisionLineMaterial\";\n        this.isHighPrecisionLineMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n        }\n\n        this.updateTransparencyFeature();\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    private updateTransparencyFeature() {\n        this.transparent = this.opacity < 1.0 ? true : false;\n    }\n}\n\nexport function isHighPrecisionLineMaterial(\n    material: object | undefined\n): material is HighPrecisionLineMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionLineMaterial).isHighPrecisionLineMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\nimport linesShaderChunk from \"./ShaderChunks/LinesChunks\";\n\nconst vertexSource: string = `\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\nuniform float size;\n\n// uniforms to implement double-precision\nuniform mat4 u_mvp;             // combined modelView and projection matrix\nuniform vec3 u_eyepos;          // eye position major\nuniform vec3 u_eyepos_lowpart;  // eye position minor ((double) eyepos - (float) eyepos)\n\n// vertex attributes\nattribute vec3 positionLow;     // low part\n\n#include <high_precision_vert_func>\n\nvoid main() {\n    #ifdef USE_COLOR\n    vColor = color.rgb;\n    #endif\n\n    vec3 pos = subtractDblEyePos(position);\n    gl_Position = u_mvp * vec4(pos, 1.0);\n\n    // ignore sizeAttenuation for now!\n    gl_PointSize = size;\n}`;\n\n/**\n * Parameters used when constructing a new [[HighPrecisionPointMaterial]].\n */\nexport interface HighPrecisionPointMaterialParameters extends THREE.PointsMaterialParameters {\n    /**\n     * Point color.\n     */\n    color?: number | string | THREE.Color;\n    /**\n     * Point opacity.\n     */\n    opacity?: number;\n    /**\n     * Point scale.\n     */\n    scale?: number;\n    /**\n     * UV transformation matrix.\n     */\n    uvTransform?: THREE.Matrix3;\n}\n\n/**\n * Material designed to render high precision points (ideal for position-sensible data).\n */\nexport class HighPrecisionPointMaterial extends THREE.PointsMaterial {\n    static DEFAULT_COLOR: number = 0x000050;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_SIZE: number = 1.0;\n    static DEFAULT_SCALE: number = 1.0;\n\n    isHighPrecisionPointMaterial: boolean;\n    uniforms: { [uniform: string]: THREE.IUniform };\n    vertexShader?: string;\n    fragmentShader?: string;\n\n    /**\n     * Constructs a new `HighPrecisionPointMaterial`.\n     *\n     * @param params `HighPrecisionPointMaterial` parameters.\n     */\n    constructor(params?: HighPrecisionPointMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        const shaderParams = params;\n        super(shaderParams);\n\n        this.type = \"HighPrecisionPointMaterial\";\n        this.vertexShader = vertexSource;\n        this.fragmentShader = THREE.ShaderChunk.points_frag;\n        this.fog = false;\n\n        this.uniforms = {\n            diffuse: new THREE.Uniform(new THREE.Color(HighPrecisionPointMaterial.DEFAULT_COLOR)),\n            opacity: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_OPACITY),\n            size: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SIZE),\n            scale: new THREE.Uniform(HighPrecisionPointMaterial.DEFAULT_SCALE),\n            map: new THREE.Uniform(new THREE.Texture()),\n            uvTransform: new THREE.Uniform(new THREE.Matrix3()),\n            u_mvp: new THREE.Uniform(new THREE.Matrix4()),\n            u_eyepos: new THREE.Uniform(new THREE.Vector3()),\n            u_eyepos_lowpart: new THREE.Uniform(new THREE.Vector3())\n        };\n\n        this.isHighPrecisionPointMaterial = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                this.color.set(params.color as any);\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.size !== undefined) {\n                this.size = params.size;\n            }\n            if (params.scale !== undefined) {\n                this.scale = params.scale;\n            }\n            if (params.uvTransform !== undefined) {\n                this.uvTransform = params.uvTransform;\n            }\n            if (params.map !== undefined) {\n                this.map = params.map;\n            }\n        }\n    }\n\n    /**\n     *  Point scale.\n     */\n    get scale(): number {\n        return this.uniforms.scale.value;\n    }\n\n    set scale(value: number) {\n        this.uniforms.scale.value = value;\n    }\n\n    /**\n     * UV transformation matrix.\n     */\n    get uvTransform(): THREE.Matrix3 {\n        return this.uniforms.uvTransform.value;\n    }\n    set uvTransform(value: THREE.Matrix3) {\n        this.uniforms.uvTransform.value = value;\n    }\n}\n\nexport function isHighPrecisionPointMaterial(\n    material: object | undefined\n): material is HighPrecisionPointMaterial {\n    return (\n        material !== undefined &&\n        (material as HighPrecisionPointMaterial).isHighPrecisionPointMaterial === true\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst vertexSource: string = `\nattribute vec4 position;\nattribute vec4 color;\nattribute vec2 uv;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    vColor = color;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1.0);\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform sampler2D map;\n\nvarying vec4 vColor;\nvarying vec2 vUv;\n\nvoid main() {\n\n    vec4 color = texture2D(map, vUv.xy);\n    color *= vColor.a;\n    if (color.a < 0.05) {\n        discard;\n    }\n    gl_FragColor = color;\n}`;\n\n/**\n * Parameters used when constructing a new [[IconMaterial]].\n */\nexport interface IconMaterialParameters {\n    /**\n     * Texture map.\n     */\n    map: THREE.Texture;\n}\n\n/**\n * 2D material for icons, similar to [[TextMaterial]]. Uses component in texture coordinates to\n * apply opacity.\n */\nexport class IconMaterial extends THREE.RawShaderMaterial {\n    /**\n     * Constructs a new `IconMaterial`.\n     *\n     * @param params `IconMaterial` parameters.\n     */\n    constructor(params: IconMaterialParameters) {\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"IconMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: {\n                map: new THREE.Uniform(params.map)\n            },\n            depthTest: true,\n            depthWrite: true,\n            transparent: true,\n\n            vertexColors: THREE.VertexColors,\n            premultipliedAlpha: true,\n            blending: THREE.NormalBlending\n        };\n        super(shaderParams);\n    }\n\n    /**\n     * Icon texture map/atlas.\n     */\n    get map(): THREE.Texture {\n        return this.uniforms.map.value;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * The shader used in the [[UnrealBloomPass]] for the bloom/glow effect.\n */\nexport const LuminosityHighPassShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        luminosityThreshold: { value: 1.0 },\n        smoothWidth: { value: 1.0 },\n        defaultColor: { value: new THREE.Color(0x000000) },\n        defaultOpacity: { value: 0.0 }\n    },\n    vertexShader: `\n    varying vec2 vUv;\n    void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`,\n    fragmentShader: `\n    uniform sampler2D tDiffuse;\n    uniform vec3 defaultColor;\n    uniform float defaultOpacity;\n    uniform float luminosityThreshold;\n    uniform float smoothWidth;\n    varying vec2 vUv;\n    void main() {\n        vec4 texel = texture2D( tDiffuse, vUv );\n        vec3 luma = vec3( 0.299, 0.587, 0.114 );\n        float v = dot( texel.xyz, luma );\n        vec4 outputColor = vec4( defaultColor.rgb, defaultOpacity );\n        float alpha = smoothstep( luminosityThreshold, luminosityThreshold + smoothWidth, v );\n        gl_FragColor = mix( outputColor, texel, alpha );\n    }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport { CopyShader } from \"./CopyMaterial\";\n\n/**\n * The material to use for the quad of the [[MSAARenderPass]] in the composing.\n */\nexport class MSAAMaterial extends THREE.ShaderMaterial {\n    /**\n     * The constructor of `MSAAMaterial`.\n     *\n     * @param uniforms The [[CopyShader]]'s uniforms.\n     */\n    constructor(uniforms: { [uniformName: string]: THREE.IUniform }) {\n        super({\n            uniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            premultipliedAlpha: true,\n            transparent: true,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `SepiaShader`.\n */\nexport const SepiaShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        amount: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float amount;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 color = texture2D( tDiffuse, vUv );\n            vec3 c = color.rgb;\n            color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\n            color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\n            color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\n            gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LineCaps, LineDashes } from \"@here/harp-datasource-protocol\";\nimport * as THREE from \"three\";\nimport { DisplacementFeature, DisplacementFeatureParameters } from \"./DisplacementFeature\";\nimport { FadingFeature, FadingFeatureParameters } from \"./MapMeshMaterials\";\nimport linesShaderChunk, { LineCapsModes } from \"./ShaderChunks/LinesChunks\";\nimport {\n    enforceBlending,\n    getShaderMaterialDefine,\n    setShaderDefine,\n    setShaderMaterialDefine\n} from \"./Utils\";\n\nconst LineCapsDefinesMapping: { [key in LineCaps]: number } = {\n    None: LineCapsModes.CAPS_NONE,\n    Square: LineCapsModes.CAPS_SQUARE,\n    Round: LineCapsModes.CAPS_ROUND,\n    TriangleIn: LineCapsModes.CAPS_TRIANGLE_IN,\n    TriangleOut: LineCapsModes.CAPS_TRIANGLE_OUT\n};\n\nconst DefinesLineCapsMapping: { [key: number]: LineCaps } = Object.keys(\n    LineCapsDefinesMapping\n).reduce((r, lineCapsName) => {\n    const defineKey = lineCapsName as keyof typeof LineCapsDefinesMapping;\n    const defineValue: number = LineCapsDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineCaps });\n\nexport enum LineDashesModes {\n    DASHES_SQUARE = 0,\n    DASHES_ROUND,\n    DASHES_DIAMOND\n}\n\nconst LineDashesDefinesMapping: { [key in LineDashes]: number } = {\n    Square: LineDashesModes.DASHES_SQUARE,\n    Round: LineDashesModes.DASHES_ROUND,\n    Diamond: LineDashesModes.DASHES_DIAMOND\n};\n\nconst DefinesLineDashesMapping: { [key: number]: LineDashes } = Object.keys(\n    LineDashesDefinesMapping\n).reduce((r, lineDashesName) => {\n    const defineKey = lineDashesName as keyof typeof LineDashesDefinesMapping;\n    const defineValue: number = LineDashesDefinesMapping[defineKey];\n    r[defineValue] = defineKey;\n    return r;\n}, ({} as any) as { [key: number]: LineDashes });\n\n/**\n * The vLength contains the actual line length, it's needed for the creation of line caps by\n * detecting line ends. `vLength == vExtrusionCoord.x + lineWidth * 2`\n */\n/**\n * The vExtrusionStrength relies on the edges of the lines. Represents how far the current point was\n * extruded on the edges because of the current angle. Needed for preventing line caps artifacts on\n * sharp line edges. For example, on sharp edges, some vertices can be extruded much further than\n * the full line length.\n */\n\nconst tmpColor = new THREE.Color();\nconst vertexSource: string = `\n#define SEGMENT_OFFSET 0.1\n\nattribute vec3 extrusionCoord;\nattribute vec3 position;\nattribute vec4 bitangent;\nattribute vec3 tangent;\nattribute vec2 uv;\nattribute vec3 normal;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float lineWidth;\nuniform float outlineWidth;\nuniform vec2 drawRange;\n\n#ifdef USE_DISPLACEMENTMAP\nuniform sampler2D displacementMap;\n#endif\n\nvarying vec3 vPosition;\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nattribute vec3 color;\nvarying vec3 vColor;\n#endif\n\n#ifdef USE_FADING\n#include <fading_pars_vertex>\n#endif\n\n#include <fog_pars_vertex>\n\n#include <extrude_line_vert_func>\n\nvoid main() {\n    // Calculate the segment.\n    vec2 segment = abs(extrusionCoord.xy) - SEGMENT_OFFSET;\n    float segmentPos = sign(extrusionCoord.x) / 2.0 + 0.5;\n\n    // Calculate the vertex position inside the line (segment) and extrusion direction and factor.\n    float linePos = mix(segment.x, segment.y, segmentPos);\n    vec2 extrusionDir = sign(extrusionCoord.xy);\n    float extrusionFactor = extrusionDir.y * tan(bitangent.w / 2.0);\n\n    // Calculate the extruded vertex position (and scale the extrusion direction).\n    vec3 pos = extrudeLine(\n        position, linePos, lineWidth + outlineWidth, bitangent, tangent, extrusionDir);\n\n    // Store the normalized extrusion coordinates in vCoords (with their ranges in vRange).\n    vRange = vec3(extrusionCoord.z, lineWidth, extrusionFactor);\n    vCoords = vec4(extrusionDir / vRange.xy, segment / vRange.x);\n\n    // Adjust the segment to fit the drawRange.\n    float capDist = (lineWidth + outlineWidth) / extrusionCoord.z;\n    if ((vCoords.w + capDist) < drawRange.x || (vCoords.z - capDist) > drawRange.y) {\n        vCoords.zw += 1.0;\n    }\n    if (vCoords.z < drawRange.x) {\n        vCoords.zw += vec2(drawRange.x - vCoords.z, 0.0);\n    }\n    if (vCoords.w > drawRange.y) {\n        vCoords.zw -= vec2(0.0, vCoords.w - drawRange.y);\n    }\n\n    // Transform position.\n    #ifdef USE_DISPLACEMENTMAP\n    pos += normalize( normal ) * texture2D( displacementMap, uv ).x;\n    #endif\n    vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);\n    gl_Position = projectionMatrix * mvPosition;\n\n    // Pass extruded position to fragment shader.\n    vPosition = pos;\n\n    #ifdef USE_COLOR\n    // Pass vertex color to fragment shader.\n    vColor = color;\n    #endif\n\n    #ifdef USE_FADING\n    #include <fading_vertex>\n    #endif\n\n    #include <fog_vertex>\n}`;\n\nconst fragmentSource: string = `\nprecision highp float;\nprecision highp int;\n\nuniform vec3 diffuse;\nuniform vec3 outlineColor;\nuniform float opacity;\nuniform float lineWidth;\nuniform float outlineWidth;\nuniform vec2 tileSize;\nuniform vec2 drawRange;\n\n#ifdef USE_DASHED_LINE\nuniform float dashSize;\nuniform float gapSize;\nuniform vec3 dashColor;\n\n#define DASHES_SQUARE ${LineDashesModes.DASHES_SQUARE}\n#define DASHES_ROUND ${LineDashesModes.DASHES_ROUND}\n#define DASHES_DIAMOND ${LineDashesModes.DASHES_DIAMOND}\n#endif\n\nvarying vec3 vPosition;\nvarying vec3 vRange;\nvarying vec4 vCoords;\n#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif\n\n#include <round_edges_and_add_caps>\n#include <tile_clip_func>\n\n#ifdef USE_FADING\n#include <fading_pars_fragment>\n#endif\n\n#include <fog_pars_fragment>\n\nvoid main() {\n    float alpha = opacity;\n    vec3 outputDiffuse = diffuse;\n\n    #ifdef USE_TILE_CLIP\n    tileClip(vPosition.xy, tileSize);\n    #endif\n\n    // Calculate distance to center (0.0: lineCenter, 1.0: lineEdge).\n    float distToCenter = roundEdgesAndAddCaps(vCoords, vRange);\n    // Calculate distance to edge (-1.0: lineCenter, 0.0: lineEdge).\n    float distToEdge = distToCenter - (lineWidth + outlineWidth) / lineWidth;\n\n    // Decrease the line opacity by the distToEdge, making the transition steeper when the slope\n    // of distToChange increases (i.e. the line is further away).\n    float width = fwidth(distToEdge);\n    alpha *= (1.0 - smoothstep(-width, width, distToEdge));\n\n    #ifdef USE_DASHED_LINE\n    // Compute the distance to the dash origin (0.0: dashOrigin, 1.0: dashEnd, (d+g)/d: gapEnd).\n    float d = dashSize / vRange.x;\n    float g = gapSize / vRange.x;\n    float distToDashOrigin = mod(vCoords.x, d + g) / d;\n\n    // Compute distance to dash edge (0.5: dashCenter, 0.0: dashEdge) and compute the\n    // dashBlendFactor similarly on how we did it for the line opacity.\n    float distToDashEdge = 0.5 - distance(distToDashOrigin, (d + g) / d * 0.5);\n    #if DASHES_MODE == DASHES_ROUND\n    distToDashEdge = 0.5 - distance(vec2(distToCenter * 0.5, distToDashEdge), vec2(0.0, 0.5));\n    #elif DASHES_MODE == DASHES_DIAMOND\n    distToDashEdge -= distToCenter * 0.5;\n    #endif\n    float dashWidth = fwidth(distToDashEdge);\n    float dashBlendFactor = 1.0 - smoothstep(-dashWidth, dashWidth, distToDashEdge);\n\n    #ifdef USE_DASH_COLOR\n    outputDiffuse = mix(diffuse, dashColor, dashBlendFactor);\n    #endif\n    #endif\n\n    #ifdef USE_OUTLINE\n    // Calculate distance to outline (0.0: lineEdge, outlineWidth/lineWidth: outlineEdge) and\n    // compute the outlineBlendFactor (used to mix line and outline colors).\n    float distToOutline = distToCenter - 1.0;\n    float outlineWidth = fwidth(distToOutline);\n    float outlineBlendFactor = smoothstep(-outlineWidth, outlineWidth, distToOutline);\n\n    // Mix the colors using the different computed factors.\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    float colorBlendFactor = smoothstep(-1.0, 1.0, dashBlendFactor - outlineBlendFactor);\n    outputDiffuse = mix(\n      mix(\n        mix(outlineColor, diffuse, colorBlendFactor),\n        outputDiffuse,\n        dashBlendFactor\n      ),\n      outlineColor,\n      outlineBlendFactor\n    );\n    #else\n    outputDiffuse = mix(outputDiffuse, outlineColor, outlineBlendFactor);\n    #endif\n    #endif\n\n    #if defined(USE_DASHED_LINE) && !defined(USE_DASH_COLOR)\n    // Multiply the alpha by the dashBlendFactor.\n    #if defined(USE_OUTLINE)\n    alpha *= clamp(dashBlendFactor + outlineBlendFactor, 0.0, 1.0);\n    #else\n    alpha *= 1.0 - dashBlendFactor;\n    #endif\n    #endif\n\n    #ifdef USE_COLOR\n    gl_FragColor = vec4( outputDiffuse * vColor, alpha );\n    #else\n    gl_FragColor = vec4( outputDiffuse, alpha );\n    #endif\n\n    #include <fog_fragment>\n\n    #ifdef USE_FADING\n    #include <fading_fragment>\n    #endif\n}`;\n\n/**\n * Parameters used when constructing a new [[SolidLineMaterial]].\n */\nexport interface SolidLineMaterialParameters\n    extends FadingFeatureParameters,\n        DisplacementFeatureParameters {\n    /**\n     * Line color.\n     */\n    color?: number | string;\n\n    /**\n     * Line outline color.\n     */\n    outlineColor?: number | string;\n\n    /**\n     * Enables/Disable depth test.\n     */\n    depthTest?: boolean;\n\n    /**\n     * Enables/Disable depth write.\n     */\n    depthWrite?: boolean;\n\n    /**\n     * `SolidLineMaterial` extends the ThreeJS `RawShaderMaterial` that does not update fog at\n     * runtime, so instead of recompiling everything we pass it in the constructor.\n     */\n    fog?: boolean;\n\n    /**\n     * Line width.\n     */\n    lineWidth?: number;\n\n    /**\n     * Outline width.\n     */\n    outlineWidth?: number;\n\n    /**\n     * Line opacity.\n     */\n    opacity?: number;\n\n    /**\n     * Describes line caps type (`\"None\"`, `\"Round\"`, `\"Square\"`, `\"TriangleOut\"`, `\"TriangleIn\"`).\n     * Default is `\"Round\"`.\n     */\n    caps?: LineCaps;\n\n    /**\n     * Describes the starting drawing position for the line (in the range [0...1]).\n     * Default is `0.0`.\n     */\n    drawRangeStart?: number;\n\n    /**\n     * Describes the ending drawing position for the line (in the range [0...1]).\n     * Default is `1.0`.\n     */\n    drawRangeEnd?: number;\n\n    /**\n     * Describes line dash type (`\"Round\"`, `\"Square\"`, `\"Diamond\"`).\n     * Default is `\"Square\"`.\n     */\n    dashes?: LineDashes;\n\n    /**\n     * Line dashes color.\n     */\n    dashColor?: number | string;\n\n    /**\n     * Size of the dashed segments.\n     */\n    dashSize?: number;\n\n    /**\n     * Size of the gaps between dashed segments.\n     */\n    gapSize?: number;\n}\n\n/**\n * Material designed to render solid variable-width lines.\n */\nexport class SolidLineMaterial extends THREE.RawShaderMaterial\n    implements DisplacementFeature, FadingFeature {\n    static DEFAULT_COLOR: number = 0xff0000;\n    static DEFAULT_WIDTH: number = 1.0;\n    static DEFAULT_OUTLINE_WIDTH: number = 0.0;\n    static DEFAULT_OPACITY: number = 1.0;\n    static DEFAULT_DRAW_RANGE_START: number = 0.0;\n    static DEFAULT_DRAW_RANGE_END: number = 1.0;\n    static DEFAULT_DASH_SIZE: number = 1.0;\n    static DEFAULT_GAP_SIZE: number = 1.0;\n\n    /**\n     * @hidden\n     * Material properties overrides.\n     */\n    private m_fog: boolean;\n    private m_opacity: number;\n\n    /**\n     * Constructs a new `SolidLineMaterial`.\n     *\n     * @param params `SolidLineMaterial` parameters.\n     */\n    constructor(params?: SolidLineMaterialParameters) {\n        Object.assign(THREE.ShaderChunk, linesShaderChunk);\n\n        FadingFeature.patchGlobalShaderChunks();\n\n        // Setup default defines.\n        const defines: { [key: string]: any } = {\n            CAPS_MODE: LineCapsModes.CAPS_ROUND,\n            DASHES_MODE: LineDashesModes.DASHES_SQUARE\n        };\n\n        // Prepare defines based on params passed in, before super class c-tor, this ensures\n        // proper set for shader compilation, without need to re-compile.\n        let fogParam = true;\n        let opacityParam = 1.0;\n        let displacementMap;\n        if (params !== undefined) {\n            fogParam = params.fog === true;\n            if (fogParam) {\n                setShaderDefine(defines, \"USE_FOG\", true);\n            }\n            opacityParam = params.opacity !== undefined ? params.opacity : opacityParam;\n            displacementMap = params.displacementMap;\n            if (displacementMap !== undefined) {\n                setShaderDefine(defines, \"USE_DISPLACEMENTMAP\", true);\n            }\n            const hasOutline = params.outlineWidth !== undefined && params.outlineWidth > 0;\n            if (hasOutline) {\n                setShaderDefine(defines, \"USE_OUTLINE\", true);\n            }\n        }\n\n        const shaderParams: THREE.ShaderMaterialParameters = {\n            name: \"SolidLineMaterial\",\n            vertexShader: vertexSource,\n            fragmentShader: fragmentSource,\n            uniforms: THREE.UniformsUtils.merge([\n                {\n                    diffuse: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    dashColor: new THREE.Uniform(new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)),\n                    outlineColor: new THREE.Uniform(\n                        new THREE.Color(SolidLineMaterial.DEFAULT_COLOR)\n                    ),\n                    lineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_WIDTH),\n                    outlineWidth: new THREE.Uniform(SolidLineMaterial.DEFAULT_OUTLINE_WIDTH),\n                    opacity: new THREE.Uniform(SolidLineMaterial.DEFAULT_OPACITY),\n                    tileSize: new THREE.Uniform(new THREE.Vector2()),\n                    fadeNear: new THREE.Uniform(FadingFeature.DEFAULT_FADE_NEAR),\n                    fadeFar: new THREE.Uniform(FadingFeature.DEFAULT_FADE_FAR),\n                    displacementMap: new THREE.Uniform(\n                        displacementMap !== undefined ? displacementMap : new THREE.Texture()\n                    ),\n                    drawRange: new THREE.Uniform(\n                        new THREE.Vector2(\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_START,\n                            SolidLineMaterial.DEFAULT_DRAW_RANGE_END\n                        )\n                    ),\n                    dashSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_DASH_SIZE),\n                    gapSize: new THREE.Uniform(SolidLineMaterial.DEFAULT_GAP_SIZE)\n                },\n                // We need the fog uniforms available when we use `fog` setter as the internal\n                // recompilation cannot add or remove uniforms.\n                THREE.UniformsLib.fog\n            ]),\n            defines,\n            // No need to pass overridden `fog` and `opacity` params they will be set\n            // after super c-tor call.\n            fog: fogParam,\n            opacity: opacityParam\n        };\n        super(shaderParams);\n        // Required to satisfy compiler error if fields has no initializer or are not definitely\n        // assigned in the constructor, this also mimics ShaderMaterial set of defaults\n        // for overridden props.\n        this.m_fog = fogParam;\n        this.m_opacity = opacityParam;\n\n        enforceBlending(this);\n        this.extensions.derivatives = true;\n\n        // Apply initial parameter values.\n        if (params !== undefined) {\n            if (params.color !== undefined) {\n                tmpColor.set(params.color as any);\n                this.color = tmpColor;\n            }\n            if (params.outlineColor !== undefined) {\n                tmpColor.set(params.outlineColor as any);\n                this.outlineColor = tmpColor;\n            }\n            if (params.lineWidth !== undefined) {\n                this.lineWidth = params.lineWidth;\n            }\n            if (params.outlineWidth !== undefined) {\n                this.outlineWidth = params.outlineWidth;\n            }\n            if (params.opacity !== undefined) {\n                this.opacity = params.opacity;\n            }\n            if (params.depthTest !== undefined) {\n                this.depthTest = params.depthTest;\n            }\n            if (params.depthWrite !== undefined) {\n                this.depthWrite = params.depthWrite;\n            }\n            if (params.fadeNear !== undefined) {\n                this.fadeNear = params.fadeNear;\n            }\n            if (params.fadeFar !== undefined) {\n                this.fadeFar = params.fadeFar;\n            }\n            if (params.displacementMap !== undefined) {\n                this.displacementMap = params.displacementMap;\n            }\n            if (params.caps !== undefined) {\n                this.caps = params.caps;\n            }\n            if (params.drawRangeStart !== undefined) {\n                this.drawRangeStart = params.drawRangeStart;\n            }\n            if (params.drawRangeEnd !== undefined) {\n                this.drawRangeEnd = params.drawRangeEnd;\n            }\n            if (params.dashes !== undefined) {\n                this.dashes = params.dashes;\n            }\n            if (params.dashColor !== undefined) {\n                tmpColor.set(params.dashColor as any);\n                this.dashColor = tmpColor;\n            }\n            if (params.dashSize !== undefined) {\n                this.dashSize = params.dashSize;\n            }\n            if (params.gapSize !== undefined) {\n                this.gapSize = params.gapSize;\n            }\n            if (params.fog !== undefined) {\n                this.fog = params.fog;\n            }\n        }\n        // ShaderMaterial overrides requires invalidation cause super c-tor may set this\n        // properties before related `defines` and `uniforms` were created.\n        this.invalidateFog();\n        this.invalidateOpacity();\n    }\n\n    /**\n     * Overrides THREE.Material.fog flag to add support for custom shader.\n     *\n     * @param enable Whether we want to enable the fog.\n     */\n    set fog(enable: boolean) {\n        this.m_fog = enable;\n        // Function may be called from THREE.js cause we override setter,\n        // in this case defines are not yet initialized and require late invalidation in\n        // SolidLineMaterial c-tor.\n        if (this.defines !== undefined) {\n            setShaderMaterialDefine(this, \"USE_FOG\", enable);\n        }\n    }\n\n    /**\n     * Checks if fog is enabled.\n     */\n    get fog(): boolean {\n        return this.m_fog && getShaderMaterialDefine(this, \"USE_FOG\") === true;\n    }\n\n    /**\n     * The method to call to recompile a material to enable/disable outline effect\n     *\n     * @param enable Whether we want to use outline.\n     */\n    set outline(enable: boolean) {\n        setShaderMaterialDefine(this, \"USE_OUTLINE\", enable);\n    }\n\n    /**\n     * Checks if outline is enabled.\n     */\n    get outline(): boolean {\n        return getShaderMaterialDefine(this, \"USE_OUTLINE\") === true;\n    }\n\n    /**\n     * Line opacity.\n     */\n    get opacity(): number {\n        return this.m_opacity;\n    }\n    set opacity(value: number) {\n        this.m_opacity = value;\n        // Setting opacity before uniform being created requires late invalidation,\n        // call to invalidateOpacity() is done at the end of c-tor.\n        if (this.uniforms !== undefined) {\n            this.uniforms.opacity.value = value;\n        }\n    }\n\n    /**\n     * Line color.\n     */\n    get color(): THREE.Color {\n        return this.uniforms.diffuse.value as THREE.Color;\n    }\n    set color(value: THREE.Color) {\n        this.uniforms.diffuse.value.copy(value);\n    }\n\n    /**\n     * Outline color.\n     *\n     * @note The width of outline ([[outlineWidth]]) need to be also set to enable outlining.\n     */\n    get outlineColor(): THREE.Color {\n        return this.uniforms.outlineColor.value as THREE.Color;\n    }\n    set outlineColor(value: THREE.Color) {\n        this.uniforms.outlineColor.value.copy(value);\n    }\n\n    /**\n     * Dash color.\n     *\n     * @note The property [[gapSize]] need to be set to enable dashed line.\n     */\n    get dashColor(): THREE.Color {\n        return this.uniforms.dashColor.value as THREE.Color;\n    }\n    set dashColor(value: THREE.Color) {\n        this.uniforms.dashColor.value.copy(value);\n        setShaderMaterialDefine(this, \"USE_DASH_COLOR\", true);\n    }\n\n    /**\n     * Line width.\n     */\n    get lineWidth(): number {\n        return this.uniforms.lineWidth.value as number;\n    }\n    set lineWidth(value: number) {\n        this.uniforms.lineWidth.value = value;\n    }\n\n    /**\n     * Outline width.\n     */\n    get outlineWidth(): number {\n        return this.uniforms.outlineWidth.value as number;\n    }\n    set outlineWidth(value: number) {\n        this.uniforms.outlineWidth.value = value;\n        this.outline = value > 0.0;\n    }\n\n    /**\n     * Size of the dashed segments.\n     *\n     * @note Ths [[gapSize]] need to be also set to enable dashed line.\n     * @see gapSize.\n     */\n    get dashSize(): number {\n        return this.uniforms.dashSize.value as number;\n    }\n    set dashSize(value: number) {\n        this.uniforms.dashSize.value = value;\n    }\n\n    /**\n     * Size of the gaps between dashed segments.\n     *\n     * @note You may also need to set [[dashSize]].\n     * @see dashSize.\n     */\n    get gapSize(): number {\n        return this.uniforms.gapSize.value as number;\n    }\n    set gapSize(value: number) {\n        this.uniforms.gapSize.value = value;\n        setShaderMaterialDefine(this, \"USE_DASHED_LINE\", value > 0.0);\n    }\n\n    /**\n     * Caps mode.\n     */\n    get caps(): LineCaps {\n        let result: LineCaps = \"Round\";\n        const capsMode = getShaderMaterialDefine(this, \"CAPS_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineCaps type.\n        if (typeof capsMode === \"number\" && DefinesLineCapsMapping.hasOwnProperty(capsMode)) {\n            result = DefinesLineCapsMapping[capsMode];\n        }\n        return result;\n    }\n    set caps(value: LineCaps) {\n        // Line caps mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineCapsDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"CAPS_MODE\", LineCapsDefinesMapping[value]);\n        }\n    }\n\n    /**\n     * Dashes mode.\n     */\n    get dashes(): LineDashes {\n        let result: LineDashes = \"Square\";\n        const dashesMode = getShaderMaterialDefine(this, \"DASHES_MODE\");\n        // Sanity check if material define is numerical and has direct mapping to LineDashes type.\n        if (typeof dashesMode === \"number\" && DefinesLineDashesMapping.hasOwnProperty(dashesMode)) {\n            result = DefinesLineDashesMapping[dashesMode];\n        }\n        return result;\n    }\n    set dashes(value: LineDashes) {\n        // Line dashes mode may be set directly from theme, thus we need to check value\n        // for correctness and provide string to define mapping in fragment shader.\n        if (LineDashesDefinesMapping.hasOwnProperty(value)) {\n            setShaderMaterialDefine(this, \"DASHES_MODE\", LineDashesDefinesMapping[value]);\n        }\n    }\n\n    get fadeNear(): number {\n        return this.uniforms.fadeNear.value as number;\n    }\n    set fadeNear(value: number) {\n        this.uniforms.fadeNear.value = value;\n    }\n\n    get fadeFar(): number {\n        return this.uniforms.fadeFar.value as number;\n    }\n    set fadeFar(value: number) {\n        this.uniforms.fadeFar.value = value;\n        setShaderMaterialDefine(this, \"USE_FADING\", value > 0.0);\n    }\n\n    get displacementMap(): THREE.Texture | null {\n        return this.uniforms.displacementMap.value;\n    }\n    set displacementMap(map: THREE.Texture | null) {\n        if (this.uniforms.displacementMap.value === map) {\n            return;\n        }\n        this.uniforms.displacementMap.value = map;\n        const useDisplacementMap = map !== null;\n        if (useDisplacementMap) {\n            this.uniforms.displacementMap.value.needsUpdate = true;\n        }\n        setShaderMaterialDefine(this, \"USE_DISPLACEMENTMAP\", useDisplacementMap);\n    }\n\n    get drawRangeStart(): number {\n        return this.uniforms.drawRange.value.x as number;\n    }\n    set drawRangeStart(value: number) {\n        this.uniforms.drawRange.value.x = value;\n    }\n\n    get drawRangeEnd(): number {\n        return this.uniforms.drawRange.value.y as number;\n    }\n    set drawRangeEnd(value: number) {\n        this.uniforms.drawRange.value.y = value;\n    }\n\n    set clipTileSize(tileSize: THREE.Vector2) {\n        this.uniforms.tileSize.value.copy(tileSize);\n        const useTileClip = tileSize.x > 0 && tileSize.y > 0;\n        setShaderMaterialDefine(this, \"USE_TILE_CLIP\", useTileClip);\n    }\n    get clipTileSize(): THREE.Vector2 {\n        return this.uniforms.tileSize.value as THREE.Vector2;\n    }\n\n    private invalidateFog() {\n        if (this.m_fog !== getShaderMaterialDefine(this, \"USE_FOG\")) {\n            setShaderMaterialDefine(this, \"USE_FOG\", this.m_fog);\n        }\n    }\n\n    private invalidateOpacity() {\n        if (this.m_opacity !== this.uniforms.opacity.value) {\n            this.uniforms.opacity.value = this.m_opacity;\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\n/**\n * `VignetteShader`.\n */\nexport const VignetteShader: THREE.Shader = {\n    uniforms: {\n        tDiffuse: { value: null },\n        offset: { value: 1.0 },\n        darkness: { value: 1.0 }\n    },\n    vertexShader: `\n        varying vec2 vUv;\n        void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }`,\n    fragmentShader: `\n        uniform float offset;\n        uniform float darkness;\n        uniform sampler2D tDiffuse;\n        varying vec2 vUv;\n        void main() {\n            vec4 texel = texture2D( tDiffuse, vUv );\n            vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\n            gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\n        }`\n};\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Env,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    Value,\n    VarExpr\n} from \"./Expr\";\n\nimport { ArrayOperators } from \"./operators/ArrayOperators\";\nimport { CastOperators } from \"./operators/CastOperators\";\nimport { ColorOperators } from \"./operators/ColorOperators\";\nimport { ComparisonOperators } from \"./operators/ComparisonOperators\";\nimport { FeatureOperators } from \"./operators/FeatureOperators\";\nimport { FlowOperators } from \"./operators/FlowOperators\";\nimport { InterpolationOperators } from \"./operators/InterpolationOperators\";\nimport { MapOperators } from \"./operators/MapOperators\";\nimport { MathOperators } from \"./operators/MathOperators\";\nimport { MiscOperators } from \"./operators/MiscOperators\";\nimport { ObjectOperators } from \"./operators/ObjectOperators\";\nimport { StringOperators } from \"./operators/StringOperators\";\nimport { TypeOperators } from \"./operators/TypeOperators\";\n\nexport interface OperatorDescriptor {\n    /**\n     * Returns `true` if this operator requires a dynamic execution context (e.g. [\"zoom\"]).\n     */\n    isDynamicOperator?: (call: CallExpr) => boolean;\n\n    /**\n     * Evaluates the given expression.\n     */\n    call: (context: ExprEvaluatorContext, call: CallExpr) => Value;\n}\n\nexport interface OperatorDescriptorMap {\n    [name: string]: OperatorDescriptor;\n}\n\nconst operatorDescriptors = new Map<string, OperatorDescriptor>();\n\n/*\n * @hidden\n */\nexport class ExprEvaluatorContext {\n    private m_partialEvaluation = false;\n\n    constructor(\n        readonly evaluator: ExprEvaluator,\n        readonly env: Env,\n        readonly scope: ExprScope,\n        readonly cache?: Map<Expr, Value>\n    ) {}\n\n    /**\n     * `true` if the this context is used to partially evaluate expressions.\n     */\n    get partialEvaluation() {\n        return this.m_partialEvaluation;\n    }\n\n    /**\n     * Evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    evaluate(expr: Expr | undefined) {\n        if (expr !== undefined) {\n            return expr.accept(this.evaluator, this);\n        }\n        throw new Error(\"Failed to evaluate expression\");\n    }\n\n    /**\n     * Partially evaluate the given expression.\n     *\n     * @param expr The [[Expr]] to evaluate.\n     */\n    partiallyEvaluate(expr: Expr | undefined): Expr {\n        if (expr === undefined) {\n            throw new Error(\"Failed to evaluate expression\");\n        }\n\n        const previousEvaluationMode = this.m_partialEvaluation;\n\n        this.m_partialEvaluation = true;\n\n        try {\n            const value = expr.accept(this.evaluator, this);\n\n            this.m_partialEvaluation = previousEvaluationMode;\n\n            if (value instanceof Expr) {\n                return value;\n            }\n\n            return LiteralExpr.fromValue(value);\n        } catch (error) {\n            // rethrow the exception\n            throw error;\n        } finally {\n            // reset the evaluation mode.\n            this.m_partialEvaluation = previousEvaluationMode;\n        }\n    }\n}\n\n/**\n * [[ExprEvaluator]] is used to evaluate [[Expr]] in a given environment.\n *\n * @hidden\n */\nexport class ExprEvaluator implements ExprVisitor<Value, ExprEvaluatorContext> {\n    static defineOperator(op: string, builtin: OperatorDescriptor) {\n        operatorDescriptors.set(op, builtin);\n    }\n\n    static defineOperators(builtins: OperatorDescriptorMap) {\n        Object.getOwnPropertyNames(builtins).forEach(p => {\n            this.defineOperator(p, builtins[p]);\n        });\n    }\n\n    /**\n     * Returns the [[OperatorDescriptor]] for the given operator name.\n     * @hidden\n     */\n    static getOperator(op: string): OperatorDescriptor | undefined {\n        return operatorDescriptors.get(op);\n    }\n\n    visitVarExpr(expr: VarExpr, context: ExprEvaluatorContext): Value {\n        const value = context.env.lookup(expr.name);\n        return value !== undefined ? value : null;\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: ExprEvaluatorContext): Value {\n        return null;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: ExprEvaluatorContext): Value {\n        return expr.value;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: ExprEvaluatorContext): Value {\n        return context.env.lookup(expr.name) !== undefined;\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: ExprEvaluatorContext): Value {\n        const value = expr.value.accept(this, context);\n\n        const result = expr.elements.includes(value as any);\n\n        if (context.cache !== undefined) {\n            context.cache.set(expr, result);\n        }\n\n        return result;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: ExprEvaluatorContext): Value {\n        const r = context.evaluate(match.value);\n        for (const [label, body] of match.branches) {\n            if (Array.isArray(label) && (label as any[]).includes(r)) {\n                return context.evaluate(body);\n            } else if (label === r) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCaseExpr(match: CaseExpr, context: ExprEvaluatorContext): Value {\n        for (const [condition, body] of match.branches) {\n            if (context.evaluate(condition)) {\n                return context.evaluate(body);\n            }\n        }\n        return context.evaluate(match.fallback);\n    }\n\n    visitCallExpr(expr: CallExpr, context: ExprEvaluatorContext): Value {\n        if (context.cache !== undefined) {\n            const v = context.cache.get(expr);\n            if (v !== undefined) {\n                return v;\n            }\n        }\n\n        const descriptor = expr.descriptor || operatorDescriptors.get(expr.op);\n\n        if (descriptor) {\n            expr.descriptor = descriptor;\n\n            const result = descriptor.call(context, expr);\n\n            if (context.cache) {\n                context.cache.set(expr, result);\n            }\n\n            return result;\n        }\n\n        throw new Error(`undefined operator '${expr.op}`);\n    }\n}\n\nExprEvaluator.defineOperators(CastOperators);\nExprEvaluator.defineOperators(ComparisonOperators);\nExprEvaluator.defineOperators(MathOperators);\nExprEvaluator.defineOperators(StringOperators);\nExprEvaluator.defineOperators(ColorOperators);\nExprEvaluator.defineOperators(TypeOperators);\nExprEvaluator.defineOperators(MiscOperators);\nExprEvaluator.defineOperators(FlowOperators);\nExprEvaluator.defineOperators(ArrayOperators);\nExprEvaluator.defineOperators(InterpolationOperators);\nExprEvaluator.defineOperators(ObjectOperators);\nExprEvaluator.defineOperators(FeatureOperators);\nExprEvaluator.defineOperators(MapOperators);\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    at: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const args = call.args;\n            const index = context.evaluate(args[0]);\n            if (typeof index !== \"number\") {\n                throw new Error(`expected the index of the element to retrieve`);\n            }\n            const value = context.evaluate(args[1]);\n            if (!Array.isArray(value)) {\n                throw new Error(`expected an array`);\n            }\n            return index >= 0 && index < value.length ? value[index] : null;\n        }\n    }\n};\n\nexport const ArrayOperators: OperatorDescriptorMap = operators;\nexport type ArrayOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"to-boolean\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Boolean(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-string\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0]));\n        }\n    },\n\n    \"to-number\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const arg of call.args) {\n                const value = Number(context.evaluate(arg));\n                if (!isNaN(value)) {\n                    return value;\n                }\n            }\n            throw new Error(\"cannot convert the value to a number\");\n        }\n    }\n};\n\nexport const CastOperators: OperatorDescriptorMap = operators;\nexport type CastOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { ColorUtils } from \"../ColorUtils\";\nimport { CallExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { parseStringEncodedColor } from \"../StringEncodedNumeral\";\n\nconst operators = {\n    alpha: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            let color: Value | undefined = context.evaluate(call.args[0]);\n            if (typeof color === \"string\") {\n                color = parseStringEncodedColor(color);\n            }\n            const alpha = typeof color === \"number\" ? ColorUtils.getAlphaFromHex(color) : 1;\n            return alpha;\n        }\n    },\n    rgba: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            const a = context.evaluate(call.args[3]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                typeof a === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0 &&\n                a >= 0 &&\n                a <= 1\n            ) {\n                return rgbaToHex(r, g, b, a);\n            }\n            throw new Error(`unknown color 'rgba(${r},${g},${b},${a})'`);\n        }\n    },\n    rgb: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const r = context.evaluate(call.args[0]);\n            const g = context.evaluate(call.args[1]);\n            const b = context.evaluate(call.args[2]);\n            if (\n                typeof r === \"number\" &&\n                typeof g === \"number\" &&\n                typeof b === \"number\" &&\n                r >= 0 &&\n                g >= 0 &&\n                b >= 0\n            ) {\n                return rgbToHex(r, g, b);\n            }\n            throw new Error(`unknown color 'rgb(${r},${g},${b})'`);\n        }\n    },\n    // Hsl operator contains angle modulated to <0, 360> range, percent of\n    // saturation and lightness in <0, 100> range, i.e. hsl(360, 100, 100)\n    hsl: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const h = context.evaluate(call.args[0]);\n            const s = context.evaluate(call.args[1]);\n            const l = context.evaluate(call.args[2]);\n            if (\n                typeof h === \"number\" &&\n                typeof s === \"number\" &&\n                typeof l === \"number\" &&\n                h >= 0 &&\n                s >= 0 &&\n                l >= 0\n            ) {\n                return hslToHex(h, s, l);\n            }\n            throw new Error(`unknown color 'hsl(${h},${s}%,${l}%)'`);\n        }\n    }\n};\n\nfunction rgbaToHex(r: number, g: number, b: number, a: number): number {\n    // We decode rgba color channels using custom hex format with transparency.\n    return ColorUtils.getHexFromRgba(\n        THREE.Math.clamp(r, 0, 255) / 255,\n        THREE.Math.clamp(g, 0, 255) / 255,\n        THREE.Math.clamp(b, 0, 255) / 255,\n        THREE.Math.clamp(a, 0, 1)\n    );\n}\n\nfunction rgbToHex(r: number, g: number, b: number): number {\n    return ColorUtils.getHexFromRgb(\n        THREE.Math.clamp(r, 0, 255) / 255,\n        THREE.Math.clamp(g, 0, 255) / 255,\n        THREE.Math.clamp(b, 0, 255) / 255\n    );\n}\n\nfunction hslToHex(h: number, s: number, l: number): number {\n    return ColorUtils.getHexFromHsl(\n        THREE.Math.euclideanModulo(h, 360) / 360,\n        THREE.Math.clamp(s, 0, 100) / 100,\n        THREE.Math.clamp(l, 0, 100) / 100\n    );\n}\n\nexport const ColorOperators: OperatorDescriptorMap = operators;\nexport type ColorOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction compare(context: ExprEvaluatorContext, call: CallExpr, strict: boolean = false) {\n    const left = context.evaluate(call.args[0]) as any;\n    const right = context.evaluate(call.args[1]) as any;\n\n    if (\n        !(\n            (typeof left === \"number\" && typeof right === \"number\") ||\n            (typeof left === \"string\" && typeof right === \"string\")\n        )\n    ) {\n        if (strict) {\n            throw new Error(`invalid operands '${left}' and '${right}' for operator '${call.op}'`);\n        }\n    }\n\n    switch (call.op) {\n        case \"<\":\n            return left < right;\n        case \">\":\n            return left > right;\n        case \"<=\":\n            return left <= right;\n        case \">=\":\n            return left >= right;\n        default:\n            throw new Error(`invalid comparison operator '${call.op}'`);\n    }\n}\n\nconst operators = {\n    \"!\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return !context.evaluate(call.args[0]);\n        }\n    },\n\n    \"==\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left === right;\n        }\n    },\n\n    \"!=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            return left !== right;\n        }\n    },\n\n    \"<\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \"<=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) },\n    \">=\": { call: (context: ExprEvaluatorContext, call: CallExpr) => compare(context, call) }\n};\n\nexport const ComparisonOperators: OperatorDescriptorMap = operators;\nexport type ComparisonOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"geometry-type\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const geometryType = context.env.lookup(\"$geometryType\");\n            switch (geometryType) {\n                case \"point\":\n                    return \"Point\";\n                case \"line\":\n                    return \"LineString\";\n                case \"polygon\":\n                    return \"Polygon\";\n                default:\n                    return null;\n            }\n        }\n    }\n};\n\nexport const FeatureOperators: OperatorDescriptorMap = operators;\nexport type FeatureOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nfunction conditionalCast(context: ExprEvaluatorContext, type: string, args: Expr[]) {\n    switch (type) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n            for (const childExpr of args) {\n                const value = context.evaluate(childExpr);\n                if (typeof value === type) {\n                    return value;\n                }\n            }\n            throw new Error(`expected a '${type}'`);\n        default:\n            throw new Error(`invalid type '${type}'`);\n    } // switch\n}\n\nconst operators = {\n    all: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (!context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    any: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    none: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                if (context.evaluate(childExpr)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    },\n\n    boolean: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"boolean\", call.args);\n        }\n    },\n\n    number: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"number\", call.args);\n        }\n    },\n\n    string: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return conditionalCast(context, \"string\", call.args);\n        }\n    }\n};\n\nexport const FlowOperators: OperatorDescriptorMap = operators;\nexport type FlowOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, LiteralExpr, NumberLiteralExpr, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\nimport { createInterpolatedProperty, evaluateInterpolatedProperty } from \"../InterpolatedProperty\";\nimport { InterpolatedProperty, InterpolatedPropertyDefinition } from \"../InterpolatedPropertyDefs\";\n\ntype InterpolateCallExpr = CallExpr & {\n    _mode?: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    _exponent?: number;\n    _stops?: number[];\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Evaluates the given piecewise function.\n */\nfunction step(context: ExprEvaluatorContext, call: CallExpr) {\n    const { args } = call;\n\n    const value = context.evaluate(args[0]) as number;\n\n    if (value === null) {\n        // returns the default value of step.\n        return context.evaluate(args[1]);\n    }\n\n    if (typeof value !== \"number\") {\n        throw new Error(`the input of a 'step' operator must have type 'number'`);\n    }\n\n    let first = 1;\n    let last = args.length / 2 - 1;\n\n    while (first < last) {\n        // tslint:disable-next-line: no-bitwise\n        const mid = (first + last) >>> 1;\n        const stop = (args[mid * 2] as NumberLiteralExpr).value;\n\n        if (value < stop) {\n            last = mid - 1;\n        } else if (value > stop) {\n            first = mid + 1;\n        } else {\n            last = mid;\n        }\n    }\n\n    const result = args[first * 2];\n\n    if (!(result instanceof NumberLiteralExpr)) {\n        throw new Error(\"expected a numeric literal\");\n    }\n\n    const index = result.value <= value ? first : first - 1;\n\n    return context.evaluate(args[index * 2 + 1]);\n}\n\n/**\n * Prepare and validate the \"interpolate\" call.\n *\n * @param call An [[Expr]] representing an \"interpolate\" call.\n * @hidden\n */\nfunction prepareInterpolateCallExpr(call: InterpolateCallExpr) {\n    if (call._interpolatedProperty || call._mode !== undefined) {\n        return;\n    }\n\n    const interpolatorType = call.args[0];\n\n    if (!(interpolatorType instanceof CallExpr)) {\n        throw new Error(\"expected an interpolation type\");\n    }\n\n    let mode: InterpolatedPropertyDefinition<any>[\"interpolation\"];\n    let exponent: number | undefined;\n\n    if (interpolatorType.op === \"linear\") {\n        mode = \"Linear\";\n    } else if (interpolatorType.op === \"discrete\") {\n        mode = \"Discrete\";\n    } else if (interpolatorType.op === \"cubic\") {\n        mode = \"Cubic\";\n    } else if (interpolatorType.op === \"exponential\") {\n        mode = \"Exponential\";\n        const base = interpolatorType.args[0];\n        if (!(base instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected the base of the exponential interpolation\");\n        }\n        exponent = base.value;\n    } else {\n        throw new Error(\"unrecognized interpolation type\");\n    }\n\n    const input = call.args[1];\n\n    if (!(input instanceof CallExpr)) {\n        throw new Error(\"expected the input of the interpolation\");\n    }\n\n    if (input.op !== \"zoom\") {\n        throw new Error(\"only 'zoom' is supported\");\n    }\n\n    if (call.args.length === 2 || call.args.length % 2) {\n        throw new Error(\"invalid number of samples\");\n    }\n\n    const stops: number[] = [];\n    const values: Value[] = [];\n\n    let isConstantInterpolation = true;\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n\n        if (stops.length > 0 && stop.value === stops[stops.length - 1]) {\n            stops[stops.length - 1] = stop.value - 0.0000001;\n        }\n\n        stops.push(stop.value);\n\n        if (isConstantInterpolation) {\n            const value = call.args[i + 1];\n\n            if (value instanceof LiteralExpr) {\n                values.push(value.value);\n            } else {\n                isConstantInterpolation = false;\n            }\n        }\n    }\n\n    if (isConstantInterpolation) {\n        const result = createInterpolatedProperty({\n            interpolation: mode,\n            exponent,\n            zoomLevels: stops,\n            values\n        });\n\n        if (!result) {\n            throw new Error(\"failed to create interpolation\");\n        }\n\n        call._interpolatedProperty = result;\n    } else {\n        call._mode = mode;\n        call._exponent = exponent;\n        call._stops = stops;\n    }\n}\n\ntype StepCallExpr = CallExpr & {\n    /**\n     * `true` if the input of `step` call is `[\"zoom\"], otherwise false.\n     */\n    _inputIsZoom?: boolean;\n\n    /**\n     * The stops when the a constant [[InterpolatedProperty]] cannot be\n     * created for this `[\"step\"]` call.\n     */\n    _stops?: number[];\n\n    /**\n     * The [[InterpolatedProperty]] representing this `step` call,\n     * otherwise `undefined` if an interpolated property cannot\n     * be created at parsing time (e.g. one if the value of the step is not a literal).\n     */\n    _interpolatedProperty?: InterpolatedProperty;\n};\n\n/**\n * Classify the given `step` call.\n *\n * This function checks the input of the `step` and ensures that the stops\n * are literals.\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction classifyStepCallExpr(call: StepCallExpr) {\n    if (call._inputIsZoom !== undefined) {\n        // nothing to do, the `call` was already classified.\n        return;\n    }\n\n    if (call.args[0] === undefined) {\n        throw new Error(\"expected the input of the 'step' operator\");\n    }\n\n    if (call.args.length < 3 || call.args.length % 2) {\n        throw new Error(\"not enough arguments\");\n    }\n\n    const input = call.args[0];\n\n    // tslint:disable-next-line: prefer-conditional-expression\n    if (input instanceof CallExpr && input.op === \"zoom\") {\n        call._inputIsZoom = true;\n    } else {\n        call._inputIsZoom = false;\n    }\n\n    // check that the stops are literals.\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i];\n        if (!(stop instanceof NumberLiteralExpr)) {\n            throw new Error(\"expected a numeric literal\");\n        }\n    }\n}\n\n/**\n * Prepares the given call for the dynamic exception.\n * This method collects the stops and\n *\n * @param call A call to `[\"step\", ...]`.\n * @hidden\n */\nfunction prepareStepCallExpr(call: StepCallExpr) {\n    if (call._stops || call._interpolatedProperty) {\n        // nothing to do, the `call` was already prepared for execution.\n        return;\n    }\n\n    // collect the stops of the step call.\n    const stops: number[] = [Number.MIN_SAFE_INTEGER];\n\n    for (let i = 2; i < call.args.length; i += 2) {\n        const stop = call.args[i] as NumberLiteralExpr;\n        stops.push(stop.value);\n    }\n\n    // collect the values of the step call.\n    const values: Value[] = [];\n    let hasConstantValues = true;\n\n    for (let i = 1; hasConstantValues && i < call.args.length; i += 2) {\n        const literal = call.args[i];\n        if (literal instanceof LiteralExpr) {\n            values.push(literal.value);\n        } else {\n            hasConstantValues = false;\n        }\n    }\n\n    if (hasConstantValues) {\n        // all the values of this zoom-based `step` are constant,\n        // create an interpolated property and store it together\n        // with the call.\n        const interpolatedProperty = createInterpolatedProperty({\n            interpolation: \"Discrete\",\n            zoomLevels: stops,\n            values\n        });\n\n        if (interpolatedProperty === undefined) {\n            throw new Error(\"failed to create interpolator\");\n        }\n\n        call._interpolatedProperty = interpolatedProperty;\n    } else {\n        // the values the `[\"step\"]` call are not constants,\n        // cache the `zoomLevels` to avoid recreating input `Array`\n        // when instantiating a new [[InterpolatedProperty]].\n        call._stops = stops;\n    }\n}\n\nconst operators = {\n    interpolate: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[1] && call.args[1].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: InterpolateCallExpr): Value => {\n            prepareInterpolateCallExpr(call);\n\n            if (context.scope !== ExprScope.Dynamic) {\n                return call;\n            }\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                const values: Value[] = [];\n\n                for (let i = 2; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i + 1]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = createInterpolatedProperty({\n                    interpolation: call._mode!,\n                    exponent: call._exponent,\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return evaluateInterpolatedProperty(interpolatedProperty, context.env);\n        }\n    },\n    step: {\n        isDynamicOperator: (call: CallExpr): boolean => {\n            return call.args[0] && call.args[0].isDynamic();\n        },\n        call: (context: ExprEvaluatorContext, call: StepCallExpr): Value => {\n            classifyStepCallExpr(call);\n\n            if (context.scope === ExprScope.Value) {\n                return call;\n            }\n\n            if (context.scope === ExprScope.Condition || call._inputIsZoom === false) {\n                return step(context, call);\n            }\n\n            prepareStepCallExpr(call);\n\n            let interpolatedProperty = call._interpolatedProperty;\n\n            if (!interpolatedProperty) {\n                // the values of the interpolation are not literals,\n                // evaluate the sub expressions and combine them\n                // with the constant stops computed when preparing this call.\n                const values: Value[] = [];\n                for (let i = 1; i < call.args.length; i += 2) {\n                    const value = context.evaluate(call.args[i]);\n                    values.push(value);\n                }\n\n                interpolatedProperty = createInterpolatedProperty({\n                    interpolation: \"Discrete\",\n                    zoomLevels: call._stops!,\n                    values\n                });\n\n                if (interpolatedProperty === undefined) {\n                    throw new Error(\"failed to create interpolator\");\n                }\n            }\n\n            return evaluateInterpolatedProperty(interpolatedProperty, context.env);\n        }\n    }\n};\n\nexport const InterpolationOperators: OperatorDescriptorMap = operators;\nexport type InterpolationOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Interpolant } from \"three\";\n\nexport class ExponentialInterpolant extends Interpolant {\n    /**\n     * Exponent value. Defaults to `2.0`.\n     */\n    exponent: number = 2.0;\n\n    // Note: We need to disable linting here as tslint thinks this function is never used, though it\n    // indeed is called by ``Interpolant.evaluate(level)``.\n    // tslint:disable-next-line\n    private interpolate_(i1: number, t0: number, t: number, t1: number) {\n        const result = this.resultBuffer;\n        // TODO: Remove when Interpolant types are fixed.\n        const values = (this as any).sampleValues;\n        const stride = this.valueSize;\n        const offset1 = i1 * stride;\n        const offset0 = offset1 - stride;\n        const weight1 = Math.pow((t - t0) / (t1 - t0), this.exponent);\n        const weight0 = 1 - weight1;\n\n        for (let i = 0; i !== stride; ++i) {\n            result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, ExprScope, Value } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    \"ppi-scale\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            return value * scaleFactor;\n        }\n    },\n    \"world-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidth = Math.pow(2, 17) / Math.pow(2, zoom);\n            const v = pixels * zoomWidth * scaleFactor;\n            return v;\n        }\n    },\n    \"world-discrete-ppi-scale\": {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const pixels = context.evaluate(call.args[0]) as number;\n            const scaleFactor = call.args[1] ? (context.evaluate(call.args[1]) as number) : 1;\n            const zoom = context.env.lookup(\"$zoom\") as number;\n            const zoomWidthDiscrete = Math.pow(2, 17.8) / Math.pow(2, Math.floor(zoom));\n            const v = pixels * zoomWidthDiscrete * scaleFactor;\n            return v;\n        }\n    },\n    ppi: {\n        call: (context: ExprEvaluatorContext) => {\n            const ppi = context.env.lookup(\"$ppi\");\n            if (typeof ppi === \"number\") {\n                return ppi;\n            }\n            return 72;\n        }\n    },\n    zoom: {\n        isDynamicOperator: (): boolean => {\n            return true;\n        },\n        call: (context: ExprEvaluatorContext): Value => {\n            if (context.scope === ExprScope.Condition) {\n                const zoom = context.env.lookup(\"$zoom\")!;\n                if (zoom !== undefined) {\n                    return zoom;\n                }\n                throw new Error(\"failed to get the zoom level.\");\n            }\n            // direct usages of 'zoom' outside technique filter conditions\n            // and interpolations are not allowed.\n            throw new Error(\"invalid usage of the 'zoom' operator.\");\n        }\n    }\n};\n\nexport const MapOperators: OperatorDescriptorMap = operators;\nexport type MapOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nimport * as THREE from \"three\";\n\nconst operators = {\n    \"^\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '^'`\n                );\n            }\n            return Math.pow(a, b);\n        }\n    },\n\n    \"-\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            if (call.args.length === 1) {\n                const value = context.evaluate(call.args[0]);\n                if (typeof value !== \"number\") {\n                    throw new Error(`ìnvalid operand '${typeof value} for operator '-'`);\n                }\n\n                return -value;\n            }\n\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '-'`\n                );\n            }\n            return a - b;\n        }\n    },\n\n    \"/\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '/'`\n                );\n            }\n            return a / b;\n        }\n    },\n\n    \"%\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const a = context.evaluate(call.args[0]);\n            const b = context.evaluate(call.args[1]);\n            if (typeof a !== \"number\" || typeof b !== \"number\") {\n                // tslint:disable-next-line: max-line-length\n                throw new Error(\n                    `invalid operands '${typeof a}' and '${typeof b}' for operator '%'`\n                );\n            }\n            return a % b;\n        }\n    },\n\n    \"+\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) + Number(context.evaluate(b)), 0);\n        }\n    },\n\n    \"*\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return call.args.reduce((a, b) => Number(a) * Number(context.evaluate(b)), 1);\n        }\n    },\n\n    abs: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'abs'`);\n            }\n            return Math.abs(value);\n        }\n    },\n\n    acos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'acos'`);\n            }\n            return Math.acos(value);\n        }\n    },\n\n    asin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'asin'`);\n            }\n            return Math.asin(value);\n        }\n    },\n\n    atan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'atan'`);\n            }\n            return Math.atan(value);\n        }\n    },\n\n    ceil: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ceil'`);\n            }\n            return Math.ceil(value);\n        }\n    },\n\n    cos: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'cos'`);\n            }\n            return Math.cos(value);\n        }\n    },\n\n    e: {\n        call: () => {\n            return Math.E;\n        }\n    },\n\n    floor: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'floor'`);\n            }\n            return Math.floor(value);\n        }\n    },\n\n    ln: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln'`);\n            }\n            return Math.log(value);\n        }\n    },\n\n    ln2: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'ln2'`);\n            }\n            return Math.log2(value);\n        }\n    },\n\n    log10: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'log10'`);\n            }\n            return Math.log10(value);\n        }\n    },\n\n    max: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.max(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    min: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return Math.min(...call.args.map(v => Number(context.evaluate(v))));\n        }\n    },\n\n    /**\n     * Clamp numeric value to given range, inclusive.\n     *\n     * Synopsis:\n     * ```\n     * [\"clamp\", v: number, min: number, max: number]`\n     * ```\n     */\n    clamp: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const v = context.evaluate(call.args[0]);\n            const min = context.evaluate(call.args[1]);\n            const max = context.evaluate(call.args[2]);\n\n            if (typeof v !== \"number\" || typeof min !== \"number\" || typeof max !== \"number\") {\n                throw new Error(`invalid operands '${v}', ${min}, ${max} for operator 'clamp'`);\n            }\n            return THREE.Math.clamp(v, min, max);\n        }\n    },\n\n    pi: {\n        call: () => {\n            return Math.PI;\n        }\n    },\n\n    round: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'round'`);\n            }\n            return Math.round(value);\n        }\n    },\n\n    sin: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sin'`);\n            }\n            return Math.sin(value);\n        }\n    },\n\n    sqrt: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'sqrt'`);\n            }\n            return Math.sqrt(value);\n        }\n    },\n\n    tan: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (typeof value !== \"number\") {\n                throw new Error(`invalid operand '${value}' for operator 'tan'`);\n            }\n            return Math.tan(value);\n        }\n    }\n};\n\nexport const MathOperators: OperatorDescriptorMap = operators;\nexport type MathOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    length: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const value = context.evaluate(call.args[0]);\n            if (Array.isArray(value) || typeof value === \"string\") {\n                return value.length;\n            }\n            throw new Error(`invalid operand '${value}' for operator 'length'`);\n        }\n    },\n    coalesce: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            for (const childExpr of call.args) {\n                const value = context.evaluate(childExpr);\n                if (value !== null) {\n                    return value;\n                }\n            }\n            return null;\n        }\n    }\n};\n\nexport const MiscOperators: OperatorDescriptorMap = operators;\nexport type MiscOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr, Expr } from \"../Expr\";\n\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nenum LookupMode {\n    get,\n    has\n}\n\nfunction lookupMember(context: ExprEvaluatorContext, args: Expr[], lookupMode: LookupMode) {\n    const memberName = context.evaluate(args[0]);\n\n    if (typeof memberName !== \"string\") {\n        throw new Error(`expected the name of an attribute`);\n    }\n\n    const object = context.evaluate(args[1]) as any;\n\n    if (object && typeof object === \"object\" && hasOwnProperty.call(object, memberName)) {\n        return lookupMode === LookupMode.get ? object[memberName] : true;\n    }\n\n    return lookupMode === LookupMode.get ? null : false;\n}\n\nconst operators = {\n    get: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.get)\n    },\n\n    has: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) =>\n            lookupMember(context, call.args, LookupMode.has)\n    }\n};\n\nexport const ObjectOperators: OperatorDescriptorMap = operators;\nexport type ObjectOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    concat: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return \"\".concat(...call.args.map(a => String(context.evaluate(a))));\n        }\n    },\n\n    downcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleLowerCase();\n        }\n    },\n\n    upcase: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return String(context.evaluate(call.args[0])).toLocaleUpperCase();\n        }\n    },\n\n    \"~=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.indexOf(right) !== -1;\n            }\n            return false;\n        }\n    },\n\n    \"^=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.startsWith(right);\n            }\n            return false;\n        }\n    },\n\n    \"$=\": {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            const left = context.evaluate(call.args[0]);\n            const right = context.evaluate(call.args[1]);\n            if (typeof left === \"string\" && typeof right === \"string\") {\n                return left.endsWith(right);\n            }\n            return false;\n        }\n    }\n};\n\nexport const StringOperators: OperatorDescriptorMap = operators;\nexport type StringOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CallExpr } from \"../Expr\";\nimport { ExprEvaluatorContext, OperatorDescriptorMap } from \"../ExprEvaluator\";\n\nconst operators = {\n    typeof: {\n        call: (context: ExprEvaluatorContext, call: CallExpr) => {\n            return typeof context.evaluate(call.args[0]);\n        }\n    }\n};\n\nexport const TypeOperators: OperatorDescriptorMap = operators;\nexport type TypeOperatorNames = keyof typeof operators;\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Expr,\n    ExprScope,\n    ExprVisitor,\n    HasAttributeExpr,\n    LiteralExpr,\n    MatchExpr,\n    MatchLabel,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\nimport { Env } from \"./Env\";\n\nexport interface InstantiationContext {\n    /**\n     * The [[Env]] used to lookup for names.\n     */\n    env: Env;\n\n    /**\n     * The names to preserve during the instantiation.\n     */\n    preserve?: Set<string>;\n}\n\nconst emptyEnv = new Env();\n\n/**\n * @hidden\n */\nexport class ExprInstantiator implements ExprVisitor<Expr, InstantiationContext> {\n    visitNullLiteralExpr(expr: NullLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, _context: InstantiationContext): Expr {\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name);\n        return LiteralExpr.fromValue(value !== undefined ? value : null);\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: InstantiationContext): Expr {\n        if (context.preserve && context.preserve.has(expr.name)) {\n            return expr;\n        }\n        const value = context.env.lookup(expr.name) !== undefined;\n        return LiteralExpr.fromValue(value);\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: InstantiationContext): Expr {\n        const value = expr.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const result = expr.elements.includes(value.value as any);\n            return LiteralExpr.fromValue(result);\n        }\n\n        return value === expr.value ? expr : new ContainsExpr(value, expr.elements);\n    }\n\n    visitCallExpr(expr: CallExpr, context: InstantiationContext): Expr {\n        const args = expr.args.map(arg => arg.accept(this, context));\n        if (args.some((a, i) => a !== expr.args[i])) {\n            return new CallExpr(expr.op, args);\n        }\n        return expr;\n    }\n\n    visitMatchExpr(match: MatchExpr, context: InstantiationContext): Expr {\n        const value = match.value.accept(this, context);\n\n        if (value instanceof LiteralExpr) {\n            const r = value.value;\n            for (const [label, body] of match.branches) {\n                if (Array.isArray(label) && (label as any[]).includes(r)) {\n                    return body.accept(this, context);\n                } else if (label === r) {\n                    return body.accept(this, context);\n                }\n            }\n            return match.fallback.accept(this, context);\n        }\n\n        let changed = match.value !== value;\n\n        const branches: Array<[MatchLabel, Expr]> = match.branches.map(([label, branch]) => {\n            const newBranch = branch.accept(this, context);\n            if (newBranch !== branch) {\n                changed = true;\n            }\n            return [label, newBranch];\n        });\n\n        const fallback = match.fallback.accept(this, context);\n\n        if (fallback !== match.fallback) {\n            changed = true;\n        }\n\n        return changed ? new MatchExpr(value, branches, fallback) : match;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: InstantiationContext): Expr {\n        const branches: Array<[Expr, Expr]> = [];\n\n        let changed = false;\n\n        for (const [condition, branch] of expr.branches) {\n            const newCondition = condition.accept(this, context);\n            const deps = newCondition.dependencies();\n            if (!deps.zoom && deps.properties.size === 0) {\n                if (Boolean(newCondition.evaluate(emptyEnv, ExprScope.Condition))) {\n                    return branch.accept(this, context);\n                }\n            } else {\n                if (newCondition !== condition) {\n                    changed = true;\n                }\n                branches.push([newCondition, branch]);\n            }\n        }\n\n        if (branches.length === 0) {\n            // all the conditions of this CaseExpr evaluated\n            // to false, so the resulting of instantiating this CaseExpr\n            // is the same as instantiating its fallback expression.\n            return expr.fallback.accept(this, context);\n        }\n\n        if (branches.length !== expr.branches.length) {\n            // the number of branches changed, this means that\n            // some of the branches had constant expressions that\n            // evaluate to false. In this case the resulting\n            // `CaseExpr` has less branches.\n            changed = true;\n        }\n\n        // Instantiate the body of all the branches of this CaseExpr\n        // that have dynamic conditions.\n        branches.forEach(branch => {\n            const instantiatedBranch = branch[1].accept(this, context);\n\n            if (instantiatedBranch !== branch[1]) {\n                changed = true;\n            }\n\n            branch[1] = instantiatedBranch;\n        });\n\n        const fallback = expr.fallback.accept(this, context);\n\n        if (fallback !== expr.fallback) {\n            changed = true;\n        }\n\n        if (!changed) {\n            // nothing changed, return the old expression.\n            return expr;\n        }\n\n        return new CaseExpr(branches, fallback);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    CallExpr,\n    ContainsExpr,\n    EqualityOp,\n    Expr,\n    HasAttributeExpr,\n    NumberLiteralExpr,\n    RelationalOp,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * Character value\n */\nenum Character {\n    Tab = 9,\n    Lf = 10,\n    Cr = 13,\n    Space = 32,\n    LParen = 40,\n    RParen = 41,\n    Comma = 44,\n    Dot = 46,\n    LBracket = 91,\n    Backslash = 92,\n    RBracket = 93,\n    _0 = 48,\n    _9 = 57,\n    _ = 95,\n    A = 64,\n    Z = 90,\n    a = 97,\n    z = 122,\n    DoubleQuote = 34,\n    SingleQuote = 39,\n    Exclaim = 33,\n    Equal = 61,\n    Caret = 94,\n    Tilde = 126,\n    Dollar = 36,\n    Less = 60,\n    Greater = 62,\n    Bar = 124,\n    Amp = 38\n}\n\n/**\n * Check if a codepoint is a whitespace character.\n */\nfunction isSpace(codepoint: number): boolean {\n    switch (codepoint) {\n        case Character.Tab:\n        case Character.Lf:\n        case Character.Cr:\n        case Character.Space:\n            return true;\n        default:\n            return false;\n    } // switch\n}\n\n/**\n * Check if codepoint is a digit character.\n */\nfunction isNumber(codepoint: number): boolean {\n    return codepoint >= Character._0 && codepoint <= Character._9;\n}\n\n/**\n * Check if codepoint is a letter character.\n */\nfunction isLetter(codepoint: number): boolean {\n    return (\n        (codepoint >= Character.a && codepoint <= Character.z) ||\n        (codepoint >= Character.A && codepoint <= Character.Z)\n    );\n}\n\n/**\n * Check if codepoint is either a digit or a letter character.\n */\nfunction isLetterOrNumber(codepoint: number): boolean {\n    return isLetter(codepoint) || isNumber(codepoint);\n}\n\n/**\n * Check if codepoint is an identification character: underscore, dollar sign, dot or bracket.\n */\nfunction isIdentChar(codepoint: number): boolean {\n    return (\n        isLetterOrNumber(codepoint) ||\n        codepoint === Character._ ||\n        codepoint === Character.Dollar ||\n        codepoint === Character.Dot ||\n        codepoint === Character.LBracket ||\n        codepoint === Character.RBracket\n    );\n}\n\n/**\n * Tokens used in theme grammar.\n */\nenum Token {\n    Eof = 0,\n    Error,\n    Identifier,\n    Number,\n    String,\n    Comma,\n    LParen,\n    RParen,\n    LBracket,\n    RBracket,\n    Exclaim,\n    TildeEqual,\n    CaretEqual,\n    DollarEqual,\n    EqualEqual,\n    ExclaimEqual,\n    Less,\n    Greater,\n    LessEqual,\n    GreaterEqual,\n    BarBar,\n    AmpAmp\n}\n\n/**\n * Maps a token to its string name.\n */\nfunction tokenSpell(token: Token): string {\n    switch (token) {\n        case Token.Eof:\n            return \"eof\";\n        case Token.Error:\n            return \"error\";\n        case Token.Identifier:\n            return \"identifier\";\n        case Token.Number:\n            return \"number\";\n        case Token.String:\n            return \"string\";\n        case Token.Comma:\n            return \",\";\n        case Token.LParen:\n            return \"(\";\n        case Token.RParen:\n            return \")\";\n        case Token.LBracket:\n            return \"[\";\n        case Token.RBracket:\n            return \"]\";\n        case Token.Exclaim:\n            return \"!\";\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        case Token.BarBar:\n            return \"||\";\n        case Token.AmpAmp:\n            return \"&&\";\n        default:\n            throw new Error(`invalid token ${token}`);\n    }\n}\n\n/**\n * Lexer class implementation.\n */\nclass Lexer {\n    private m_token: Token = Token.Error;\n    private m_index = 0;\n    private m_char: number = Character.Lf;\n    private m_text?: string;\n\n    constructor(readonly code: string) {}\n\n    /**\n     * Single lexer token.\n     */\n    token(): Token {\n        return this.m_token;\n    }\n\n    /**\n     * Parsed text.\n     */\n    text(): string {\n        return this.m_text || \"\";\n    }\n\n    /**\n     * Go to the next token.\n     */\n    next(): Token {\n        this.m_token = this.yylex();\n        if (this.m_token === Token.Error) {\n            throw new Error(`unexpected character ${this.m_char}`);\n        }\n        return this.m_token;\n    }\n\n    private yyinp(): void {\n        this.m_char = this.code.codePointAt(this.m_index++) || 0;\n    }\n\n    private yylex(): Token {\n        this.m_text = undefined;\n        while (isSpace(this.m_char)) {\n            this.yyinp();\n        }\n        if (this.m_char === 0) {\n            return Token.Eof;\n        }\n        const ch = this.m_char;\n        this.yyinp();\n        switch (ch) {\n            case Character.LParen:\n                return Token.LParen;\n            case Character.RParen:\n                return Token.RParen;\n            case Character.LBracket:\n                return Token.LBracket;\n            case Character.RBracket:\n                return Token.RBracket;\n            case Character.Comma:\n                return Token.Comma;\n            case Character.SingleQuote:\n            case Character.DoubleQuote: {\n                const start = this.m_index - 1;\n                while (this.m_char && this.m_char !== ch) {\n                    // ### TODO handle escape sequences\n                    this.yyinp();\n                }\n                if (this.m_char !== ch) {\n                    throw new Error(\"Unfinished string literal\");\n                }\n                this.yyinp();\n                this.m_text = this.code.substring(start, this.m_index - 2);\n                return Token.String;\n            }\n            case Character.Exclaim:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.ExclaimEqual;\n                }\n                return Token.Exclaim;\n            case Character.Caret:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.CaretEqual;\n                }\n                return Token.Error;\n            case Character.Tilde:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.TildeEqual;\n                }\n                return Token.Error;\n            case Character.Equal:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.EqualEqual;\n                }\n                return Token.Error;\n            case Character.Less:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.LessEqual;\n                }\n                return Token.Less;\n            case Character.Greater:\n                if (this.m_char === Character.Equal) {\n                    this.yyinp();\n                    return Token.GreaterEqual;\n                }\n                return Token.Greater;\n            case Character.Bar:\n                if (this.m_char === Character.Bar) {\n                    this.yyinp();\n                    return Token.BarBar;\n                }\n                return Token.Error;\n            case Character.Amp:\n                if (this.m_char === Character.Amp) {\n                    this.yyinp();\n                    return Token.AmpAmp;\n                }\n                return Token.Error;\n            default: {\n                const start = this.m_index - 2;\n                if (\n                    isLetter(ch) ||\n                    ch === Character._ ||\n                    (ch === Character.Dollar && isIdentChar(this.m_char))\n                ) {\n                    while (isIdentChar(this.m_char)) {\n                        this.yyinp();\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Identifier;\n                } else if (isNumber(ch)) {\n                    while (isNumber(this.m_char)) {\n                        this.yyinp();\n                    }\n                    if (this.m_char === Character.Dot) {\n                        this.yyinp();\n                        while (isNumber(this.m_char)) {\n                            this.yyinp();\n                        }\n                    }\n                    this.m_text = this.code.substring(start, this.m_index - 1);\n                    return Token.Number;\n                } else if (ch === Character.Dollar) {\n                    if (this.m_char === Character.Equal) {\n                        this.yyinp();\n                        return Token.DollarEqual;\n                    }\n                    return Token.Error;\n                }\n            }\n        }\n        return Token.Error;\n    }\n}\n\nfunction getEqualityOp(token: Token): EqualityOp | undefined {\n    switch (token) {\n        case Token.TildeEqual:\n            return \"~=\";\n        case Token.CaretEqual:\n            return \"^=\";\n        case Token.DollarEqual:\n            return \"$=\";\n        case Token.EqualEqual:\n            return \"==\";\n        case Token.ExclaimEqual:\n            return \"!=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nfunction getRelationalOp(token: Token): RelationalOp | undefined {\n    switch (token) {\n        case Token.Less:\n            return \"<\";\n        case Token.Greater:\n            return \">\";\n        case Token.LessEqual:\n            return \"<=\";\n        case Token.GreaterEqual:\n            return \">=\";\n        default:\n            return undefined;\n    } // switch\n}\n\nexport class ExprParser {\n    private readonly lex: Lexer;\n\n    constructor(code: string) {\n        this.lex = new Lexer(code);\n        this.lex.next();\n    }\n\n    parse(): Expr | never {\n        return this.parseLogicalOr();\n    }\n\n    private yyexpect(token: Token): void | never {\n        if (this.lex.token() !== token) {\n            throw new Error(\n                `Syntax error: Expected token '${tokenSpell(token)}' but ` +\n                    `found '${tokenSpell(this.lex.token())}'`\n            );\n        }\n        this.lex.next();\n    }\n\n    private parsePrimary(): Expr | never {\n        switch (this.lex.token()) {\n            case Token.Identifier: {\n                const text = this.lex.text();\n                switch (text) {\n                    case \"has\":\n                        this.lex.next(); // skip has keyword\n                        this.yyexpect(Token.LParen);\n                        const hasAttribute = this.lex.text();\n                        this.yyexpect(Token.Identifier);\n                        this.yyexpect(Token.RParen);\n                        return new HasAttributeExpr(hasAttribute);\n                    case \"length\":\n                        this.lex.next(); // skip length keyword\n                        this.yyexpect(Token.LParen);\n                        const value = this.parseLogicalOr();\n                        this.yyexpect(Token.RParen);\n                        return new CallExpr(\"length\", [value]);\n                    default:\n                        const expr = new VarExpr(text);\n                        this.lex.next();\n                        return expr;\n                }\n            }\n\n            case Token.LParen: {\n                this.lex.next();\n                const expr = this.parseLogicalOr();\n                this.yyexpect(Token.RParen);\n                return expr;\n            }\n\n            default:\n                return this.parseLiteral();\n        } // switch\n    }\n\n    private parseLiteral(): NumberLiteralExpr | StringLiteralExpr | never {\n        switch (this.lex.token()) {\n            case Token.Number: {\n                const expr = new NumberLiteralExpr(parseFloat(this.lex.text()));\n                this.lex.next();\n                return expr;\n            }\n            case Token.String: {\n                const expr = new StringLiteralExpr(this.lex.text());\n                this.lex.next();\n                return expr;\n            }\n            default:\n                throw new Error(\"Syntax error\");\n        } // switch\n    }\n\n    private parseUnary(): Expr | never {\n        if (this.lex.token() === Token.Exclaim) {\n            this.lex.next();\n            return new CallExpr(\"!\", [this.parseUnary()]);\n        }\n        return this.parsePrimary();\n    }\n\n    private parseRelational(): Expr | never {\n        let expr = this.parseUnary();\n        while (true) {\n            if (this.lex.token() === Token.Identifier && this.lex.text() === \"in\") {\n                this.lex.next();\n                this.yyexpect(Token.LBracket);\n                const elements = [this.parseLiteral()];\n                while (this.lex.token() === Token.Comma) {\n                    this.lex.next();\n                    elements.push(this.parseLiteral());\n                }\n                this.yyexpect(Token.RBracket);\n                expr = new ContainsExpr(\n                    expr,\n                    elements.map(literal => literal.value)\n                );\n            } else {\n                const op = getRelationalOp(this.lex.token());\n                if (op === undefined) {\n                    break;\n                }\n                this.lex.next();\n                const right = this.parseUnary();\n                expr = new CallExpr(op, [expr, right]);\n            }\n        }\n        return expr;\n    }\n\n    private parseEquality(): Expr | never {\n        let expr = this.parseRelational();\n        while (true) {\n            const op = getEqualityOp(this.lex.token());\n            if (op === undefined) {\n                break;\n            }\n            this.lex.next();\n            const right = this.parseRelational();\n            expr = new CallExpr(op, [expr, right]);\n        }\n        return expr;\n    }\n\n    private parseLogicalAnd(): Expr | never {\n        const expr = this.parseEquality();\n\n        if (this.lex.token() !== Token.AmpAmp) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseEquality());\n        } while (this.lex.token() === Token.AmpAmp);\n\n        return new CallExpr(\"all\", expressions);\n    }\n\n    private parseLogicalOr(): Expr | never {\n        const expr = this.parseLogicalAnd();\n\n        if (this.lex.token() !== Token.BarBar) {\n            return expr;\n        }\n\n        const expressions: Expr[] = [expr];\n\n        do {\n            this.lex.next();\n            expressions.push(this.parseLogicalAnd());\n        } while (this.lex.token() === Token.BarBar);\n\n        return new CallExpr(\"any\", expressions);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Common communication protocol for [[WorkerService]].\n */\nexport namespace WorkerServiceProtocol {\n    /**\n     * Service id of worker manager ([[WorkerServiceManager]]) used to create/destroy service\n     * instances in workers.\n     */\n    export const WORKER_SERVICE_MANAGER_SERVICE_ID = \"worker-service-manager\";\n\n    /**\n     * Define possible names of messages exchanged with services within `WebWorker`.\n     */\n    export enum ServiceMessageName {\n        Initialized = \"initialized\",\n        Request = \"request\",\n        Response = \"response\"\n    }\n\n    /**\n     * Interface for `ServiceMessage` which describes metadata for a service messages.\n     */\n    export interface ServiceMessage {\n        service: string;\n        type: ServiceMessageName;\n    }\n\n    /**\n     * This message is sent by the worker to the main thread. No data is sent. Receiving this\n     * message confirms that the worker has started successfully.\n     */\n    export interface InitializedMessage extends ServiceMessage {\n        type: ServiceMessageName.Initialized;\n    }\n\n    /**\n     * Type guard to check if an object is a signal message from worker.\n     */\n    export function isInitializedMessage(message: any): message is InitializedMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Initialized\n        );\n    }\n\n    /**\n     * Define possible names of requests called on services within `WebWorker`.\n     */\n    export enum Requests {\n        CreateService = \"create-service\",\n        DestroyService = \"destroy-service\"\n    }\n\n    /**\n     * This is an internal general interface used in communication with workers.\n     * Check [[ConcurrentWorkerSet]]'s invokeRequest function for exemplary usage.\n     */\n    export interface ServiceRequest {\n        type: string;\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically create a\n     * new service.\n     *\n     * May throw `UnknownServiceError` if service of given type is not registered in\n     * [[WorkerServiceManager]], see [[isUnknownServiceError]].\n     */\n    export interface CreateServiceRequest extends ServiceRequest {\n        type: Requests.CreateService;\n\n        /**\n         * Type of service to be created.\n         *\n         * @see [[WorkerServiceManager.register]]\n         */\n        targetServiceType: string;\n\n        /**\n         * The newly created service instance will be available under this id.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Test if `error` thrown by [[CreateServiceRequest]] was caused by unknown type of service.\n     */\n    export function isUnknownServiceError(error: Error): boolean {\n        return /unknown targetServiceType requested: /.test(error.message);\n    }\n\n    /**\n     * This message is sent by the main thread to [[WorkerServiceManager]] to dynamically destroy a\n     * service.\n     */\n    export interface DestroyServiceRequest extends ServiceRequest {\n        type: Requests.DestroyService;\n\n        /**\n         * Id of service to be destroyed.\n         */\n        targetServiceId: string;\n    }\n\n    /**\n     * Possible service management messages (`CreateService` or `DestroyService`) sent to WebWorker.\n     */\n    export type WorkerServiceManagerRequest = CreateServiceRequest | DestroyServiceRequest;\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface RequestMessage extends ServiceMessage {\n        type: ServiceMessageName.Request;\n        messageId: number;\n        request: any;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isRequestMessage(message: any): message is RequestMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Request\n        );\n    }\n\n    /**\n     * This message is a part of the Request-Response scheme implemented to be used in communication\n     * between workers and the decoder.\n     */\n    export interface ResponseMessage extends ServiceMessage {\n        type: ServiceMessageName.Response;\n        messageId: number;\n        errorMessage?: string;\n        errorStack?: string;\n        response?: object;\n    }\n\n    /**\n     * Type guard to check if an object is a request message sent to a worker.\n     */\n    export function isResponseMessage(message: any): message is ResponseMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === ServiceMessageName.Response\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GeoJson } from \"../lib/GeoJsonDataType\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Communication protocol with [[ITiler]].\n */\nexport namespace WorkerTilerProtocol {\n    /**\n     * Define possible names of requests called on tiler services within `WebWorker`.\n     */\n    export enum Requests {\n        RegisterIndex = \"register-index\",\n        UpdateIndex = \"update-index\",\n        TileRequest = \"tile-request\"\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface RegisterIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.RegisterIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an index registration request sent to a worker.\n     */\n    export function isRegisterIndexRequest(message: any): message is RegisterIndexRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.RegisterIndex\n        );\n    }\n\n    /**\n     * This object is sent to the tiler to register a new tile index in the worker.\n     */\n    export interface UpdateIndexRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.UpdateIndex;\n        id: string;\n        input: string | GeoJson;\n    }\n\n    /**\n     * Type guard to check if an object is an update request for the index registration.\n     */\n    export function isUpdateIndexRequest(message: any): message is UpdateIndexRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.UpdateIndex;\n    }\n\n    /**\n     * This object is sent to the tiler asking to retrieve a specific tile. The expected response\n     * type is an object containing a tiled payload.\n     */\n    export interface TileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileRequest;\n        index: string;\n        tileKey: number;\n    }\n\n    /**\n     * Type guard to check if an object is a tile request sent to a worker.\n     */\n    export function isTileRequest(message: any): message is TileRequest {\n        return message && typeof message.type === \"string\" && message.type === Requests.TileRequest;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Definitions, StyleSet } from \"./Theme\";\nimport { WorkerServiceProtocol } from \"./WorkerServiceProtocol\";\n\n/**\n * Interface for `OptionsMap` which describes a general structure of key-value pairs.\n */\nexport interface OptionsMap {\n    [name: string]: any;\n}\n\n/**\n * Allows to cancel and prioritize requests inside the requestQueue. Useful to optimize the order of\n * decoding tiles during animations and camera movements.\n *\n * `RequestController` is not extending [[AbortController]], because this is not supported in ES5.\n */\nexport class RequestController implements AbortController {\n    /**\n     * Creates an instance of `RequestController`.\n     *\n     * @param {number} priority\n     * @param {AbortController} abortController Optional [[AbortController]] used internally, since\n     *      [[AbortController]]s should not be subclassed.\n     */\n    constructor(\n        public priority: number = 0,\n        public abortController: AbortController = new AbortController()\n    ) {}\n\n    get signal(): AbortSignal {\n        return this.abortController.signal;\n    }\n\n    /**\n     * Invoking this method will set this object's AbortSignal's aborted flag and\n     * signal to any observers that the associated activity is to be aborted.\n     */\n    abort(): void {\n        this.abortController.abort();\n    }\n}\n\n/**\n * Communication protocol with [[ITileDecoder]].\n */\nexport namespace WorkerDecoderProtocol {\n    /**\n     * Define possible names of messages exchanged with decoder services within `WebWorker`.\n     */\n    export enum DecoderMessageName {\n        Configuration = \"configuration\"\n    }\n\n    /**\n     * Interface for `DecodedTileMessage` which describes metadata for a decoded tile.\n     */\n    export interface DecoderMessage {\n        service: string;\n        type: DecoderMessageName;\n    }\n\n    /**\n     * Interface for a ConfigurationMessage that is sent from the datasource to the decoder. The\n     * message used to configure the [[ITileDecoder]].\n     */\n    export interface ConfigurationMessage extends DecoderMessage {\n        type: DecoderMessageName.Configuration;\n        styleSet?: StyleSet;\n        definitions?: Definitions;\n        options?: OptionsMap;\n        languages?: string[];\n    }\n\n    /**\n     * Type guard to check if an object is an instance of `ConfigurationMessage`.\n     */\n    export function isConfigurationMessage(message: any): message is ConfigurationMessage {\n        return (\n            message &&\n            typeof message.service === \"string\" &&\n            typeof message.type === \"string\" &&\n            message.type === DecoderMessageName.Configuration\n        );\n    }\n\n    /**\n     * Define possible names of requests called on decoder services within `WebWorker`.\n     */\n    export enum Requests {\n        DecodeTileRequest = \"decode-tile-request\",\n        TileInfoRequest = \"tile-info-request\"\n    }\n\n    /**\n     * This object is sent to the decoder asking to decode a specific tile. The expected response\n     * type is a [[DecodedTile]].\n     */\n    export interface DecodeTileRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.DecodeTileRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is a decoded tile object sent to a worker.\n     */\n    export function isDecodeTileRequest(message: any): message is DecodeTileRequest {\n        return (\n            message &&\n            typeof message.type === \"string\" &&\n            message.type === Requests.DecodeTileRequest\n        );\n    }\n\n    /**\n     * This object is sent to the decoder asking for a tile info of a specific tile. The expected\n     * response type is a [[DecodedTile]].\n     */\n    export interface TileInfoRequest extends WorkerServiceProtocol.ServiceRequest {\n        type: Requests.TileInfoRequest;\n        tileKey: number;\n        data: ArrayBufferLike;\n        projection: string;\n    }\n\n    /**\n     * Type guard to check if an object is an info tile object sent to a worker.\n     */\n    export function isTileInfoRequest(message: any): message is TileInfoRequest {\n        return (\n            message && typeof message.type === \"string\" && message.type === Requests.TileInfoRequest\n        );\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\n\nimport { Env, MapEnv, Value } from \"./Expr\";\nimport { makeDecodedTechnique } from \"./StyleSetEvaluator\";\nimport { AttrEvaluationContext, evaluateTechniqueAttr } from \"./TechniqueAttr\";\nimport {\n    IndexedTechnique,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"./Techniques\";\n\n/**\n * Defines a map tile metadata.\n */\nexport interface TileInfo {\n    readonly tileKey: TileKey;\n    readonly setupTime: number;\n    readonly transferList?: ArrayBuffer[];\n    readonly numBytes: number;\n}\n\n/**\n * Represents a feature group type for tile info.\n */\nexport enum FeatureGroupType {\n    Point,\n    Line,\n    Polygon\n}\n\n/**\n * Minimum estimated size of a JS object.\n */\nconst MINIMUM_OBJECT_SIZE_ESTIMATION = 100;\n\n/**\n * Structure of arrays containing data for all features of this group. No methods, since the object\n * is being passed as part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n */\nexport class FeatureGroup {\n    /** featureIds */\n    featureIds: Array<number | undefined> = new Array<number | undefined>();\n\n    /** Indices into [[ExtendedTileInfo]].techniqueCatalog */\n    techniqueIndex: number[];\n\n    /** Indices into [[ExtendedTileInfo]].textCatalog. */\n    textIndex: number[];\n\n    /** Indices into positions. */\n    positionIndex: number[];\n\n    /** XY coordinates of this group. */\n    positions: number[];\n\n    /** number of features */\n    numFeatures: number = 0;\n\n    /** number of positions of elements (2 per point) */\n    numPositions: number = 0;\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].layerCatalog. Only available if\n     * [[OmvFeatureGroup]] has been constructed with `storeExtendedTags` set to `true`.\n     */\n    layerIndex?: number[];\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].classCatalog. Only available if\n     * [[OmvFeatureGroup]] has been constructed with `storeExtendedTags` set to `true`.\n     */\n    classIndex?: number[];\n\n    /**\n     * Optional indices into [[ExtendedTileInfo]].typeCatalog. Only available if [[OmvFeatureGroup]]\n     * has been constructed with `storeExtendedTags` set to `true`.\n     */\n    typeIndex?: number[];\n\n    /**\n     * Construct featureGroup.\n     *\n     * @param storeExtendedTags Pass `true` to create fields for more OMV tags (`layer`, `class`\n     * and `type`).\n     */\n    constructor(storeExtendedTags: boolean, startSize: number = 5000) {\n        this.featureIds = new Array<number>(startSize);\n        this.featureIds.length = startSize;\n        this.techniqueIndex = new Array<number>(startSize);\n        this.techniqueIndex.length = startSize;\n        this.textIndex = new Array<number>(startSize);\n        this.textIndex.length = startSize;\n        this.positionIndex = new Array<number>(startSize);\n        this.positionIndex.length = startSize;\n        this.positions = new Array<number>(10 * startSize);\n        this.positions.length = 10 * startSize;\n\n        if (storeExtendedTags) {\n            this.layerIndex = new Array<number>(startSize);\n            this.layerIndex.length = startSize;\n            this.classIndex = new Array<number>(startSize);\n            this.classIndex.length = startSize;\n            this.typeIndex = new Array<number>(startSize);\n            this.typeIndex.length = startSize;\n        }\n    }\n\n    /**\n     * Compute size in bytes.\n     */\n    getNumBytes(): number {\n        return (\n            (this.featureIds.length +\n                this.techniqueIndex.length +\n                this.textIndex.length +\n                this.positionIndex.length +\n                this.positions.length +\n                (this.layerIndex !== undefined ? this.layerIndex.length : 0) +\n                (this.classIndex !== undefined ? this.classIndex.length : 0) +\n                (this.typeIndex !== undefined ? this.typeIndex.length : 0)) *\n            8\n        );\n    }\n}\n\n/**\n * Structure of arrays containing data for roads. No methods, since the object is being passed as\n * part of [[ExtendedTileInfo]] across \"process boundaries\" to the web worker.\n */\nexport class LineFeatureGroup extends FeatureGroup {\n    /**\n     * An array of road segment ids. Is the same length as `featureIds` but certain elements can be\n     * `undefined` (if this line feature is not a road).\n     */\n    segmentIds?: number[];\n\n    /**\n     * An array of road start offsets. Certain elements may be `undefined` (if this line feature is\n     * not a road).\n     */\n    segmentStartOffsets?: number[];\n\n    /**\n     * An array of road end offsets. Certain elements may be `undefined` (if this line feature is\n     * not a road).\n     */\n    segmentEndOffsets?: number[];\n\n    /**\n     * An array of object defined by the user. Certain elements may be `undefined` (if this line\n     * feature is not a road, or if the object for that feature is undefined).\n     */\n    userData: Array<{} | undefined> = [];\n\n    /** @override */\n    getNumBytes(): number {\n        return (\n            super.getNumBytes() +\n            ((this.segmentIds !== undefined ? this.segmentIds.length : 0) +\n                (this.segmentStartOffsets !== undefined ? this.segmentStartOffsets.length : 0) +\n                (this.segmentEndOffsets !== undefined ? this.segmentEndOffsets.length : 0)) *\n                8\n        );\n    }\n}\n\n/**\n * Structure of arrays containing data for polygons. No methods, since the object is being passed as\n * part of ExtendedTileInfo across \"process boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nexport class PolygonFeatureGroup extends FeatureGroup {\n    /**\n     * Indices into innerRingStartIndex. One entry for every polygon feature.\n     *\n     * Number of rings is computed by either:\n     *\n     * a) Computing from the next innerRingStart, or\n     *\n     * b) Computing from the size of the array.\n     */\n    outerRingStartIndex: number[];\n\n    /**\n     * One entry for every polygon feature. Contains `true` if a polygon ring is an _outside_ ring,\n     * `false` otherwise.\n     */\n    innerRingIsOuterContour: number[];\n\n    /**\n     * Indices into [[OmvFeatureGroup]]`.positions`. One index for every ring.\n     *\n     * Number of inner rings is computed by either:\n     *\n     * a) Computing from the next innerRingStart, or\n     *\n     * b) Computing from the size of the array.\n     */\n    innerRingStartIndex: number[];\n\n    /**\n     * Number of rings stored in all polygons in tis group. Used to keep size of the\n     * arrays.\n     */\n    groupNumRings: number = 0;\n\n    constructor(storeExtendedTags: boolean, startSize: number = 5000) {\n        super(storeExtendedTags, startSize);\n\n        this.outerRingStartIndex = new Array<number>(startSize);\n        this.outerRingStartIndex.length = startSize;\n        this.innerRingIsOuterContour = new Array<number>(startSize);\n        this.innerRingIsOuterContour.length = startSize;\n        this.innerRingStartIndex = new Array<number>(startSize);\n        this.innerRingStartIndex.length = startSize;\n    }\n\n    /** @override */\n    getNumBytes(): number {\n        return (\n            super.getNumBytes() +\n            ((this.outerRingStartIndex !== undefined ? this.outerRingStartIndex.length : 0) +\n                (this.innerRingIsOuterContour !== undefined\n                    ? this.innerRingIsOuterContour.length\n                    : 0) +\n                (this.innerRingStartIndex !== undefined ? this.innerRingStartIndex.length : 0)) *\n                8\n        );\n    }\n}\n\n/**\n * Class to hold infos from [[OmvTile]]s. Optimized for fast serialization when being passed from\n * webworker to main thread. No methods, since the object is being passed across \"process\n * boundaries\" to the web worker.\n *\n * Supporting methods in namespace [[ExtendedTileInfo]].\n *\n * Due to the complexity of the access, there are supporting classes to store and access data in\n * the feature groups. See [[ExtendedTileInfoWriter]] and [[ExtendedTileInfoPolygonAccessor]].\n */\nexport class ExtendedTileInfo implements TileInfo {\n    /**\n     * Catalog of strings. Addressed by every features stringIndex.\n     */\n    readonly textCatalog: string[] = new Array<string>();\n    /**\n     * Catalog of techniques. Addressed by every features featureIndex.\n     */\n    readonly techniqueCatalog: IndexedTechnique[] = new Array<IndexedTechnique>();\n\n    /**\n     * Feature group containing all infos about `POINT` features.\n     */\n    readonly pointGroup: FeatureGroup;\n\n    /**\n     * Feature group containing all infos about `LINESTRING` features.\n     */\n    readonly lineGroup: LineFeatureGroup;\n\n    /**\n     * Feature group containing all infos about `POLYGON` features.\n     */\n    readonly polygonGroup: PolygonFeatureGroup;\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly layerCatalog?: string[];\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly classCatalog?: string[];\n\n    /**\n     * Optional catalogs for extended feature infos. Only available if the [[ExtendedTileInfo]] has\n     * been constructed with `storeExtendedTags` == `true`.\n     */\n    readonly typeCatalog?: string[];\n\n    /**\n     * Used for performance diagnostics.\n     */\n    setupTime: number = 0;\n\n    /**\n     * Size in bytes.\n     */\n    numBytes: number = 0;\n\n    constructor(readonly tileKey: TileKey, storeExtendedTags: boolean) {\n        this.pointGroup = new FeatureGroup(storeExtendedTags);\n        this.lineGroup = new LineFeatureGroup(storeExtendedTags);\n        this.polygonGroup = new PolygonFeatureGroup(storeExtendedTags);\n\n        if (storeExtendedTags) {\n            this.layerCatalog = new Array<string>();\n            this.classCatalog = new Array<string>();\n            this.typeCatalog = new Array<string>();\n        }\n    }\n\n    /**\n     * Compute the memory footprint caused by objects owned by the `ExtendedTileInfo`.\n     */\n    getNumBytes(): number {\n        let numBytes = MINIMUM_OBJECT_SIZE_ESTIMATION;\n        for (const str of this.textCatalog) {\n            numBytes += 2 * str.length;\n        }\n\n        numBytes += this.techniqueCatalog.length * MINIMUM_OBJECT_SIZE_ESTIMATION;\n\n        numBytes += this.pointGroup.getNumBytes();\n        numBytes += this.lineGroup.getNumBytes();\n        numBytes += this.polygonGroup.getNumBytes();\n\n        if (this.layerCatalog !== undefined) {\n            for (const str of this.layerCatalog) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.classCatalog!) {\n                numBytes += 2 * str.length;\n            }\n            for (const str of this.typeCatalog!) {\n                numBytes += 2 * str.length;\n            }\n        }\n\n        return numBytes;\n    }\n}\n\nexport namespace ExtendedTileInfo {\n    function finishFeatureGroup(featureGroup: FeatureGroup) {\n        featureGroup.featureIds.length = featureGroup.numFeatures;\n        featureGroup.techniqueIndex.length = featureGroup.numFeatures;\n        featureGroup.textIndex.length = featureGroup.numFeatures;\n        featureGroup.positionIndex.length = featureGroup.numFeatures;\n        featureGroup.positions.length = featureGroup.numPositions;\n\n        if (featureGroup.layerIndex !== undefined) {\n            featureGroup.layerIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.classIndex !== undefined) {\n            featureGroup.classIndex.length = featureGroup.numFeatures;\n        }\n        if (featureGroup.typeIndex !== undefined) {\n            featureGroup.typeIndex.length = featureGroup.numFeatures;\n        }\n    }\n\n    function finishPolygonFeatureGroup(polygonGroup: PolygonFeatureGroup) {\n        finishFeatureGroup(polygonGroup);\n        polygonGroup.outerRingStartIndex.length = polygonGroup.numFeatures;\n        polygonGroup.innerRingIsOuterContour.length = polygonGroup.groupNumRings;\n        polygonGroup.innerRingStartIndex.length = polygonGroup.groupNumRings;\n    }\n\n    function finishLineFeatureGroup(lineGroup: LineFeatureGroup) {\n        finishFeatureGroup(lineGroup);\n        if (lineGroup.segmentIds !== undefined) {\n            lineGroup.segmentIds.length = lineGroup.numFeatures;\n            lineGroup.segmentStartOffsets!.length = lineGroup.numFeatures;\n            lineGroup.segmentEndOffsets!.length = lineGroup.numFeatures;\n        }\n    }\n\n    /**\n     * Finalize the tile's features groups.\n     */\n    export function finish(tileInfo: ExtendedTileInfo) {\n        finishFeatureGroup(tileInfo.pointGroup);\n        finishLineFeatureGroup(tileInfo.lineGroup);\n        finishPolygonFeatureGroup(tileInfo.polygonGroup);\n        tileInfo.numBytes = tileInfo.getNumBytes();\n    }\n\n    /**\n     * Returns the number of features in this feature group.\n     */\n    export function featureGroupSize(featureGroup: FeatureGroup): number {\n        return featureGroup.numFeatures;\n    }\n\n    /**\n     * Check if the feature group is finalized.\n     */\n    export function featureGroupFinished(featureGroup: FeatureGroup): boolean {\n        return featureGroup.numPositions === featureGroup.positions.length;\n    }\n\n    /**\n     * Check if the tileInfo is finalized.\n     */\n    export function tileInfoFinished(tileInfo: ExtendedTileInfo): boolean {\n        return (\n            featureGroupFinished(tileInfo.pointGroup) &&\n            featureGroupFinished(tileInfo.lineGroup) &&\n            featureGroupFinished(tileInfo.polygonGroup)\n        );\n    }\n\n    /**\n     * Determine the name of (OMV) feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param env Environment containing the tags from the (OMV) feature.\n     * @param useAbbreviation `true` to use the abbreviation if available.\n     * @param useIsoCode `true` to use the tag \"iso_code\".\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    export function getFeatureName(\n        env: Env,\n        useAbbreviation?: boolean,\n        useIsoCode?: boolean,\n        languages?: string[]\n    ): string | undefined {\n        let name;\n        if (useAbbreviation) {\n            const abbreviation = env.lookup(`name:short`);\n            if (typeof abbreviation === \"string\" && abbreviation.length > 0) {\n                return abbreviation;\n            }\n        }\n        if (useIsoCode) {\n            const isoCode = env.lookup(`iso_code`);\n            if (typeof isoCode === \"string\" && isoCode.length > 0) {\n                return isoCode;\n            }\n        }\n        if (languages !== undefined) {\n            for (const lang of languages) {\n                name = env.lookup(`name:${lang}`) || env.lookup(`name_${lang}`);\n                if (typeof name === \"string\" && name.length > 0) {\n                    return name;\n                }\n            }\n        }\n        name = env.lookup(\"name\");\n        if (typeof name === \"string\") {\n            return name;\n        }\n        return undefined;\n    }\n\n    /**\n     * Determine the text string of the map feature. It implements the special handling required\n     * to determine the text content of a feature from its tags, which are passed in as the `env`.\n     *\n     * @param feature Feature, including properties from the (OMV) feature.\n     * @param technique technique defining how text should be created from feature\n     * @param languages List of languages to use, for example: Specify \"en\" to use the tag \"name_en\"\n     *                  as the text of the string. Order reflects priority.\n     */\n    export function getFeatureText(\n        context: Env | AttrEvaluationContext,\n        technique: Technique,\n        languages?: string[]\n    ): string | undefined {\n        let useAbbreviation: boolean | undefined;\n        let useIsoCode: boolean | undefined;\n        const env = context instanceof Env ? context : context.env;\n        if (\n            isTextTechnique(technique) ||\n            isPoiTechnique(technique) ||\n            isLineMarkerTechnique(technique)\n        ) {\n            if (technique.text !== undefined) {\n                return evaluateTechniqueAttr(context, technique.text);\n            }\n            if (technique.label !== undefined) {\n                const name = env.lookup(technique.label);\n                return typeof name === \"string\" ? name : undefined;\n            }\n            useAbbreviation = technique.useAbbreviation;\n            useIsoCode = technique.useIsoCode;\n        }\n\n        return getFeatureName(env, useAbbreviation, useIsoCode, languages);\n    }\n}\n\n/**\n * Support class for [[ExtendedTileInfo]]. Assist in filling it with data.\n */\nexport class ExtendedTileInfoWriter {\n    /** Map to identify which techniques already have been added to the [[ExtendedTileInfo]]. */\n    private readonly techniqueIndexMap = new Map<number, number>();\n    /** Map to identify which strings already have been added to the [[ExtendedTileInfo]]. */\n    private readonly stringMap = new Map<string, number>();\n    /** Map to identify which `layer` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly layerMap = new Map<string, number>();\n    /** Map to identify which `class` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly classMap = new Map<string, number>();\n    /** Map to identify which `type` names already have been added to the [[ExtendedTileInfo]]. */\n    private readonly typeMap = new Map<string, number>();\n\n    /**\n     * Create an [[ExtendedTileInfoWriter]] for an [[ExtendedTileInfo]]. Assist in filling the\n     * [[ExtendedTileInfo]] with data.\n     *\n     * @param tileInfo [[ExtendedTileInfo]] to write data to.\n     * @param storeExtendedTags Pass `true` if feature data like `layer`, `class`or `type` should\n     *          be stored for every feature.\n     */\n    constructor(readonly tileInfo: ExtendedTileInfo, readonly storeExtendedTags: boolean) {}\n\n    /**\n     * Adds a [[Technique]] to the catalog of techniques. Individual techniques have a `_index` file\n     * which has been created in the [[StyleSetEvaluator]]. This index is required to identify a\n     * technique. The `Map` is used to map techniques to already added techniques, or store the\n     * technique as new, and add it to the map.\n     *\n     * @param technique The [[Technique]] to add.\n     */\n    addTechnique(technique: IndexedTechnique): number {\n        let infoTileTechniqueIndex = this.techniqueIndexMap.get(technique._index);\n        if (infoTileTechniqueIndex !== undefined) {\n            return infoTileTechniqueIndex;\n        }\n\n        const decodedTechnique = makeDecodedTechnique(technique);\n\n        infoTileTechniqueIndex = this.tileInfo.techniqueCatalog.length;\n        this.techniqueIndexMap.set(decodedTechnique._index, infoTileTechniqueIndex);\n        this.tileInfo.techniqueCatalog.push(decodedTechnique);\n\n        return infoTileTechniqueIndex;\n    }\n\n    /**\n     * Add a feature.\n     *\n     * @param featureGroup The feature group to add to.\n     * @param technique The technique to add.\n     * @param env The `env` which is a mix of original OMV feature tags and fields added by the\n     *      [[StyleSetEvaluator]]\n     * @param featureId The featureId, a number unique for many features (but not all).\n     * @param infoTileTechniqueIndex The previously computed index of the technique. Must have been\n     *      computed by `addTechnique(technique)`.\n     * @param isPolygonGroup `true`for polygons.\n     */\n    addFeature(\n        featureGroup: FeatureGroup,\n        env: MapEnv,\n        featureId: number | undefined,\n        featureText: string | undefined,\n        infoTileTechniqueIndex: number,\n        featureGroupType: FeatureGroupType\n    ) {\n        // compute name/label of feature\n        let stringIndex = -1;\n        if (featureText !== undefined && featureText.length > 0) {\n            stringIndex = this.addText(featureText);\n        }\n\n        // add indices into the arrays.\n        featureGroup.featureIds[featureGroup.numFeatures] = featureId;\n        featureGroup.techniqueIndex[featureGroup.numFeatures] = infoTileTechniqueIndex;\n        featureGroup.textIndex[featureGroup.numFeatures] = stringIndex;\n        featureGroup.positionIndex[featureGroup.numFeatures] = featureGroup.numPositions;\n\n        switch (featureGroupType) {\n            case FeatureGroupType.Polygon:\n                // polygons need the extra fields for polygon rings\n                const polygonGroup = featureGroup as PolygonFeatureGroup;\n                assert(polygonGroup.outerRingStartIndex !== undefined);\n                assert(polygonGroup.innerRingStartIndex !== undefined);\n                assert(polygonGroup.innerRingIsOuterContour !== undefined);\n                polygonGroup.outerRingStartIndex[featureGroup.numFeatures] =\n                    polygonGroup.groupNumRings;\n                break;\n            case FeatureGroupType.Line:\n                (featureGroup as LineFeatureGroup).userData[featureGroup.numFeatures] = env.entries;\n                break;\n        }\n\n        // store the extra feature fields\n        if (this.storeExtendedTags) {\n            featureGroup.layerIndex![featureGroup.numFeatures] = this.addLayer(\n                env.lookup(\"$layer\")\n            );\n            featureGroup.classIndex![featureGroup.numFeatures] = this.addClass(env.lookup(\"class\"));\n            featureGroup.typeIndex![featureGroup.numFeatures] = this.addType(env.lookup(\"type\"));\n        }\n\n        featureGroup.numFeatures++;\n    }\n\n    /**\n     * Add the X/Y coordinate of the point. Only for point feature groups.\n     *\n     * @param featureGroup The feature group to add it to.\n     * @param x X Position of point.\n     * @param y Y Position of point.\n     */\n    addFeaturePoint(featureGroup: FeatureGroup, x: number, y: number) {\n        featureGroup.positions[featureGroup.numPositions++] = x;\n        featureGroup.positions[featureGroup.numPositions++] = y;\n    }\n\n    /**\n     * Add the line points as X/Y coordinates to the line feature.\n     *\n     * If a line feature has more than one line (rare for HERE data), it should define multiple\n     * line features for it.\n     *\n     * @param featureGroup The feature group to add to. Must be line feature group.\n     * @param points The X/Y coordinates of the points.\n     */\n    addFeaturePoints(featureGroup: FeatureGroup, points: number[]) {\n        const n = featureGroup.numPositions;\n        const l = points.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = points[i];\n        }\n        featureGroup.numPositions += points.length;\n    }\n\n    /**\n     * Add the information about road segments to the line feature. Performs lazy initialization of\n     * `segmentIds`, `segmentStartOffsets`, and `segmentEndOffsets` members of a\n     * [[LineFeatureGroup]] instance.\n     *\n     * @param featureGroup The line feature group to add information to.\n     * @param segmentId Segment id of a feature.\n     * @param startOffset Start offset of a feature.\n     * @param endOffset End offset of a feature.\n     */\n    addRoadSegments(\n        featureGroup: LineFeatureGroup,\n        segmentId: number,\n        startOffset: number,\n        endOffset: number\n    ) {\n        if (featureGroup.segmentIds === undefined) {\n            featureGroup.segmentIds = new Array<number>();\n            featureGroup.segmentStartOffsets = new Array<number>();\n            featureGroup.segmentEndOffsets = new Array<number>();\n        }\n\n        featureGroup.segmentIds[featureGroup.numFeatures - 1] = segmentId;\n        featureGroup.segmentStartOffsets![featureGroup.numFeatures - 1] = startOffset;\n        featureGroup.segmentEndOffsets![featureGroup.numFeatures - 1] = endOffset;\n    }\n\n    /**\n     * Add a single ring to the polygon. Can be called multiple times to add multiple rings to the\n     * polygon.\n     *\n     * @param featureGroup Polygon feature group to add polygon ring to.\n     * @param contour The X/Y coordinates of the ring.\n     * @param isOuterRing Pass `true`if it is a outer ring, otherwise `false`.\n     */\n    addRingPoints(featureGroup: PolygonFeatureGroup, contour: number[], isOuterRing: boolean) {\n        featureGroup.innerRingStartIndex[featureGroup.groupNumRings] = featureGroup.numPositions;\n        featureGroup.innerRingIsOuterContour[featureGroup.groupNumRings] = isOuterRing ? 1 : 0;\n        featureGroup.groupNumRings++;\n\n        const n = featureGroup.numPositions;\n        const l = contour.length;\n        const p = featureGroup.positions;\n        for (let i = 0; i < l; i++) {\n            p[n + i] = contour[i];\n        }\n        featureGroup.numPositions += contour.length;\n    }\n\n    /**\n     * Finalize the tile info's feature group.\n     */\n    finish(): any {\n        ExtendedTileInfo.finish(this.tileInfo);\n    }\n\n    private addText(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.textCatalog, this.stringMap);\n    }\n\n    private addLayer(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.layerCatalog!, this.layerMap);\n    }\n\n    private addClass(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.classCatalog!, this.classMap);\n    }\n\n    private addType(name: Value | undefined): number {\n        return this.addStringValue(name, this.tileInfo.typeCatalog!, this.typeMap);\n    }\n\n    // Add a string to the strings catalog. Returns index into the catalog.\n    private addStringValue(\n        str: Value | undefined,\n        catalog: string[],\n        map: Map<string, number>\n    ): number {\n        if (str === undefined || str === null) {\n            return -1;\n        }\n        const name = str.toString();\n        let i = map.get(name);\n        if (i !== undefined) {\n            return i;\n        }\n        i = catalog.length;\n        catalog.push(name);\n        map.set(name, i);\n        return i;\n    }\n}\n\n/**\n * Support for [[ExtendedTileInfo]]. Defines the accessor that allows to access the polygon data.\n */\nexport interface ExtendedTileInfoPolygonAccessor {\n    /**\n     * Number of rings in the polygon.\n     */\n    numRings: number;\n\n    /**\n     * Return if ring is an outer ring.\n     *\n     * @param ringIndex Specify ring index.\n     * @return `true` if ring is an outer ring, `false` otherwise.\n     */\n    isOuterRing(ringIndex: number): boolean;\n\n    /**\n     * Return information about the vertices that make up the ring.\n     *\n     * @param ringIndex Specify ring index.\n     * @returns Info about the array, start and number of points in the ring.\n     */\n    getPoints(\n        ringIndex: number\n    ): {\n        points: ArrayLike<number>;\n        pointsStart: number;\n        numPointValues: number;\n    };\n}\n\n/**\n * Implementation of [[ExtendedTileInfoPolygonAccessor]].\n */\nclass ExtendedTileInfoPolygonAccessorImpl implements ExtendedTileInfoPolygonAccessor {\n    /**\n     * Accessed data for polygons feature group.\n     */\n    polygons?: PolygonFeatureGroup;\n    /**\n     * Feature's index in the group.\n     */\n    featureIndex: number = 0;\n    /**\n     * Indicates where the ring starts.\n     */\n    ringStart: number = 0;\n    /**\n     * Number of rings.\n     */\n    numRings: number = 0;\n\n    /**\n     * Setup the accessor for extended [[TileInfo]].\n     *\n     * @param polygons polygons feature group.\n     * @param featureIndex feature's index in the group.\n     * @param ringStart where the ring starts.\n     * @param numRings number of rings.\n     */\n    setup(\n        polygons: PolygonFeatureGroup,\n        featureIndex: number,\n        ringStart: number,\n        numRings: number\n    ) {\n        this.polygons = polygons;\n        this.featureIndex = featureIndex;\n        this.ringStart = ringStart;\n        this.numRings = numRings;\n    }\n\n    /**\n     * Shut down the accessor and free all references.\n     */\n    reset() {\n        this.polygons = undefined;\n        this.featureIndex = 0;\n        this.ringStart = 0;\n        this.numRings = 0;\n    }\n\n    isOuterRing(ringIndex: number): boolean {\n        assert(ringIndex >= 0);\n        assert(ringIndex < this.numRings);\n        assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n        return this.polygons.innerRingIsOuterContour[this.ringStart + ringIndex] !== 0;\n    }\n\n    getPoints(\n        ringIndex: number\n    ): {\n        points: ArrayLike<number>;\n        pointsStart: number;\n        numPointValues: number;\n    } {\n        assert(ringIndex >= 0);\n        assert(ringIndex < this.numRings);\n        assert(this.polygons !== undefined);\n        if (ringIndex < 0 || ringIndex >= this.numRings || this.polygons === undefined) {\n            throw new Error(\"ExtendedTileInfoPolygonAccessor: Invalid ring index\");\n        }\n\n        // compute the start/size of the points in this ring. All `points` are actually just the\n        // indices of a single X/Y coordinate.\n        const pointsStart = this.polygons.innerRingStartIndex[this.ringStart + ringIndex];\n\n        let numPointValues: number;\n        if (ringIndex < this.numRings - 1) {\n            numPointValues =\n                this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n        } else {\n            if (this.ringStart + ringIndex < this.polygons.innerRingStartIndex.length - 1) {\n                numPointValues =\n                    this.polygons.innerRingStartIndex[this.ringStart + ringIndex + 1] - pointsStart;\n            } else {\n                numPointValues = this.polygons.positions.length - pointsStart;\n            }\n        }\n\n        return {\n            points: this.polygons.positions,\n            pointsStart,\n            numPointValues\n        };\n    }\n}\n\n/**\n * Interface that a client of [[ExtendedTileInfoAccessor]] has to implement.\n */\nexport interface ExtendedTileInfoHandler {\n    acceptPoint?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        x: number,\n        y: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number\n    ): void;\n\n    acceptLine?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number,\n        points: ArrayLike<number>,\n        pointsStart: number,\n        numElements: number,\n        segmentId?: number,\n        startOffset?: number,\n        endOffset?: number\n    ): void;\n\n    acceptPolygon?(\n        featureId: number | undefined,\n        techniqueIndex: number,\n        label: number,\n        layerName: number,\n        className: number,\n        typeName: number,\n        polygonAccessor: ExtendedTileInfoPolygonAccessor\n    ): void;\n}\n\n/**\n * Supporting class for [[ExtendedTileInfo]]. Takes an [[ExtendedTileInfoHandler]] and calls an\n * `accept` for every feature of the [[ExtendedTileInfo]], or just all features of a specified\n * `featureId`.\n */\nexport class ExtendedTileInfoVisitor {\n    // static instance to work without allocations.\n    private static polygonAccessor = new ExtendedTileInfoPolygonAccessorImpl();\n\n    constructor(readonly tileInfo: ExtendedTileInfo) {}\n\n    /**\n     * Visit all feature in the [[ExtendedTileInfo]]\n     *\n     * @param handler Let the `handler` visit all features.\n     */\n    visitAll(handler: ExtendedTileInfoHandler) {\n        this.visitAllPointFeatures(handler);\n        this.visitAllLineFeatures(handler);\n        this.visitAllPolygonFeatures(handler);\n    }\n\n    /**\n     * Visit all features of a specified featureId.\n     *\n     * @param featureId The featureId to visit.\n     * @param handler The `handler` to use.\n     */\n    visitFeature(featureId: number, handler: ExtendedTileInfoHandler): number {\n        let numFeaturesFound = 0;\n        const numPointFeatures = this.tileInfo.pointGroup.numFeatures;\n        const pointFeatures = this.tileInfo.pointGroup.featureIds;\n        for (let i = 0; i < numPointFeatures; i++) {\n            if (pointFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPointFeature(i, handler);\n            }\n        }\n        const numLineFeatures = this.tileInfo.lineGroup.numFeatures;\n        const lineFeatures = this.tileInfo.lineGroup.featureIds;\n        for (let i = 0; i < numLineFeatures; i++) {\n            if (lineFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitLineFeature(i, handler);\n            }\n        }\n        const numPolygonFeatures = this.tileInfo.polygonGroup.numFeatures;\n        const polygonsFeatures = this.tileInfo.polygonGroup.featureIds;\n        for (let i = 0; i < numPolygonFeatures; i++) {\n            if (polygonsFeatures[i] === featureId) {\n                numFeaturesFound++;\n                this.visitPolygonFeature(i, handler);\n            }\n        }\n        return numFeaturesFound;\n    }\n\n    /**\n     * Visit all `POINT` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPointFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.pointGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPointFeature(i, handler);\n        }\n    }\n\n    /**\n     * Visit all `LINESTRING` features.\n     *\n     * @param handler The handler to use.\n     */\n    visitAllLineFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.lineGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitLineFeature(i, handler);\n        }\n    }\n\n    /**\n     * Visit all `POLYGON` features.\n     *\n     * @param handler The `handler` to use.\n     */\n    visitAllPolygonFeatures(handler: ExtendedTileInfoHandler): void {\n        const numFeatures = this.tileInfo.polygonGroup.numFeatures;\n\n        for (let i = 0; i < numFeatures; i++) {\n            this.visitPolygonFeature(i, handler);\n        }\n    }\n\n    private getTag(featureIndex: number, index: number[]): number {\n        return index !== undefined && index[featureIndex] >= 0 ? index[featureIndex] : -1;\n    }\n\n    /**\n     * Call the `handler` on a point feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitPointFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        const tileInfo = this.tileInfo;\n        const points = tileInfo.pointGroup;\n\n        const start = points.positionIndex[featureIndex];\n        const x = points.positions[start];\n        const y = points.positions[start + 1];\n\n        if (!!handler.acceptPoint) {\n            handler.acceptPoint(\n                points.featureIds[featureIndex],\n                points.techniqueIndex[featureIndex],\n                x,\n                y,\n                points.textIndex[featureIndex],\n                this.getTag(featureIndex, points.layerIndex!),\n                this.getTag(featureIndex, points.classIndex!),\n                this.getTag(featureIndex, points.typeIndex!)\n            );\n        }\n    }\n\n    /**\n     * Call the `handler` on a line feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitLineFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        const tileInfo = this.tileInfo;\n        const lines = tileInfo.lineGroup;\n\n        const numFeatures = lines.numFeatures;\n        const positionsStart = lines.positionIndex[featureIndex];\n        const numPointValues =\n            featureIndex === numFeatures - 1\n                ? lines.positions.length - positionsStart\n                : lines.positionIndex[featureIndex + 1] - positionsStart;\n\n        let segmentId: number | undefined;\n        let startOffset: number | undefined;\n        let endOffset: number | undefined;\n\n        if (lines.segmentIds !== undefined) {\n            segmentId = lines.segmentIds[featureIndex];\n            startOffset = lines.segmentStartOffsets![featureIndex];\n            endOffset = lines.segmentEndOffsets![featureIndex];\n        }\n\n        if (!!handler.acceptLine) {\n            handler.acceptLine(\n                lines.featureIds[featureIndex],\n                lines.techniqueIndex[featureIndex],\n                lines.textIndex[featureIndex],\n                this.getTag(featureIndex, lines.layerIndex!),\n                this.getTag(featureIndex, lines.classIndex!),\n                this.getTag(featureIndex, lines.typeIndex!),\n                tileInfo.lineGroup.positions,\n                positionsStart,\n                numPointValues,\n                segmentId,\n                startOffset,\n                endOffset\n            );\n        }\n    }\n\n    /**\n     * Call the `handler` on a polygon feature.\n     *\n     * @param featureIndex The index of the feature into the feature table.\n     * @param handler The `handler` to use.\n     */\n    private visitPolygonFeature(featureIndex: number, handler: ExtendedTileInfoHandler): void {\n        if (handler.acceptPolygon === undefined) {\n            return;\n        }\n\n        const tileInfo = this.tileInfo;\n        const polygons = tileInfo.polygonGroup;\n\n        const numFeatures = polygons.numFeatures;\n        const ringStart = polygons.outerRingStartIndex[featureIndex];\n        const numRings =\n            featureIndex === numFeatures - 1\n                ? polygons.innerRingStartIndex.length - ringStart\n                : polygons.outerRingStartIndex[featureIndex + 1] - ringStart;\n\n        // Use a static instance, so we do not allocate anything here\n        ExtendedTileInfoVisitor.polygonAccessor.setup(polygons, featureIndex, ringStart, numRings);\n\n        handler.acceptPolygon(\n            polygons.featureIds[featureIndex],\n            polygons.techniqueIndex[featureIndex],\n            polygons.textIndex[featureIndex],\n            this.getTag(featureIndex, polygons.layerIndex!),\n            this.getTag(featureIndex, polygons.classIndex!),\n            this.getTag(featureIndex, polygons.typeIndex!),\n            ExtendedTileInfoVisitor.polygonAccessor\n        );\n\n        // Free all data references.\n        ExtendedTileInfoVisitor.polygonAccessor.reset();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BooleanLiteralExpr,\n    CallExpr,\n    CaseExpr,\n    ContainsExpr,\n    Expr,\n    ExprVisitor,\n    HasAttributeExpr,\n    MatchExpr,\n    NullLiteralExpr,\n    NumberLiteralExpr,\n    ObjectLiteralExpr,\n    StringLiteralExpr,\n    VarExpr\n} from \"./Expr\";\n\n/**\n * [[ExprPool]] maintains a set of unique interned [[Expr]] objects.\n *\n * @hidden\n */\nexport class ExprPool implements ExprVisitor<Expr, void> {\n    private readonly m_booleanLiterals = new Map<boolean, BooleanLiteralExpr>();\n    private readonly m_numberLiterals = new Map<number, NumberLiteralExpr>();\n    private readonly m_stringLiterals = new Map<string, StringLiteralExpr>();\n    private readonly m_objectLiterals = new Map<object, ObjectLiteralExpr>();\n    private readonly m_varExprs = new Map<string, VarExpr>();\n    private readonly m_hasAttributeExprs = new Map<string, HasAttributeExpr>();\n    private readonly m_inExprs = new Map<Expr, ContainsExpr[]>();\n    private readonly m_matchExprs: MatchExpr[] = [];\n    private readonly m_caseExprs: CaseExpr[] = [];\n    private readonly m_callExprs = new Map<string, CallExpr[]>();\n\n    /**\n     * Add `expr` to this [[ExprPool]] and return a unique [[Expr]]\n     * object that is structurally equivalent to `expr`.\n     *\n     * @param expr The [[Expr]] to add to this [[ExprPool]].\n     * @returns A unique [[Expr]] that is structurally equivalent to `expr`.\n     */\n    add(expr: Expr): Expr {\n        return expr.accept(this, undefined);\n    }\n\n    visitNullLiteralExpr(expr: NullLiteralExpr, context: void): Expr {\n        return NullLiteralExpr.instance;\n    }\n\n    visitBooleanLiteralExpr(expr: BooleanLiteralExpr, context: void): Expr {\n        const e = this.m_booleanLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_booleanLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitNumberLiteralExpr(expr: NumberLiteralExpr, context: void): Expr {\n        const e = this.m_numberLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_numberLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitStringLiteralExpr(expr: StringLiteralExpr, context: void): Expr {\n        const e = this.m_stringLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_stringLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitObjectLiteralExpr(expr: ObjectLiteralExpr, context: void): Expr {\n        const e = this.m_objectLiterals.get(expr.value);\n        if (e) {\n            return e;\n        }\n        this.m_objectLiterals.set(expr.value, expr);\n        return expr;\n    }\n\n    visitVarExpr(expr: VarExpr, context: void): Expr {\n        const e = this.m_varExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_varExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitHasAttributeExpr(expr: HasAttributeExpr, context: void): Expr {\n        const e = this.m_hasAttributeExprs.get(expr.name);\n        if (e) {\n            return e;\n        }\n        this.m_hasAttributeExprs.set(expr.name, expr);\n        return expr;\n    }\n\n    visitContainsExpr(expr: ContainsExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        if (!this.m_inExprs.has(value)) {\n            this.m_inExprs.set(value, []);\n        }\n        const inExprs = this.m_inExprs.get(value)!;\n        for (const inExpr of inExprs) {\n            if (inExpr.elements.length !== expr.elements.length) {\n                continue;\n            }\n            // find the index of the first element in the cached 'in' expr\n            // that is not contained in 'expr.elements'.\n            const i = inExpr.elements.findIndex(x => !expr.elements.includes(x));\n            if (i === -1) {\n                return inExpr;\n            }\n        }\n        const e = new ContainsExpr(value, expr.elements);\n        this.m_inExprs.set(value, [e]);\n        return e;\n    }\n\n    visitMatchExpr(expr: MatchExpr, context: void): Expr {\n        const value = expr.value.accept(this, context);\n        const branches: typeof expr.branches = expr.branches.map(([label, body]) => [\n            label,\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n        for (const candidate of this.m_matchExprs) {\n            if (candidate.value !== value) {\n                continue;\n            }\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n        const r = new MatchExpr(value, branches, fallback);\n        this.m_matchExprs.push(r);\n        return r;\n    }\n\n    visitCaseExpr(expr: CaseExpr, context: void): Expr {\n        const branches: typeof expr.branches = expr.branches.map(([condition, body]) => [\n            condition.accept(this, context),\n            body.accept(this, context)\n        ]);\n        const fallback = expr.fallback.accept(this, context);\n\n        for (const candidate of this.m_caseExprs) {\n            if (candidate.fallback !== fallback) {\n                continue;\n            }\n            if (candidate.branches.length !== branches.length) {\n                continue;\n            }\n            let branchesMatching = true;\n            for (let i = 0; i < branches.length; i++) {\n                if (\n                    branches[i][0] !== candidate.branches[i][0] ||\n                    branches[i][1] !== candidate.branches[i][1]\n                ) {\n                    branchesMatching = false;\n                    break;\n                }\n            }\n            if (branchesMatching) {\n                return candidate;\n            }\n        }\n\n        const r = new CaseExpr(branches, fallback);\n        this.m_caseExprs.push(r);\n        return r;\n    }\n\n    visitCallExpr(expr: CallExpr, context: void): Expr {\n        // rewrite the actual arguments\n        const expressions = expr.args.map(childExpr => childExpr.accept(this, context));\n        // ensure we have a valid set of interned expressions for the calls\n        if (!this.m_callExprs.has(expr.op)) {\n            this.m_callExprs.set(expr.op, []);\n        }\n        // get the calls for the given operator.\n        const calls = this.m_callExprs.get(expr.op)!;\n        for (const call of calls) {\n            // check the number of arguments\n            if (call.args.length !== expressions.length) {\n                continue;\n            }\n            // find the index of the first mismatch.\n            let index = 0;\n            for (; index < call.args.length; ++index) {\n                if (call.args[index] !== expressions[index]) {\n                    break;\n                }\n            }\n            if (index === call.args.length) {\n                // no mismatch found, return the 'interned' call.\n                return call;\n            }\n        }\n        const e = new CallExpr(expr.op, expressions);\n        calls.push(e);\n        return e;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { Env, Expr, ExprScope, MapEnv, Value } from \"./Expr\";\nimport { getPropertyValue, isInterpolatedProperty } from \"./InterpolatedProperty\";\nimport { InterpolatedProperty } from \"./InterpolatedPropertyDefs\";\n\nconst logger = LoggerManager.instance.create(\"TechniqueAttr\");\n\nexport interface AttrEvaluationContext {\n    /**\n     * Expression evaluation environment containing variable bindings.\n     */\n    env: MapEnv;\n\n    /**\n     * Storage level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    storageLevel: number;\n\n    /**\n     * Zoom level of tile containing this feature.\n     *\n     * To be removed, when interpolators will be based on [[Expr]].\n     */\n    zoomLevel: number;\n\n    /**\n     * Optional, cache of expression results.\n     *\n     * @see [[Expr.evaluate]]\n     */\n    cachedExprResults?: Map<Expr, Value>;\n}\n\n/**\n * Evaluate feature attr _without_ default value.\n *\n * @returns actual value or `undefined`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | InterpolatedProperty | undefined\n): T | undefined;\n\n/**\n * Evaluate feature attr _with_ default value.\n *\n * @returns actual value or `defaultValue`\n */\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | InterpolatedProperty | undefined,\n    defaultValue: T\n): T;\n\nexport function evaluateTechniqueAttr<T = Value>(\n    context: Env | AttrEvaluationContext,\n    attrValue: T | Expr | InterpolatedProperty | undefined,\n    defaultValue?: T\n): T | undefined {\n    const env = context instanceof Env ? context : context.env;\n\n    let evaluated: Value | undefined;\n    if (Expr.isExpr(attrValue)) {\n        try {\n            evaluated = attrValue.evaluate(\n                env,\n                ExprScope.Dynamic,\n                !(context instanceof Env) ? context.cachedExprResults : undefined\n            );\n        } catch (error) {\n            logger.error(`failed to evaluate expression '${JSON.stringify(attrValue)}': ${error}`);\n            evaluated = undefined;\n        }\n    } else if (isInterpolatedProperty(attrValue)) {\n        evaluated = getPropertyValue(attrValue, context instanceof Env ? context : context.env);\n    } else {\n        evaluated = (attrValue as unknown) as Value;\n    }\n    if (evaluated === undefined || evaluated === null) {\n        return defaultValue;\n    } else {\n        return (evaluated as unknown) as T;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { isJsonExpr } from \"./Expr\";\nimport { StyleDeclaration, Theme } from \"./Theme\";\n\n/**\n * The ThemeVisitor visits every style in the theme in a depth-first fashion.\n */\nexport class ThemeVisitor {\n    constructor(readonly theme: Theme) {}\n    /**\n     * Applies a function to every style in the theme.\n     *\n     * @param visitFunc Function to be called with `style` as an argument. Function should return\n     *                  `true` to cancel visitation.\n     * @returns `true` if function has finished prematurely.\n     */\n    visitStyles(visitFunc: (style: StyleDeclaration) => boolean): boolean {\n        const visit = (style: StyleDeclaration): boolean => {\n            if (isJsonExpr(style)) {\n                return false;\n            }\n            if (visitFunc(style)) {\n                return true;\n            }\n            return false;\n        };\n        if (this.theme.styles !== undefined) {\n            for (const styleSetName in this.theme.styles) {\n                if (this.theme.styles[styleSetName] !== undefined) {\n                    for (const style of this.theme.styles[styleSetName]) {\n                        if (visit(style)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { DataSource } from \"./DataSource\";\nimport { TileGeometryCreator } from \"./geometry/TileGeometryCreator\";\nimport { Tile } from \"./Tile\";\n\n/**\n * Provides background geometry for all tiles.\n */\nexport class BackgroundDataSource extends DataSource {\n    private static readonly DEFAULT_TILING_SCHEME = webMercatorTilingScheme;\n    private m_tilingScheme: TilingScheme = BackgroundDataSource.DEFAULT_TILING_SCHEME;\n\n    constructor() {\n        super(\"background\");\n        this.cacheable = true;\n    }\n\n    updateStorageLevelOffset() {\n        let storageLevelOffset: number | undefined;\n\n        this.mapView.dataSources.forEach(ds => {\n            if (ds === this) {\n                return;\n            }\n            const tilingScheme = ds.getTilingScheme();\n            if (tilingScheme === this.m_tilingScheme) {\n                storageLevelOffset =\n                    storageLevelOffset === undefined\n                        ? ds.storageLevelOffset\n                        : Math.max(storageLevelOffset, ds.storageLevelOffset);\n            }\n        });\n\n        if (storageLevelOffset === undefined) {\n            storageLevelOffset = 0;\n        }\n\n        if (storageLevelOffset !== this.storageLevelOffset) {\n            this.storageLevelOffset = storageLevelOffset;\n            this.mapView.clearTileCache(this.name);\n        }\n    }\n\n    /** @override */\n    setTheme(theme: Theme, languages?: string[]) {\n        this.mapView.clearTileCache(this.name);\n    }\n\n    setTilingScheme(tilingScheme?: TilingScheme) {\n        const newScheme = tilingScheme || BackgroundDataSource.DEFAULT_TILING_SCHEME;\n        if (newScheme === this.m_tilingScheme) {\n            return;\n        }\n\n        this.m_tilingScheme = newScheme;\n        this.updateStorageLevelOffset();\n        this.mapView.clearTileCache(this.name);\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_tilingScheme;\n    }\n\n    /** @override */\n    getTile(tileKey: TileKey): Tile | undefined {\n        const tile = new Tile(this, tileKey);\n        tile.forceHasGeometry(true);\n        tile.removeDecodedTile(); // Skip geometry loading.\n        TileGeometryCreator.instance.addGroundPlane(tile, Number.MIN_SAFE_INTEGER);\n\n        return tile;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection, sphereProjection } from \"@here/harp-geoutils\";\nimport { Vector3 } from \"three\";\nimport { SubdivisionModifier } from \"./SubdivisionModifier\";\n\nconst VERTEX_POSITION_CACHE = [new Vector3(), new Vector3(), new Vector3()];\n\n/**\n * The [[SphericalGeometrySubdivisionModifier]] subdivides triangle mesh geometries positioned\n * on the surface of a sphere centered at `(0, 0, 0)`.\n */\nexport class SphericalGeometrySubdivisionModifier extends SubdivisionModifier {\n    /**\n     * Constructs a new [[SphericalGeometrySubdivisionModifier]].\n     *\n     * @param angle The maximum angle in radians between two vertices and the origin.\n     * @param projection The projection that defines the world space of this geometry.\n     */\n    constructor(readonly angle: number, readonly projection: Projection = sphereProjection) {\n        super();\n    }\n\n    /** @override */\n    protected shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined {\n        const aa = sphereProjection.reprojectPoint(this.projection, a, VERTEX_POSITION_CACHE[0]);\n        const bb = sphereProjection.reprojectPoint(this.projection, b, VERTEX_POSITION_CACHE[1]);\n        const cc = sphereProjection.reprojectPoint(this.projection, c, VERTEX_POSITION_CACHE[2]);\n\n        const alpha = aa.angleTo(bb);\n        const beta = bb.angleTo(cc);\n        const gamma = cc.angleTo(aa);\n\n        // find the maximum angle\n        const m = Math.max(alpha, Math.max(beta, gamma));\n\n        // split the triangle if needed.\n        if (m < this.angle) {\n            return undefined;\n        }\n\n        if (m === alpha) {\n            return 0;\n        } else if (m === beta) {\n            return 1;\n        } else if (m === gamma) {\n            return 2;\n        }\n\n        throw new Error(\"failed to split triangle\");\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { BufferAttribute, BufferGeometry, Vector3 } from \"three\";\n\nconst tmpVectorA = new Vector3();\nconst tmpVectorB = new Vector3();\nconst tmpVectorC = new Vector3();\n\n/**\n * The [[SubdivisionModifier]] subdivides triangle mesh geometries.\n */\nexport abstract class SubdivisionModifier {\n    /**\n     * Constructs a new [[SubdivisionModifier]].\n     */\n    constructor() {\n        // nothing to do\n    }\n\n    /**\n     * Subdivides the faces of the given [[THREE.BufferGeometry]].\n     *\n     * This method modifies (in-place) the vertices and the faces of the geometry.\n     * Please note that only the vertex position and their UV coordinates are subdivided.\n     * Normals, vertex colors and other attributes are left unmodified.\n     *\n     * @param geometry The [[THREE.BufferGeometry]] to subdivide.\n     */\n    modify(geometry: BufferGeometry): BufferGeometry {\n        const positionAttr = geometry.getAttribute(\"position\") as BufferAttribute;\n        const position = Array.from(positionAttr.array);\n\n        const uvAttr = geometry.getAttribute(\"uv\") as BufferAttribute;\n        const uv = uvAttr !== undefined ? Array.from(uvAttr.array) : undefined;\n\n        const edgeAttr = geometry.getAttribute(\"edge\") as BufferAttribute;\n        const edge = edgeAttr !== undefined ? Array.from(edgeAttr.array) : undefined;\n\n        const wallAttr = geometry.getAttribute(\"wall\") as BufferAttribute;\n        const wall = wallAttr !== undefined ? Array.from(wallAttr.array) : undefined;\n\n        const indexAttr = geometry.getIndex() as BufferAttribute;\n        const indices = Array.from(indexAttr.array);\n\n        // A cache containing the indices of the vertices added\n        // when subdiving the faces of the geometry.\n        const cache = new Map<string, number>();\n\n        /**\n         * Returns the index of the vertex positioned in the middle of the given vertices.\n         */\n        function middleVertex(i: number, j: number): number {\n            // Build a unique `key` for the pair of indices `(i, j)`.\n            const key = `${Math.min(i, j)}_${Math.max(i, j)}`;\n\n            const h = cache.get(key);\n\n            if (h !== undefined) {\n                // Nothing to do, a vertex in the middle of (i, j) was already created.\n                return h;\n            }\n\n            // The position of the new vertex.\n            tmpVectorA.set(position[i * 3], position[i * 3 + 1], position[i * 3 + 2]);\n            tmpVectorB.set(position[j * 3], position[j * 3 + 1], position[j * 3 + 2]);\n            tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n\n            // The index of the new vertex.\n            const index = position.length / 3;\n            position.push(...tmpVectorC.toArray());\n            // Cache the position of the new vertex.\n            cache.set(key, index);\n\n            // The uvs of the new vertex.\n            if (uv !== undefined) {\n                tmpVectorA.set(uv[i * 2], uv[i * 2 + 1], 0);\n                tmpVectorB.set(uv[j * 2], uv[j * 2 + 1], 0);\n                tmpVectorC.lerpVectors(tmpVectorA, tmpVectorB, 0.5);\n                uv.push(tmpVectorC.x, tmpVectorC.y);\n            }\n\n            // The edge and wall attributes of the new vertex.\n            // If a new vertex has been introduced between i and j, connect the elements\n            // accordingly.\n            if (edge !== undefined) {\n                if (edge[i] === j) {\n                    edge.push(j);\n                    edge[i] = index;\n                } else if (edge[j] === i) {\n                    edge.push(i);\n                    edge[j] = index;\n                } else {\n                    edge.push(-1);\n                }\n            }\n            if (wall !== undefined) {\n                if (wall[i] === j) {\n                    wall.push(j);\n                    wall[i] = index;\n                } else if (wall[j] === i) {\n                    wall.push(i);\n                    wall[j] = index;\n                } else {\n                    wall.push(-1);\n                }\n            }\n\n            return index;\n        }\n\n        const newIndices = [];\n        while (indices.length >= 3) {\n            const v0 = indices.shift()!;\n            const v1 = indices.shift()!;\n            const v2 = indices.shift()!;\n\n            tmpVectorA.set(position[v0 * 3], position[v0 * 3 + 1], position[v0 * 3 + 2]);\n            tmpVectorB.set(position[v1 * 3], position[v1 * 3 + 1], position[v1 * 3 + 2]);\n            tmpVectorC.set(position[v2 * 3], position[v2 * 3 + 1], position[v2 * 3 + 2]);\n\n            const edgeToSplit = this.shouldSplitTriangle(tmpVectorA, tmpVectorB, tmpVectorC);\n\n            switch (edgeToSplit) {\n                case 0: {\n                    const v3 = middleVertex(v0, v1);\n                    indices.push(v0, v3, v2, v3, v1, v2);\n                    break;\n                }\n\n                case 1: {\n                    const v3 = middleVertex(v1, v2);\n                    indices.push(v0, v1, v3, v0, v3, v2);\n                    break;\n                }\n\n                case 2: {\n                    const v3 = middleVertex(v2, v0);\n                    indices.push(v0, v1, v3, v3, v1, v2);\n                    break;\n                }\n\n                case undefined: {\n                    newIndices.push(v0, v1, v2);\n                    break;\n                }\n\n                default:\n                    throw new Error(\"failed to subdivide the given geometry\");\n            }\n        }\n\n        positionAttr.array = new Float32Array(position);\n        positionAttr.count = position.length / positionAttr.itemSize;\n        positionAttr.needsUpdate = true;\n\n        geometry.setIndex(newIndices);\n\n        if (uv !== undefined) {\n            uvAttr.array = new Float32Array(uv);\n            uvAttr.count = uv.length / uvAttr.itemSize;\n            uvAttr.needsUpdate = true;\n        }\n\n        if (edge !== undefined) {\n            edgeAttr.array = new Float32Array(edge);\n            edgeAttr.count = edge.length / edgeAttr.itemSize;\n            edgeAttr.needsUpdate = true;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Returns if the given triangle should be subdivide.\n     *\n     * Implementations of this function should return the index of\n     * the edge of the triangle to split (0, 1, or 2) or undefined if\n     * the triangle doesn't need to be subdivided.\n     *\n     * @param a The position of the first vertex of the triangle.\n     * @param b The position of the second vertex of the triangle.\n     * @param c The position of the third vertex of the triangle.\n     */\n    protected abstract shouldSplitTriangle(a: Vector3, b: Vector3, c: Vector3): number | undefined;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"../TextCanvas\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphTextureCache } from \"./GlyphTextureCache\";\nimport { FontStyle, FontVariant, TextRenderStyle } from \"./TextStyle\";\n\nconst ASSETS_PATH = \"_Assets/\";\nconst BOLD_ASSETS_PATH = \"_BoldAssets/\";\nconst ITALIC_ASSETS_PATH = \"_ItalicAssets/\";\nconst BOLD_ITALIC_ASSETS_PATH = \"_BoldItalicAssets/\";\nconst REPLACEMENT_PATH = \"_Assets/Extra/\";\n\ninterface SrcGlyphData {\n    id: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n    page: number;\n    chnl: number;\n}\n\n/**\n * Metrics defining the placement and rendering of all glyphs in a given [[Font]].\n */\nexport interface FontMetrics {\n    size: number;\n    distanceRange: number;\n    base: number;\n    lineHeight: number;\n    lineGap: number;\n    capHeight: number;\n    xHeight: number;\n}\n\n/**\n * Description of all assets, charset and metrics that define a font inside a [[FontCatalog]].\n */\nexport interface Font {\n    name: string;\n    metrics: FontMetrics;\n    charset: string;\n    bold?: string;\n    italic?: string;\n    boldItalic?: string;\n}\n\n/**\n * Description of a continuous range of Unicode code points (as well as information on which fonts\n * supports it).\n */\nexport interface UnicodeBlock {\n    name: string;\n    min: number;\n    max: number;\n    fonts: string[];\n}\n\n/**\n * Collection of font assets used to render glyphs when using a [[TextCanvas]].\n *\n * @summary A `FontCatalog` works as a stack of SDF bitmap fonts (using the BMFont format) designed\n * to cover the widest Unicode code point range possible. In order to manage all these assets\n * elegantly, the assets inside the `FontCatalog` are stored on a per-Unicode-Block basis, and\n * assets for a block are only loaded once a glyph belonging to that block is requested.\n *\n * Bitmap information coming from all different fonts is then stored in a unified WebGL GPU Texture\n * resource, which can be sampled to render all currently loaded glyphs.\n *\n */\nexport class FontCatalog {\n    /**\n     * Loads a `FontCatalog`.\n     *\n     * @param url Asset url.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     *\n     * @returns `FontCatalog` Promise.\n     */\n    static async load(path: string, maxCodePointCount: number): Promise<FontCatalog> {\n        const url = new URL(path, window.location.href);\n        const fontCatalog = await FontCatalog.loadJSON(url.href);\n\n        const replacementDirUrl = new URL(`${fontCatalog.name}${REPLACEMENT_PATH}`, url);\n        const replacementJson = await FontCatalog.loadJSON(\n            replacementDirUrl.href + \"Specials.json\"\n        );\n        const replacementTexture = await FontCatalog.loadTexture(\n            replacementDirUrl.href + \"Specials.png\"\n        );\n        replacementTexture.wrapS = THREE.ClampToEdgeWrapping;\n        replacementTexture.wrapT = THREE.ClampToEdgeWrapping;\n        replacementTexture.minFilter = THREE.NearestFilter;\n        replacementTexture.needsUpdate = true;\n\n        const replacementFont = fontCatalog.fonts.find((font: Font) => font.name === \"Extra\");\n        const replacementGlyph = new GlyphData(\n            65533,\n            \"Specials\",\n            replacementJson.chars[0].width,\n            replacementJson.chars[0].height,\n            replacementJson.chars[0].xadvance,\n            replacementJson.chars[0].xoffset,\n            replacementJson.chars[0].yoffset,\n            0.0,\n            0.0,\n            1.0,\n            1.0,\n            replacementTexture,\n            replacementFont!\n        );\n\n        const fontCatalogInfo = new FontCatalog(\n            url.href.substr(0, url.href.lastIndexOf(\"/\")),\n            fontCatalog.name,\n            fontCatalog.type,\n            fontCatalog.size,\n            fontCatalog.maxWidth,\n            fontCatalog.maxHeight,\n            fontCatalog.distanceRange,\n            fontCatalog.fonts,\n            fontCatalog.supportedBlocks,\n            maxCodePointCount,\n            replacementGlyph\n        );\n        return fontCatalogInfo;\n    }\n\n    static async loadTexture(url: string): Promise<THREE.Texture> {\n        return new Promise(resolve => {\n            new THREE.TextureLoader().load(url, resolve);\n        }) as Promise<THREE.Texture>;\n    }\n\n    static async loadJSON(url: string): Promise<any> {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`${url} Status Text:  ${response.statusText}`);\n        }\n        const rawJSON = await response.text();\n        return JSON.parse(rawJSON);\n    }\n\n    private m_glyphTextureCache: GlyphTextureCache;\n\n    private m_loadingJson: Map<string, Promise<any>>;\n    private m_loadingPages: Map<string, Promise<THREE.Texture>>;\n    private m_loadingGlyphs: Map<string, Promise<GlyphData>>;\n    private m_loadedJson: Map<string, any>;\n    private m_loadedPages: Map<string, THREE.Texture>;\n    private m_loadedGlyphs: Map<string, Map<number, GlyphData>>;\n\n    /**\n     * @hidden\n     * Creates a new FontCatalog.\n     *\n     * @param url FontCatalog's URL.\n     * @param name FontCatalog's name.\n     * @param type FontCatalog's type (sdf or msdf).\n     * @param size FontCatalog's glyph size (pixels).\n     * @param maxWidth FontCatalog's maximum glyph width (pixels).\n     * @param maxHeight FontCatalog's maximum glyph height (pixels).\n     * @param distanceRange Distance range used to generate the SDF bitmaps.\n     * @param fonts Array of supported fonts.\n     * @param unicodeBlocks Array of supported Unicode blocks.\n     * @param maxCodePointCount Maximum number of unique code points bitmaps this `FontCatalog`'s\n     * internal texture can store simultaneously.\n     * @param m_replacementGlyph [[GlyphData]] to be used whenever a Unicode code point is not\n     * supported by this `FontCatalog`.\n     *\n     * @returns New FontCatalog.\n     */\n    private constructor(\n        readonly url: string,\n        readonly name: string,\n        readonly type: string,\n        readonly size: number,\n        readonly maxWidth: number,\n        readonly maxHeight: number,\n        readonly distanceRange: number,\n        readonly fonts: Font[],\n        readonly unicodeBlocks: UnicodeBlock[],\n        readonly maxCodePointCount: number,\n        private m_replacementGlyph: GlyphData\n    ) {\n        this.m_glyphTextureCache = new GlyphTextureCache(\n            maxCodePointCount,\n            this.maxWidth + 1,\n            this.maxHeight + 1\n        );\n\n        this.m_loadingJson = new Map<string, Promise<any>>();\n        this.m_loadingPages = new Map<string, Promise<THREE.Texture>>();\n        this.m_loadingGlyphs = new Map<string, Promise<GlyphData>>();\n        this.m_loadedJson = new Map<string, any>();\n        this.m_loadedPages = new Map<string, THREE.Texture>();\n        this.m_loadedGlyphs = new Map<string, Map<number, GlyphData>>();\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose() {\n        this.fonts.length = 0;\n        this.unicodeBlocks.length = 0;\n        this.m_glyphTextureCache.dispose();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Removes all loaded (and loading) assets.\n     */\n    clear() {\n        this.m_glyphTextureCache.clear();\n        this.m_loadingJson.clear();\n        this.m_loadingPages.clear();\n        this.m_loadingGlyphs.clear();\n        this.m_loadedJson.clear();\n        this.m_loadedPages.clear();\n        this.m_loadedGlyphs.clear();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        this.m_glyphTextureCache.update(renderer);\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_glyphTextureCache.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_glyphTextureCache.textureSize;\n    }\n\n    /**\n     * Current internal loading state.\n     */\n    get isLoading(): boolean {\n        return (\n            this.m_loadingJson.size > 0 ||\n            this.m_loadingPages.size > 0 ||\n            this.m_loadingGlyphs.size > 0\n        );\n    }\n\n    /**\n     * Loads the description file for a specific [[UnicodeBlock]]. This speeds up consequent calls\n     * to `FontCatalog`.loadCharset() that require glyphs from this block to be loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to retrieve this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to load.\n     * @param loadPages If `true`, all pages in this Unicode block will also be loaded.\n     *\n     * @returns Loaded Unicode Block json.\n     */\n    async loadBlock(\n        block: UnicodeBlock,\n        font: Font,\n        fontStyle: FontStyle,\n        loadPages?: boolean\n    ): Promise<any> {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        let json = this.m_loadedJson.get(jsonPath);\n        if (json === undefined) {\n            let jsonPromise = this.m_loadingJson.get(jsonPath);\n            if (jsonPromise === undefined) {\n                try {\n                    jsonPromise = FontCatalog.loadJSON(jsonPath);\n                    this.m_loadingJson.set(jsonPath, jsonPromise);\n                    json = await jsonPromise;\n                    this.m_loadingJson.delete(jsonPath);\n                    this.m_loadedJson.set(jsonPath, json);\n                } catch (e) {\n                    // tslint:disable-next-line:no-console\n                    console.error(e);\n                    this.m_loadingJson.delete(jsonPath);\n                }\n            } else {\n                json = await jsonPromise;\n            }\n        }\n\n        const pagePromises: Array<Promise<THREE.Texture>> = [];\n        if (loadPages === true) {\n            for (const page of json.pages) {\n                pagePromises.push(this.loadPage(`${assetsPath}/${page}`));\n            }\n        }\n        await Promise.all(pagePromises);\n\n        return json;\n    }\n\n    /**\n     * Releases the description file for a specific [[UnicodeBlock]] (and all downloaded pages).\n     * Safe to call when no assets for this block have been loaded.\n     *\n     * @param block Requested [[UnicodeBlock]].\n     * @param font [[Font]] to remove this Unicode block from.\n     * @param fontStyle [[FontStyle]] assets to remove.\n     */\n    removeBlock(block: UnicodeBlock, font: Font, fontStyle: FontStyle): void {\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const jsonPath = `${assetsPath}/${block.name.replace(/ /g, \"_\")}.json`;\n        const json = this.m_loadedJson.get(jsonPath);\n        if (json !== undefined) {\n            for (const page of json.pages) {\n                const pagePath = `${assetsPath}/${page}`;\n                this.m_loadingPages.delete(pagePath);\n                this.m_loadedPages.delete(pagePath);\n            }\n            this.m_loadingJson.delete(jsonPath);\n            this.m_loadedJson.delete(jsonPath);\n        }\n    }\n\n    /**\n     * Loads all the required glyphs needed to render the input text. Character repetition will not\n     * be considered, and only styled assets (with applied font selection, style and variants) will\n     * be loaded.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] for which glyphs will be loaded.\n     *\n     * @returns Promise containing an array of all loaded [[GlyphData]] for the input text.\n     */\n    async loadCharset(input: string, style: TextRenderStyle): Promise<GlyphData[]> {\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const shouldTransform =\n            style.fontVariant === FontVariant.AllCaps ||\n            style.fontVariant === FontVariant.SmallCaps;\n\n        const charset = (shouldTransform ? input.toUpperCase() : input).replace(\n            /[\\s\\S](?=([\\s\\S]+))/g,\n            (c, s) => {\n                return s.indexOf(c) + 1 ? \"\" : c;\n            }\n        );\n        const glyphPromises: Array<Promise<GlyphData>> = [];\n        for (const char of charset) {\n            const codePoint = char.codePointAt(0)!;\n            const font = this.getFont(codePoint, fontName);\n            const fontHash = `${font.name}_${fontStyle}`;\n            const glyphHash = `${fontHash}_${codePoint}`;\n\n            let fontGlyphMap = this.m_loadedGlyphs.get(fontHash);\n            if (fontGlyphMap === undefined) {\n                fontGlyphMap = new Map();\n                this.m_loadedGlyphs.set(fontHash, fontGlyphMap);\n            }\n\n            const glyph = fontGlyphMap.get(codePoint);\n            if (glyph === undefined) {\n                let glyphPromise = this.m_loadingGlyphs.get(glyphHash);\n                if (glyphPromise === undefined) {\n                    if (font.charset.indexOf(String.fromCodePoint(codePoint)) === -1) {\n                        const replacementGlyph = this.createReplacementGlyph(codePoint, char, font);\n                        fontGlyphMap!.set(codePoint, replacementGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, replacementGlyph);\n                        continue;\n                    }\n\n                    let charUnicodeBlock: UnicodeBlock | undefined;\n                    for (const block of this.unicodeBlocks) {\n                        if (codePoint >= block.min && codePoint <= block.max) {\n                            charUnicodeBlock = block;\n                            break;\n                        }\n                    }\n\n                    glyphPromise = this.loadAssets(codePoint, fontStyle, charUnicodeBlock!, font);\n                    this.m_loadingGlyphs.set(glyphHash, glyphPromise);\n                    glyphPromise.then((loadedGlyph: GlyphData) => {\n                        this.m_loadingGlyphs.delete(glyphHash);\n                        fontGlyphMap!.set(codePoint, loadedGlyph);\n                        this.m_glyphTextureCache.add(glyphHash, loadedGlyph);\n                    });\n                }\n                glyphPromises.push(glyphPromise);\n            } else if (!this.m_glyphTextureCache.has(glyphHash)) {\n                glyphPromises.push(Promise.resolve(glyph));\n                this.m_glyphTextureCache.add(glyphHash, glyph);\n            }\n        }\n\n        return Promise.all(glyphPromises);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for a specific character.\n     * Returns `undefined` if the assets for this glyph haven't been loaded yet.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param font [[Font]] to get this glyph from.\n     * @param fontStyle Specific [[FontStyle]] to get glyphs for.\n     *\n     * @returns [[GlyphData]] for this code point.\n     */\n    getGlyph(codePoint: number, font: Font, fontStyle: FontStyle): GlyphData | undefined {\n        const fontGlyphMap = this.m_loadedGlyphs.get(`${font.name}_${fontStyle}`);\n        if (fontGlyphMap === undefined) {\n            return undefined;\n        }\n        return fontGlyphMap.get(codePoint);\n    }\n\n    /**\n     * Retrieves the loaded [[GlyphData]] for the specified text.\n     * Returns `undefined` if the assets for these glyphs haven't been loaded yet.\n     *\n     * @param input Input text.\n     * @param style Specific [[TextRenderStyle]] to get glyphs for.\n     * @param letterCaseArray Array containing the original letter case for the requested glyphs.\n     *\n     * @returns Array containing [[GlyphData]] for each character of the input text.\n     */\n    getGlyphs(\n        input: string,\n        style: TextRenderStyle,\n        letterCaseArray?: boolean[]\n    ): GlyphData[] | undefined {\n        const result = [];\n        const fontName = style.fontName;\n        const fontStyle = style.fontStyle;\n        const fontVariant = style.fontVariant;\n        const shouldTransform =\n            fontVariant === FontVariant.AllCaps || fontVariant === FontVariant.SmallCaps;\n        for (const character of input) {\n            const transformedCharacter = shouldTransform ? character.toUpperCase() : character;\n            for (const char of transformedCharacter) {\n                const codePoint = char.codePointAt(0)!;\n                const font = this.getFont(codePoint, fontName);\n                const glyphData = this.getGlyph(codePoint, font, fontStyle);\n                if (glyphData !== undefined) {\n                    result.push(glyphData);\n                    if (letterCaseArray !== undefined) {\n                        letterCaseArray.push(char !== character);\n                    }\n                } else {\n                    return undefined;\n                }\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Gets the best matched font for a specific character.\n     *\n     * @param codePoint Character's Unicode code point.\n     * @param fontName Font name suggestion.\n     *\n     * @returns Best matched font.\n     */\n    getFont(codePoint: number, fontName?: string): Font {\n        let selectedFontName: string = this.fonts[0].name;\n        for (const block of this.unicodeBlocks) {\n            if (codePoint >= block.min && codePoint <= block.max) {\n                selectedFontName =\n                    fontName !== undefined &&\n                    block.fonts.find(element => {\n                        return element === fontName;\n                    }) !== undefined\n                        ? fontName\n                        : block.fonts[0];\n                break;\n            }\n        }\n\n        return this.fonts.find(element => {\n            return element.name === selectedFontName;\n        })!;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `FontCatalog`.\n     *\n     * @param info The info object to increment with the values from this `FontCatalog`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        let numBytes = 0;\n\n        for (const block of this.unicodeBlocks) {\n            numBytes += (block.max - block.min) * 2;\n        }\n\n        // Always stored in RGBA internally.\n        let textureBytes =\n            this.m_glyphTextureCache.textureSize.x * this.m_glyphTextureCache.textureSize.y * 4;\n\n        for (const page in this.m_loadedPages.entries) {\n            if (this.m_loadedPages.get(page) !== undefined) {\n                const loadedPage = this.m_loadedPages.get(page);\n                if (loadedPage !== undefined) {\n                    textureBytes += loadedPage.image.width * loadedPage.image.height * 4;\n                }\n            }\n        }\n\n        info.heapSize += numBytes + textureBytes;\n        info.gpuSize += textureBytes;\n    }\n\n    private createReplacementGlyph(codePoint: number, char: string, font: Font): GlyphData {\n        const replacementGlyph = this.m_replacementGlyph.clone();\n        (replacementGlyph as any).codePoint = codePoint;\n        (replacementGlyph as any).character = char;\n        (replacementGlyph as any).font = font;\n        return replacementGlyph;\n    }\n\n    private async loadAssets(\n        codePoint: number,\n        fontStyle: FontStyle,\n        block: UnicodeBlock,\n        font: Font\n    ): Promise<GlyphData> {\n        const json = await this.loadBlock(block, font, fontStyle);\n        if (json === undefined) {\n            return this.m_replacementGlyph;\n        }\n\n        const sourceGlyphData = (json.chars as SrcGlyphData[]).find(char => char.id === codePoint);\n        const assetsPath = this.getAssetsPath(fontStyle, font);\n        const texturePath = `${assetsPath}/${json.pages[sourceGlyphData!.page]}`;\n        const texture = await this.loadPage(texturePath);\n\n        const glyphData = new GlyphData(\n            sourceGlyphData!.id,\n            block.name,\n            sourceGlyphData!.width,\n            sourceGlyphData!.height,\n            sourceGlyphData!.xadvance,\n            sourceGlyphData!.xoffset,\n            sourceGlyphData!.yoffset,\n            sourceGlyphData!.x / texture!.image.width,\n            1.0 - (sourceGlyphData!.y + sourceGlyphData!.height) / texture!.image.height,\n            (sourceGlyphData!.x + sourceGlyphData!.width) / texture!.image.width,\n            1.0 - sourceGlyphData!.y / texture!.image.height,\n            texture!,\n            font\n        );\n\n        return glyphData;\n    }\n\n    private async loadPage(pagePath: string): Promise<THREE.Texture> {\n        let page = this.m_loadedPages.get(pagePath);\n        if (page === undefined) {\n            let pagePromise = this.m_loadingPages.get(pagePath);\n            if (pagePromise === undefined) {\n                pagePromise = FontCatalog.loadTexture(pagePath);\n                this.m_loadingPages.set(pagePath, pagePromise);\n                page = await pagePromise;\n                page.wrapS = THREE.ClampToEdgeWrapping;\n                page.wrapT = THREE.ClampToEdgeWrapping;\n                page.minFilter = THREE.NearestFilter;\n                page.needsUpdate = true;\n                if (this.m_loadingPages.delete(pagePath)) {\n                    this.m_loadedPages.set(pagePath, page);\n                }\n                this.m_loadingPages.delete(pagePath);\n            } else {\n                page = await pagePromise;\n            }\n        }\n        return page;\n    }\n\n    private getAssetsPath(fontStyle: FontStyle, font: Font) {\n        let fontStylePath = ASSETS_PATH;\n        switch (fontStyle) {\n            case FontStyle.Bold:\n                if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.Italic:\n                if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                }\n                break;\n            case FontStyle.BoldItalic:\n                if (font.boldItalic !== undefined) {\n                    fontStylePath = BOLD_ITALIC_ASSETS_PATH;\n                } else if (font.italic !== undefined) {\n                    fontStylePath = ITALIC_ASSETS_PATH;\n                } else if (font.bold !== undefined) {\n                    fontStylePath = BOLD_ASSETS_PATH;\n                }\n                break;\n        }\n        return `${this.url}/${this.name}${fontStylePath}${font.name!}`;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { LRUCache } from \"@here/harp-lrucache\";\nimport * as THREE from \"three\";\n\nimport { Font, FontMetrics } from \"./FontCatalog\";\nimport { GlyphData } from \"./GlyphData\";\nimport { GlyphClearMaterial, GlyphCopyMaterial } from \"./TextMaterials\";\n\n/**\n * Maximum number of texture atlas pages we can copy from in a single go. This amount is determined\n * by the maximum number of texture units available on a pixel shader for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_IMAGE_UNITS\n */\nconst MAX_NUM_COPY_PAGES = 8;\n\n/**\n * Maximum texture size supported. This amount is determined by the maximum texture size supported\n * for all devices:\n * https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE\n */\nconst MAX_TEXTURE_SIZE = 4096;\n\n/**\n * @hidden\n * Information stored for every entry in a [[GlyphTextureCache]].\n */\nexport interface GlyphCacheEntry {\n    glyphData: GlyphData;\n    location: THREE.Vector2;\n}\n\n/**\n * @hidden\n * Unified glyph SDF bitmap storage for all fonts in a [[FontCatalog]].\n * Implemented as an abstraction layer on top of an LRUCache and WebGLRenderTarget.\n */\nexport class GlyphTextureCache {\n    private m_cacheWidth: number;\n    private m_cacheHeight: number;\n    private m_textureSize: THREE.Vector2;\n    private m_entryCache: LRUCache<string, GlyphCacheEntry>;\n\n    private m_scene: THREE.Scene;\n    private m_camera: THREE.OrthographicCamera;\n    private m_rt: THREE.WebGLRenderTarget;\n\n    private m_copyTextureSet: Set<THREE.Texture>;\n    private m_copyTransform: THREE.Matrix3;\n    private m_copyPositions: THREE.Vector2[];\n    private m_copyMaterial: GlyphCopyMaterial;\n    private m_copyVertexBuffer: THREE.InterleavedBuffer;\n    private m_copyPositionAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyUVAttribute: THREE.InterleavedBufferAttribute;\n    private m_copyGeometry: THREE.BufferGeometry;\n    private m_copyMesh: THREE.Mesh;\n    private m_copyGeometryDrawCount: number;\n\n    private m_clearMaterial: GlyphClearMaterial;\n    private m_clearPositionAttribute: THREE.BufferAttribute;\n    private m_clearGeometry: THREE.BufferGeometry;\n    private m_clearMesh: THREE.Mesh;\n    private m_clearGeometryDrawCount: number;\n\n    /**\n     * Creates a `GlyphTextureCache` object.\n     *\n     * @param capacity Cache's maximum glyph capacity.\n     * @param entryWidth Maximum entry width.\n     * @param entryHeight Maximum entry height.\n     *\n     * @returns New `GlyphTextureCache`.\n     */\n    constructor(\n        readonly capacity: number,\n        readonly entryWidth: number,\n        readonly entryHeight: number\n    ) {\n        const nRows = Math.floor(Math.sqrt(capacity));\n        this.m_cacheHeight = nRows * nRows < capacity ? nRows + 1 : nRows;\n        this.m_cacheWidth = nRows * this.m_cacheHeight < capacity ? nRows + 1 : nRows;\n\n        this.m_textureSize = new THREE.Vector2(\n            this.m_cacheWidth * entryWidth,\n            this.m_cacheHeight * entryHeight\n        );\n        if (this.m_textureSize.y > MAX_TEXTURE_SIZE || this.m_textureSize.x > MAX_TEXTURE_SIZE) {\n            // tslint:disable-next-line:no-console\n            console.warn(\n                \"GlyphTextureCache texture size (\" +\n                    this.m_textureSize.x +\n                    \", \" +\n                    this.m_textureSize.y +\n                    \") exceeds WebGL's widely supported MAX_TEXTURE_SIZE (\" +\n                    MAX_TEXTURE_SIZE +\n                    \").\\n\" +\n                    \"This could result in rendering errors on some devices.\\n\" +\n                    \"Please consider reducing its capacity or input assets size.\"\n            );\n        }\n\n        this.m_entryCache = new LRUCache<string, GlyphCacheEntry>(capacity);\n        this.initCacheEntries();\n\n        this.m_scene = new THREE.Scene();\n        this.m_camera = new THREE.OrthographicCamera(\n            0,\n            this.m_textureSize.x,\n            this.m_textureSize.y,\n            0\n        );\n        this.m_camera.position.z = 1;\n        this.m_camera.updateMatrixWorld(false);\n        this.m_rt = new THREE.WebGLRenderTarget(this.m_textureSize.x, this.m_textureSize.y, {\n            wrapS: THREE.ClampToEdgeWrapping,\n            wrapT: THREE.ClampToEdgeWrapping,\n            depthBuffer: false,\n            stencilBuffer: false\n        });\n\n        this.m_copyTextureSet = new Set<THREE.Texture>();\n        this.m_copyTransform = new THREE.Matrix3();\n        this.m_copyPositions = [];\n        this.m_copyPositions.push(\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2(),\n            new THREE.Vector2()\n        );\n\n        this.m_copyMaterial = new GlyphCopyMaterial();\n        this.m_copyVertexBuffer = new THREE.InterleavedBuffer(new Float32Array(capacity * 20), 5);\n        this.m_copyVertexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_copyPositionAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            3,\n            0\n        );\n        this.m_copyUVAttribute = new THREE.InterleavedBufferAttribute(\n            this.m_copyVertexBuffer,\n            2,\n            3\n        );\n        this.m_copyGeometry = new THREE.BufferGeometry();\n        this.m_copyGeometry.setAttribute(\"position\", this.m_copyPositionAttribute);\n        this.m_copyGeometry.setAttribute(\"uv\", this.m_copyUVAttribute);\n\n        const copyIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        copyIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n        this.m_copyGeometry.setIndex(copyIndexBuffer);\n        this.m_copyMesh = new THREE.Mesh(this.m_copyGeometry, this.m_copyMaterial);\n        this.m_copyMesh.frustumCulled = false;\n        this.m_copyGeometryDrawCount = 0;\n\n        this.m_clearMaterial = new GlyphClearMaterial();\n        this.m_clearPositionAttribute = new THREE.BufferAttribute(\n            new Float32Array(capacity * 8),\n            2\n        );\n        this.m_clearPositionAttribute.setUsage(THREE.DynamicDrawUsage);\n        this.m_clearGeometry = new THREE.BufferGeometry();\n        this.m_clearGeometry.setAttribute(\"position\", this.m_clearPositionAttribute);\n        const clearIndexBuffer = new THREE.BufferAttribute(new Uint32Array(capacity * 6), 1);\n        clearIndexBuffer.setUsage(THREE.DynamicDrawUsage);\n\n        this.m_clearGeometry.setIndex(clearIndexBuffer);\n        this.m_clearMesh = new THREE.Mesh(this.m_clearGeometry, this.m_clearMaterial);\n        this.m_clearMesh.frustumCulled = false;\n        this.m_clearGeometryDrawCount = 0;\n\n        this.m_scene.add(this.m_clearMesh, this.m_copyMesh);\n    }\n\n    /**\n     * Release all allocated resources.\n     */\n    dispose(): void {\n        this.m_entryCache.clear();\n        this.m_scene.remove(this.m_clearMesh, this.m_copyMesh);\n        this.m_rt.dispose();\n        this.m_clearMaterial.dispose();\n        this.m_copyMaterial.dispose();\n        this.m_copyTextureSet.clear();\n        this.m_clearGeometry.dispose();\n        this.m_copyGeometry.dispose();\n    }\n\n    /**\n     * Internal WebGL Texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_rt.texture;\n    }\n\n    /**\n     * Internal WebGL Texture size.\n     */\n    get textureSize(): THREE.Vector2 {\n        return this.m_textureSize;\n    }\n\n    /**\n     * Add a new entry to the GlyphTextureCache. If the limit of entries is hit, the least requested\n     * entry will be replaced.\n     *\n     * @param hash Entry's hash.\n     * @param glyph Entry's glyph data.\n     */\n    add(hash: string, glyph: GlyphData): void {\n        const entry = this.m_entryCache.get(hash);\n        if (entry !== undefined) {\n            return;\n        }\n\n        const oldestEntry = this.m_entryCache.oldest;\n        if (oldestEntry === null) {\n            throw new Error(\"GlyphTextureCache is uninitialized!\");\n        }\n        this.clearCacheEntry(oldestEntry.value);\n        this.copyGlyphToCache(hash, glyph, oldestEntry.value.location);\n    }\n\n    /**\n     * Checks if an entry is in the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Test result.\n     */\n    has(hash: string): boolean {\n        return this.m_entryCache.has(hash);\n    }\n\n    /**\n     * Retrieves an entry from the cache.\n     *\n     * @param hash Entry's hash.\n     *\n     * @returns Retrieval result.\n     */\n    get(hash: string): GlyphCacheEntry | undefined {\n        return this.m_entryCache.get(hash);\n    }\n\n    /**\n     * Clears the internal LRUCache.\n     */\n    clear(): void {\n        this.m_copyGeometryDrawCount = 0;\n        this.m_clearGeometryDrawCount = 0;\n        this.m_entryCache.clear();\n        this.m_copyTextureSet.clear();\n        this.initCacheEntries();\n    }\n\n    /**\n     * Updates the internal WebGLRenderTarget.\n     * The update will copy the newly introduced glyphs since the previous update.\n     *\n     * @param renderer WebGLRenderer.\n     */\n    update(renderer: THREE.WebGLRenderer): void {\n        let oldRenderTarget: THREE.RenderTarget | null = null;\n\n        const willClearGeometry = this.m_clearGeometryDrawCount > 0;\n        const willCopyGeometry = this.m_copyGeometryDrawCount > 0;\n\n        if (willClearGeometry || willCopyGeometry) {\n            oldRenderTarget = renderer.getRenderTarget();\n            renderer.setRenderTarget(this.m_rt);\n        }\n\n        if (willClearGeometry) {\n            if (this.m_clearGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n            }\n            this.m_clearPositionAttribute.needsUpdate = true;\n            this.m_clearPositionAttribute.updateRange.offset = 0;\n            this.m_clearPositionAttribute.updateRange.count = this.m_clearGeometryDrawCount * 8;\n            this.m_clearGeometry.index.needsUpdate = true;\n            this.m_clearGeometry.index.updateRange.offset = 0;\n            this.m_clearGeometry.index.updateRange.count = this.m_clearGeometryDrawCount * 6;\n            this.m_clearGeometry.setDrawRange(0, this.m_clearGeometryDrawCount * 6);\n\n            this.m_clearMesh.visible = true;\n            this.m_copyMesh.visible = false;\n\n            renderer.render(this.m_scene, this.m_camera);\n            this.m_clearGeometryDrawCount = 0;\n            this.m_clearMesh.visible = false;\n        }\n\n        if (willCopyGeometry) {\n            if (this.m_copyGeometry.index === null) {\n                throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n            }\n            this.m_copyVertexBuffer.needsUpdate = true;\n            this.m_copyVertexBuffer.updateRange.offset = 0;\n            this.m_copyVertexBuffer.updateRange.count = this.m_copyGeometryDrawCount * 20;\n            this.m_copyGeometry.index.needsUpdate = true;\n            this.m_copyGeometry.index.updateRange.offset = 0;\n            this.m_copyGeometry.index.updateRange.count = this.m_copyGeometryDrawCount * 6;\n            this.m_copyGeometry.setDrawRange(0, this.m_copyGeometryDrawCount * 6);\n\n            this.m_copyMesh.visible = true;\n            const srcPages = Array.from(this.m_copyTextureSet);\n            const nCopies = Math.ceil(this.m_copyTextureSet.size / MAX_NUM_COPY_PAGES);\n            for (let copyIndex = 0; copyIndex < nCopies; copyIndex++) {\n                const pageOffset = copyIndex * MAX_NUM_COPY_PAGES;\n                this.m_copyMaterial.uniforms.pageOffset.value = pageOffset;\n                for (let i = 0; i < MAX_NUM_COPY_PAGES; i++) {\n                    const pageIndex = pageOffset + i;\n                    if (pageIndex < this.m_copyTextureSet.size) {\n                        this.m_copyMaterial.uniforms[\"page\" + i].value = srcPages[pageIndex];\n                    }\n                }\n\n                renderer.render(this.m_scene, this.m_camera);\n            }\n            this.m_copyTextureSet.clear();\n            this.m_copyGeometryDrawCount = 0;\n        }\n        if (willClearGeometry || willCopyGeometry) {\n            renderer.setRenderTarget(oldRenderTarget);\n        }\n    }\n\n    private initCacheEntries() {\n        const dummyMetrics: FontMetrics = {\n            size: 0,\n            distanceRange: 0,\n            base: 0,\n            lineHeight: 0,\n            lineGap: 0,\n            capHeight: 0,\n            xHeight: 0\n        };\n        const dummyFont: Font = {\n            name: \"\",\n            metrics: dummyMetrics,\n            charset: \"\"\n        };\n\n        const dummyGlyphData = new GlyphData(\n            0,\n            \"\",\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            THREE.Texture.DEFAULT_IMAGE,\n            dummyFont\n        );\n\n        for (let i = 0; i < this.m_cacheHeight; i++) {\n            for (let j = 0; j < this.m_cacheWidth; j++) {\n                const dummyEntry: GlyphCacheEntry = {\n                    glyphData: dummyGlyphData,\n                    location: new THREE.Vector2(j, i)\n                };\n                this.m_entryCache.set(`Dummy_${i * this.m_cacheHeight + j}`, dummyEntry);\n            }\n        }\n    }\n\n    private copyGlyphToCache(hash: string, glyph: GlyphData, cacheLocation: THREE.Vector2) {\n        this.m_copyTextureSet.add(glyph.texture);\n        let copyTextureIndex = 0;\n        for (const value of this.m_copyTextureSet.values()) {\n            if (value === glyph.texture) {\n                break;\n            }\n            copyTextureIndex++;\n        }\n        glyph.copyIndex = copyTextureIndex;\n\n        this.m_copyTransform.set(\n            1.0,\n            0.0,\n            cacheLocation.x * this.entryWidth - glyph.offsetX,\n            0.0,\n            1.0,\n            cacheLocation.y * this.entryHeight - glyph.positions[0].y,\n            0.0,\n            0.0,\n            0.0\n        );\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositions[i].set(glyph.positions[i].x, glyph.positions[i].y);\n            this.m_copyPositions[i].applyMatrix3(this.m_copyTransform);\n        }\n\n        if (this.m_copyGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_copyGeometryDrawCount * 4;\n        const baseIndex = this.m_copyGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_copyPositionAttribute.setXYZ(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y,\n                glyph.copyIndex\n            );\n            this.m_copyUVAttribute.setXY(\n                baseVertex + i,\n                glyph.sourceTextureCoordinates[i].x,\n                glyph.sourceTextureCoordinates[i].y\n            );\n        }\n\n        if (this.m_copyGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache copy geometry index is uninitialized!\");\n        }\n        this.m_copyGeometry.index.setX(baseIndex, baseVertex);\n        this.m_copyGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_copyGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_copyGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_copyGeometryDrawCount;\n\n        const u0 = this.m_copyPositions[0].x / this.m_textureSize.x;\n        const v0 = this.m_copyPositions[0].y / this.m_textureSize.y;\n        const u1 = this.m_copyPositions[3].x / this.m_textureSize.x;\n        const v1 = this.m_copyPositions[3].y / this.m_textureSize.y;\n        glyph.dynamicTextureCoordinates[0].set(u0, v0);\n        glyph.dynamicTextureCoordinates[1].set(u1, v0);\n        glyph.dynamicTextureCoordinates[2].set(u0, v1);\n        glyph.dynamicTextureCoordinates[3].set(u1, v1);\n\n        glyph.isInCache = true;\n        this.m_entryCache.set(hash, {\n            glyphData: glyph,\n            location: cacheLocation\n        });\n    }\n\n    private clearCacheEntry(entry: GlyphCacheEntry) {\n        entry.glyphData.isInCache = false;\n        this.m_copyPositions[0].set(\n            entry.location.x * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[1].set(\n            (entry.location.x + 1) * this.entryWidth,\n            entry.location.y * this.entryHeight\n        );\n        this.m_copyPositions[2].set(\n            entry.location.x * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n        this.m_copyPositions[3].set(\n            (entry.location.x + 1) * this.entryWidth,\n            (entry.location.y + 1) * this.entryHeight\n        );\n\n        if (this.m_clearGeometryDrawCount >= this.capacity) {\n            return;\n        }\n        const baseVertex = this.m_clearGeometryDrawCount * 4;\n        const baseIndex = this.m_clearGeometryDrawCount * 6;\n\n        for (let i = 0; i < 4; ++i) {\n            this.m_clearPositionAttribute.setXY(\n                baseVertex + i,\n                this.m_copyPositions[i].x,\n                this.m_copyPositions[i].y\n            );\n        }\n\n        if (this.m_clearGeometry.index === null) {\n            throw new Error(\"GlyphTextureCache clear geometry index is uninitialized!\");\n        }\n        this.m_clearGeometry.index.setX(baseIndex, baseVertex);\n        this.m_clearGeometry.index.setX(baseIndex + 1, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 2, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 3, baseVertex + 2);\n        this.m_clearGeometry.index.setX(baseIndex + 4, baseVertex + 1);\n        this.m_clearGeometry.index.setX(baseIndex + 5, baseVertex + 3);\n\n        ++this.m_clearGeometryDrawCount;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\n\n/** @hidden */\nexport class Entry<Key, Value> {\n    constructor(\n        public key: Key,\n        public value: Value,\n        public size: number,\n        public newer: Entry<Key, Value> | null,\n        public older: Entry<Key, Value> | null\n    ) {}\n}\n\n/**\n * Fixed size cache that evicts its entries in least-recently-used order when it overflows.\n * Modeled after standard JavaScript `Map` otherwise.\n */\nexport class LRUCache<Key, Value> {\n    /**\n     * Optional callback that is called on every item that is evicted from the cache.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    evictionCallback?: (key: Key, value: Value) => void;\n\n    /**\n     * Optional callback that is called on every item that should be evicted from the cache to\n     * determine if it can be removed, or should be locked in the cache.\n     *\n     * It returns `true` if the item can be removed from cache, `false` otherwise. Locking items in\n     * the cache should be a temporary measure, since if the cache is filled with non-evictable\n     * items only, it may grow beyond its capacity.\n     *\n     * **Note**: This callback is not called when an item is explicitly deleted from the map via\n     * [[delete]] or [[clear]].\n     */\n    canEvict?: (key: Key, value: Value) => boolean;\n    private m_capacity: number;\n    private m_size = 0;\n\n    /**\n     * The internal map object that keeps the key-value pairs and their order.\n     */\n    private m_map = new Map<Key, Entry<Key, Value>>();\n\n    /**\n     * The newest entry, i.e. the most recently used item.\n     */\n    private m_newest: Entry<Key, Value> | null = null;\n\n    /**\n     * The oldest entry, i.e. the least recently used item.\n     */\n    private m_oldest: Entry<Key, Value> | null = null;\n\n    /**\n     * A function determining the size per element.\n     */\n    private m_sizeFunction: (v: Value) => number;\n\n    /**\n     * Creates a new instance of `LRUCache`.\n     *\n     * The optional [[sizeFunction]] can be used to fine tune the memory consumption of all cached\n     * elements, thus [[cacheCapacity]] means then memory used (in MBs). Otherwise, if\n     * [[sizeFunction]] is not specified, the [[cacheCapacity]] accounts for the maximum\n     * number of elements stored.\n     *\n     * @param cacheCapacity Number used to configure the maximum cache size, may express\n     * number of entries or memory consumed in megabytes depending on [[sizeFunction]].\n     * @param sizeFunction A function determining the size per element.\n     */\n    constructor(cacheCapacity: number, sizeFunction: (v: Value) => number = () => 1) {\n        this.m_capacity = cacheCapacity;\n        this.m_sizeFunction = sizeFunction;\n    }\n\n    /**\n     * Iterates over all items from the most recently used item to the least recently used one.\n     *\n     * **Note**: Results are undefined if the entire cache is modified during iteration. You may\n     * although modify the current element in [[callbackfn]] function.\n     *\n     * @param callbackfn The callback to call for each item.\n     * @param thisArg Optional this argument for the callback.\n     */\n    forEach(\n        callbackfn: (value: Value, key: Key, map: LRUCache<Key, Value>) => void,\n        thisArg?: any\n    ): void {\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const older = entry.older;\n            callbackfn.call(thisArg, entry.value, entry.key, this);\n            entry = older;\n        }\n    }\n\n    /**\n     * The size of the cache, i.e. the sum of all the sizes of all the objects in the cache.\n     *\n     * @returns The size of the cache.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Returns the maximum capacity of the cache, i.e. the maximum number of elements this cache\n     * can contain or the total amount of memory that may be consumed by cache if element size\n     * function was specified in cache c-tor.\n     *\n     * @returns The capacity of the cache.\n     */\n    get capacity(): number {\n        return this.m_capacity;\n    }\n\n    /**\n     * @deprecated - DO NOT USE. Will be removed in future versions.\n     *\n     * Returns the internal map object that keeps the key-value pairs and their order.\n     *\n     * @returns The internal map object.\n     */\n    get map(): Map<Key, Entry<Key, Value>> {\n        // ### TODO - remove me. Cache must not expose its internal object,\n        // modifications to it are fatal for the internal state machine.\n        return this.m_map;\n    }\n\n    /**\n     * Returns the newest entry in the cache.\n     *\n     * @returns Newest entry in the cache.\n     */\n    get newest(): Entry<Key, Value> | null {\n        return this.m_newest;\n    }\n\n    /**\n     * Returns the oldest entry in the cache.\n     *\n     * Note: Does not promote the oldest item as most recently used item.\n     *\n     * @returns Oldest entry in the cache.\n     */\n    get oldest(): Entry<Key, Value> | null {\n        return this.m_oldest;\n    }\n\n    /**\n     * Resets the capacity of this cache. If `newCapacity` is smaller than the current cache size,\n     * all items will be evicted until the cache shrinks to `newCapacity`.\n     *\n     * @param newCapacity The new capacity of this cache.\n     */\n    setCapacity(newCapacity: number): void {\n        this.m_capacity = newCapacity;\n        this.evict();\n    }\n\n    /**\n     * Resets the cache capacity and function used to measure the element size.\n     *\n     * @param newCapacity The new capacity masured in units returned from [[sizeMeasure]] funtion.\n     * @param sizeMeasure Function that defines the size of element, if you want to measure\n     * number of elements only always return 1 from this function (default), you may also\n     * specify own function that measures entries by memory consumed, nubmer of sub-elements, etc.\n     */\n    setCapacityAndMeasure(newCapacity: number, sizeMeasure: (v: Value) => number = () => 1) {\n        this.m_capacity = newCapacity;\n        this.m_sizeFunction = sizeMeasure;\n        this.shrinkToCapacity();\n    }\n\n    /**\n     * Updates the size of all elements in this cache. If their aggregated size is larger than the\n     * capacity, items will be evicted until the cache shrinks to fit the capacity.\n     */\n    shrinkToCapacity(): void {\n        let size = 0;\n        const sizeFunction = this.m_sizeFunction;\n\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entrySize = sizeFunction(entry.value);\n            entry.size = entrySize;\n            size += entrySize;\n            entry = entry.older;\n        }\n\n        this.m_size = size;\n        this.evict();\n    }\n\n    /**\n     * Inserts or updates a key/value pair in the cache.\n     *\n     * If the key already existed in the cache, it will be updated and promoted to the most recently\n     * used item.\n     *\n     * If the key didn't exist in the cache, it will be inserted as most recently used item. An\n     * eviction of the least recently used item takes place if the cache exceeded its capacity.\n     *\n     * @param key The key for the key-value pair to insert or update.\n     * @param value The value for the key-value pair to insert or update.\n     */\n    set(key: Key, value: Value) {\n        const valueSize = this.m_sizeFunction(value);\n        let entry = this.m_map.get(key);\n        if (entry !== undefined) {\n            this.m_size = this.m_size - entry.size + valueSize;\n            entry.value = value;\n            entry.size = valueSize;\n            this.promoteEntry(entry);\n            this.evict();\n        } else {\n            if (valueSize > this.m_capacity) {\n                return; // single item too big to cache\n            }\n\n            entry = new Entry<Key, Value>(key, value, valueSize, null, null);\n            if (this.m_map.size === 0) {\n                this.m_newest = this.m_oldest = entry;\n            } else {\n                assert(this.m_newest !== null);\n                const newest: Entry<Key, Value> = this.m_newest!;\n                entry.older = this.m_newest;\n                newest.newer = entry;\n                this.m_newest = entry;\n            }\n            this.m_map.set(key, entry);\n            this.m_size += valueSize;\n            this.evict();\n        }\n    }\n\n    /**\n     * Looks up key in the cache and returns the associated value.\n     *\n     * @param key The key to look up.\n     * @returns The associated value, or `undefined` if the key-value pair is not in the cache.\n     */\n    get(key: Key): Value | undefined {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return undefined;\n        }\n\n        this.promoteEntry(entry);\n        return entry.value;\n    }\n\n    /**\n     * Test if a key/value pair is in the cache.\n     *\n     * @param key The key to look up.\n     * @returns `true` if the key-value pair is in the cache, `false` otherwise.\n     */\n    has(key: Key): boolean {\n        return this.m_map.has(key);\n    }\n\n    /**\n     * Clears the cache and removes all stored key-value pairs.\n     *\n     * Does not call the eviction callback. Use [[evictAll]] to clear the cache and call the\n     * eviction callback.\n     */\n    clear(): void {\n        this.m_newest = this.m_oldest = null;\n        this.m_size = 0;\n        this.m_map.clear();\n    }\n\n    /**\n     * Evicts all items from the cache, calling the eviction callback on each item.\n     *\n     * Use [[clear]] to remove all items without calling the eviction callback.\n     */\n    evictAll(): void {\n        const cb = this.evictionCallback;\n        if (cb !== undefined) {\n            this.forEach((value, key) => cb(key, value));\n        }\n        this.clear();\n    }\n\n    /**\n     * Evict selected elements from the cache using [[selector]] function.\n     *\n     * @param selector The function for selecting elements for eviction.\n     * @param thisArg Optional _this_ object reference.\n     */\n    evictSelected(selector: (value: Value, key: Key) => boolean, thisArg?: any) {\n        const cb = this.evictionCallback;\n        let entry = this.m_newest;\n        while (entry !== null) {\n            const entryOlder = entry.older;\n            if (selector.call(thisArg, entry.value, entry.key)) {\n                if (cb !== undefined) {\n                    cb(entry.key, entry.value);\n                }\n                this.deleteEntry(entry);\n                this.m_map.delete(entry.key);\n            }\n            entry = entryOlder;\n        }\n    }\n\n    /**\n     * Explicitly removes a key-value pair from the cache.\n     *\n     * **Note**: This is an explicit removal, thus, the eviction callback will not be called.\n     *\n     * @param key The key of the key-value pair to delete.\n     * @returns `true` if the key-value pair existed and was deleted, `false` otherwise.\n     */\n    delete(key: Key): boolean {\n        const entry = this.m_map.get(key);\n        if (entry === undefined) {\n            return false;\n        }\n        this.deleteEntry(entry);\n        return this.m_map.delete(key);\n    }\n\n    protected evict() {\n        while (this.m_oldest !== null && this.m_size > this.m_capacity) {\n            const evicted = this.evictOldest();\n            if (evicted === undefined) {\n                return;\n            }\n        }\n    }\n\n    protected evictOldest(): Entry<Key, Value> | undefined {\n        assert(this.m_oldest !== null);\n        const oldest = this.m_oldest!;\n        assert(oldest.older === null);\n        let itemToRemove = oldest;\n\n        if (this.canEvict !== undefined) {\n            while (!this.canEvict(itemToRemove.key, itemToRemove.value)) {\n                if (itemToRemove.newer === null) {\n                    return undefined;\n                }\n                itemToRemove = itemToRemove.newer;\n            }\n        }\n\n        if (itemToRemove === oldest) {\n            this.m_oldest = itemToRemove.newer;\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = null;\n            }\n        } else {\n            if (itemToRemove.newer !== null) {\n                assert(itemToRemove.newer.older === itemToRemove);\n                itemToRemove.newer.older = itemToRemove.older;\n                if (itemToRemove.older !== null) {\n                    itemToRemove.older.newer = itemToRemove.newer;\n                }\n            } else {\n                return undefined;\n            }\n        }\n\n        const isOk = this.m_map.delete(itemToRemove.key);\n        assert(isOk === true);\n        if (isOk && this.evictionCallback !== undefined) {\n            this.evictionCallback(itemToRemove.key, itemToRemove.value);\n        }\n        this.m_size -= itemToRemove.size;\n        return itemToRemove;\n    }\n\n    private deleteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            this.m_newest = entry.older;\n        } else if (entry.newer) {\n            entry.newer.older = entry.older;\n        } else {\n            assert(false);\n        }\n\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        } else if (entry.older) {\n            entry.older.newer = entry.newer;\n        } else {\n            assert(false);\n        }\n\n        this.m_size -= entry.size;\n    }\n\n    private promoteEntry(entry: Entry<Key, Value>): void {\n        if (entry === this.m_newest) {\n            return;\n        } // already newest, nothing to do\n\n        // re-link newer and older items\n        if (entry.newer) {\n            assert(entry.newer.older === entry);\n            entry.newer.older = entry.older;\n        }\n        if (entry.older) {\n            assert(entry.older.newer === entry);\n            entry.older.newer = entry.newer;\n        }\n        if (entry === this.m_oldest) {\n            this.m_oldest = entry.newer;\n        }\n        // re-link ourselves\n        entry.newer = null;\n        entry.older = this.m_newest;\n\n        // finally, set ourselves as the newest entry\n        assert(this.m_newest !== null);\n        const newest = this.m_newest!;\n        assert(newest.newer === null);\n        newest.newer = entry;\n        this.m_newest = entry;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { FontCatalog } from \"./rendering/FontCatalog\";\nimport { GlyphData } from \"./rendering/GlyphData\";\nimport { TextBufferObject } from \"./rendering/TextBufferObject\";\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT, TextGeometry } from \"./rendering/TextGeometry\";\nimport { SdfTextMaterial } from \"./rendering/TextMaterials\";\nimport { FontVariant, TextLayoutStyle, TextRenderStyle } from \"./rendering/TextStyle\";\nimport { LineTypesetter } from \"./typesetting/LineTypesetter\";\nimport { PathTypesetter, PathTypesettingParameters } from \"./typesetting/PathTypesetter\";\nimport { TypesettingParameters } from \"./typesetting/Typesetter\";\nimport { createSdfTextMaterial } from \"./utils/MaterialUtils\";\n\nconst tempTextPosition = new THREE.Vector3();\nconst tempTextBounds = {\n    array: [new THREE.Box2()],\n    offset: 0\n};\nlet tempVertexBuffer = new Float32Array();\n\ninterface TextPlacementParameters {\n    input: string | GlyphData[];\n    layer: TextCanvasLayer;\n    textPath?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n    textPathOverflow?: boolean;\n    bounds?: THREE.Box2;\n    individualBounds?: THREE.Box2[];\n    computeTextBuffer?: boolean;\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`measureText` function call.\n */\nexport interface MeasurementParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: THREE.Box2[];\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addText` function call.\n */\nexport interface AdditionParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Layer where text will be added.\n     */\n    layer?: number;\n\n    /**\n     * If `true`, the input position parameter will be updated to contain the position of the last\n     * glyph added.\n     */\n    updatePosition?: boolean;\n\n    /**\n     * Object containing additional data intended to be retrieved during picking.\n     */\n    pickingData?: any;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`createTextBufferObject` function call.\n */\nexport interface TextBufferCreationParameters {\n    /**\n     * Path where text should be placed on. Overrides the original position parameter.\n     */\n    path?: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow?: boolean;\n\n    /**\n     * Output text bounding-box.\n     */\n    outputBounds?: boolean;\n\n    /**\n     * Output per-character bounds.\n     */\n    outputCharacterBounds?: boolean;\n\n    /**\n     * Array containing info on whether the glyphs are upper or lower case. Needed to support\n     * `SmallCaps`.\n     */\n    letterCaseArray?: boolean[];\n\n    /**\n     * If `true`, both the [[TextRenderStyle]] and [[TextLayoutStyle]] used to generate the\n     * [[TextBufferObject]] will be stored in it.\n     */\n    storeStyles?: boolean;\n}\n\n/**\n * Optional parameters passed on [[TextCanvas]].`addTextBufferObject` function call.\n */\nexport interface TextBufferAdditionParameters {\n    layer?: number;\n    position?: THREE.Vector3;\n    scale?: number;\n    rotation?: number;\n    color?: THREE.Color;\n    opacity?: number;\n    backgroundColor?: THREE.Color;\n    backgroundOpacity?: number;\n    pickingData?: any;\n}\n\n/**\n * Default's [[TextCanvas]] layer identifier.\n */\nexport const DEFAULT_TEXT_CANVAS_LAYER = 0;\n\n/**\n * [[TextCanvas]] rendering layer.\n */\nexport interface TextCanvasLayer {\n    id: number;\n    storage: TextGeometry;\n}\n\n/**\n * [[TextCanvas]] construction parameters.\n */\nexport interface TextCanvasParameters {\n    /**\n     * WebGLRenderer internally used by this `TextCanvas`.\n     */\n    renderer: THREE.WebGLRenderer;\n\n    /**\n     * Initial [[FontCatalog]].\n     */\n    fontCatalog: FontCatalog;\n\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    maxGlyphCount: number;\n\n    /**\n     * Material used to render text.\n     */\n    material?: THREE.Material;\n\n    /**\n     * Material used to render text background.\n     */\n    backgroundMaterial?: THREE.Material;\n}\n\n/**\n * Describes estimated usage of memory on heap and GPU.\n */\nexport interface MemoryUsage {\n    heapSize: number;\n    gpuSize: number;\n}\n\n/**\n * three.js text rendering engine which can manage and render high-quality, transformable, stylable\n * and properly layout SDF and MSDF text.\n */\nexport class TextCanvas {\n    /**\n     * Minimum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly minGlyphCount: number;\n\n    /**\n     * Maximum amount of glyphs each [[TextCanvas]] layer can store.\n     */\n    readonly maxGlyphCount: number;\n\n    private m_renderer: THREE.WebGLRenderer;\n    private m_fontCatalog: FontCatalog;\n\n    private readonly m_defaultTextRenderStyle: TextRenderStyle;\n    private m_currentTextRenderStyle: TextRenderStyle;\n    private readonly m_defaultTextLayoutStyle: TextLayoutStyle;\n    private m_currentTextLayoutStyle: TextLayoutStyle;\n\n    private m_material: SdfTextMaterial | THREE.Material;\n    private m_bgMaterial: SdfTextMaterial | THREE.Material;\n    private m_ownsMaterial: boolean;\n    private m_ownsBgMaterial: boolean;\n\n    private m_defaultLayer: TextCanvasLayer;\n    private m_layers: TextCanvasLayer[];\n\n    private m_lineTypesetter: LineTypesetter;\n    private m_pathTypesetter: PathTypesetter;\n\n    /**\n     * Constructs a new `TextCanvas`.\n     *\n     * @param params `TextCanvas` construction parameters.\n     *\n     * @returns New `TextCanvas`.\n     */\n    constructor(params: TextCanvasParameters) {\n        this.m_renderer = params.renderer;\n        this.m_fontCatalog = params.fontCatalog;\n        this.minGlyphCount = params.minGlyphCount;\n        this.maxGlyphCount = params.maxGlyphCount;\n\n        if (params.material === undefined) {\n            this.m_ownsMaterial = true;\n            this.m_material = createSdfTextMaterial({ fontCatalog: params.fontCatalog });\n        } else {\n            this.m_ownsMaterial = false;\n            this.m_material = params.material;\n        }\n        if (params.backgroundMaterial === undefined) {\n            this.m_ownsBgMaterial = true;\n            this.m_bgMaterial = createSdfTextMaterial({\n                fontCatalog: params.fontCatalog,\n                isBackground: true\n            });\n        } else {\n            this.m_ownsBgMaterial = false;\n            this.m_bgMaterial = params.backgroundMaterial;\n        }\n\n        this.m_defaultLayer = {\n            id: DEFAULT_TEXT_CANVAS_LAYER,\n            storage: new TextGeometry(\n                new THREE.Scene(),\n                this.m_material,\n                this.m_bgMaterial,\n                this.minGlyphCount,\n                this.maxGlyphCount\n            )\n        };\n        this.m_layers = [this.m_defaultLayer];\n\n        this.m_defaultTextRenderStyle = new TextRenderStyle();\n        this.m_currentTextRenderStyle = this.m_defaultTextRenderStyle;\n        this.m_defaultTextLayoutStyle = new TextLayoutStyle();\n        this.m_currentTextLayoutStyle = this.m_defaultTextLayoutStyle;\n\n        this.m_lineTypesetter = new LineTypesetter();\n        this.m_pathTypesetter = new PathTypesetter();\n    }\n\n    /**\n     * Currently active [[FontCatalog]].\n     */\n    get fontCatalog(): FontCatalog {\n        return this.m_fontCatalog;\n    }\n    set fontCatalog(value: FontCatalog) {\n        this.m_fontCatalog = value;\n\n        const material = this.m_material as THREE.RawShaderMaterial;\n        material.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        material.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        material.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n\n        const bgMaterial = this.m_bgMaterial as THREE.RawShaderMaterial;\n        bgMaterial.uniforms.sdfTexture.value = this.m_fontCatalog.texture;\n        bgMaterial.uniforms.sdfParams.value = new THREE.Vector4(\n            this.m_fontCatalog.textureSize.x,\n            this.m_fontCatalog.textureSize.y,\n            this.m_fontCatalog.size,\n            this.m_fontCatalog.distanceRange\n        );\n        bgMaterial.defines.MSDF = this.m_fontCatalog.type === \"msdf\" ? 1.0 : 0.0;\n    }\n\n    /**\n     * Currently active text rendering material.\n     */\n    get material(): THREE.Material {\n        return this.m_material;\n    }\n    set material(value: THREE.Material) {\n        if (this.m_ownsMaterial) {\n            this.m_material.dispose();\n            this.m_ownsMaterial = false;\n        }\n\n        this.m_material = value;\n        for (const layer of this.m_layers) {\n            layer.storage.mesh.material = this.m_material;\n        }\n    }\n\n    /**\n     * Currently active text background rendering material.\n     */\n    get backgroundMaterial(): THREE.Material {\n        return this.m_bgMaterial;\n    }\n    set backgroundMaterial(value: THREE.Material) {\n        if (this.m_ownsBgMaterial) {\n            this.m_bgMaterial.dispose();\n            this.m_ownsBgMaterial = false;\n        }\n\n        this.m_bgMaterial = value;\n        for (const layer of this.m_layers) {\n            layer.storage.backgroundMesh.material = this.m_bgMaterial;\n        }\n    }\n\n    /**\n     * Currently active text rendering style.\n     */\n    get textRenderStyle(): TextRenderStyle {\n        return this.m_currentTextRenderStyle;\n    }\n    set textRenderStyle(style: TextRenderStyle) {\n        this.m_currentTextRenderStyle = style;\n    }\n\n    /**\n     * Currently active text layout style.\n     */\n    get textLayoutStyle(): TextLayoutStyle {\n        return this.m_currentTextLayoutStyle;\n    }\n    set textLayoutStyle(style: TextLayoutStyle) {\n        this.m_currentTextLayoutStyle = style;\n    }\n\n    /**\n     * Clears all the placed glyphs in this `TextCanvas` (as well as resetting the current style).\n     */\n    clear() {\n        for (const layer of this.m_layers) {\n            layer.storage.clear();\n        }\n        this.m_currentTextRenderStyle = this.m_defaultTextRenderStyle;\n    }\n\n    /**\n     * Renders the content of this `TextCanvas`.\n     *\n     * @param camera Orthographic camera.\n     * @param target Optional render target.\n     * @param clear Optional render target clear operation.\n     */\n    render(camera: THREE.OrthographicCamera, target?: THREE.WebGLRenderTarget, clear?: boolean) {\n        this.m_fontCatalog.update(this.m_renderer);\n        let oldTarget: THREE.RenderTarget | null = null;\n        if (target !== undefined) {\n            oldTarget = this.m_renderer.getRenderTarget();\n            this.m_renderer.setRenderTarget(target);\n        }\n        if (clear === true) {\n            this.m_renderer.clear(true);\n        }\n        for (const layer of this.m_layers) {\n            layer.storage.update();\n            this.m_renderer.clear(false, true);\n            this.m_renderer.render(layer.storage.scene, camera);\n        }\n        if (target !== undefined) {\n            this.m_renderer.setRenderTarget(oldTarget);\n        }\n    }\n\n    /**\n     * Creates a new `TextCanvas` rendering layer and returns. If there was already a layer for the\n     * input `layerId`, it just returns this one instead.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Created [[TextCanvasLayer]].\n     */\n    addLayer(layerId: number): TextCanvasLayer {\n        let result = this.getLayer(layerId);\n        if (result === undefined) {\n            result = {\n                id: layerId,\n                storage: new TextGeometry(\n                    new THREE.Scene(),\n                    this.m_material,\n                    this.m_bgMaterial,\n                    this.minGlyphCount,\n                    this.maxGlyphCount\n                )\n            };\n\n            this.m_layers.push(result);\n            this.m_layers.sort((a: TextCanvasLayer, b: TextCanvasLayer) => {\n                return a.id - b.id;\n            });\n        }\n        return result;\n    }\n\n    /**\n     * Retrieves a specific `TextCanvas` rendering layer.\n     *\n     * @param layerId Desired layer identifier.\n     *\n     * @returns Selected [[TextCanvasLayer]].\n     */\n    getLayer(layerId: number): TextCanvasLayer | undefined {\n        return this.m_layers.find(layer => layer.id === layerId);\n    }\n\n    /**\n     * Retrieves all `TextCanvas` rendering layers.\n     *\n     * @returns Array of [[TextCanvasLayer]]s.\n     */\n    getAllLayers(): TextCanvasLayer[] {\n        return this.m_layers;\n    }\n\n    /**\n     * Returns the computed bounding box for the input text. The current [[TextRenderStyle]] and\n     * [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param outputBounds Output text bounding box.\n     * @param params Optional measurement parameters.\n     *\n     * @returns Result of the measurement. If `false`, some error occurred during execution and the\n     * input text couldn't be properly measured.\n     */\n    measureText(\n        text: string | GlyphData[],\n        outputBounds: THREE.Box2,\n        params?: MeasurementParameters\n    ): boolean {\n        tempTextPosition.set(0, 0, 0);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let outputCharacterBounds;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            outputCharacterBounds = params.outputCharacterBounds;\n            if (params.path !== undefined) {\n                const pathOrigin = params.path.getPoint(0);\n                if (pathOrigin === null) {\n                    return false;\n                }\n                tempTextPosition.set(pathOrigin.x, pathOrigin.y, 0.0);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n\n        return this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: outputBounds,\n            individualBounds: outputCharacterBounds,\n            letterCaseArray: upperCaseArray\n        });\n    }\n\n    /**\n     * Adds the input text to this `TextCanvas` in the specified screen position. The current\n     * [[TextRenderStyle]] and [[TextLayoutStyle]] will influence the results of this function.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param position Screen position.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addText(\n        text: string | GlyphData[],\n        position: THREE.Vector3,\n        params?: AdditionParameters\n    ): boolean {\n        tempTextPosition.copy(position);\n\n        let path;\n        let pathOverflow;\n        let upperCaseArray;\n        let targetLayer = this.m_defaultLayer;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            if (params.path !== undefined) {\n                tempTextPosition.set(0, 0, tempTextPosition.z);\n            }\n            if (params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = this.placeText({\n            input: text,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            layer: targetLayer,\n            letterCaseArray: upperCaseArray\n        });\n        if (result && params !== undefined) {\n            if (params.updatePosition === true) {\n                position.copy(tempTextPosition);\n            }\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Creates a new [[TextBufferObject]]. The computed text vertex buffer is equivalent to the\n     * result of performing the `addText` function for the input text in the screen origin.\n     *\n     * @param text Input text. Provide an array of [[GlyphData]] for better performance.\n     * @param params Optional creation parameters.\n     *\n     * @returns New [[TextBufferObject]] (or `undefined` if requested text glyphs couldn't be\n     * retrieved from the current [[FontCatalog]]).\n     */\n    createTextBufferObject(\n        text: string | GlyphData[],\n        params?: TextBufferCreationParameters\n    ): TextBufferObject | undefined {\n        tempTextPosition.set(0, 0, 0);\n\n        let glyphArray;\n        let upperCaseArray: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof text !== \"string\") {\n            glyphArray = text;\n            if (params !== undefined && params.letterCaseArray) {\n                upperCaseArray = params.letterCaseArray;\n            }\n        } else {\n            upperCaseArray = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                text,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? upperCaseArray : undefined\n            );\n            if (glyphArray === undefined) {\n                return undefined;\n            }\n        }\n\n        let path;\n        let pathOverflow;\n        let textBounds;\n        let characterBounds;\n        let renderStyle;\n        let layoutStyle;\n        if (params !== undefined) {\n            path = params.path;\n            pathOverflow = params.pathOverflow;\n            if (params.outputBounds === true) {\n                textBounds = new THREE.Box2();\n            }\n            if (params.outputCharacterBounds === true) {\n                characterBounds = [];\n            }\n            if (params.storeStyles === true) {\n                renderStyle = this.m_currentTextRenderStyle;\n                layoutStyle = this.m_currentTextLayoutStyle;\n            }\n        }\n\n        this.placeText({\n            input: text,\n            layer: this.m_defaultLayer,\n            computeTextBuffer: true,\n            textPath: path,\n            textPathOverflow: pathOverflow,\n            bounds: textBounds,\n            individualBounds: characterBounds,\n            letterCaseArray: upperCaseArray\n        });\n\n        return new TextBufferObject(\n            glyphArray,\n            new Float32Array(tempVertexBuffer),\n            textBounds,\n            characterBounds,\n            renderStyle,\n            layoutStyle\n        );\n    }\n\n    /**\n     * Adds a previously created [[TextBufferObject]] to the `TextCanvas`. Additional parameters can\n     * be provided to override the attributes stored in the buffer.\n     *\n     * @param textBufferObject [[TextBufferObject]] to add.\n     * @param params Optional addition parameters.\n     *\n     * @returns Result of the addition. If `false`, some error occurred during execution and the\n     * input text couldn't be properly added.\n     */\n    addTextBufferObject(\n        textBufferObject: TextBufferObject,\n        params?: TextBufferAdditionParameters\n    ): boolean {\n        let targetLayer = this.m_defaultLayer;\n        let position;\n        let scale;\n        let rotation;\n        let color;\n        let opacity;\n        let bgColor;\n        let bgOpacity;\n\n        if (params !== undefined) {\n            if (params.layer !== undefined) {\n                let tempLayer = this.getLayer(params.layer);\n                if (tempLayer === undefined) {\n                    tempLayer = this.addLayer(params.layer);\n                }\n                targetLayer = tempLayer;\n            }\n            position = params.position;\n            scale = params.scale;\n            rotation = params.rotation;\n            color = params.color;\n            opacity = params.opacity;\n            bgColor = params.backgroundColor;\n            bgOpacity = params.backgroundOpacity;\n        }\n        const prevDrawCount = targetLayer.storage.drawCount;\n\n        const result = targetLayer.storage.addTextBufferObject(\n            textBufferObject,\n            position,\n            scale,\n            rotation,\n            color,\n            opacity,\n            bgColor,\n            bgOpacity\n        );\n        if (result && params !== undefined) {\n            if (params.pickingData !== undefined) {\n                targetLayer.storage.addPickingData(\n                    prevDrawCount,\n                    targetLayer.storage.drawCount,\n                    params.pickingData\n                );\n            }\n        } else if (!result) {\n            (targetLayer.storage as any).m_drawCount = prevDrawCount;\n        }\n        return result;\n    }\n\n    /**\n     * Executes the `pickCallback` for all previously stored picking data for text covering the\n     * specified screen position.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     */\n    pickText(position: THREE.Vector2, callback: (pickData: any | undefined) => void): void {\n        for (const layer of this.m_layers) {\n            layer.storage.pick(position, callback);\n        }\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `TextCanvas`.\n     *\n     * @param info The info object to increment with the values from this `TextCanvas`.\n     */\n    getMemoryUsage(info: MemoryUsage) {\n        this.m_fontCatalog.updateMemoryUsage(info);\n\n        for (const layer of this.m_layers) {\n            layer.storage.updateMemoryUsage(info);\n        }\n    }\n\n    // Places all glyphs for input text. Depending on parameters, it can store the resulting glyphs\n    // in the current [[TextGeometry]] (or into a separate buffer) or compute the bounding box for\n    // the input (as a whole or on a per-character basis).\n    private placeText(params: TextPlacementParameters): boolean {\n        if (params.input.length === 0 || this.m_currentTextLayoutStyle.maxLines! === 0) {\n            if (params.bounds !== undefined) {\n                params.bounds.min.set(0, 0);\n                params.bounds.max.set(0, 0);\n            }\n            if (params.individualBounds !== undefined) {\n                params.individualBounds.length = 0;\n            }\n            return true;\n        }\n\n        let glyphArray;\n        let smallCapsTransformations: boolean[] | undefined;\n        const smallCapsEnabled =\n            this.m_currentTextRenderStyle.fontVariant === FontVariant.SmallCaps;\n        if (typeof params.input !== \"string\") {\n            glyphArray = params.input;\n            if (params.letterCaseArray) {\n                smallCapsTransformations = params.letterCaseArray;\n            }\n        } else {\n            smallCapsTransformations = [];\n            glyphArray = this.m_fontCatalog.getGlyphs(\n                params.input,\n                this.m_currentTextRenderStyle,\n                smallCapsEnabled ? smallCapsTransformations : undefined\n            );\n            if (glyphArray === undefined) {\n                return false;\n            }\n        }\n\n        let glyphBounds;\n        if (params.individualBounds !== undefined) {\n            tempTextBounds.array = params.individualBounds;\n            tempTextBounds.offset = 0;\n            glyphBounds = tempTextBounds;\n        }\n        if (params.bounds !== undefined) {\n            params.bounds.min.set(Infinity, Infinity);\n            params.bounds.max.set(-Infinity, -Infinity);\n        }\n        if (params.computeTextBuffer === true) {\n            tempVertexBuffer = new Float32Array(glyphArray.length * QUAD_VERTEX_MEMORY_FOOTPRINT);\n        }\n\n        const isPath = params.textPath !== undefined;\n        const typesettingParams: TypesettingParameters | PathTypesettingParameters = {\n            glyphs: glyphArray,\n            fontCatalog: this.m_fontCatalog,\n            textRenderStyle: this.m_currentTextRenderStyle,\n            textLayoutStyle: this.m_currentTextLayoutStyle,\n            position: tempTextPosition,\n            geometry: params.layer.storage,\n            smallCapsArray: smallCapsEnabled ? smallCapsTransformations : undefined,\n            globalBounds: params.bounds,\n            individualBounds: glyphBounds,\n            vertexBuffer: params.computeTextBuffer === true ? tempVertexBuffer : undefined\n        };\n\n        let result = true;\n        if (isPath) {\n            Object.assign(typesettingParams as PathTypesettingParameters, {\n                path: params.textPath,\n                pathOverflow: params.textPathOverflow === true\n            });\n            result = this.m_pathTypesetter.arrangeGlyphs(\n                typesettingParams as PathTypesettingParameters\n            );\n        } else {\n            result = this.m_lineTypesetter.arrangeGlyphs(typesettingParams);\n        }\n        if (glyphBounds !== undefined) {\n            glyphBounds.array.length = glyphBounds.offset;\n        }\n\n        return result;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant, WrappingMode } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * [[Typesetter]] implementation that handles multi-line complex layout text.\n */\nexport class LineTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_currentParams?: TypesettingParameters;\n\n    /**\n     * Creates a `LineTypesetter` object.\n     *\n     * @returns New `LineTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `LineTypesetter`. Text will be placed into multiple\n     * bidirectional lines, that will be generated taking into account [[textLayoutStyle]] features,\n     * such as:\n     * - Maximum line width.\n     * - Word and character wrapping.\n     * - Maximum number of lines.\n     * - Vertical and horizontal alignment.\n     * - Leading (spacing between lines).\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: TypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_currentParams.position.y +=\n            this.m_currentParams.textLayoutStyle.verticalAlignment *\n            this.m_currentParams.glyphs[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // Compute line origin and height.\n        const origin = this.m_currentParams.position.x;\n        const lineHeight =\n            this.m_currentParams.glyphs[0].font.metrics.lineHeight +\n            this.m_currentParams.textLayoutStyle.leading;\n\n        // Initialize line-breaking and wrapping variables.\n        let lineStartIdx = 0;\n        let glyphWrapIdx = 0;\n        let wordWrapIdx = 0;\n        let lineStartX = 0;\n        let lineCurrX = 0;\n        let glyphWrapX = 0;\n        let wordWrapX = 0;\n\n        let lineCount = 0;\n        let isBidirectionalLine = false;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            if (lineCount > this.m_currentParams.textLayoutStyle.maxLines - 1) {\n                break;\n            }\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            const isNewLine = UnicodeUtils.isNewLine(glyphData.codePoint);\n            const isWhiteSpace = UnicodeUtils.isWhiteSpace(glyphData.codePoint);\n\n            // Check if this line should be treated as bidirectional.\n            if (!isBidirectionalLine && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectionalLine = true;\n            }\n            // Advance the line's current X offset (only for printable characters).\n            if (UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                lineCurrX +=\n                    (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                    this.m_tempScale *\n                    (this.m_tempSmallCaps\n                        ? TypesettingUtils.getSmallCapsScale(\n                              this.m_currentParams.glyphs,\n                              this.m_currentParams.smallCapsArray!,\n                              i,\n                              this.m_currentParams.textRenderStyle.fontVariant\n                          )\n                        : 1.0);\n            }\n            // If this is the first character in a line, update the line's X offset values (needed\n            // to properly center and wrap).\n            if (i === lineStartIdx) {\n                lineStartX = lineCurrX;\n                glyphWrapX = lineCurrX;\n                wordWrapX = lineCurrX;\n            }\n\n            // Check if should break the current line.\n            if (\n                isNewLine ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Character &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth) ||\n                (this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    lineCurrX > this.m_currentParams.textLayoutStyle.lineWidth &&\n                    wordWrapX !== lineStartX)\n            ) {\n                // Perform wrapping.\n                if (this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None) {\n                    let wrapPointIdx = glyphWrapIdx;\n                    let wrapPointX = glyphWrapX;\n                    // Only wrap words when more than a single word fits into the current line.\n                    if (\n                        this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                        wordWrapX !== lineStartX\n                    ) {\n                        wrapPointIdx = wordWrapIdx;\n                        wrapPointX = wordWrapX;\n                    }\n\n                    lineCurrX = wrapPointX;\n                    i = Math.min(\n                        isNewLine ? (lineStartIdx === i ? wrapPointIdx : i) : wrapPointIdx,\n                        this.m_currentParams.glyphs.length - 1\n                    );\n                }\n\n                // Calculate the correct starting position for the line base on alignment, and place\n                // all glyphs in it.\n                const lineAlignment =\n                    this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                        ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                        : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n                this.m_currentParams.position.x =\n                    this.m_currentParams.position.x + lineCurrX * lineAlignment;\n                if (\n                    !this.placeLine(lineStartIdx, i, this.m_tempLineDirection, isBidirectionalLine)\n                ) {\n                    return false;\n                }\n\n                // Update the line position.\n                this.m_currentParams.position.y -= lineHeight * this.m_tempScale;\n                this.m_currentParams.position.x = origin;\n\n                // Find the beginning of a new line (removing trailing white spaces).\n                while (\n                    i !== lineStartIdx &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint)\n                ) {\n                    ++i;\n                }\n                lineStartIdx = i + 1;\n                if (lineStartIdx === this.m_currentParams.glyphs.length) {\n                    break;\n                }\n\n                // Only reset the line's direction when a new line character is found (to keep\n                // correct bidirectional behaviour when a bidirectional run is placed between\n                // multiple lines).\n                if (isNewLine) {\n                    this.m_tempLineDirection = TypesettingUtils.getDirection(\n                        this.m_currentParams.glyphs,\n                        lineStartIdx\n                    );\n                    this.m_tempRunDirection = this.m_tempLineDirection;\n                }\n\n                // Reset the line placement parameters.\n                lineStartX = 0;\n                lineCurrX = 0;\n                glyphWrapIdx = lineStartIdx;\n                glyphWrapX = 0;\n                wordWrapIdx = lineStartIdx;\n                wordWrapX = 0;\n                isBidirectionalLine = false;\n                lineCount++;\n            }\n            // If not, should if we should record any new wrapping points.\n            else if (\n                this.m_currentParams.textLayoutStyle.wrappingMode !== WrappingMode.None &&\n                !isWhiteSpace\n            ) {\n                // Update the per-glyph wrapping point.\n                glyphWrapIdx = i;\n                glyphWrapX = lineCurrX;\n\n                // Update the word wrapping point (only if mode is correctly set and we are\n                // currently placed at the end of a word).\n                if (\n                    this.m_currentParams.textLayoutStyle.wrappingMode === WrappingMode.Word &&\n                    i + 1 < this.m_currentParams.glyphs.length &&\n                    (UnicodeUtils.isWhiteSpace(this.m_currentParams.glyphs[i + 1].codePoint) ||\n                        UnicodeUtils.isNewLine(this.m_currentParams.glyphs[i + 1].codePoint))\n                ) {\n                    wordWrapIdx = i;\n                    wordWrapX = lineCurrX;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters, place a final line.\n        if (\n            lineCount <= this.m_currentParams.textLayoutStyle.maxLines - 1 &&\n            lineStartIdx <= this.m_currentParams.glyphs.length - 1\n        ) {\n            const offset =\n                this.m_tempLineDirection === UnicodeUtils.Direction.RTL && isBidirectionalLine\n                    ? 1.0 + this.m_currentParams.textLayoutStyle.horizontalAlignment\n                    : this.m_currentParams.textLayoutStyle.horizontalAlignment;\n            this.m_currentParams.position.setX(\n                this.m_currentParams.position.x + lineCurrX * offset\n            );\n            if (\n                !this.placeLine(\n                    lineStartIdx,\n                    this.m_currentParams.glyphs.length - 1,\n                    this.m_tempLineDirection,\n                    isBidirectionalLine\n                )\n            ) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place characters alongside a line. Text direction is taken into account, and text is broken\n    // into directional runs.\n    private placeLine(\n        startIdx: number,\n        endIdx: number,\n        direction: UnicodeUtils.Direction,\n        isBidirectional: boolean\n    ): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(startIdx, endIdx, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n\n        // Initialize line placement parameters.\n        const isRTL = direction === UnicodeUtils.Direction.RTL;\n        const origin = position.x;\n        let offset = 0;\n        let runStart = startIdx;\n\n        for (let i = startIdx; i <= endIdx; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (isRTL) {\n                    position.x = origin + offset;\n                }\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n                if (!isRTL) {\n                    position.x = origin + offset;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (isRTL) {\n                        position.x = origin + offset;\n                    }\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n                    if (!isRTL) {\n                        position.x = origin + offset;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n\n            // Advance the offset position in the line.\n            offset +=\n                (glyphData.advanceX + textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          glyphDataArray,\n                          smallCapsArray!,\n                          i,\n                          textRenderStyle.fontVariant\n                      )\n                    : 1.0) *\n                direction;\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart <= endIdx) {\n            if (isRTL) {\n                position.x = origin + offset;\n            }\n            if (!this.placeRun(runStart, endIdx, this.m_tempRunDirection)) {\n                return false;\n            }\n            if (!isRTL) {\n                position.x = origin + offset;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                position,\n                glyphScale,\n                textLayoutStyle.canvasRotation,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Advance the current position and proceed to next glyph in the run.\n            position.set(\n                position.x +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.cos(textLayoutStyle.lineRotation),\n                position.y +\n                    (glyphData.advanceX + textLayoutStyle.tracking) *\n                        glyphScale *\n                        Math.sin(textLayoutStyle.lineRotation),\n                position.z\n            );\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { QUAD_VERTEX_MEMORY_FOOTPRINT } from \"../rendering/TextGeometry\";\nimport { FontStyle, FontVariant } from \"../rendering/TextStyle\";\nimport { TypesettingUtils } from \"../utils/TypesettingUtils\";\nimport { UnicodeUtils } from \"../utils/UnicodeUtils\";\nimport { Typesetter, TypesettingParameters } from \"./Typesetter\";\n\n/**\n * @hidden\n * Parameters passed when placing glyphs using [[PathTypesetter]]'s `arrangeGlyphs` function.\n */\nexport interface PathTypesettingParameters extends TypesettingParameters {\n    /**\n     * Path to be followed when arranging glyphs.\n     */\n    path: THREE.Path | THREE.CurvePath<THREE.Vector2>;\n\n    /**\n     * If `true`, text on a path will be placed even when its size its bigger than the path's size.\n     */\n    pathOverflow: boolean;\n}\n\n/**\n * [[Typesetter]] implementation that arranges glyphs alongside a specified path.\n */\nexport class PathTypesetter implements Typesetter {\n    private m_tempTransform: THREE.Matrix3;\n    private m_tempCorners: THREE.Vector3[];\n    private m_tempLineDirection: UnicodeUtils.Direction;\n    private m_tempRunDirection: UnicodeUtils.Direction;\n    private m_tempPixelSize: number;\n    private m_tempPixelBgSize: number;\n    private m_tempScale: number;\n    private m_tempSmallCaps: boolean;\n\n    private m_tempPathPosition: THREE.Vector3;\n    private m_tempPathLength: number;\n    private m_tempPathOffset: number;\n\n    private m_currentParams?: PathTypesettingParameters;\n\n    /**\n     * Creates a `PathTypesetter` object.\n     *\n     * @returns New `PathTypesetter`.\n     */\n    constructor() {\n        this.m_tempTransform = new THREE.Matrix3();\n        this.m_tempCorners = [\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3(),\n            new THREE.Vector3()\n        ];\n        this.m_tempLineDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempRunDirection = UnicodeUtils.Direction.LTR;\n        this.m_tempPixelSize = 1.0;\n        this.m_tempPixelBgSize = 1.0;\n        this.m_tempScale = 1.0;\n        this.m_tempSmallCaps = false;\n\n        this.m_tempPathPosition = new THREE.Vector3();\n        this.m_tempPathLength = 0.0;\n        this.m_tempPathOffset = 0.0;\n    }\n\n    /**\n     * Arranges the specified glyphs using this `PathTypesetter`. Text will be placed into a single\n     * bidirectional line that follows the specified path. Characters will be orientated and placed\n     * alongside this path following [[TextLayout]]'s [[VerticalAlignment]] and\n     * [[HorizontalAlignment]].\n     *\n     * @param params Typesetting parameters.\n     *\n     * @returns If `false`, some error occurred during execution and the output should be dismissed.\n     */\n    arrangeGlyphs(params: PathTypesettingParameters): boolean {\n        // Initializes common typesetting parameters (used across all functions in this class).\n        this.m_currentParams = params;\n        this.m_tempLineDirection = TypesettingUtils.getDirection(this.m_currentParams.glyphs, 0);\n        this.m_tempRunDirection = this.m_tempLineDirection;\n        this.m_tempPixelSize = TypesettingUtils.getPixelSize(\n            this.m_currentParams.textRenderStyle.fontSize.size,\n            this.m_currentParams.textRenderStyle.fontSize.unit,\n            this.m_currentParams.fontCatalog.size\n        );\n        this.m_tempScale = this.m_tempPixelSize / this.m_currentParams.fontCatalog.size;\n        this.m_tempPixelBgSize = Math.min(\n            TypesettingUtils.getPixelSize(\n                this.m_currentParams.textRenderStyle.fontSize.backgroundSize,\n                this.m_currentParams.textRenderStyle.fontSize.unit,\n                this.m_currentParams.fontCatalog.size\n            ),\n            this.m_currentParams!.fontCatalog.distanceRange * this.m_tempScale\n        );\n        this.m_tempSmallCaps = this.m_currentParams!.smallCapsArray !== undefined;\n\n        this.m_tempPathLength = this.m_currentParams.path.getLength();\n        this.m_tempPathOffset = 0.0;\n\n        const isOnlyMeasured =\n            this.m_currentParams.globalBounds !== undefined &&\n            this.m_currentParams.vertexBuffer === undefined;\n\n        // To be able to properly set the horizontal alignment on a path, we need to first retrieve\n        // how much of the path the input text covers, so we can calculate the correct initial\n        // offset.\n        let isBidirectional = false;\n        let pathWidth = 0.0;\n        for (let i = 0; i < this.m_currentParams.glyphs.length; ++i) {\n            const glyphData = this.m_currentParams.glyphs[i];\n            if (!glyphData.isInCache && !isOnlyMeasured) {\n                return false;\n            }\n\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n            if (!isBidirectional && glyphData.direction === -this.m_tempLineDirection) {\n                isBidirectional = true;\n            }\n\n            pathWidth +=\n                (glyphData.advanceX + this.m_currentParams.textLayoutStyle.tracking) *\n                this.m_tempScale *\n                (this.m_tempSmallCaps\n                    ? TypesettingUtils.getSmallCapsScale(\n                          this.m_currentParams.glyphs,\n                          this.m_currentParams.smallCapsArray!,\n                          i,\n                          this.m_currentParams.textRenderStyle.fontVariant\n                      )\n                    : 1.0);\n        }\n        this.m_tempPathOffset = Math.min(\n            Math.max(\n                -this.m_currentParams.textLayoutStyle.horizontalAlignment +\n                    (this.m_currentParams.textLayoutStyle.horizontalAlignment * pathWidth) /\n                        this.m_tempPathLength,\n                0\n            ),\n            1\n        );\n\n        // Place the input text as a single path line.\n        return this.placeLine(this.m_tempLineDirection, isBidirectional);\n    }\n\n    // Place characters alongside a path line. Text direction is taken into account, and text is\n    // broken into directional runs.\n    private placeLine(direction: UnicodeUtils.Direction, isBidirectional: boolean): boolean {\n        // If the line is not bidirectional, place it as a single directional run.\n        if (!isBidirectional) {\n            return this.placeRun(0, this.m_currentParams!.glyphs.length - 1, direction);\n        }\n\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n\n        // Initialize line placement parameters.\n        let runStart = 0;\n        for (let i = runStart; i < glyphDataArray.length; ++i) {\n            const glyphData = glyphDataArray[i];\n\n            // If the current glyph changes the line direction, place the current run.\n            if (glyphData.direction === -this.m_tempRunDirection) {\n                if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                    return false;\n                }\n\n                runStart = i;\n                this.m_tempRunDirection *= -1.0;\n            }\n            // If the current glyph has neutral direction (i.e. white space) and we're in the middle\n            // of a run with direction opposite to the line's main direction, check for the closest\n            // strong direction in the run.\n            else if (\n                glyphData.direction === UnicodeUtils.Direction.Neutral &&\n                this.m_tempRunDirection === -direction\n            ) {\n                let neutralIdx = i;\n                while (\n                    neutralIdx + 1 < glyphDataArray.length &&\n                    Math.abs(glyphDataArray[neutralIdx].direction) !== 1\n                ) {\n                    ++neutralIdx;\n                }\n\n                // If the closest strong direction in the run is not the current run's direction,\n                // place the current run.\n                if (glyphDataArray[neutralIdx].direction !== this.m_tempRunDirection) {\n                    if (!this.placeRun(runStart, i - 1, this.m_tempRunDirection)) {\n                        return false;\n                    }\n\n                    runStart = i;\n                    this.m_tempRunDirection *= -1.0;\n                }\n            }\n        }\n\n        // If we still haven't placed all characters in the line, place a final run.\n        if (runStart < glyphDataArray.length) {\n            if (!this.placeRun(runStart, glyphDataArray.length - 1, this.m_tempRunDirection)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Place a directional run of index inside a path line.\n    private placeRun(startIdx: number, endIdx: number, direction: UnicodeUtils.Direction): boolean {\n        // Gather common typesetting parameters.\n        const glyphDataArray = this.m_currentParams!.glyphs;\n        const smallCapsArray = this.m_currentParams!.smallCapsArray;\n        const fontCatalog = this.m_currentParams!.fontCatalog;\n        const textRenderStyle = this.m_currentParams!.textRenderStyle;\n        const textLayoutStyle = this.m_currentParams!.textLayoutStyle;\n        const position = this.m_currentParams!.position;\n        const geometry = this.m_currentParams!.geometry;\n        const globalBounds = this.m_currentParams!.globalBounds;\n        const individualBounds = this.m_currentParams!.individualBounds;\n        const vertexBuffer = this.m_currentParams!.vertexBuffer;\n        const path = this.m_currentParams!.path;\n\n        const defaultGlyphRotation = textRenderStyle.rotation;\n        const normalDisplacement =\n            textLayoutStyle.verticalAlignment *\n            glyphDataArray[0].font.metrics.capHeight *\n            this.m_tempScale;\n\n        // Move through the glyph array following the run's direction (as the order of the glyphs in\n        // memory might not match the order on glyphs on scree).\n        const start = direction === UnicodeUtils.Direction.LTR ? startIdx : endIdx;\n        const end = direction === UnicodeUtils.Direction.LTR ? endIdx : startIdx;\n        for (\n            let i = start;\n            direction === UnicodeUtils.Direction.RTL ? i >= end : i <= end;\n            i += direction\n        ) {\n            // Only process printable characters.\n            const glyphData = glyphDataArray[i];\n            if (!UnicodeUtils.isPrintable(glyphData.codePoint)) {\n                continue;\n            }\n\n            // When placing a RTL run, we need to check for weak runs (numerical runs of characters\n            // that don't change the overall run direction, but should always be displayed as LTR\n            // text).\n            if (\n                startIdx !== endIdx &&\n                i !== 0 &&\n                direction === UnicodeUtils.Direction.RTL &&\n                glyphData.direction === UnicodeUtils.Direction.Weak\n            ) {\n                let weakRunStart = i;\n                let weakGlyph = glyphDataArray[weakRunStart - 1];\n                while (\n                    weakRunStart !== startIdx &&\n                    (weakGlyph.direction === UnicodeUtils.Direction.Weak ||\n                        (weakGlyph.direction === UnicodeUtils.Direction.Neutral &&\n                            !UnicodeUtils.isWhiteSpace(weakGlyph.codePoint)))\n                ) {\n                    --weakRunStart;\n                    weakGlyph = glyphDataArray[weakRunStart - 1];\n                }\n\n                this.placeRun(Math.max(weakRunStart, startIdx), i, UnicodeUtils.Direction.LTR);\n\n                i = weakRunStart;\n                continue;\n            }\n\n            // Compute various rendering parameters for this glyph.\n            const glyphFont = glyphData.font;\n            const glyphFontMetrics = glyphFont.metrics;\n            const fontStyle = textRenderStyle.fontStyle;\n\n            const isBoldEmulated =\n                (fontStyle === FontStyle.Bold && glyphFont.bold === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.bold === undefined &&\n                    glyphFont.boldItalic === undefined);\n            const isItalicEmulated =\n                (fontStyle === FontStyle.Italic && glyphFont.italic === undefined) ||\n                (fontStyle === FontStyle.BoldItalic &&\n                    glyphFont.italic === undefined &&\n                    glyphFont.boldItalic === undefined);\n\n            const isSmallCaps = this.m_tempSmallCaps\n                ? smallCapsArray![i] && textRenderStyle.fontVariant === FontVariant.SmallCaps\n                : false;\n            const smallCapsScale = isSmallCaps\n                ? glyphFontMetrics.xHeight / glyphFontMetrics.capHeight\n                : 1.0;\n            const glyphScale = this.m_tempScale * smallCapsScale;\n\n            const emulationWeight =\n                ((isBoldEmulated ? 0.02 : 0.0) + (isSmallCaps ? 0.01 : 0.0)) *\n                (fontCatalog.size / fontCatalog.distanceRange);\n            const bgWeight =\n                (0.5 * this.m_tempPixelBgSize!) /\n                (fontCatalog.distanceRange * Math.max(glyphScale, 1.0));\n            const isMirrored =\n                UnicodeUtils.isRtlMirrored(glyphData.codePoint) &&\n                direction === UnicodeUtils.Direction.RTL;\n\n            const verticalOffset =\n                glyphFontMetrics.lineHeight -\n                glyphFontMetrics.base -\n                glyphFontMetrics.distanceRange * 0.5;\n\n            // Update the current interpolated path position and angle.\n            const textPoint = path.getPoint(this.m_tempPathOffset);\n            if (textPoint === null) {\n                return this.m_currentParams!.pathOverflow;\n            }\n            const tangent = path.getTangent(this.m_tempPathOffset);\n            const normal = new THREE.Vector2(-tangent.y, tangent.x).multiplyScalar(\n                normalDisplacement\n            );\n            const angle = Math.atan2(tangent.y, tangent.x);\n            this.m_tempPathPosition.set(normal.x + textPoint.x, normal.y + textPoint.y, position.z);\n            textRenderStyle.rotation = defaultGlyphRotation + angle;\n\n            // Compute the glyphs transformation matrix and apply to all corners of a glyph.\n            TypesettingUtils.computeGlyphTransform(\n                this.m_tempTransform,\n                this.m_tempPathPosition,\n                glyphScale,\n                0.0,\n                textRenderStyle.rotation\n            );\n            for (let j = 0; j < 4; ++j) {\n                const glyphVertexPosition = glyphData.positions[j];\n                const horizontalOffset =\n                    isItalicEmulated && j > 1\n                        ? TypesettingUtils.OBLIQUE_OFFSET * glyphFontMetrics.size\n                        : 0.0;\n                this.m_tempCorners[j].set(\n                    glyphVertexPosition.x + horizontalOffset,\n                    glyphVertexPosition.y - verticalOffset,\n                    glyphVertexPosition.z\n                );\n                this.m_tempCorners[j].applyMatrix3(this.m_tempTransform);\n\n                this.m_tempCorners[j].x -= position.x;\n                this.m_tempCorners[j].y -= position.y;\n            }\n\n            // Depending on the typesetting options, add the computed glyph to the TextGeometry or\n            // update the text bounds.\n            if (globalBounds === undefined && vertexBuffer === undefined) {\n                if (\n                    !geometry.add(\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    )\n                ) {\n                    return false;\n                }\n            } else {\n                if (globalBounds !== undefined) {\n                    TypesettingUtils.updateBounds(\n                        this.m_tempCorners,\n                        globalBounds,\n                        individualBounds\n                    );\n                }\n                if (vertexBuffer !== undefined) {\n                    geometry.addToBuffer(\n                        vertexBuffer,\n                        i * QUAD_VERTEX_MEMORY_FOOTPRINT,\n                        glyphData,\n                        this.m_tempCorners,\n                        emulationWeight,\n                        emulationWeight + bgWeight,\n                        isMirrored,\n                        textRenderStyle\n                    );\n                }\n            }\n\n            // Restore the original glyph rotation.\n            textRenderStyle.rotation = defaultGlyphRotation;\n\n            // Advance the current position and proceed to next glyph in the run.\n            this.m_tempPathOffset +=\n                ((glyphData.advanceX + textLayoutStyle.tracking) * glyphScale) /\n                this.m_tempPathLength;\n        }\n\n        return true;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nenum ContextualForm {\n    Initial,\n    Medial,\n    Final\n}\n\nenum CombinedForm {\n    Isolated,\n    Connected\n}\n\n/**\n * Converter between arabic isolated forms (in Unicode Block 'Arabic') and their contextual forms\n * (in Unicode Block 'Arabic Presentation Forms-B').\n */\nexport class ContextualArabicConverter {\n    private static m_instance: ContextualArabicConverter;\n    static get instance(): ContextualArabicConverter {\n        if (this.m_instance === undefined) {\n            this.m_instance = new ContextualArabicConverter();\n        }\n        return this.m_instance;\n    }\n\n    private m_singleCharactersMap: Map<number, ReadonlyArray<number | undefined>> = new Map();\n    private m_combinedCharactersMap: Map<\n        number,\n        Map<number, ReadonlyArray<number | undefined>>\n    > = new Map();\n    private m_neutralCharacters: number[];\n\n    private constructor() {\n        // Single characters.\n        this.m_singleCharactersMap.set(0x0621, [undefined, undefined, undefined]); // HAMZA\n        this.m_singleCharactersMap.set(0x0622, [undefined, undefined, 0xfe82]); // ALEF_MADDA\n        this.m_singleCharactersMap.set(0x0623, [undefined, undefined, 0xfe84]); // ALEF_HAMZA_ABOVE\n        this.m_singleCharactersMap.set(0x0624, [undefined, undefined, 0xfe86]); // WAW_HAMZA\n        this.m_singleCharactersMap.set(0x0625, [undefined, undefined, 0xfe88]); // ALEF_HAMZA_BELOW\n        this.m_singleCharactersMap.set(0x0626, [0xfe8b, 0xfe8c, 0xfe8a]); // YEH_HAMZA\n        this.m_singleCharactersMap.set(0x0627, [undefined, undefined, 0xfe8e]); // ALEF\n        this.m_singleCharactersMap.set(0x0628, [0xfe91, 0xfe92, 0xfe90]); // BEH\n        this.m_singleCharactersMap.set(0x0629, [undefined, undefined, 0xfe94]); // TEH_MARBUTA\n        this.m_singleCharactersMap.set(0x062a, [0xfe97, 0xfe98, 0xfe96]); // TEH\n        this.m_singleCharactersMap.set(0x062b, [0xfe9b, 0xfe9c, 0xfe9a]); // THEH\n        this.m_singleCharactersMap.set(0x062c, [0xfe9f, 0xfea0, 0xfe9e]); // JEEM\n        this.m_singleCharactersMap.set(0x062d, [0xfea3, 0xfea4, 0xfea2]); // HAH\n        this.m_singleCharactersMap.set(0x062e, [0xfea7, 0xfea8, 0xfea6]); // KHAH\n        this.m_singleCharactersMap.set(0x062f, [undefined, undefined, 0xfeaa]); // DAL\n        this.m_singleCharactersMap.set(0x0630, [undefined, undefined, 0xfeac]); // THAL\n        this.m_singleCharactersMap.set(0x0631, [undefined, undefined, 0xfeae]); // REH\n        this.m_singleCharactersMap.set(0x0632, [undefined, undefined, 0xfeb0]); // ZAIN\n        this.m_singleCharactersMap.set(0x0633, [0xfeb3, 0xfeb4, 0xfeb2]); // SEEN\n        this.m_singleCharactersMap.set(0x0634, [0xfeb7, 0xfeb8, 0xfeb6]); // SHEEN\n        this.m_singleCharactersMap.set(0x0635, [0xfebb, 0xfebc, 0xfeba]); // SAD\n        this.m_singleCharactersMap.set(0x0636, [0xfebf, 0xfec0, 0xfebe]); // DAD\n        this.m_singleCharactersMap.set(0x0637, [0xfec3, 0xfec4, 0xfec2]); // TAH\n        this.m_singleCharactersMap.set(0x0638, [0xfec7, 0xfec8, 0xfec6]); // ZAH\n        this.m_singleCharactersMap.set(0x0639, [0xfecb, 0xfecc, 0xfeca]); // AIN\n        this.m_singleCharactersMap.set(0x063a, [0xfecf, 0xfed0, 0xfece]); // GHAIN\n        this.m_singleCharactersMap.set(0x0640, [0x0640, 0x0640, 0x0640]); // TATWEEL\n        this.m_singleCharactersMap.set(0x0641, [0xfed3, 0xfed4, 0xfed2]); // FEH\n        this.m_singleCharactersMap.set(0x0642, [0xfed7, 0xfed8, 0xfed6]); // QAF\n        this.m_singleCharactersMap.set(0x0643, [0xfedb, 0xfedc, 0xfeda]); // KAF\n        this.m_singleCharactersMap.set(0x0644, [0xfedf, 0xfee0, 0xfede]); // LAM\n        this.m_singleCharactersMap.set(0x0645, [0xfee3, 0xfee4, 0xfee2]); // MEEM\n        this.m_singleCharactersMap.set(0x0646, [0xfee7, 0xfee8, 0xfee6]); // NOON\n        this.m_singleCharactersMap.set(0x0647, [0xfeeb, 0xfeec, 0xfeea]); // HEH\n        this.m_singleCharactersMap.set(0x0648, [undefined, undefined, 0xfeee]); // WAW\n        this.m_singleCharactersMap.set(0x0649, [undefined, undefined, 0xfef0]); // ALEF_MAKSURA\n        this.m_singleCharactersMap.set(0x064a, [0xfef3, 0xfef4, 0xfef2]); // YEH\n        this.m_singleCharactersMap.set(0x067e, [0xfb58, 0xfb59, 0xfb57]); // PEH\n        this.m_singleCharactersMap.set(0x06cc, [0xfbfe, 0xfbff, 0xfbfd]); // Farsi Yeh\n        this.m_singleCharactersMap.set(0x0686, [0xfb7c, 0xfb7d, 0xfb7b]); // Tcheh\n        this.m_singleCharactersMap.set(0x06a9, [0xfb90, 0xfb91, 0xfb8f]); // Keheh\n        this.m_singleCharactersMap.set(0x06af, [0xfb94, 0xfb95, 0xfb93]); // Gaf\n        this.m_singleCharactersMap.set(0x0698, [undefined, undefined, 0xfb8b]); // Jeh\n\n        // Combined characters.\n        this.m_combinedCharactersMap.set(0x0644, new Map());\n        // LAM_ALEF_MADDA\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0622, [0xfef5, 0xfef6]);\n        // LAM_ALEF_HAMZA_ABOVE\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0623, [0xfef7, 0xfef8]);\n        // LAM_ALEF_HAMZA_BELOW\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0625, [0xfef9, 0xfefa]);\n        // LAM_ALEF\n        this.m_combinedCharactersMap.get(0x0644)!.set(0x0627, [0xfefb, 0xfefc]);\n\n        // Neutral characters.\n        this.m_neutralCharacters = [\n            0x0610, // ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM\n            0x0612, // ARABIC SIGN ALAYHE ASSALLAM\n            0x0613, // ARABIC SIGN RADI ALLAHOU ANHU\n            0x0614, // ARABIC SIGN TAKHALLUS\n            0x0615, // ARABIC SMALL HIGH TAH\n            0x064b, // ARABIC FATHATAN\n            0x064c, // ARABIC DAMMATAN\n            0x064d, // ARABIC KASRATAN\n            0x064e, // ARABIC FATHA\n            0x064f, // ARABIC DAMMA\n            0x0650, // ARABIC KASRA\n            0x0651, // ARABIC SHADDA\n            0x0652, // ARABIC SUKUN\n            0x0653, // ARABIC MADDAH ABOVE\n            0x0654, // ARABIC HAMZA ABOVE\n            0x0655, // ARABIC HAMZA BELOW\n            0x0656, // ARABIC SUBSCRIPT ALEF\n            0x0657, // ARABIC INVERTED DAMMA\n            0x0658, // ARABIC MARK NOON GHUNNA\n            0x0670, // ARABIC LETTER SUPERSCRIPT ALEF\n            0x06d6, // ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA\n            0x06d7, // ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA\n            0x06d8, // ARABIC SMALL HIGH MEEM INITIAL FORM\n            0x06d9, // ARABIC SMALL HIGH LAM ALEF\n            0x06da, // ARABIC SMALL HIGH JEEM\n            0x06db, // ARABIC SMALL HIGH THREE DOTS\n            0x06dc, // ARABIC SMALL HIGH SEEN\n            0x06df, // ARABIC SMALL HIGH ROUNDED ZERO\n            0x06e0, // ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO\n            0x06e1, // ARABIC SMALL HIGH DOTLESS HEAD OF KHAH\n            0x06e2, // ARABIC SMALL HIGH MEEM ISOLATED FORM\n            0x06e3, // ARABIC SMALL LOW SEEN\n            0x06e4, // ARABIC SMALL HIGH MADDA\n            0x06e7, // ARABIC SMALL HIGH YEH\n            0x06e8, // ARABIC SMALL HIGH NOON\n            0x06ea, // ARABIC EMPTY CENTRE LOW STOP\n            0x06eb, // ARABIC EMPTY CENTRE HIGH STOP\n            0x06ec, // ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE\n            0x06ed // ARABIC SMALL LOW MEEM\n        ];\n    }\n\n    /**\n     * Converts isolated arabic characters into their contextual form.\n     *\n     * @param input String with isolated arabic characters.\n     */\n    convert(input: string): string {\n        let output = \"\";\n        for (let i = 0; i < input.length; ++i) {\n            const currentCodePoint = input.charCodeAt(i);\n\n            // Only process arabic characters in the map.\n            if (this.isArabicCharacter(currentCodePoint)) {\n                // Find the first previous non-neutral character.\n                let prevIndex = i - 1;\n                for (; prevIndex >= 0; --prevIndex) {\n                    if (!this.isNeutral(input.charCodeAt(prevIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the previous character has ligatures with following characters.\n                let prevCodePoint = prevIndex >= 0 ? input.charCodeAt(prevIndex) : undefined;\n                if (prevCodePoint !== undefined) {\n                    const prevMap = this.getCharacterMap(prevCodePoint);\n                    if (\n                        prevMap === undefined ||\n                        (prevMap[ContextualForm.Initial] === undefined &&\n                            prevMap[ContextualForm.Medial] === undefined)\n                    ) {\n                        prevCodePoint = undefined;\n                    }\n                }\n\n                // Find the first next non-neutral character.\n                let nextIndex = i + 1;\n                for (; nextIndex < input.length; ++nextIndex) {\n                    if (!this.isNeutral(input.charCodeAt(nextIndex))) {\n                        break;\n                    }\n                }\n\n                // Check if the next character has ligatures with previous characters.\n                let nextCodePoint =\n                    nextIndex < input.length ? input.charCodeAt(nextIndex) : undefined;\n                if (nextCodePoint !== undefined) {\n                    const nextMap = this.getCharacterMap(nextCodePoint);\n                    if (\n                        nextMap === undefined ||\n                        (nextMap[ContextualForm.Medial] === undefined &&\n                            nextMap[ContextualForm.Final] === undefined)\n                    ) {\n                        nextCodePoint = undefined;\n                    }\n                }\n\n                // Check for Lam Alef combinated forms.\n                if (\n                    currentCodePoint === 0x0644 &&\n                    nextCodePoint !== undefined &&\n                    (nextCodePoint === 0x0622 ||\n                        nextCodePoint === 0x0623 ||\n                        nextCodePoint === 0x0625 ||\n                        nextCodePoint === 0x0627)\n                ) {\n                    const combinedMap = this.getCombinedCharacterMap(\n                        currentCodePoint,\n                        nextCodePoint\n                    )!;\n                    if (prevCodePoint !== undefined) {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Connected]!);\n                    } else {\n                        output += String.fromCharCode(combinedMap[CombinedForm.Isolated]!);\n                    }\n\n                    // Skip the next character and continue.\n                    ++i;\n                    continue;\n                }\n\n                // Check for single character contextual forms.\n                const map = this.getCharacterMap(currentCodePoint)!;\n                // Intermediate.\n                if (\n                    prevCodePoint !== undefined &&\n                    nextCodePoint !== undefined &&\n                    map[ContextualForm.Medial] !== undefined\n                ) {\n                    output += String.fromCharCode(map[ContextualForm.Medial]!);\n                }\n                // Final.\n                else if (prevCodePoint !== undefined && map[ContextualForm.Final] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Final]!);\n                }\n                // Initial.\n                else if (nextCodePoint !== undefined && map[ContextualForm.Initial] !== undefined) {\n                    output += String.fromCharCode(map[ContextualForm.Initial]!);\n                }\n                // Isolated.\n                else {\n                    output += String.fromCharCode(currentCodePoint);\n                }\n            } else {\n                output += String.fromCharCode(currentCodePoint);\n            }\n        }\n\n        return output;\n    }\n\n    private isArabicCharacter(codePoint: number): boolean {\n        return this.m_singleCharactersMap.has(codePoint);\n    }\n\n    private getCharacterMap(codePoint: number): ReadonlyArray<number | undefined> | undefined {\n        return this.m_singleCharactersMap.get(codePoint);\n    }\n\n    private getCombinedCharacterMap(\n        codePoint: number,\n        nextCodePoint: number\n    ): ReadonlyArray<number | undefined> | undefined {\n        const map = this.m_combinedCharactersMap.get(codePoint);\n        if (map !== undefined) {\n            return map.get(nextCodePoint);\n        }\n        return undefined;\n    }\n\n    private isNeutral(codePoint: number): boolean {\n        for (const character of this.m_neutralCharacters) {\n            if (character === codePoint) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * This path in world coordinates is projected to screen space and blocks all other labels.\n *\n * It could be used for example:\n * - Border rejects labels.\n * - Route blocks street labels from being rendered underneath.\n *\n * Could potentially be expanded in future to have a priority, however for now, this isn't required.\n */\n\nexport class PathBlockingElement {\n    /**\n     * Note, [[screenSpaceLines]] is only used as a performance improvement and contains no\n     * useful information. They are used to contain the screen space coordinates of the\n     * points. By allocating the space here, we avoid per frame allocations, see\n     * [[TextElementsRenderer.prepopulateScreenWithBlockingElements]].\n     */\n    readonly screenSpaceLines: THREE.Line3[];\n\n    /**\n     * Constructs a path from a list of points.\n     * Pre allocates the [[screenSpaceLines]] used to render.\n     * @param points Points in world coordinates.\n     */\n    constructor(readonly points: Vector3Like[]) {\n        this.screenSpaceLines = new Array<THREE.Line3>(points.length >= 2 ? points.length - 1 : 0);\n        for (let i = 0; i < this.screenSpaceLines.length; i++) {\n            this.screenSpaceLines[i] = new THREE.Line3(new THREE.Vector3(), new THREE.Vector3());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { Math2D } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nimport { MemoryUsage } from \"@here/harp-text-canvas\";\nimport { getPixelFromImage, screenToUvCoordinates } from \"./PixelPicker\";\n\n/**\n * Declares an interface for a `struct` containing a [[BoxBuffer]]'s attribute state information.\n */\nexport interface State {\n    positionAttributeCount: number;\n    colorAttributeCount: number;\n    uvAttributeCount: number;\n    indexAttributeCount: number;\n    pickInfoCount: number;\n}\n\n/**\n * Initial number of boxes in BoxBuffer.\n */\nconst START_BOX_BUFFER_SIZE = 0;\n\n/**\n * Maximum number of boxes in BoxBuffer.\n */\nconst MAX_BOX_BUFFER_SIZE = 32 * 1024;\n\n/**\n * Number of vertices per box/glyph element: 4 corners.\n */\nconst NUM_VERTICES_PER_ELEMENT = 4;\n\n/**\n * Number of indices added per box/glyph: 2 triangles, 6 indices.\n */\nconst NUM_INDICES_PER_ELEMENT = 6;\n\n/**\n * Number of values per position.\n */\nconst NUM_POSITION_VALUES_PER_VERTEX = 3;\n\n/**\n * Number of values per color.\n */\nconst NUM_COLOR_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per UV.\n */\nconst NUM_UV_VALUES_PER_VERTEX = 4;\n\n/**\n * Number of values per index.\n */\nconst NUM_INDEX_VALUES_PER_VERTEX = 1;\n\n/**\n * Number of bytes for float in an Float32Array.\n */\nconst NUM_BYTES_PER_FLOAT = 4;\n\n/**\n * Number of bytes for integer number in an UInt32Array.\n */\nconst NUM_BYTES_PER_INT32 = 4;\n\n/**\n * SubClass of [[THREE.Mesh]] to identify meshes that have been created by [[BoxBuffer]] and\n * [[TextBuffer]]. Add the isEmpty flag to quickly test for empty meshes.\n */\nexport class BoxBufferMesh extends THREE.Mesh {\n    constructor(geometry: THREE.BufferGeometry, material: THREE.Material | THREE.Material[]) {\n        super(geometry, material);\n\n        this.type = \"BoxBufferMesh\";\n    }\n\n    /**\n     * A mesh that has no positions and indices set is defined to be empty.\n     *\n     * @returns `True` if no indices have been added to the mesh.\n     */\n    get isEmpty(): boolean {\n        if (this.geometry === undefined) {\n            return true;\n        } else {\n            const bufferGeometry = this.geometry as THREE.BufferGeometry;\n            return bufferGeometry.index === null || bufferGeometry.index.count === 0;\n        }\n    }\n}\n\n/**\n * Buffer for (untransformed) `Box2` objects. Can be used to create a single geometry for screen-\n * aligned boxes, like POIs.\n */\nexport class BoxBuffer {\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` position data.\n     */\n    protected positionAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` color data.\n     */\n    protected colorAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` uv data.\n     */\n    protected uvAttribute?: THREE.BufferAttribute;\n\n    /**\n     * [[BufferAttribute]] holding the `BoxBuffer` index data.\n     */\n    protected indexAttribute?: THREE.BufferAttribute;\n    protected pickInfos: Array<any | undefined>;\n\n    /**\n     * [[BufferGeometry]] holding all the different [[BufferAttribute]]s.\n     */\n    protected geometry: THREE.BufferGeometry | undefined;\n\n    /**\n     * [[Mesh]] used for rendering.\n     */\n    protected internalMesh: BoxBufferMesh | undefined;\n\n    private m_size: number = 0;\n\n    /**\n     * Creates a new `BoxBuffer`.\n     *\n     * @param material Material to be used for [[Mesh]] of this `BoxBuffer`.\n     * @param renderOrder Optional renderOrder of this buffer.\n     * @param startElementCount Initial number of elements this `BoxBuffer` can hold.\n     * @param maxElementCount Maximum number of elements this `BoxBuffer` can hold.\n     */\n    constructor(\n        readonly material: THREE.Material | THREE.Material[],\n        readonly renderOrder: number = 0,\n        readonly startElementCount = START_BOX_BUFFER_SIZE,\n        readonly maxElementCount = MAX_BOX_BUFFER_SIZE\n    ) {\n        this.resizeBuffer(startElementCount);\n        this.pickInfos = new Array();\n    }\n\n    /**\n     * Duplicate this `BoxBuffer` with same material and renderOrder.\n     *\n     * @returns A clone of this `BoxBuffer`.\n     */\n    clone(): BoxBuffer {\n        return new BoxBuffer(this.material, this.renderOrder);\n    }\n\n    /**\n     * Dispose of the geometry.\n     */\n    dispose() {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n            this.geometry = undefined;\n        }\n        this.internalMesh = undefined;\n    }\n\n    /**\n     * Return the current number of elements the buffer can hold.\n     */\n    get size(): number {\n        return this.m_size;\n    }\n\n    /**\n     * Clear's the `BoxBuffer` attribute buffers.\n     */\n    reset() {\n        if (this.positionAttribute !== undefined) {\n            this.positionAttribute.count = 0;\n            this.colorAttribute!.count = 0;\n            this.uvAttribute!.count = 0;\n            this.indexAttribute!.count = 0;\n            this.pickInfos!.length = 0;\n        }\n    }\n\n    /**\n     * Returns `true` if this `BoxBuffer` can hold the specified amount of glyphs. If the buffer\n     * can only add the glyph by increasing the buffer size, the resize() method is called, which\n     * will then create a new geometry for the mesh.\n     *\n     * @param glyphCount Number of glyphs to be added to the buffer.\n     * @returns `true` if the element (box or glyph) can be added to the buffer, `false` otherwise.\n     */\n    canAddElements(glyphCount = 1): boolean {\n        const indexAttribute = this.indexAttribute!;\n        if (\n            indexAttribute.count + glyphCount * NUM_INDICES_PER_ELEMENT >=\n            indexAttribute.array.length\n        ) {\n            // Too many elements for the current buffer, check if we can resize the buffer.\n            if (indexAttribute.array.length >= this.maxElementCount * NUM_INDICES_PER_ELEMENT) {\n                return false;\n            }\n\n            const newSize = Math.min(this.maxElementCount, this.size === 0 ? 256 : this.size * 2);\n            this.resize(newSize);\n        }\n        return true;\n    }\n\n    /**\n     * Returns this `BoxBuffer`'s attribute [[State]].\n     */\n    saveState(): State {\n        const state: State = {\n            positionAttributeCount: this.positionAttribute!.count,\n            colorAttributeCount: this.colorAttribute!.count,\n            uvAttributeCount: this.uvAttribute!.count,\n            indexAttributeCount: this.indexAttribute!.count,\n            pickInfoCount: this.pickInfos!.length\n        };\n        return state;\n    }\n\n    /**\n     * Store this `BoxBuffer`'s attribute [[State]] to a previously stored one.\n     *\n     * @param state [[State]] struct describing a previous attribute state.\n     */\n    restoreState(state: State) {\n        this.positionAttribute!.count = state.positionAttributeCount;\n        this.colorAttribute!.count = state.colorAttributeCount;\n        this.uvAttribute!.count = state.uvAttributeCount;\n        this.indexAttribute!.count = state.indexAttributeCount;\n        this.pickInfos!.length = state.pickInfoCount;\n    }\n\n    /**\n     * Adds a new box to this `BoxBuffer`.\n     *\n     * @param screenBox [[Math2D.Box]] holding screen coordinates for this box.\n     * @param uvBox [[Math2D.UvBox]] holding uv coordinates for this box.\n     * @param color Box's color.\n     * @param opacity Box's opacity.\n     * @param distance Box's distance to camera.\n     * @param pickInfo Box's picking information.\n     */\n    addBox(\n        screenBox: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        color: THREE.Color,\n        opacity: number,\n        distance: number,\n        pickInfo?: any\n    ): boolean {\n        if (!this.canAddElements()) {\n            return false;\n        }\n\n        const { s0, t0, s1, t1 } = uvBox;\n        const { x, y, w, h } = screenBox;\n\n        const r = Math.round(color.r * 255);\n        const g = Math.round(color.g * 255);\n        const b = Math.round(color.b * 255);\n        const a = Math.round(opacity * 255);\n\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        const baseVertex = positionAttribute.count;\n        const baseIndex = indexAttribute.count;\n\n        positionAttribute.setXYZ(baseVertex, x, y, distance);\n        positionAttribute.setXYZ(baseVertex + 1, x + w, y, distance);\n        positionAttribute.setXYZ(baseVertex + 2, x, y + h, distance);\n        positionAttribute.setXYZ(baseVertex + 3, x + w, y + h, distance);\n\n        colorAttribute.setXYZW(baseVertex, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 1, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 2, r, g, b, a);\n        colorAttribute.setXYZW(baseVertex + 3, r, g, b, a);\n\n        uvAttribute.setXY(baseVertex, s0, t0);\n        uvAttribute.setXY(baseVertex + 1, s1, t0);\n        uvAttribute.setXY(baseVertex + 2, s0, t1);\n        uvAttribute.setXY(baseVertex + 3, s1, t1);\n\n        indexAttribute.setX(baseIndex, baseVertex);\n        indexAttribute.setX(baseIndex + 1, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 2, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 3, baseVertex + 2);\n        indexAttribute.setX(baseIndex + 4, baseVertex + 1);\n        indexAttribute.setX(baseIndex + 5, baseVertex + 3);\n\n        positionAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        colorAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        uvAttribute.count += NUM_VERTICES_PER_ELEMENT;\n        indexAttribute.count += NUM_INDICES_PER_ELEMENT;\n\n        this.pickInfos.push(pickInfo);\n\n        return true;\n    }\n\n    /**\n     * Updates a [[BufferGeometry]] object to reflect the changes in this `TextBuffer`'s attribute\n     * data.\n     */\n    updateBufferGeometry() {\n        const positionAttribute = this.positionAttribute!;\n        const colorAttribute = this.colorAttribute!;\n        const uvAttribute = this.uvAttribute!;\n        const indexAttribute = this.indexAttribute!;\n\n        if (positionAttribute.count > 0) {\n            positionAttribute.needsUpdate = true;\n            positionAttribute.updateRange.offset = 0;\n            positionAttribute.updateRange.count =\n                positionAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (colorAttribute.count > 0) {\n            colorAttribute.needsUpdate = true;\n            colorAttribute.updateRange.offset = 0;\n            colorAttribute.updateRange.count = colorAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (uvAttribute.count > 0) {\n            uvAttribute.needsUpdate = true;\n            uvAttribute.updateRange.offset = 0;\n            uvAttribute.updateRange.count = uvAttribute.count * NUM_VERTICES_PER_ELEMENT;\n        }\n\n        if (indexAttribute.count > 0) {\n            indexAttribute.needsUpdate = true;\n            indexAttribute.updateRange.offset = 0;\n            indexAttribute.updateRange.count = indexAttribute.count;\n        }\n\n        if (this.geometry !== undefined) {\n            this.geometry.clearGroups();\n            this.geometry.addGroup(0, this.indexAttribute!.count);\n        }\n    }\n\n    /**\n     * Check if the buffer is empty. If it is empty, the memory usage is minimized to reduce\n     * footprint.\n     */\n    cleanUp() {\n        // If there is nothing in this buffer, resize it, it may never be used again.\n        if (this.indexAttribute!.count === 0 && this.size > START_BOX_BUFFER_SIZE) {\n            this.clearAttributes();\n        }\n    }\n\n    /**\n     * Determine if the mesh is empty.\n     */\n    get isEmpty(): boolean {\n        return this.internalMesh!.isEmpty;\n    }\n\n    /**\n     * Get the [[Mesh]] object. The geometry instance of the mesh may change if the buffers are\n     * resized. The mesh, once created, will not change, so it can always be added to the scene.\n     */\n    get mesh(): BoxBufferMesh {\n        if (this.internalMesh === undefined) {\n            this.resize();\n        }\n        return this.internalMesh!;\n    }\n\n    /**\n     * Fill the picking results for the pixel with the given screen coordinate. If multiple\n     * boxes are found, the order of the results is unspecified.\n     *\n     * @param screenPosition Screen coordinate of picking position.\n     * @param pickCallback Callback to be called for every picked element.\n     * @param imageData Image data to test if the pixel is transparent\n     */\n    pickBoxes(\n        screenPosition: THREE.Vector2,\n        pickCallback: (pickData: any | undefined) => void,\n        imageData?: ImageBitmap | ImageData\n    ) {\n        const n = this.pickInfos.length;\n        const pickInfos = this.pickInfos;\n        const positions = this.positionAttribute!;\n        const screenX = screenPosition.x;\n        const screenY = screenPosition.y;\n\n        const canvas = document.createElement(\"canvas\");\n        for (let pickInfoIndex = 0; pickInfoIndex < n; pickInfoIndex++) {\n            const positionIndex = pickInfoIndex * NUM_VERTICES_PER_ELEMENT;\n\n            const minX = positions.getX(positionIndex);\n            if (screenX < minX) {\n                continue;\n            }\n\n            const maxX = positions.getX(positionIndex + 1);\n            if (screenX > maxX) {\n                continue;\n            }\n\n            const minY = positions.getY(positionIndex);\n            if (screenY < minY) {\n                continue;\n            }\n\n            const maxY = positions.getY(positionIndex + 2);\n            if (screenY > maxY) {\n                continue;\n            }\n\n            const box = new Math2D.Box(minX, minY, maxX - minX, maxY - minY);\n            if (\n                imageData !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo !== undefined &&\n                pickInfos[pickInfoIndex].poiInfo.uvBox !== undefined &&\n                this.isPixelTransparent(\n                    imageData,\n                    screenX,\n                    screenY,\n                    box,\n                    pickInfos[pickInfoIndex].poiInfo.uvBox,\n                    canvas\n                )\n            ) {\n                continue;\n            }\n\n            if (pickInfos[pickInfoIndex] !== undefined) {\n                pickCallback(pickInfos[pickInfoIndex]);\n            }\n        }\n    }\n\n    /**\n     * Creates a new [[Geometry]] object from all the attribute data stored in this `BoxBuffer`.\n     * The [[Mesh]] object may be created if it is not initialized already.\n     *\n     * @param newSize Optional number of elements to resize the buffer to.\n     * @param forceResize Optional flag to force a resize even if new size is smaller than before.\n     */\n    resize(newSize?: number, forceResize?: boolean): BoxBufferMesh {\n        if (this.geometry !== undefined) {\n            this.geometry.dispose();\n        }\n\n        this.geometry = new THREE.BufferGeometry();\n\n        if (newSize !== undefined && (forceResize === true || newSize > this.size)) {\n            this.resizeBuffer(newSize);\n        }\n\n        this.geometry.setAttribute(\"position\", this.positionAttribute!);\n        this.geometry.setAttribute(\"color\", this.colorAttribute!);\n        this.geometry.setAttribute(\"uv\", this.uvAttribute!);\n        this.geometry.setIndex(this.indexAttribute!);\n        this.geometry.addGroup(0, this.indexAttribute!.count);\n\n        if (this.internalMesh === undefined) {\n            this.internalMesh = new BoxBufferMesh(this.geometry, this.material);\n            this.internalMesh.renderOrder = this.renderOrder;\n        } else {\n            this.internalMesh.geometry = this.geometry;\n        }\n        return this.internalMesh;\n    }\n\n    /**\n     * Update the info with the memory footprint caused by objects owned by the `BoxBuffer`.\n     *\n     * @param info The info object to increment with the values from this `BoxBuffer`.\n     */\n    updateMemoryUsage(info: MemoryUsage) {\n        const numBytes =\n            this.positionAttribute!.count * NUM_POSITION_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.colorAttribute!.count * NUM_COLOR_VALUES_PER_VERTEX +\n            this.uvAttribute!.count * NUM_UV_VALUES_PER_VERTEX * NUM_BYTES_PER_FLOAT +\n            this.indexAttribute!.count * NUM_BYTES_PER_INT32; // May be UInt16, so we overestimate\n\n        info.heapSize += numBytes;\n        info.gpuSize += numBytes;\n    }\n\n    /**\n     * Check if a pixel is transparent or not.\n     *\n     * @param imageData Data containing the pixels.\n     * @param xScreenPos X position of the pixel.\n     * @param yScreenPos Y position of the pixel.\n     * @param box Bounding box of the image in screen coordinates.\n     * @param uvBox Uv box referred to the given bounding box.\n     * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n     *      ImageBitmap\n     */\n    protected isPixelTransparent(\n        imageData: ImageBitmap | ImageData,\n        xScreenPos: number,\n        yScreenPos: number,\n        box: Math2D.Box,\n        uvBox: Math2D.UvBox,\n        canvas?: HTMLCanvasElement\n    ): boolean {\n        let pixelIsTransparent = false;\n\n        const { u, v } = screenToUvCoordinates(xScreenPos, yScreenPos, box, uvBox);\n\n        const imageWidth = imageData.width;\n        const x = imageWidth * u;\n        const imageHeight = imageData.height;\n        const y = imageHeight * v;\n\n        const pixel = getPixelFromImage(x, y, imageData, canvas);\n\n        if (pixel !== undefined && pixel[3] === 0) {\n            pixelIsTransparent = true;\n        }\n        return pixelIsTransparent;\n    }\n\n    /**\n     * Remove current attributes and arrays. Minimizes memory footprint.\n     */\n    protected clearAttributes() {\n        this.positionAttribute = undefined;\n        this.colorAttribute = undefined;\n        this.uvAttribute = undefined;\n        this.indexAttribute = undefined;\n        this.resize(START_BOX_BUFFER_SIZE, true);\n    }\n\n    /**\n     * Resize the attribute buffers. New value must be larger than the previous one.\n     *\n     * @param newSize New number of elements in the buffer. Number has to be larger than the\n     *      previous size.\n     */\n    protected resizeBuffer(newSize: number) {\n        const newPositionArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_POSITION_VALUES_PER_VERTEX\n        );\n\n        if (this.positionAttribute !== undefined && this.positionAttribute.array.length > 0) {\n            const positionAttributeCount = this.positionAttribute.count;\n            newPositionArray.set(this.positionAttribute.array);\n            this.positionAttribute.array = newPositionArray;\n            this.positionAttribute.count = positionAttributeCount;\n        } else {\n            this.positionAttribute = new THREE.BufferAttribute(\n                newPositionArray,\n                NUM_POSITION_VALUES_PER_VERTEX\n            );\n            this.positionAttribute.count = 0;\n            this.positionAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newColorArray = new Uint8Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_COLOR_VALUES_PER_VERTEX\n        );\n\n        if (this.colorAttribute !== undefined) {\n            const colorAttributeCount = this.colorAttribute.count;\n            newColorArray.set(this.colorAttribute.array);\n            this.colorAttribute.array = newColorArray;\n            this.colorAttribute.count = colorAttributeCount;\n        } else {\n            this.colorAttribute = new THREE.BufferAttribute(\n                newColorArray,\n                NUM_COLOR_VALUES_PER_VERTEX,\n                true\n            );\n            this.colorAttribute.count = 0;\n            this.colorAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const newUvArray = new Float32Array(\n            newSize * NUM_VERTICES_PER_ELEMENT * NUM_UV_VALUES_PER_VERTEX\n        );\n\n        if (this.uvAttribute !== undefined) {\n            const uvAttributeCount = this.uvAttribute.count;\n            newUvArray.set(this.uvAttribute.array);\n            this.uvAttribute.array = newUvArray;\n            this.uvAttribute.count = uvAttributeCount;\n        } else {\n            this.uvAttribute = new THREE.BufferAttribute(newUvArray, NUM_UV_VALUES_PER_VERTEX);\n            this.uvAttribute.count = 0;\n            this.uvAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        const numIndexValues = newSize * NUM_INDICES_PER_ELEMENT * NUM_INDEX_VALUES_PER_VERTEX;\n\n        const newIndexArray =\n            numIndexValues > 65535\n                ? new Uint32Array(numIndexValues)\n                : new Uint16Array(numIndexValues);\n\n        if (this.indexAttribute !== undefined) {\n            const indexAttributeCount = this.indexAttribute.count;\n            newIndexArray.set(this.indexAttribute.array);\n            this.indexAttribute.array = newIndexArray;\n            this.indexAttribute.count = indexAttributeCount;\n        } else {\n            this.indexAttribute = new THREE.BufferAttribute(\n                newIndexArray,\n                NUM_INDEX_VALUES_PER_VERTEX\n            );\n            this.indexAttribute.count = 0;\n            this.indexAttribute.setUsage(THREE.DynamicDrawUsage);\n        }\n\n        this.m_size = newSize;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Math2D, MathUtils } from \"@here/harp-utils\";\n\n/**\n * It returns an array containing the channel colors for the pixel at the given coordinates.\n *\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param imageData Data containing the pixels.\n * @param canvas Canvas element that will be used to draw the image, in case the imageData is an\n * ImageBitmap\n */\nexport function getPixelFromImage(\n    xPos: number,\n    yPos: number,\n    imageData: ImageData | ImageBitmap,\n    canvas?: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    let pickedColor;\n\n    const isImageBitmap = (imgData: ImageBitmap | ImageData) => {\n        return (imgData as ImageBitmap).close !== undefined;\n    };\n\n    if (isImageBitmap(imageData!)) {\n        if (canvas === undefined) {\n            canvas = document.createElement(\"canvas\");\n        }\n        pickedColor = getPixelFromImageBitmap(imageData as ImageBitmap, xPos, yPos, canvas);\n    } else {\n        const pixelsData = imageData as ImageData;\n        const stride = pixelsData.data.length / (pixelsData.height * pixelsData.width);\n        pickedColor = getPixelFromImageData(pixelsData, xPos, yPos, stride);\n    }\n    return pickedColor;\n}\n\n/**\n * Given the x and y position in screen coordinates inside the target box, it map them to the UV\n * coordinates.\n * @param screenX X value in screen coordinates.\n * @param screenY Y value in screen coordinates.\n * @param box Bounding box in screen coordinates.\n * @param uvBox Uv box referred to the given bounding box.\n */\nexport function screenToUvCoordinates(\n    screenX: number,\n    screenY: number,\n    box: Math2D.Box,\n    uvBox: Math2D.UvBox\n): { u: number; v: number } {\n    const minX = box.x;\n    const maxX = box.x + box.w;\n    const minY = box.y;\n    const maxY = box.y + box.h;\n    const u = MathUtils.map(screenX, minX, maxX, uvBox.s0, uvBox.s1);\n    const v = MathUtils.map(screenY, minY, maxY, uvBox.t0, uvBox.t1);\n\n    return { u, v };\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Bitmap image in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param canvas HTML Canvas element on which the image is drawn.\n */\nexport function getPixelFromImageBitmap(\n    image: ImageBitmap,\n    xPos: number,\n    yPos: number,\n    canvas: HTMLCanvasElement\n): Uint8ClampedArray | undefined {\n    if (xPos > image.width || xPos < 0 || yPos > image.height || yPos < 0) {\n        return undefined;\n    }\n\n    let pixelData;\n\n    canvas.width = image.width;\n    canvas.height = image.height;\n\n    const context = canvas.getContext(\"2d\");\n    if (context !== null) {\n        context.drawImage(\n            image,\n            0,\n            0,\n            image.width,\n            image.height,\n            0,\n            0,\n            canvas.width,\n            canvas.height\n        );\n        pixelData = context.getImageData(xPos, yPos, 1, 1).data;\n    }\n    return pixelData;\n}\n\n/**\n * It returns an Uint8ClampedArray containing the color channel values for the given pixel\n * coordinates. It returns undefined if the given coordinates are out of range.\n *\n * @param image Image data in which the pixels are stored.\n * @param xPos X value of the pixel.\n * @param yPos Y value of the pixel.\n * @param stride The stride value of the image data.\n */\nexport function getPixelFromImageData(\n    imgData: ImageData,\n    xPos: number,\n    yPos: number,\n    stride: number\n): Uint8ClampedArray | undefined {\n    const getPixel = (imageData: ImageData, index: number, strd: number) => {\n        const i = index * strd;\n        const d = imageData.data;\n        const pixel = new Uint8ClampedArray(strd);\n        for (let s = 0; s < strd; s++) {\n            pixel[0] = d[i + s];\n        }\n        return pixel;\n    };\n    if (xPos > imgData.width || xPos < 0 || yPos > imgData.height || yPos < 0) {\n        return undefined;\n    }\n    return getPixel(imgData, yPos * imgData.width + xPos, stride);\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { IChannel } from \"@here/harp-utils\";\n\nexport class PlacementStats {\n    totalGroups: number = 0;\n    resortedGroups: number = 0;\n    total: number = 0;\n    uninitialized: number = 0;\n    tooFar: number = 0;\n    numNotVisible: number = 0;\n    numPathTooSmall: number = 0;\n    numCannotAdd: number = 0;\n    numRenderedPoiIcons: number = 0;\n    numRenderedPoiTexts: number = 0;\n    numPoiTextsInvisible: number = 0;\n    numRenderedTextElements: number = 0;\n\n    constructor(private readonly m_logger: IChannel) {}\n\n    clear() {\n        this.totalGroups = 0;\n        this.resortedGroups = 0;\n        this.total = 0;\n        this.uninitialized = 0;\n        this.tooFar = 0;\n        this.numNotVisible = 0;\n        this.numPathTooSmall = 0;\n        this.numCannotAdd = 0;\n        this.numRenderedPoiIcons = 0;\n        this.numRenderedPoiTexts = 0;\n        this.numPoiTextsInvisible = 0;\n        this.numRenderedTextElements = 0;\n    }\n    log() {\n        const numNotRendered =\n            this.uninitialized +\n            this.numPoiTextsInvisible +\n            this.tooFar +\n            this.numNotVisible +\n            this.numCannotAdd;\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"Resorted groups\", this.resortedGroups);\n        this.m_logger.debug(\"Total labels\", this.total);\n        this.m_logger.debug(\"Rendered labels\", this.numRenderedTextElements);\n        this.m_logger.debug(\"Rejected labels\", numNotRendered);\n        this.m_logger.debug(\"Unitialized labels\", this.uninitialized);\n        this.m_logger.debug(\"Rendered poi icons\", this.numRenderedPoiIcons);\n        this.m_logger.debug(\"Rendered poi texts\", this.numRenderedPoiTexts);\n        this.m_logger.debug(\"Poi text invisible\", this.numPoiTextsInvisible);\n        this.m_logger.debug(\"Too far\", this.tooFar);\n        this.m_logger.debug(\"Not visible\", this.numNotVisible);\n        this.m_logger.debug(\"Path too small\", this.numPathTooSmall);\n        this.m_logger.debug(\"Rejected, max glyphs reached\", this.numCannotAdd);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * @hidden\n */\nexport class SimpleLineCurve extends THREE.LineCurve {\n    private m_lengths?: number[];\n\n    constructor(v1: THREE.Vector2, v2: THREE.Vector2) {\n        super(v1, v2);\n    }\n\n    getLengths(): number[] {\n        if (this.m_lengths === undefined) {\n            this.m_lengths = [0, this.v2.distanceTo(this.v1)];\n        }\n        return this.m_lengths;\n    }\n}\n\n/**\n * @hidden\n */\nexport class PathParam {\n    private m_point: THREE.Vector2 | undefined;\n\n    constructor(readonly path: THREE.Path, readonly index: number, readonly t: number) {}\n\n    get curve(): THREE.Curve<THREE.Vector2> {\n        return this.path.curves[this.index];\n    }\n\n    get point(): THREE.Vector2 {\n        if (this.m_point === undefined) {\n            this.m_point = this.curve.getPoint(this.t);\n        }\n        return this.m_point;\n    }\n}\n\n/**\n * @hidden\n */\nexport class SimplePath extends THREE.Path {\n    private m_cache?: number[];\n\n    constructor() {\n        super();\n    }\n\n    getLengths(): number[] {\n        if (this.m_cache) {\n            return this.m_cache;\n        }\n        let sum = 0;\n        const lengths = new Array<number>();\n        lengths.push(0);\n\n        this.curves.forEach(curve => {\n            const lineCurve = curve as THREE.LineCurve;\n            sum += lineCurve.v1.distanceTo(lineCurve.v2);\n            lengths.push(sum);\n        });\n        this.m_cache = lengths;\n        return lengths;\n    }\n\n    getParamAt(t: number): PathParam | null {\n        const distance = t * this.getLength();\n        const curveLengths = this.getCurveLengths();\n\n        for (let index = 0; index < curveLengths.length; ++index) {\n            if (curveLengths[index] < distance) {\n                continue;\n            }\n\n            const diff = curveLengths[index] - distance;\n            const curve = this.curves[index] as THREE.LineCurve;\n            const segmentLength = curve.getLength();\n            const u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n            return new PathParam(this, index, u);\n        }\n\n        return null;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nconst DEFAULT_FONT_CATALOG = \"./resources/fonts/Default_FontCatalog.json\";\n\n/**\n * Default number of labels/POIs rendered in the scene\n */\nconst DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS = 500;\n\n/**\n * Number of elements that are put into second queue. This second chance queue is used to render\n * TextElements that have not been on screen before. This is a quick source for elements that can\n * appear when the camera moves a bit, before new elements are placed.\n */\nconst DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS = 300;\n\n/**\n * Maximum distance for text labels expressed as a ratio of distance to from the camera (0) to the\n * far plane (1.0). May be synchronized with fog value ?\n */\nconst DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS = 0.99;\n\n/**\n * Minimum scaling factor that may be applied to labels when their are distant from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MIN = 0.7;\n\n/**\n * Maximum scaling factor that may be applied to labels due to their distance from focus point.\n */\nconst DEFAULT_LABEL_DISTANCE_SCALE_MAX = 1.5;\n\nconst MIN_GLYPH_COUNT = 1024;\n\nconst MAX_GLYPH_COUNT = 32768;\n\nexport interface TextElementsRendererOptions {\n    /**\n     * The path to the font catalog file. Default is [[DEFAULT_FONT_CATALOG]].\n     */\n    fontCatalog?: string;\n    /**\n     * Optional initial number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MIN_GLYPH_COUNT]]\n     */\n    minNumGlyphs?: number;\n    /**\n     * Optional limit of number of glyphs (characters) for labels. In situations with limited,\n     * available memory, decreasing this number may be beneficial.\n     *\n     * @default [[MAX_GLYPH_COUNT]]\n     */\n    maxNumGlyphs?: number;\n    /**\n     * Limits the number of [[DataSource]] labels visible, such as road names and POIs.\n     * On small devices, you can reduce this number to to increase performance.\n     * @default [[DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS]].\n     */\n    maxNumVisibleLabels?: number;\n    /**\n     * The number of [[TextElement]]s that the [[TextElementsRenderer]] tries to render even\n     * if they were not visible during placement. This property only applies to [[TextElement]]s\n     * that were culled by the frustum; useful for map movements and animations.\n     * @default [[DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS]].\n     */\n    numSecondChanceLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] to be rendered, expressed as a fraction of\n     * the distance between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForTextLabels?: number;\n    /**\n     * The maximum distance for [[TextElement]] with icons to be rendered,\n     * expressed as a fraction of the distance\n     * between the near and far plane [0, 1.0].\n     * @default [[DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS]].\n     */\n    maxDistanceRatioForPoiLabels?: number;\n    /**\n     * The minimum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MIN]].\n     */\n    labelDistanceScaleMin?: number;\n    /**\n     * The maximum scaling factor that may be applied to [[TextElement]]s due to their distance.\n     * If not defined the default value specified in [[TextElementsRenderer]] will be used.\n     * @default [[DEFAULT_LABEL_DISTANCE_SCALE_MAX]].\n     */\n    labelDistanceScaleMax?: number;\n\n    /**\n     * Disable all fading animations for debugging and performance measurement.\n     * @default `false`\n     */\n    disableFading?: boolean;\n}\n\n/**\n * Initializes undefined text renderer options to default values.\n * @param options The options to be initialized.\n */\nexport function initializeDefaultOptions(options: TextElementsRendererOptions) {\n    if (options.fontCatalog === undefined) {\n        options.fontCatalog = DEFAULT_FONT_CATALOG;\n    }\n\n    if (options.minNumGlyphs === undefined) {\n        options.minNumGlyphs = MIN_GLYPH_COUNT;\n    }\n    if (options.maxNumGlyphs === undefined) {\n        options.maxNumGlyphs = MAX_GLYPH_COUNT;\n    }\n    if (options.maxNumVisibleLabels === undefined) {\n        options.maxNumVisibleLabels = DEFAULT_MAX_NUM_RENDERED_TEXT_ELEMENTS;\n    }\n    // TODO: Unused so far.\n    if (options.numSecondChanceLabels === undefined) {\n        options.numSecondChanceLabels = DEFAULT_MAX_NUM_SECOND_CHANCE_ELEMENTS;\n    }\n    if (options.labelDistanceScaleMin === undefined) {\n        options.labelDistanceScaleMin = DEFAULT_LABEL_DISTANCE_SCALE_MIN;\n    }\n    if (options.labelDistanceScaleMax === undefined) {\n        options.labelDistanceScaleMax = DEFAULT_LABEL_DISTANCE_SCALE_MAX;\n    }\n    if (options.maxDistanceRatioForTextLabels === undefined) {\n        options.maxDistanceRatioForTextLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n    if (options.maxDistanceRatioForPoiLabels === undefined) {\n        options.maxDistanceRatioForPoiLabels = DEFAULT_MAX_DISTANCE_RATIO_FOR_LABELS;\n    }\n\n    if (options.disableFading === undefined) {\n        options.disableFading = false;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert, LoggerManager, LogLevel } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementFilter, TextElementGroupState } from \"./TextElementGroupState\";\nimport { TextElementState } from \"./TextElementState\";\nimport { TextElementType } from \"./TextElementType\";\n\nconst logger = LoggerManager.instance.create(\"TextElementsStateCache\", { level: LogLevel.Log });\n\n/**\n * Label distance tolerance squared in meters. Point labels with the same name that are closer in\n * world space than this value are treated as the same label. Used to identify duplicate labels in\n * overlapping tiles and label replacements at different storage levels.\n */\nfunction getDedupSqDistTolerance(zoomLevel: number) {\n    // Defining here a minimum tolerance of 10m at zoom level 13 or higher.\n    const minSqTol = 100;\n    const minSqTolLevel = 13;\n    const maxLevelDelta = 4;\n    const levelDelta = Math.min(\n        maxLevelDelta,\n        minSqTolLevel - Math.min(minSqTolLevel, Math.floor(zoomLevel))\n    );\n    // Distance tolerance computed applying a factor over an arbitrary minimum tolerance for a\n    // chosen zoom level. The factor is an exponential function on zoom level delta wrt minimum\n    // tolerance zoom level.\n    // error = sqrt(sqError) = sqrt(minSqError* 2^(4d)) = minError*2^(2d)\n\n    //tslint:disable-next-line: no-bitwise\n    return minSqTol << (levelDelta << 2);\n}\n\nconst tmpCachedDuplicate: { entries: TextElementState[]; index: number } = {\n    entries: [],\n    index: -1\n};\n\nfunction getCacheKey(element: TextElement): string | number {\n    return element.hasFeatureId() ? element.featureId! : element.text;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their feature ids.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateById(\n    elementState: TextElementState,\n    candidates: TextElementState[]\n): number | undefined {\n    // Cached entries with same feature id found, find the entry with the same tile offset.\n    const element = elementState.element;\n    const duplicateIndex = candidates.findIndex(\n        entry => entry.element.tileOffset === element.tileOffset\n    );\n    if (duplicateIndex === -1) {\n        return -1;\n    }\n    const candidate = candidates[duplicateIndex].element;\n    assert(element.featureId === candidate.featureId);\n\n    if (candidate.text !== element.text) {\n        // Labels with different text shouldn't share the same feature id. This points to\n        // an issue on the map data side. Submit a ticket to the corresponding map backend\n        // issue tracking system if available (e.g. OLPRPS project in JIRA for OMV),\n        // indicating affected labels including tile keys, texts and feature id.\n        logger.warn(\n            `Text feature id ${element.featureId} collision between \"${element.text} and \\\n             ${candidate.text}`\n        );\n        return undefined;\n    }\n    return duplicateIndex;\n}\n\ntype DuplicateCmp = (\n    newCandidate: TextElement,\n    newDistance: number,\n    oldCandidate: TextElement,\n    oldDistance: number\n) => boolean;\n\n// Duplicate criteria for path labels. Candidates are better the longer their paths are.\nfunction isBetterPathDuplicate(\n    newCandidate: TextElement,\n    _newDistance: number,\n    oldCandidate: TextElement,\n    _oldDistance: number\n): boolean {\n    if (newCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    if (oldCandidate.pathLengthSqr === undefined) {\n        return false;\n    }\n    return newCandidate.pathLengthSqr > oldCandidate.pathLengthSqr;\n}\n\n// Duplicate criteria for point labels. Candidates are better the nearer they are to the label being\n// tested for duplicates.\nfunction isBetterPointDuplicate(\n    _newCandidate: TextElement,\n    newDistance: number,\n    _oldCandidate: TextElement,\n    oldDistance: number\n): boolean {\n    return newDistance < oldDistance;\n}\n\n/**\n * Finds a duplicate for a text element among a list of candidates using their text and distances.\n * @param elementState The state of the text element for which the duplicate will be found.\n * @param candidates The list of candidates to check.\n * @param zoomLevel Current zoom level.\n * @returns The index of the candidate chosen as duplicate, or `undefined` if none was found.\n */\nfunction findDuplicateByText(\n    elementState: TextElementState,\n    candidates: TextElementState[],\n    zoomLevel: number\n): number {\n    const element = elementState.element;\n    const maxSqDistError = getDedupSqDistTolerance(zoomLevel);\n    const entryCount = candidates.length;\n    const elementPosition = element.position;\n    const elementVisible = elementState.visible;\n    let dupIndex: number = -1;\n    let duplicate: TextElement | undefined;\n    let dupDistSquared: number = Infinity;\n    const isBetterDuplicate: DuplicateCmp =\n        element.type === TextElementType.PoiLabel ? isBetterPointDuplicate : isBetterPathDuplicate;\n\n    for (let i = 0; i < entryCount; ++i) {\n        const candidateEntry = candidates[i];\n        const cachedElement = candidateEntry.element;\n        const areDiffType = element.type !== cachedElement.type;\n        const areBothVisible = elementVisible && candidateEntry.visible;\n        if (areDiffType || areBothVisible) {\n            // Two text elements with different type or visible at the same time are always\n            // considered distinct.\n            continue;\n        }\n        const distSquared = elementPosition.distanceToSquared(cachedElement.position);\n        if (distSquared > maxSqDistError) {\n            // Cached text element is too far away to be a duplicate.\n            continue;\n        }\n        if (\n            duplicate === undefined ||\n            isBetterDuplicate(cachedElement, distSquared, duplicate, dupDistSquared)\n        ) {\n            dupIndex = i;\n            duplicate = cachedElement;\n            dupDistSquared = distSquared;\n        }\n    }\n\n    return dupIndex;\n}\n\n/**\n * Caches the state of text element groups currently rendered as well as the text element states\n * belonging to them, including their fading state and text deduplication information.\n */\nexport class TextElementStateCache {\n    private readonly m_referenceMap = new Map<TextElementGroup, TextElementGroupState>();\n    private m_sortedGroupStates: TextElementGroupState[] | undefined;\n\n    // Cache for point labels which may have duplicates in same tile or in neighboring tiles.\n    private readonly m_textMap = new Map<string | number, TextElementState[]>();\n\n    /**\n     * Gets the state corresponding to a given text element group or sets a newly created state if\n     * not found. It updates the states of the text elements belonging to the group using the\n     * specified parameters.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @param tileKey The key of the tile to which the group belongs.\n     * @param textElementFilter Filter used to decide if a text element must be initialized,\n     * @see [[TextElementGroupState]] construction.\n     * @returns Tuple with the group state as first element and a boolean indicating whether the\n     * state was found in cache (`true`) or newly created (`false`) as second element.\n     */\n    getOrSet(\n        textElementGroup: TextElementGroup,\n        tileKey: TileKey,\n        textElementFilter: TextElementFilter\n    ): [TextElementGroupState, boolean] {\n        let groupState = this.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            assert(groupState.size === textElementGroup.elements.length);\n            groupState.updateElements(textElementFilter);\n            return [groupState, true];\n        }\n\n        groupState = new TextElementGroupState(textElementGroup, tileKey, textElementFilter);\n        this.set(textElementGroup, groupState);\n\n        return [groupState, false];\n    }\n\n    get size(): number {\n        return this.m_referenceMap.size;\n    }\n\n    /**\n     * @returns All text element group states in the cache by group priority.\n     */\n    get sortedGroupStates(): TextElementGroupState[] {\n        if (this.m_sortedGroupStates === undefined) {\n            this.m_sortedGroupStates = Array.from(this.m_referenceMap.values());\n            this.m_sortedGroupStates.sort((a: TextElementGroupState, b: TextElementGroupState) => {\n                return b.group.priority - a.group.priority;\n            });\n        }\n\n        assert(this.m_referenceMap.size === this.m_sortedGroupStates.length);\n        return this.m_sortedGroupStates;\n    }\n\n    /**\n     * Updates state of all cached groups, discarding those that are not needed anymore.\n     * @param time The current time.\n     * @param disableFading `True` if fading is currently disabled, `false` otherwise.\n     * @param findReplacements `True` to replace each visible unvisited text element with a\n     * visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @returns `True` if any textElementGroup was evicted from cache, false otherwise.\n     */\n    update(time: number, disableFading: boolean, findReplacements: boolean, zoomLevel: number) {\n        const replaceCallback = findReplacements\n            ? this.replaceElement.bind(this, zoomLevel)\n            : undefined;\n\n        let anyEviction = false;\n        for (const [key, groupState] of this.m_referenceMap.entries()) {\n            if (groupState.visited) {\n                groupState.updateFading(time, disableFading);\n            } else {\n                if (findReplacements) {\n                    groupState.traverseVisibleElements(replaceCallback!);\n                }\n                this.m_referenceMap.delete(key);\n                this.m_sortedGroupStates = undefined;\n                anyEviction = true;\n            }\n        }\n        return anyEviction;\n    }\n\n    /**\n     * Clears visited state for all text element groups in cache.\n     */\n    clearVisited() {\n        for (const groupState of this.m_referenceMap.values()) {\n            groupState.visited = false;\n        }\n    }\n\n    clearTextCache() {\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Clears the whole cache contents.\n     */\n    clear() {\n        this.m_referenceMap.clear();\n        this.m_sortedGroupStates = undefined;\n        this.m_textMap.clear();\n    }\n\n    /**\n     * Removes duplicates for a given text element.\n     *\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     * @returns True if it's the remaining element after deduplication, false if it's been marked\n     * as duplicate.\n     */\n    deduplicateElement(zoomLevel: number, elementState: TextElementState): boolean {\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined) {\n            // Text not found so far, add this element to cache.\n            this.m_textMap.set(getCacheKey(elementState.element), [elementState]);\n            return true;\n        }\n\n        if (cacheResult.index === -1) {\n            // No duplicate found among elements with same text,add this one to cache.\n            cacheResult.entries.push(elementState);\n            return true;\n        }\n\n        // Duplicate found, check whether there's a label already visible and keep that one.\n        const cachedDuplicate = cacheResult.entries[cacheResult.index];\n\n        if (!cachedDuplicate.visible && elementState.visible) {\n            // New label is visible, substitute the cached label.\n            cacheResult.entries[cacheResult.index] = elementState;\n            cachedDuplicate.reset();\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Replaces a visible unvisited text element with a visited duplicate.\n     * @param zoomLevel Current zoom level.\n     * @param elementState State of the text element to deduplicate.\n     */\n    replaceElement(zoomLevel: number, elementState: TextElementState): void {\n        assert(elementState.visible);\n        const cacheResult = this.findDuplicate(elementState, zoomLevel);\n\n        if (cacheResult === undefined || cacheResult.index === -1) {\n            // No replacement found;\n            return;\n        }\n\n        const replacement = cacheResult.entries[cacheResult.index];\n        assert(!replacement.visible);\n\n        replacement.replace(elementState);\n    }\n\n    /**\n     * Gets the state corresponding to a given text element group.\n     * @param textElementGroup The group of which the state will be obtained.\n     * @returns The group state if cached, otherwise `undefined`.\n     */\n    private get(textElementGroup: TextElementGroup): TextElementGroupState | undefined {\n        const groupState = this.m_referenceMap.get(textElementGroup);\n\n        if (groupState !== undefined) {\n            groupState.visited = true;\n        }\n        return groupState;\n    }\n\n    /**\n     * Sets a specified state for a given text element group.\n     * @param textElementGroup  The group of which the state will be set.\n     * @param textElementGroupState The state to set for the group.\n     */\n    private set(textElementGroup: TextElementGroup, textElementGroupState: TextElementGroupState) {\n        assert(textElementGroup.elements.length > 0);\n        this.m_referenceMap.set(textElementGroup, textElementGroupState);\n        this.m_sortedGroupStates = undefined;\n    }\n\n    private findDuplicate(\n        elementState: TextElementState,\n        zoomLevel: number\n    ): { entries: TextElementState[]; index: number } | undefined {\n        // Point labels may have duplicates (as can path labels), Identify them\n        // and keep the one we already display.\n\n        const element = elementState.element;\n        const cachedEntries = this.m_textMap.get(getCacheKey(element));\n\n        if (cachedEntries === undefined) {\n            // No labels found with the same key.\n            return undefined;\n        }\n\n        tmpCachedDuplicate.entries = cachedEntries;\n        const index = element.hasFeatureId()\n            ? findDuplicateById(elementState, cachedEntries)\n            : findDuplicateByText(elementState, cachedEntries, zoomLevel);\n\n        if (index === undefined) {\n            // Feature id collision, try finding duplicates using text as key.\n            element.featureId = undefined;\n            return this.findDuplicate(elementState, zoomLevel);\n        }\n        tmpCachedDuplicate.index = index;\n        return tmpCachedDuplicate;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TileKey } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport { TextElementGroup } from \"./TextElementGroup\";\nimport { TextElementState } from \"./TextElementState\";\n\n/**\n * Type of functions used to do early rejection of elements during group state creation or update.\n * @param textElementState The state of the text element to check.\n * @returns `undefined` if element was rejected, otherwise its current view distance.\n */\nexport type TextElementFilter = (textElementState: TextElementState) => number | undefined;\n\n/**\n * `TextElementGroupState` keeps the state of a text element group and each element in it while\n * they're being rendered.\n */\nexport class TextElementGroupState {\n    private m_textElementStates: TextElementState[];\n    private m_visited: boolean = false;\n\n    /**\n     * Creates the state for specified group.\n     * @param group The group of which the state will be created.\n     * @param tileKey The key of the tile to which this group belongs.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    constructor(\n        readonly group: TextElementGroup,\n        readonly tileKey: TileKey,\n        filter: TextElementFilter\n    ) {\n        assert(group.elements.length > 0);\n        const length = group.elements.length;\n        this.m_textElementStates = new Array(length);\n        this.m_visited = true;\n\n        // TODO: HARP-7648. Reduce number of allocations here:\n        // a) Avoid creating the state for labels that don't pass early placement checks and make\n        //    this checks more strict.\n        // b) Break label state objects into a set of arrays held at group level, one for each\n        //    primitive field in the label state.\n        for (let i = 0; i < length; ++i) {\n            const textElement = group.elements[i];\n            const state = new TextElementState(textElement);\n            const textDistance = filter(state);\n            state.update(textDistance);\n            this.m_textElementStates[i] = state;\n        }\n    }\n\n    /**\n     * Indicates whether the group has been submitted to the [[TextElementsRenderer]] in the current\n     * frame.\n     */\n    get visited(): boolean {\n        return this.m_visited;\n    }\n\n    set visited(visited: boolean) {\n        this.m_visited = visited;\n    }\n\n    /**\n     * @returns the priority of the text elements in the group.\n     */\n    get priority() {\n        return this.group.priority;\n    }\n\n    /**\n     * Updates the fading state of all text elements within the group to the specified time.\n     * @param time The time to which the fading state will be updated.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined) {\n                elementState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * Calls the specified callback for every visible text elements in the group.\n     * @param visibleElementsCallback Functions that will be called for every visible text element\n     * in the group.\n     */\n    traverseVisibleElements(visibleElementsCallback: (e: TextElementState) => void): void {\n        for (const elementState of this.m_textElementStates) {\n            if (elementState !== undefined && elementState.visible) {\n                visibleElementsCallback(elementState);\n            }\n        }\n    }\n\n    /**\n     * Updates the states of elements within the group.\n     * @param filter Function used to do early rejection. @see [[TextElementFilter]].\n     */\n    updateElements(filter: TextElementFilter) {\n        for (const elementState of this.m_textElementStates) {\n            const textDistance = filter(elementState);\n            elementState.update(textDistance);\n        }\n    }\n\n    get size(): number {\n        return this.m_textElementStates.length;\n    }\n\n    /**\n     * Returns text element states.\n     * @returns Array of element states.\n     */\n    get textElementStates(): TextElementState[] {\n        return this.m_textElementStates;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert } from \"@here/harp-utils\";\nimport { RenderState } from \"./RenderState\";\nimport { TextElement } from \"./TextElement\";\nimport { TextElementType } from \"./TextElementType\";\n\n/**\n * `TextElementState` keeps the current state of a text element while it's being rendered.\n */\nexport class TextElementState {\n    /**\n     * @hidden\n     * Used during label placement to reserve space from front to back.\n     */\n    private m_viewDistance: number | undefined;\n\n    /**\n     * @hidden\n     * Used during rendering. The array type is used for line markers only, which have a points\n     * array and multiple icon positions to render. Since line markers use the same renderState\n     * for text part and icon, there is no separate array of [[RenderState]]s for the text parts\n     * of the line markers.\n     */\n    private m_iconRenderStates?: RenderState | RenderState[];\n\n    /**\n     * @hidden\n     * Used during rendering.\n     */\n    private m_textRenderState?: RenderState;\n\n    constructor(readonly element: TextElement) {}\n\n    get initialized(): boolean {\n        return this.m_textRenderState !== undefined || this.m_iconRenderStates !== undefined;\n    }\n\n    /**\n     * @returns `true` if any component of the element is visible, `false` otherwise.\n     */\n    get visible(): boolean {\n        if (this.m_textRenderState !== undefined && this.m_textRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderState = this.iconRenderState;\n        if (iconRenderState !== undefined && iconRenderState.isVisible()) {\n            return true;\n        }\n\n        const iconRenderStates = this.iconRenderStates;\n        if (iconRenderStates === undefined) {\n            return false;\n        }\n\n        for (const state of iconRenderStates) {\n            if (state.isVisible()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Resets the element to an initialized state.\n     */\n    reset() {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.reset();\n        }\n\n        if (this.iconRenderState) {\n            (this.m_iconRenderStates as RenderState).reset();\n        } else if (this.m_iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.reset();\n            }\n        }\n        this.m_viewDistance = undefined;\n    }\n\n    /**\n     * Replaces given text element, inheriting its current state.\n     * The predecessor text element state is erased.\n     * @param predecessor Text element state to be replaced.\n     */\n    replace(predecessor: TextElementState) {\n        this.m_textRenderState = predecessor.m_textRenderState;\n        this.m_iconRenderStates = predecessor.m_iconRenderStates;\n        predecessor.m_textRenderState = undefined;\n        predecessor.m_iconRenderStates = undefined;\n\n        if (this.element.glyphs === undefined) {\n            // Use the predecessor glyphs, bounds and case array until proper ones are computed.\n            this.element.glyphs = predecessor.element.glyphs;\n            this.element.bounds = predecessor.element.bounds;\n            this.element.glyphCaseArray = predecessor.element.glyphCaseArray;\n        }\n    }\n\n    /**\n     * Returns the last computed distance of the text element to the camera.\n     * @returns Distance to camera.\n     */\n    get viewDistance(): number | undefined {\n        return this.m_viewDistance;\n    }\n\n    /**\n     * Updates the text element state.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    update(viewDistance: number | undefined) {\n        if (this.initialized) {\n            this.setViewDistance(viewDistance);\n        } else if (viewDistance !== undefined) {\n            this.initialize(viewDistance);\n        }\n    }\n\n    /**\n     * Sets the distance of the element to the current view center.\n     * @param viewDistance The new view distance to set. If `undefined`, element is considered to\n     * be out of view.\n     */\n    setViewDistance(viewDistance: number | undefined) {\n        if (viewDistance === this.m_viewDistance) {\n            return;\n        }\n        this.m_viewDistance = viewDistance;\n    }\n\n    /**\n     * Return the last distance that has been computed for sorting during placement. This may not be\n     * the actual distance if the camera is moving, as the distance is computed only during\n     * placement. If the property `alwaysOnTop` is true, the value returned is always `0`.\n     *\n     * @returns 0 or negative distance to camera.\n     */\n    get renderDistance(): number {\n        return this.element.alwaysOnTop === true\n            ? 0\n            : this.m_viewDistance !== undefined\n            ? -this.m_viewDistance\n            : 0;\n    }\n\n    /**\n     * @returns The text render state.\n     */\n    get textRenderState(): RenderState | undefined {\n        return this.m_textRenderState;\n    }\n\n    /**\n     * Returns the icon render state for the case where the text element has only one icon.\n     * @returns The icon render state if the text element has a single icon, otherwise undefined.\n     */\n    get iconRenderState(): RenderState | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState ? this.m_iconRenderStates : undefined;\n    }\n\n    /**\n     * Returns the icon render states for text elements with multiple icons.\n     * @returns The icon render states if the text element has multiple icons, otherwise undefined.\n     */\n    get iconRenderStates(): RenderState[] | undefined {\n        if (this.m_iconRenderStates === undefined) {\n            return undefined;\n        }\n\n        return this.m_iconRenderStates instanceof RenderState\n            ? undefined\n            : (this.m_iconRenderStates as RenderState[]);\n    }\n\n    /**\n     * Updates the fading state to the specified time.\n     * @param time The current time.\n     * @param disableFading If `True` there will be no fading transitions, i.e., state will go\n     * directly from FadedIn to FadedOut and viceversa.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_textRenderState !== undefined) {\n            this.m_textRenderState.updateFading(time, disableFading);\n        }\n\n        if (this.iconRenderState !== undefined) {\n            const iconRenderState = this.m_iconRenderStates as RenderState;\n            iconRenderState.updateFading(time, disableFading);\n        } else if (this.iconRenderStates !== undefined) {\n            for (const renderState of this.m_iconRenderStates as RenderState[]) {\n                renderState.updateFading(time, disableFading);\n            }\n        }\n    }\n\n    /**\n     * @param viewDistance Current distance of the element to the view center.\n     */\n    private initialize(viewDistance: number) {\n        assert(this.m_textRenderState === undefined);\n        assert(this.m_iconRenderStates === undefined);\n\n        this.setViewDistance(viewDistance);\n\n        if (this.element.type === TextElementType.LineMarker) {\n            this.m_iconRenderStates = new Array<RenderState>();\n            for (const _point of this.element.points as THREE.Vector3[]) {\n                const iconRenderStates = this.m_iconRenderStates as RenderState[];\n                const renderState = new RenderState();\n                iconRenderStates.push(renderState);\n            }\n            return;\n        }\n\n        this.m_textRenderState = new RenderState();\n\n        if (this.element.type === TextElementType.PoiLabel) {\n            this.m_iconRenderStates = new RenderState();\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { assert, MathUtils } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n/**\n * State of fading.\n */\nexport enum FadingState {\n    Undefined = 0,\n    FadingIn = 1,\n    FadedIn = 2,\n    FadingOut = -1,\n    FadedOut = -2\n}\n\n/**\n * Time to fade in/fade out the labels in milliseconds.\n */\nexport const DEFAULT_FADE_TIME = 800;\n\n/**\n * State of rendering of the icon and text part of the `TextElement`. Mainly for fading the elements\n * in and out, to compute the opacity.\n *\n * @hidden\n */\nexport class RenderState {\n    private m_state = FadingState.Undefined;\n\n    /**\n     * Create a `RenderState`.\n     *\n     * @param value Current fading value [0..1].\n     * @param startTime Time stamp the fading started.\n     * @param opacity Computed opacity depending on value.\n     */\n    constructor(public value = 0.0, public startTime = 0, public opacity = 1.0) {}\n\n    /**\n     * Reset existing `RenderState` to appear like a fresh state.\n     */\n    reset() {\n        this.m_state = FadingState.Undefined;\n        this.value = 0.0;\n        this.startTime = 0.0;\n        this.opacity = 1.0;\n    }\n\n    /**\n     * @returns `true` if element state is `FadingState.Undefined`.\n     */\n    isUndefined(): boolean {\n        return this.m_state === FadingState.Undefined;\n    }\n\n    /**\n     * @returns `true` if element is either fading in or fading out.\n     */\n    isFading(): boolean {\n        const fading =\n            this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadingOut;\n        return fading;\n    }\n\n    /**\n     * @returns `true` if element is fading in.\n     */\n    isFadingIn(): boolean {\n        const fadingIn = this.m_state === FadingState.FadingIn;\n        return fadingIn;\n    }\n\n    /**\n     * @returns `true` if element is fading out.\n     */\n    isFadingOut(): boolean {\n        const fadingOut = this.m_state === FadingState.FadingOut;\n        return fadingOut;\n    }\n\n    /**\n     * @returns `true` if element is done with fading in.\n     */\n    isFadedIn(): boolean {\n        const fadedIn = this.m_state === FadingState.FadedIn;\n        return fadedIn;\n    }\n\n    /**\n     * @returns `true` if element is done with fading out.\n     */\n    isFadedOut(): boolean {\n        const fadedOut = this.m_state === FadingState.FadedOut;\n        return fadedOut;\n    }\n\n    /**\n     * @returns `true` if state is neither faded out nor undefined.\n     */\n    isVisible(): boolean {\n        return this.m_state !== FadingState.FadedOut && this.m_state !== FadingState.Undefined;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingIn]].\n     * If previous state is [[FadingState.FadingIn]] or [[FadingState.FadedIn]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeIn(time: number) {\n        if (this.m_state === FadingState.FadingIn || this.m_state === FadingState.FadedIn) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingOut) {\n            // The fadeout is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.value = 1.0 - this.value;\n            this.startTime = time - this.value * DEFAULT_FADE_TIME;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 0;\n        }\n\n        this.m_state = FadingState.FadingIn;\n    }\n\n    /**\n     * Updates the state to [[FadingState.FadingOut]].\n     * If previous state is [[FadingState.FadingOut]] or [[FadingState.FadedOut]] it remains\n     * unchanged.\n     *\n     * @param time Current time.\n     */\n    startFadeOut(time: number) {\n        if (this.m_state === FadingState.FadingOut || this.m_state === FadingState.FadedOut) {\n            return;\n        }\n\n        if (this.m_state === FadingState.FadingIn) {\n            // The fade-in is not complete: compute the virtual fadingStartTime in the past, to get\n            // a correct end time:\n            this.startTime = time - this.value * DEFAULT_FADE_TIME;\n            this.value = 1.0 - this.value;\n        } else {\n            this.startTime = time;\n            this.value = 0.0;\n            this.opacity = 1;\n        }\n\n        this.m_state = FadingState.FadingOut;\n    }\n\n    /**\n     * Updates opacity to current time, changing the state to [[FadingState.FadedOut]] or\n     * [[FadingState.FadedIn]] when the opacity becomes 0 or 1 respectively.\n     * It does nothing if [[isFading]] !== `true`.\n     *\n     * @param time Current time.\n     * @param disableFading `true` if fading is disabled, `false` otherwise.\n     */\n    updateFading(time: number, disableFading: boolean): void {\n        if (this.m_state !== FadingState.FadingIn && this.m_state !== FadingState.FadingOut) {\n            return;\n        }\n\n        if (this.startTime === 0) {\n            this.startTime = time;\n        }\n\n        const fadingTime = time - this.startTime;\n        const startValue = this.m_state === FadingState.FadingIn ? 0 : 1;\n        const endValue = this.m_state === FadingState.FadingIn ? 1 : 0;\n\n        if (disableFading || fadingTime >= DEFAULT_FADE_TIME) {\n            this.value = 1.0;\n            this.opacity = endValue;\n            this.m_state =\n                this.m_state === FadingState.FadingIn ? FadingState.FadedIn : FadingState.FadedOut;\n        } else {\n            // TODO: HARP-7648. Do this once for all labels (calculate the last frame value\n            // increment).\n            this.value = fadingTime / DEFAULT_FADE_TIME;\n\n            this.opacity = THREE.Math.clamp(\n                MathUtils.smootherStep(startValue, endValue, this.value),\n                0,\n                1\n            );\n            assert(this.isFading());\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { IChannel } from \"@here/harp-utils\";\nimport { PrePlacementResult } from \"./Placement\";\n\nexport class UpdateStats {\n    tiles: number = 0;\n    totalGroups: number = 0;\n    newGroups: number = 0;\n    totalLabels: number = 0;\n    results = new Array<number>(PrePlacementResult.Count);\n\n    constructor(private readonly m_logger: IChannel) {\n        this.results.fill(0);\n    }\n\n    clear() {\n        this.tiles = 0;\n        this.totalGroups = 0;\n        this.newGroups = 0;\n        this.totalLabels = 0;\n        this.results.fill(0);\n    }\n    log() {\n        this.m_logger.debug(\"Tiles\", this.tiles);\n        this.m_logger.debug(\"Total groups\", this.totalGroups);\n        this.m_logger.debug(\"New groups\", this.newGroups);\n        this.m_logger.debug(\"Total labels\", this.totalLabels);\n        this.m_logger.debug(\"Placed labels\", this.results[PrePlacementResult.Ok]);\n        this.m_logger.debug(\"Invisible\", this.results[PrePlacementResult.Invisible]);\n        this.m_logger.debug(\"Poi not ready\", this.results[PrePlacementResult.NotReady]);\n        this.m_logger.debug(\"Too far\", this.results[PrePlacementResult.TooFar]);\n        this.m_logger.debug(\"Duplicate\", this.results[PrePlacementResult.Duplicate]);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { PriorityListGroup } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * Group of [[TextElement]] sharing same priority.\n */\nexport class TextElementGroup extends PriorityListGroup<TextElement> {}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GroupedPriorityList } from \"@here/harp-utils\";\nimport { TextElement } from \"./TextElement\";\n\n/**\n * List of [[TextElement]] groups sorted by priority.\n */\nexport class TextElementGroupPriorityList extends GroupedPriorityList<TextElement> {}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport * as THREE from \"three\";\n\nimport {\n    IBloomEffect,\n    IOutlineEffect,\n    ISepiaEffect,\n    IVignetteEffect\n} from \"@here/harp-datasource-protocol\";\nimport { SepiaShader, VignetteShader } from \"@here/harp-materials\";\nimport { IPassManager } from \"./IPassManager\";\nimport { LowResRenderPass } from \"./LowResRenderPass\";\nimport { MSAARenderPass, MSAASampling } from \"./MSAARenderPass\";\nimport { OutlineEffect } from \"./Outline\";\nimport { RenderPass, ShaderPass } from \"./Pass\";\nimport { BloomPass } from \"./UnrealBloomPass\";\n\nconst DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_1;\nconst DEFAULT_STATIC_MSAA_SAMPLING_LEVEL = MSAASampling.Level_4;\n\n/**\n * Interface for the antialias settings passed when instantiating a [[MapView]], and transferred to\n * the [[MapRenderingManager]] instance. These parameters can be changed at runtime as opposed to\n * the native WebGL antialiasing.\n */\nexport interface IMapAntialiasSettings {\n    /**\n     * Whether the MSAA is enabled or not.\n     *\n     * @default `false`\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The sampling level to use for MSAA during continuous rendering.\n     *\n     * @default `MSAASampling.Level_1`\n     */\n    dynamicMsaaSamplingLevel?: MSAASampling;\n\n    /**\n     * The sampling level to use for MSAA when the rendering stops.\n     *\n     * @default `MSAASampling.Level_4`\n     */\n    staticMsaaSamplingLevel?: MSAASampling;\n}\n\n/**\n * The `MapRenderingManager` class manages the map rendering (as opposed to text) by dispatching the\n * [[MapRenderingManager.render]] call to a set of internal [[Pass]] instances. It provides an API\n * to modify some of the rendering processes like the antialiasing behaviour at runtime.\n */\nexport interface IMapRenderingManager extends IPassManager {\n    /**\n     * Bloom effect parameters.\n     */\n    bloom: IBloomEffect;\n\n    /**\n     * Outline effect parameters.\n     */\n    outline: IOutlineEffect;\n\n    /**\n     * Vignette effect parameters.\n     */\n    vignette: IVignetteEffect;\n\n    /**\n     * Sepia effect parameters.\n     */\n    sepia: ISepiaEffect;\n\n    /**\n     * Set a `pixelRatio` for dynamic rendering (i.e. during animations). If a value is specified,\n     * the `LowResRenderPass` will be employed to used to render the scene into a lower resolution\n     * render target, which will then be rendered to the screen.\n     */\n    lowResPixelRatio?: number;\n\n    /**\n     * The level of MSAA sampling while the user interacts. It should be a low level so that the\n     * MSAA does not impact the framerate.\n     */\n    dynamicMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     */\n    msaaEnabled: boolean;\n\n    /**\n     * The higher level of MSAA sampling for a last frame to render, when the camera is static. It\n     * can be a high level, providing high quality renders requiring few tens of seconds, since no\n     * frame is expected to immediately follow in the requestAnimationFrame. It is still limited by\n     * zooming, since zooming is not requestAnimationFrame-based and can lead to stuttering if the\n     * render time is too long, except on desktop Mac, where mouse interaction already implements\n     * some damping. Higher levels of sampling may lead to noticeable color banding, visible in\n     * areas with a slight color gradient, like large areas or the sky background.\n     */\n    staticMsaaSamplingLevel: MSAASampling;\n\n    /**\n     * The method to call to render the map. This method depends on an `isStaticFrame` boolean that\n     * notifies the pass manager to switch to a higher level render quality for the last frame.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     * @param time Optional time argument provided by the requestAnimationFrame, to pass to\n     * sub-passes.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean,\n        time?: number\n    ): void;\n\n    /**\n     * Updating the outline rebuilds the outline materials of every outlined mesh.\n     *\n     * @param options outline options from the [[Theme]].\n     */\n    updateOutline(options: {\n        thickness: number;\n        color: string;\n        ghostExtrudedPolygons: boolean;\n    }): void;\n}\n\n/**\n * The implementation of [[IMapRenderingManager]] to instantiate in [[MapView]] and manage the map\n * rendering.\n */\nexport class MapRenderingManager implements IMapRenderingManager {\n    bloom = {\n        enabled: false,\n        strength: 1.5,\n        radius: 0.4,\n        threshold: 0.85\n    };\n    outline = {\n        enabled: false,\n        thickness: 0.005,\n        color: \"#000000\",\n        ghostExtrudedPolygons: false,\n        needsUpdate: false\n    };\n    vignette = {\n        enabled: false,\n        offset: 1.0,\n        darkness: 1.0\n    };\n    sepia = {\n        enabled: false,\n        amount: 0.5\n    };\n\n    private m_width: number = 1;\n    private m_height: number = 1;\n\n    private m_outlineEffect?: OutlineEffect;\n    private m_msaaPass: MSAARenderPass;\n    private m_renderPass: RenderPass = new RenderPass();\n    private m_target1: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_target2: THREE.WebGLRenderTarget = new THREE.WebGLRenderTarget(1, 1);\n    private m_bloomPass?: BloomPass;\n    private m_sepiaPass: ShaderPass = new ShaderPass(SepiaShader);\n    private m_vignettePass: ShaderPass = new ShaderPass(VignetteShader);\n    private m_readBuffer: THREE.WebGLRenderTarget;\n    private m_dynamicMsaaSamplingLevel: MSAASampling;\n    private m_staticMsaaSamplingLevel: MSAASampling;\n    private m_lowResPass: LowResRenderPass;\n\n    /**\n     * The constructor of `MapRenderingManager`.\n     *\n     * @param width Width of the frame buffer.\n     * @param height Height of the frame buffer.\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     * @param antialiasSetting The object defining the demeanor of MSAA.\n     */\n    constructor(\n        width: number,\n        height: number,\n        lowResPixelRatio: number | undefined,\n        antialiasSettings: IMapAntialiasSettings | undefined = { msaaEnabled: false }\n    ) {\n        this.m_readBuffer = new THREE.WebGLRenderTarget(width, height);\n        this.m_msaaPass = new MSAARenderPass();\n        this.m_msaaPass.enabled =\n            antialiasSettings !== undefined ? antialiasSettings.msaaEnabled === true : false;\n        this.m_dynamicMsaaSamplingLevel =\n            antialiasSettings.dynamicMsaaSamplingLevel === undefined\n                ? DEFAULT_DYNAMIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.dynamicMsaaSamplingLevel;\n        this.m_staticMsaaSamplingLevel =\n            antialiasSettings.staticMsaaSamplingLevel === undefined\n                ? DEFAULT_STATIC_MSAA_SAMPLING_LEVEL\n                : antialiasSettings.staticMsaaSamplingLevel;\n        this.m_lowResPass = new LowResRenderPass(lowResPixelRatio);\n        this.m_lowResPass.enabled = lowResPixelRatio !== undefined;\n    }\n\n    updateOutline(options: { thickness: number; color: string; ghostExtrudedPolygons: boolean }) {\n        this.outline.color = options.color;\n        this.outline.thickness = options.thickness;\n        this.outline.ghostExtrudedPolygons = options.ghostExtrudedPolygons;\n        this.outline.needsUpdate = true;\n    }\n\n    /**\n     * The method to call to render the map with the `MapRenderingManager` instance. It contains the\n     * chain of sub-passes that can transfer the write and read buffers, and other sheer rendering\n     * conditions as disabling AA when a high DPI device is in use.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the map with.\n     * @param scene The ThreeJS Scene instance containing the map objects to render.\n     * @param camera The ThreeJS Camera instance to render the scene through.\n     * @param isStaticFrame Whether the frame to render is static or dynamic. Selects level of\n     * antialiasing.\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        isStaticFrame: boolean\n    ) {\n        const target = null;\n        if (!isStaticFrame && this.m_lowResPass.pixelRatio !== undefined) {\n            // Not designed to be combined with our own MSAA\n            this.m_lowResPass.renderToScreen = true;\n            this.m_lowResPass.render(renderer, scene, camera, target, this.m_readBuffer);\n            return;\n        }\n\n        const usePostEffects =\n            this.bloom.enabled ||\n            this.outline.enabled ||\n            this.vignette.enabled ||\n            this.sepia.enabled;\n\n        let activeTarget: null | THREE.WebGLRenderTarget = null;\n\n        // 1. If the bloom is enabled, clear the depth.\n        if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n            renderer.setRenderTarget(this.m_target1);\n            renderer.clearDepth();\n        }\n\n        // 2. Render the map.\n\n        if (this.m_msaaPass.enabled) {\n            // Use a higher MSAA sampling level for static rendering.\n            this.m_msaaPass.samplingLevel = isStaticFrame\n                ? this.m_staticMsaaSamplingLevel\n                : this.m_dynamicMsaaSamplingLevel;\n            // MSAA is the only effect for the moment.\n            this.m_msaaPass.renderToScreen = !usePostEffects;\n            // Render to the specified target with the MSAA pass.\n            this.m_msaaPass.render(renderer, scene, camera, target, this.m_readBuffer);\n        } else {\n            if (this.bloom.enabled || this.vignette.enabled || this.sepia.enabled) {\n                activeTarget = this.m_target1;\n                this.m_renderPass.render(renderer, scene, camera, this.m_target1, null!);\n            } else if (!this.outline.enabled || (this.outline.enabled && !this.bloom.enabled)) {\n                renderer.render(scene, camera);\n            }\n        }\n\n        // 3. Apply effects\n        if (this.outline.enabled) {\n            if (this.m_outlineEffect === undefined) {\n                this.m_outlineEffect = new OutlineEffect(renderer);\n            }\n            if (this.outline.needsUpdate) {\n                this.m_outlineEffect.color = this.outline.color;\n                this.m_outlineEffect.thickness = this.outline.thickness;\n                this.m_outlineEffect.ghostExtrudedPolygons = this.outline.ghostExtrudedPolygons;\n                this.outline.needsUpdate = false;\n            }\n            const nextEffectEnabled =\n                this.bloom.enabled || this.vignette.enabled || this.sepia.enabled;\n            if (nextEffectEnabled) {\n                activeTarget = this.m_target1;\n            }\n            renderer.setRenderTarget(nextEffectEnabled ? activeTarget : null!);\n            this.m_outlineEffect.render(scene, camera);\n        }\n\n        if (this.bloom.enabled) {\n            if (this.m_bloomPass === undefined) {\n                this.m_bloomPass = new BloomPass(\n                    new THREE.Vector2(this.m_width, this.m_height),\n                    this.bloom.strength,\n                    this.bloom.radius,\n                    this.bloom.threshold\n                );\n            }\n            const nextEffectEnabled = this.vignette.enabled || this.sepia.enabled;\n            this.m_bloomPass.renderToScreen = !nextEffectEnabled;\n            this.m_bloomPass.radius = this.bloom.radius;\n            this.m_bloomPass.strength = this.bloom.strength;\n            this.m_bloomPass.threshold = this.bloom.threshold;\n            this.m_bloomPass.render(renderer, scene, camera, null!, activeTarget!);\n        } else if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.dispose();\n            this.m_bloomPass = undefined;\n        }\n\n        if (this.vignette.enabled) {\n            const oldTarget = activeTarget!;\n            const nextEffectEnabled = this.sepia.enabled;\n            this.m_vignettePass.uniforms.offset.value = this.vignette.offset;\n            this.m_vignettePass.uniforms.darkness.value = this.vignette.darkness;\n            this.m_vignettePass.renderToScreen = !nextEffectEnabled;\n            if (nextEffectEnabled) {\n                activeTarget = activeTarget === this.m_target1 ? this.m_target2 : this.m_target1;\n            }\n            this.m_vignettePass.render(renderer, scene, camera, activeTarget!, oldTarget);\n        }\n\n        if (this.sepia.enabled) {\n            this.m_sepiaPass.renderToScreen = true;\n            this.m_sepiaPass.uniforms.amount.value = this.sepia.amount;\n            this.m_sepiaPass.render(renderer, scene, camera, null!, activeTarget!);\n        }\n    }\n\n    /**\n     * The resize function to call on resize events to resize the render targets. It shall include\n     * the resize methods of all the sub-passes used in `MapRenderingManager`.\n     *\n     * @param width New width to use.\n     * @param height New height to use.\n     */\n    setSize(width: number, height: number) {\n        this.m_readBuffer.setSize(width, height);\n        this.m_msaaPass.setSize(width, height);\n        if (this.m_bloomPass !== undefined) {\n            this.m_bloomPass.setSize(width, height);\n        }\n        this.m_lowResPass.setSize(width, height);\n        this.m_target1.setSize(width, height);\n        this.m_target2.setSize(width, height);\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    /**\n     * The `lowResPixelRatio` determines the resolution of the internal `WebGLRenderTarget`. Values\n     * between 0.5 and `window.devicePixelRatio` can be tried to give  good results. A value of\n     * `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     */\n    get lowResPixelRatio(): number | undefined {\n        return this.m_lowResPass.pixelRatio;\n    }\n\n    set lowResPixelRatio(pixelRatio: number | undefined) {\n        this.m_lowResPass.pixelRatio = pixelRatio;\n        this.m_lowResPass.enabled = pixelRatio !== undefined;\n    }\n\n    /**\n     * Set the level of sampling while the user interacts.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set dynamicMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_dynamicMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined during continuous rendering.\n     */\n    get dynamicMsaaSamplingLevel(): MSAASampling {\n        return this.m_dynamicMsaaSamplingLevel;\n    }\n\n    /**\n     * Enable or disable the MSAA. If disabled, `MapRenderingManager` will use the renderer provided\n     * in the [[MapRenderingManager.render]] method to render the scene.\n     *\n     * @param value If `true`, MSAA is enabled, disabled otherwise.\n     */\n    set msaaEnabled(value: boolean) {\n        this.m_msaaPass.enabled = value;\n    }\n\n    /**\n     * Return whether the MSAA is enabled.\n     */\n    get msaaEnabled(): boolean {\n        return this.m_msaaPass.enabled;\n    }\n\n    /**\n     * Set the sampling level for rendering static frames.\n     *\n     * @param samplingLevel The sampling level.\n     */\n    set staticMsaaSamplingLevel(samplingLevel: MSAASampling) {\n        this.m_staticMsaaSamplingLevel = samplingLevel;\n    }\n\n    /**\n     * Return the sampling level defined for rendering static frames.\n     */\n\n    get staticMsaaSamplingLevel(): MSAASampling {\n        return this.m_staticMsaaSamplingLevel;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { CopyMaterial, CopyShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\n\nimport { Pass } from \"./Pass\";\n\n/**\n * The `LowResRenderPass` renders the scene at a lower resolution into an internal\n * `WebGLRenderTarget`, and then copies the result into the frame buffer. The size of the internal\n * buffer is determined by the current frame buffer size multiplied by `pixelRatio`.\n *\n * @note Since no anti-aliasing is applied during dynamic rendering, visual artifacts may be\n * visible.\n */\nexport class LowResRenderPass extends Pass {\n    private m_renderTarget: THREE.WebGLRenderTarget | null = null;\n    private readonly m_localCamera: THREE.OrthographicCamera = new THREE.OrthographicCamera(\n        -1,\n        1,\n        1,\n        -1,\n        0,\n        1\n    );\n    private readonly m_quadScene: THREE.Scene = new THREE.Scene();\n    private readonly m_quadUniforms: { [uniformName: string]: THREE.IUniform } =\n        CopyShader.uniforms;\n    private readonly m_quadMaterial: THREE.ShaderMaterial = new CopyMaterial(this.m_quadUniforms);\n    private readonly m_quad: THREE.Mesh = new THREE.Mesh(\n        new THREE.PlaneBufferGeometry(2, 2),\n        this.m_quadMaterial\n    );\n    private m_pixelRatio: number | undefined;\n    private m_savedWidth = 0;\n    private m_savedHeight = 0;\n\n    /**\n     * The constructor for `LowResRenderPass`. It builds an internal scene with a camera looking at\n     * a quad.\n     *\n     * @param lowResPixelRatio The `pixelRatio` determines the resolution of the internal\n     *  `WebGLRenderTarget`. Values between 0.5 and `window.devicePixelRatio` can be tried to give\n     * good results. A value of `undefined` disables the low res render pass. The value should not\n     * be larger than`window.devicePixelRatio`.\n     */\n    constructor(public lowResPixelRatio?: number) {\n        super();\n        this.m_quad.frustumCulled = false;\n        this.m_quadScene.add(this.m_quad);\n        this.m_pixelRatio = lowResPixelRatio;\n    }\n\n    /**\n     * Releases all used resources.\n     */\n    dispose() {\n        this.m_quadMaterial.dispose();\n        this.m_quad.geometry.dispose();\n        if (this.m_renderTarget !== null) {\n            this.m_renderTarget.dispose();\n            this.m_renderTarget = null;\n        }\n    }\n\n    /**\n     * If a value is specified, a low resolution render pass is used to render the scene into a\n     * low resolution render target, before it is copied to the screen.\n     *\n     * A value of `undefined` disables the low res render pass. The value should not be larger than\n     * `window.devicePixelRatio`.\n     *\n     * @default `undefined`\n     */\n    set pixelRatio(ratio: number | undefined) {\n        this.m_pixelRatio = ratio;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio)\n            );\n        }\n    }\n\n    get pixelRatio(): number | undefined {\n        return this.m_pixelRatio;\n    }\n\n    /**\n     * The render function of `LowResRenderPass`. It renders the whole scene into an internal\n     * `WebGLRenderTarget` instance with a lower resolution, using the passed in `WebGLRenderer`.\n     * The low resolution image is then copied to the `writeBuffer`, which is `undefined` in case it\n     * is the screen.\n     *\n     * @param renderer The ThreeJS WebGLRenderer instance to render the scene with.\n     * @param scene The ThreeJS Scene instance to render the scene with.\n     * @param camera The ThreeJS Camera instance to render the scene with.\n     * @param writeBuffer A ThreeJS WebGLRenderTarget instance to render the scene to.\n     * @param readBuffer A ThreeJS WebGLRenderTarget instance to render the scene.\n     * @override\n     */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.PerspectiveCamera | THREE.OrthographicCamera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        if (!this.enabled || this.pixelRatio === undefined) {\n            return;\n        }\n\n        // Initiates the local render target with the read buffer's dimensions, if not available.\n        if (this.m_renderTarget === null) {\n            this.m_savedWidth = readBuffer.width;\n            this.m_savedHeight = readBuffer.height;\n            this.m_renderTarget = new THREE.WebGLRenderTarget(\n                Math.floor(this.m_savedWidth * this.pixelRatio),\n                Math.floor(this.m_savedHeight * this.pixelRatio),\n                {\n                    minFilter: THREE.LinearFilter,\n                    magFilter: THREE.LinearFilter,\n                    format: THREE.RGBAFormat,\n                    depthBuffer: true,\n                    stencilBuffer: true\n                }\n            );\n            this.m_renderTarget.texture.name = \"LowResRenderPass.sample\";\n        }\n\n        this.m_quadUniforms.tDiffuse.value = this.m_renderTarget.texture;\n        this.m_quadUniforms.opacity.value = 1.0;\n\n        const oldRenderTarget = renderer.getRenderTarget();\n        renderer.setRenderTarget(this.m_renderTarget);\n        renderer.clear();\n        // Render into the low resolution internal render target.\n        renderer.render(scene, camera);\n\n        // Render the low resolution target into the screen.\n        // NOTE: three.js doesn't like undefined as renderTarget, but works with `null`\n        renderer.setRenderTarget(this.renderToScreen ? null : writeBuffer);\n        renderer.clear();\n        renderer.render(this.m_quadScene, this.m_localCamera);\n        renderer.setRenderTarget(oldRenderTarget);\n    }\n\n    /**\n     * Resize the internal render target to match the new size specified. The size of internal\n     * buffer depends on the `pixelRatio`.\n     *\n     * @param width New width to apply to the render target.\n     * @param height New height to apply to the render target.\n     * @override\n     */\n    setSize(width: number, height: number) {\n        this.m_savedWidth = width;\n        this.m_savedHeight = height;\n        if (this.m_renderTarget && this.pixelRatio !== undefined) {\n            this.m_renderTarget.setSize(\n                Math.floor(width * this.pixelRatio),\n                Math.floor(height * this.pixelRatio)\n            );\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { chainCallbacks } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\nconst vertexShaderChunk = `\n    uniform float outlineThickness;\n\n    vec4 calculateOutline( vec4 pos, vec3 objectNormal, vec4 skinned ) {\n\n        float thickness = outlineThickness;\n        const float ratio = 1.0;\n        vec4 pos2 = projectionMatrix * modelViewMatrix * vec4( skinned.xyz + objectNormal, 1.0 );\n        vec4 norm = normalize( pos - pos2 );\n        return pos + norm * thickness * pos.w * ratio;\n\n    }`;\n\nconst vertexShaderChunk2 = `\n    #if ! defined( LAMBERT ) && ! defined( PHONG ) && ! defined( TOON ) && ! defined( STANDARD )\n        #ifndef USE_ENVMAP\n            vec3 objectNormal = normalize( normal );\n        #endif\n    #endif\n\n    #ifdef FLIP_SIDED\n        objectNormal = -objectNormal;\n    #endif\n\n    #ifdef DECLARE_TRANSFORMED\n        vec3 transformed = vec3( position );\n    #endif\n\n    gl_Position = calculateOutline( gl_Position, objectNormal, vec4( transformed, 1.0 ) );\n\n    #include <fog_vertex>`;\n\nconst fragmentShader = `\n    #include <common>\n    #include <fog_pars_fragment>\n\n    uniform vec3 outlineColor;\n    uniform float outlineAlpha;\n\n    void main() {\n\n        gl_FragColor = vec4( outlineColor, outlineAlpha );\n\n        #include <fog_fragment>\n\n    }`;\n\nexport class OutlineEffect {\n    enabled: boolean = true;\n\n    autoClear: boolean;\n    domElement: HTMLCanvasElement;\n    shadowMap: THREE.WebGLShadowMap;\n\n    private m_defaultThickness: number = 0.02;\n    private m_defaultColor: THREE.Color = new THREE.Color(0, 0, 0);\n    private m_defaultAlpha: number = 1;\n    private m_defaultKeepAlive: boolean = false;\n    private m_ghostExtrudedPolygons: boolean = false;\n\n    private m_cache: any = {};\n    private m_removeThresholdCount: number = 60;\n    private m_originalMaterials: any = {};\n    private m_originalOnBeforeRenders: any = {};\n\n    private m_shaderIDs: { [key: string]: string } = {\n        MeshBasicMaterial: \"basic\",\n        MeshLambertMaterial: \"lambert\",\n        MeshPhongMaterial: \"phong\",\n        MeshToonMaterial: \"phong\",\n        MeshStandardMaterial: \"physical\",\n        MeshPhysicalMaterial: \"physical\"\n    };\n    private m_uniformsChunk = {\n        outlineThickness: { value: this.m_defaultThickness },\n        outlineColor: { value: this.m_defaultColor },\n        outlineAlpha: { value: this.m_defaultAlpha }\n    };\n\n    constructor(private m_renderer: THREE.WebGLRenderer) {\n        this.autoClear = m_renderer.autoClear;\n        this.domElement = m_renderer.domElement;\n        this.shadowMap = m_renderer.shadowMap;\n    }\n\n    set thickness(thickness: number) {\n        this.m_defaultThickness = thickness;\n        this.m_uniformsChunk.outlineThickness.value = thickness;\n        this.m_cache = {};\n    }\n\n    set color(color: string) {\n        this.m_defaultColor.set(color);\n        this.m_cache = {};\n    }\n\n    set ghostExtrudedPolygons(ghost: boolean) {\n        this.m_ghostExtrudedPolygons = ghost;\n    }\n\n    clear(color: boolean, depth: boolean, stencil: boolean) {\n        this.m_renderer.clear(color, depth, stencil);\n    }\n\n    getPixelRatio() {\n        return this.m_renderer.getPixelRatio();\n    }\n\n    setPixelRatio(value: number) {\n        this.m_renderer.setPixelRatio(value);\n    }\n\n    getSize(target: THREE.Vector2) {\n        return this.m_renderer.getSize(target);\n    }\n\n    setSize(width: number, height: number, updateStyle: boolean) {\n        this.m_renderer.setSize(width, height, updateStyle);\n    }\n\n    setViewport(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setViewport(x, y, width, height);\n    }\n\n    setScissor(x: number, y: number, width: number, height: number) {\n        this.m_renderer.setScissor(x, y, width, height);\n    }\n\n    setScissorTest(boolean: boolean) {\n        this.m_renderer.setScissorTest(boolean);\n    }\n\n    setRenderTarget(renderTarget: THREE.WebGLRenderTarget) {\n        this.m_renderer.setRenderTarget(renderTarget);\n    }\n\n    render(scene: THREE.Scene, camera: THREE.Camera) {\n        // Re-rendering the scene with the outline effect enables to hide the\n        // extruded polygons and show only the outlines (it is a hack and should be\n        // implemented another way!).\n        if (this.m_ghostExtrudedPolygons) {\n            if (!this.enabled) {\n                this.m_renderer.render(scene, camera);\n                return;\n            }\n\n            const currentAutoClear = this.m_renderer.autoClear;\n            this.m_renderer.autoClear = this.autoClear;\n\n            this.m_renderer.render(scene, camera);\n\n            this.m_renderer.autoClear = currentAutoClear;\n        }\n\n        this.renderOutline(scene, camera);\n    }\n\n    renderOutline(scene: THREE.Scene, camera: THREE.Camera) {\n        const currentAutoClear = this.m_renderer.autoClear;\n        const currentSceneAutoUpdate = scene.autoUpdate;\n        const currentSceneBackground = scene.background;\n        const currentShadowMapEnabled = this.m_renderer.shadowMap.enabled;\n\n        scene.autoUpdate = false;\n        scene.background = null;\n        this.m_renderer.autoClear = false;\n        this.m_renderer.shadowMap.enabled = false;\n\n        scene.traverse(this.setOutlineMaterial.bind(this));\n\n        this.m_renderer.render(scene, camera);\n\n        scene.traverse(this.restoreOriginalMaterial.bind(this));\n\n        this.cleanupCache();\n\n        scene.autoUpdate = currentSceneAutoUpdate;\n        scene.background = currentSceneBackground;\n        this.m_renderer.autoClear = currentAutoClear;\n        this.m_renderer.shadowMap.enabled = currentShadowMapEnabled;\n    }\n\n    private createInvisibleMaterial() {\n        return new THREE.ShaderMaterial({ name: \"invisible\", visible: false });\n    }\n\n    private createMaterial(originalMaterial: THREE.Material) {\n        const shaderID = this.m_shaderIDs[originalMaterial.type];\n        let originalUniforms;\n        let originalVertexShader;\n\n        if (shaderID !== undefined) {\n            const shader = THREE.ShaderLib[shaderID];\n            originalUniforms = shader.uniforms;\n            originalVertexShader = shader.vertexShader;\n        } else if ((originalMaterial as any).isRawShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n\n            if (\n                !/attribute\\s+vec3\\s+position\\s*;/.test(originalVertexShader) ||\n                !/attribute\\s+vec3\\s+normal\\s*;/.test(originalVertexShader)\n            ) {\n                return this.createInvisibleMaterial();\n            }\n        } else if ((originalMaterial as any).isShaderMaterial === true) {\n            originalUniforms = (originalMaterial as any).uniforms;\n            originalVertexShader = (originalMaterial as any).vertexShader;\n        } else {\n            return this.createInvisibleMaterial();\n        }\n\n        const uniforms = { ...originalUniforms, ...this.m_uniformsChunk };\n\n        const vertexShader = originalVertexShader\n            // put vertexShaderChunk right before \"void main() {...}\"\n            .replace(/void\\s+main\\s*\\(\\s*\\)/, vertexShaderChunk + \"\\nvoid main()\")\n            // put vertexShaderChunk2 the end of \"void main() {...}\"\n            // Note: here assums originalVertexShader ends with \"}\" of \"void main() {...}\"\n            .replace(/\\}\\s*$/, vertexShaderChunk2 + \"\\n}\")\n            // remove any light related lines\n            // Note: here is very sensitive to originalVertexShader\n            // TODO: consider safer way\n            .replace(/#include\\s+<[\\w_]*light[\\w_]*>/g, \"\");\n\n        const defines = {};\n\n        if (\n            !/vec3\\s+transformed\\s*=/.test(originalVertexShader) &&\n            !/#include\\s+<begin_vertex>/.test(originalVertexShader)\n        ) {\n            (defines as any).DECLARE_TRANSFORMED = true;\n        }\n\n        return new THREE.ShaderMaterial({\n            defines,\n            uniforms,\n            vertexShader,\n            fragmentShader,\n            side: THREE.BackSide,\n            //wireframe: true,\n            skinning: false,\n            morphTargets: false,\n            morphNormals: false,\n            fog: false\n        });\n    }\n\n    private getOutlineMaterialFromCache(originalMaterial: THREE.Material) {\n        let data = this.m_cache[originalMaterial.uuid];\n\n        if (data === undefined) {\n            data = {\n                material: this.createMaterial(originalMaterial),\n                used: true,\n                keepAlive: this.m_defaultKeepAlive,\n                count: 0\n            };\n\n            this.m_cache[originalMaterial.uuid] = data;\n        }\n\n        data.used = true;\n\n        return data.material;\n    }\n\n    private getOutlineMaterial(originalMaterial: THREE.Material) {\n        const outlineMaterial = this.getOutlineMaterialFromCache(originalMaterial);\n\n        this.m_originalMaterials[outlineMaterial.uuid] = originalMaterial;\n\n        this.updateOutlineMaterial(outlineMaterial, originalMaterial);\n\n        return outlineMaterial;\n    }\n\n    private setOutlineMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.getOutlineMaterial(\n                    ((object as THREE.Mesh).material as THREE.Material[])[i]\n                );\n            }\n        } else {\n            (object as THREE.Mesh).material = this.getOutlineMaterial(\n                (object as THREE.Mesh).material as THREE.Material\n            );\n        }\n\n        this.m_originalOnBeforeRenders[object.uuid] = object.onBeforeRender;\n        object.onBeforeRender = chainCallbacks(\n            object.onBeforeRender,\n            this.onBeforeRender.bind(this)\n        );\n    }\n\n    private restoreOriginalMaterial(object: THREE.Object3D) {\n        if ((object as THREE.Mesh).material === undefined) {\n            return;\n        }\n\n        if (Array.isArray((object as THREE.Mesh).material)) {\n            for (\n                let i = 0, il = ((object as THREE.Mesh).material as THREE.Material[]).length;\n                i < il;\n                i++\n            ) {\n                ((object as THREE.Mesh).material as THREE.Material[])[i] = this.m_originalMaterials[\n                    ((object as THREE.Mesh).material as THREE.Material[])[i].uuid\n                ];\n            }\n        } else {\n            (object as THREE.Mesh).material = this.m_originalMaterials[\n                ((object as THREE.Mesh).material as THREE.Material).uuid\n            ];\n        }\n\n        object.onBeforeRender = this.m_originalOnBeforeRenders[object.uuid];\n    }\n\n    private onBeforeRender(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        geometry: THREE.Geometry | THREE.BufferGeometry,\n        material: THREE.Material,\n        group: THREE.Group\n    ) {\n        const originalMaterial = this.m_originalMaterials[material.uuid];\n\n        // just in case\n        if (originalMaterial === undefined) {\n            return;\n        }\n\n        this.updateUniforms(material, originalMaterial);\n    }\n\n    private updateUniforms(material: THREE.Material, originalMaterial: THREE.Material) {\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).uniforms.outlineAlpha.value = originalMaterial.opacity;\n\n        if (outlineParameters !== undefined) {\n            if (outlineParameters.thickness !== undefined) {\n                (material as any).uniforms.outlineThickness.value = outlineParameters.thickness;\n            }\n            if (outlineParameters.color !== undefined) {\n                (material as any).uniforms.outlineColor.value.fromArray(outlineParameters.color);\n            }\n            if (outlineParameters.alpha !== undefined) {\n                (material as any).uniforms.outlineAlpha.value = outlineParameters.alpha;\n            }\n        }\n    }\n\n    private updateOutlineMaterial(material: THREE.Material, originalMaterial: THREE.Material) {\n        if (material.name === \"invisible\") {\n            return;\n        }\n\n        const outlineParameters = originalMaterial.userData.outlineParameters;\n\n        (material as any).skinning = (originalMaterial as any).skinning;\n        (material as any).morphTargets = (originalMaterial as any).morphTargets;\n        (material as any).morphNormals = (originalMaterial as any).morphNormals;\n        material.fog = originalMaterial.fog;\n\n        if (outlineParameters !== undefined) {\n            material.visible =\n                originalMaterial.visible === false\n                    ? false\n                    : outlineParameters.visible !== undefined\n                    ? outlineParameters.visible\n                    : true;\n\n            material.transparent =\n                outlineParameters.alpha !== undefined && outlineParameters.alpha < 1.0\n                    ? true\n                    : originalMaterial.transparent;\n\n            if (outlineParameters.keepAlive !== undefined) {\n                this.m_cache[originalMaterial.uuid].keepAlive = outlineParameters.keepAlive;\n            }\n        } else {\n            material.transparent = originalMaterial.transparent;\n            material.visible = originalMaterial.visible;\n        }\n\n        if ((originalMaterial as any).wireframe === true || originalMaterial.depthTest === false) {\n            material.visible = false;\n        }\n    }\n\n    private cleanupCache() {\n        let keys;\n\n        // clear originialMaterials\n        keys = Object.keys(this.m_originalMaterials);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalMaterials[keys[i]] = undefined;\n        }\n\n        // clear originalOnBeforeRenders\n        keys = Object.keys(this.m_originalOnBeforeRenders);\n\n        for (let i = 0, il = keys.length; i < il; i++) {\n            this.m_originalOnBeforeRenders[keys[i]] = undefined;\n        }\n\n        // remove unused outlineMaterial from cache\n        keys = Object.keys(this.m_cache);\n\n        for (const key of keys) {\n            if (this.m_cache[key].used === false) {\n                this.m_cache[key].count++;\n\n                if (\n                    this.m_cache[key].keepAlive === false &&\n                    this.m_cache[key].count > this.m_removeThresholdCount\n                ) {\n                    delete this.m_cache[key];\n                }\n            } else {\n                this.m_cache[key].used = false;\n                this.m_cache[key].count = 0;\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CopyShader, LuminosityHighPassShader } from \"@here/harp-materials\";\nimport * as THREE from \"three\";\nimport { Pass } from \"./Pass\";\n\nconst BlurDirectionX = new THREE.Vector2(1.0, 0.0);\nconst BlurDirectionY = new THREE.Vector2(0.0, 1.0);\n\n/**\n * The TS version of ThreeJS's UnrealBloomPass.\n */\nexport class BloomPass extends Pass {\n    strength: number;\n    radius: number;\n    threshold: number;\n    resolution: THREE.Vector2 = new THREE.Vector2(256, 256);\n    private m_renderTargetsHorizontal: THREE.WebGLRenderTarget[] = [];\n    private m_renderTargetsVertical: THREE.WebGLRenderTarget[] = [];\n    private m_nMips: number = 5;\n    private m_highPassUniforms: any;\n    private m_materialHighPassFilter: THREE.ShaderMaterial;\n    private m_separableBlurMaterials: THREE.ShaderMaterial[] = [];\n    private m_materialCopy: THREE.ShaderMaterial;\n    private m_copyUniforms: any;\n    private m_compositeMaterial: THREE.ShaderMaterial;\n\n    private m_camera: THREE.OrthographicCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    private m_scene: THREE.Scene = new THREE.Scene();\n    private m_basic = new THREE.MeshBasicMaterial();\n    private m_quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2));\n\n    private m_bloomTintColors: THREE.Vector3[] = [\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1),\n        new THREE.Vector3(1, 1, 1)\n    ];\n\n    private m_renderTargetBright: THREE.WebGLRenderTarget;\n\n    constructor(resolution: THREE.Vector2, strength: number, radius: number, threshold: number) {\n        super();\n\n        this.strength = strength;\n        this.radius = radius;\n        this.threshold = threshold;\n        this.resolution = resolution;\n\n        this.m_quad.frustumCulled = false;\n        this.m_scene.add(this.m_quad);\n\n        const pars = {\n            minFilter: THREE.LinearFilter,\n            magFilter: THREE.LinearFilter,\n            format: THREE.RGBAFormat\n        };\n\n        let resx = Math.round(this.resolution.x / 2);\n        let resy = Math.round(this.resolution.y / 2);\n\n        this.m_renderTargetBright = new THREE.WebGLRenderTarget(resx, resy, pars);\n        this.m_renderTargetBright.texture.name = \"UnrealBloomPass.bright\";\n        this.m_renderTargetBright.texture.generateMipmaps = false;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            const renderTargetHorizonal = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetHorizonal.texture.name = \"UnrealBloomPass.h\" + i;\n            renderTargetHorizonal.texture.generateMipmaps = false;\n            this.m_renderTargetsHorizontal.push(renderTargetHorizonal);\n\n            const renderTargetVertical = new THREE.WebGLRenderTarget(resx, resy, pars);\n            renderTargetVertical.texture.name = \"UnrealBloomPass.v\" + i;\n            renderTargetVertical.texture.generateMipmaps = false;\n            this.m_renderTargetsVertical.push(renderTargetVertical);\n\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        this.m_highPassUniforms = THREE.UniformsUtils.clone(LuminosityHighPassShader.uniforms);\n\n        // tslint:disable:no-string-literal\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = threshold;\n        this.m_highPassUniforms[\"smoothWidth\"].value = 0.01;\n\n        this.m_materialHighPassFilter = new THREE.ShaderMaterial({\n            uniforms: this.m_highPassUniforms,\n            vertexShader: LuminosityHighPassShader.vertexShader,\n            fragmentShader: LuminosityHighPassShader.fragmentShader,\n            defines: {}\n        });\n\n        // Gaussian Blur Materials\n        const kernelSizeArray = [3, 5, 7, 9, 11];\n        resx = Math.round(this.resolution.x / 2);\n        resy = Math.round(this.resolution.y / 2);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_separableBlurMaterials.push(this.getSeperableBlurMaterial(kernelSizeArray[i]));\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n\n        // Composite material\n        this.m_compositeMaterial = this.getCompositeMaterial(this.m_nMips);\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture1\"\n        ].value = this.m_renderTargetsVertical[0].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture2\"\n        ].value = this.m_renderTargetsVertical[1].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture3\"\n        ].value = this.m_renderTargetsVertical[2].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture4\"\n        ].value = this.m_renderTargetsVertical[3].texture;\n        this.m_compositeMaterial.uniforms[\n            \"blurTexture5\"\n        ].value = this.m_renderTargetsVertical[4].texture;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = 0.1;\n        this.m_compositeMaterial.needsUpdate = true;\n\n        const bloomFactors = [1.0, 0.8, 0.6, 0.4, 0.2];\n        this.m_compositeMaterial.uniforms[\"bloomFactors\"].value = bloomFactors;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        this.m_copyUniforms = THREE.UniformsUtils.clone(CopyShader.uniforms);\n        this.m_copyUniforms[\"opacity\"].value = 1.0;\n        // tslint:enable:no-string-literal\n\n        this.m_materialCopy = new THREE.ShaderMaterial({\n            uniforms: this.m_copyUniforms,\n            vertexShader: CopyShader.vertexShader,\n            fragmentShader: CopyShader.fragmentShader,\n            blending: THREE.AdditiveBlending,\n            depthTest: false,\n            depthWrite: false,\n            transparent: true\n        });\n    }\n    dispose() {\n        for (const rt of this.m_renderTargetsHorizontal) {\n            rt.dispose();\n        }\n        for (const rt of this.m_renderTargetsVertical) {\n            rt.dispose();\n        }\n        this.m_renderTargetBright.dispose();\n    }\n    /** @override */\n    setSize(width: number, height: number) {\n        let resx = Math.round(width / 2);\n        let resy = Math.round(height / 2);\n        this.m_renderTargetBright.setSize(resx, resy);\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_renderTargetsHorizontal[i].setSize(resx, resy);\n            this.m_renderTargetsVertical[i].setSize(resx, resy);\n            // tslint:disable-next-line:no-string-literal\n            this.m_separableBlurMaterials[i].uniforms[\"texSize\"].value = new THREE.Vector2(\n                resx,\n                resy\n            );\n            resx = Math.round(resx / 2);\n            resy = Math.round(resy / 2);\n        }\n    }\n    /** @override */\n    render(\n        renderer: THREE.WebGLRenderer,\n        scene: THREE.Scene,\n        camera: THREE.Camera,\n        writeBuffer: THREE.WebGLRenderTarget | null,\n        readBuffer: THREE.WebGLRenderTarget\n    ) {\n        // tslint:disable:no-string-literal\n\n        // Render input to screen\n        if (this.renderToScreen) {\n            this.m_quad.material = this.m_basic;\n            this.m_basic.map = readBuffer.texture;\n            renderer.setRenderTarget(null!);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n        }\n\n        // 1. Extract bright areas\n        this.m_highPassUniforms[\"tDiffuse\"].value = readBuffer.texture;\n        this.m_highPassUniforms[\"luminosityThreshold\"].value = this.threshold;\n        this.m_quad.material = this.m_materialHighPassFilter;\n\n        renderer.setRenderTarget(this.m_renderTargetBright);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // 2. Blur all the mips progressively\n        let inputRenderTarget = this.m_renderTargetBright;\n\n        for (let i = 0; i < this.m_nMips; i++) {\n            this.m_quad.material = this.m_separableBlurMaterials[i];\n\n            this.m_separableBlurMaterials[i].uniforms[\"colorTexture\"].value =\n                inputRenderTarget.texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionX;\n            renderer.setRenderTarget(this.m_renderTargetsHorizontal[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            this.m_separableBlurMaterials[i].uniforms[\n                \"colorTexture\"\n            ].value = this.m_renderTargetsHorizontal[i].texture;\n            this.m_separableBlurMaterials[i].uniforms[\"direction\"].value = BlurDirectionY;\n            renderer.setRenderTarget(this.m_renderTargetsVertical[i]);\n            renderer.clear();\n            renderer.render(this.m_scene, this.m_camera);\n\n            inputRenderTarget = this.m_renderTargetsVertical[i];\n        }\n\n        // Composite all the mips\n        this.m_quad.material = this.m_compositeMaterial;\n        this.m_compositeMaterial.uniforms[\"bloomStrength\"].value = this.strength;\n        this.m_compositeMaterial.uniforms[\"bloomRadius\"].value = this.radius;\n        this.m_compositeMaterial.uniforms[\"bloomTintColors\"].value = this.m_bloomTintColors;\n\n        renderer.setRenderTarget(this.m_renderTargetsHorizontal[0]);\n        renderer.clear();\n        renderer.render(this.m_scene, this.m_camera);\n\n        // Blend it additively over the input texture\n        this.m_quad.material = this.m_materialCopy;\n        this.m_copyUniforms[\"tDiffuse\"].value = this.m_renderTargetsHorizontal[0].texture;\n\n        if (this.renderToScreen) {\n            renderer.setRenderTarget(null!);\n            renderer.render(this.m_scene, this.m_camera);\n        } else {\n            renderer.setRenderTarget(readBuffer);\n            renderer.render(this.m_scene, this.m_camera);\n        }\n        // tslint:enable:no-string-literal\n    }\n\n    getSeperableBlurMaterial(kernelRadius: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                KERNEL_RADIUS: kernelRadius,\n                SIGMA: kernelRadius\n            },\n\n            uniforms: {\n                colorTexture: { value: null },\n                texSize: { value: new THREE.Vector2(0.5, 0.5) },\n                direction: { value: new THREE.Vector2(0.5, 0.5) }\n            },\n\n            vertexShader: `varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n            }`,\n\n            fragmentShader: `#include <common>\n            varying vec2 vUv;\n            uniform sampler2D colorTexture;\n            uniform vec2 texSize;\n            uniform vec2 direction;\n\n            float gaussianPdf(in float x, in float sigma) {\n                return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n            }\n            void main() {\\n\\\n                vec2 invSize = 1.0 / texSize;\n                float fSigma = float(SIGMA);\n                float weightSum = gaussianPdf(0.0, fSigma);\n                vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n                for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n                    float x = float(i);\n                    float w = gaussianPdf(x, fSigma);\n                    vec2 uvOffset = direction * invSize * x;\n                    vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n                    vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n                    diffuseSum += (sample1 + sample2) * w;\n                    weightSum += 2.0 * w;\n                }\n                gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n            }`\n        });\n    }\n\n    getCompositeMaterial(nMips: number): THREE.ShaderMaterial {\n        return new THREE.ShaderMaterial({\n            defines: {\n                NUM_MIPS: nMips\n            },\n\n            uniforms: {\n                blurTexture1: { value: null },\n                blurTexture2: { value: null },\n                blurTexture3: { value: null },\n                blurTexture4: { value: null },\n                blurTexture5: { value: null },\n                dirtTexture: { value: null },\n                bloomStrength: { value: 1.0 },\n                bloomFactors: { value: null },\n                bloomTintColors: { value: null },\n                bloomRadius: { value: 0.0 }\n            },\n\n            vertexShader: `varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n                }`,\n\n            fragmentShader: `varying vec2 vUv;\n                uniform sampler2D blurTexture1;\n                uniform sampler2D blurTexture2;\n                uniform sampler2D blurTexture3;\n                uniform sampler2D blurTexture4;\n                uniform sampler2D blurTexture5;\n                uniform sampler2D dirtTexture;\n                uniform float bloomStrength;\n                uniform float bloomRadius;\n                uniform float bloomFactors[NUM_MIPS];\n                uniform vec3 bloomTintColors[NUM_MIPS];\n\n                float lerpBloomFactor(const in float factor) {\n                    float mirrorFactor = 1.2 - factor;\n                    return mix(factor, mirrorFactor, bloomRadius);\n                }\n\n                void main() {\n                    gl_FragColor = bloomStrength * (\nlerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) +\nlerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) +\nlerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) +\nlerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) +\nlerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\n                }`\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Message sent by web worker that requests to resolve actual\n * URLs of it's dependencies.\n *\n * Main thread is expected.\n */\nexport interface WorkerBootstrapRequest {\n    type: \"worker-bootstrap-request\";\n\n    /// Names of dependencies, usually NPM package names.\n    dependencies: string[];\n}\n\nexport interface WorkerBootstrapResponse {\n    type: \"worker-bootstrap-response\";\n\n    /// Actual URL scripts requested in [[WorkerBootstrapRequest]].\n    resolvedDependencies: string[];\n}\n\nexport function isWorkerBootstrapRequest(message: any): message is WorkerBootstrapRequest {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-request\" &&\n        Array.isArray(message.dependencies)\n    );\n}\n\nexport function isWorkerBootstrapResponse(message: any): message is WorkerBootstrapResponse {\n    return (\n        message &&\n        message.type === \"worker-bootstrap-response\" &&\n        Array.isArray(message.resolvedDependencies)\n    );\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    OrientedBox3,\n    Projection,\n    ProjectionType,\n    TileKey,\n    TilingScheme\n} from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\nimport { DataSource } from \"./DataSource\";\nimport { CalculationStatus, ElevationRangeSource } from \"./ElevationRangeSource\";\nimport { MapTileCuller } from \"./MapTileCuller\";\nimport { MapView } from \"./MapView\";\nimport { MapViewUtils, TileOffsetUtils } from \"./Utils\";\n\nconst tmpVectors3 = [new THREE.Vector3(), new THREE.Vector3()];\nconst tmpVector4 = new THREE.Vector4();\n\n/**\n * Represents a unique TileKey and the area it takes up on screen.\n *\n * Note, in certain tiling projections, it is possible to have an offset, which represents a tile\n * which has fully wrapped around, hence this defaults to 0 to simplify usage for projections which\n * don't require it.\n */\nexport class TileKeyEntry {\n    constructor(\n        public tileKey: TileKey,\n        public area: number,\n        public offset: number = 0,\n        public minElevation: number = 0,\n        public maxElevation: number = 0,\n        public distance: number = 0\n    ) {}\n}\n\nfunction getGeoBox(tilingScheme: TilingScheme, childTileKey: TileKey, offset: number) {\n    const geoBox = tilingScheme.getGeoBox(childTileKey);\n    const longitudeOffset = 360.0 * offset;\n    geoBox.northEast.longitude += longitudeOffset;\n    geoBox.southWest.longitude += longitudeOffset;\n    return geoBox;\n}\n\n/**\n * Map tile keys to TileKeyEntry.\n * Keys are a combination of morton code and tile offset,\n * see [[TileOffsetUtils.getKeyForTileKeyAndOffset]].\n */\ntype TileKeyEntries = Map<number, TileKeyEntry>;\n\n/**\n * Map zoom level to map of visible tile key entries\n */\ntype ZoomLevelTileKeyMap = Map<number, TileKeyEntries>;\n\n/**\n * Result of frustum intersection\n */\ninterface IntersectionResult {\n    /**\n     * Tiles intersected by the frustum per zoom level.\n     */\n    readonly tileKeyEntries: ZoomLevelTileKeyMap;\n\n    /**\n     * True if the intersection was calculated using precise elevation data, false if it's an\n     * approximation.\n     */\n    calculationFinal: boolean;\n}\n\n/**\n * Computes the tiles intersected by the frustum defined by the current camera setup.\n */\nexport class FrustumIntersection {\n    private readonly m_frustum: THREE.Frustum = new THREE.Frustum();\n    // used to project global coordinates into camera local coordinates\n    private readonly m_viewProjectionMatrix = new THREE.Matrix4();\n    private readonly m_mapTileCuller: MapTileCuller;\n    private m_rootTileKeys: TileKeyEntry[] = [];\n    private readonly m_tileKeyEntries: ZoomLevelTileKeyMap = new Map();\n\n    constructor(\n        private readonly m_camera: THREE.PerspectiveCamera,\n        readonly mapView: MapView,\n        private readonly m_extendedFrustumCulling: boolean,\n        private readonly m_tileWrappingEnabled: boolean,\n        private readonly m_enableMixedLod: boolean\n    ) {\n        this.m_mapTileCuller = new MapTileCuller(m_camera);\n    }\n\n    /**\n     * Return camera used for generating frustum.\n     */\n    get camera(): THREE.PerspectiveCamera {\n        return this.m_camera;\n    }\n\n    /**\n     * Return projection used to convert geo coordinates to world coordinates.\n     */\n    get projection(): Projection {\n        return this.mapView.projection;\n    }\n\n    /**\n     * Updates the frustum to match the current camera setup.\n     */\n    updateFrustum(projectionMatrixOverride?: THREE.Matrix4) {\n        this.m_viewProjectionMatrix.multiplyMatrices(\n            projectionMatrixOverride !== undefined\n                ? projectionMatrixOverride\n                : this.m_camera.projectionMatrix,\n            this.m_camera.matrixWorldInverse\n        );\n\n        this.m_frustum.setFromMatrix(this.m_viewProjectionMatrix);\n\n        if (this.m_extendedFrustumCulling) {\n            this.m_mapTileCuller.setup();\n        }\n        this.computeRequiredInitialRootTileKeys(this.m_camera.position);\n    }\n\n    /**\n     * Computes the tiles intersected by the updated frustum, see [[updateFrustum]].\n     *\n     * @param tilingScheme The tiling scheme used to generate the tiles.\n     * @param elevationRangeSource Source of elevation range data if any.\n     * @param zoomLevels A list of zoom levels to render.\n     * @param dataSources A list of data sources to render.\n     * @returns The computation result, see [[FrustumIntersection.Result]].\n     */\n    compute(\n        tilingScheme: TilingScheme,\n        elevationRangeSource: ElevationRangeSource | undefined,\n        zoomLevels: number[],\n        dataSources: DataSource[]\n    ): IntersectionResult {\n        this.m_tileKeyEntries.clear();\n        let calculationFinal = true;\n\n        // Compute target tile area in clip space size.\n        // A tile should take up roughly 256x256 pixels on screen in accordance to\n        // the zoom level chosen by [MapViewUtils.calculateZoomLevelFromDistance].\n        assert(this.mapView.viewportHeight !== 0);\n        const targetTileArea = Math.pow(256 / this.mapView.viewportHeight, 2);\n        const obbIntersections = this.mapView.projection.type === ProjectionType.Spherical;\n        const tileBounds = obbIntersections ? new OrientedBox3() : new THREE.Box3();\n        const uniqueZoomLevels = new Set(zoomLevels);\n\n        // create tile key map per zoom level\n        for (const zoomLevel of uniqueZoomLevels) {\n            this.m_tileKeyEntries.set(zoomLevel, new Map());\n        }\n\n        for (const item of this.m_rootTileKeys) {\n            const tileKeyEntry = new TileKeyEntry(\n                item.tileKey,\n                Infinity,\n                item.offset,\n                item.minElevation,\n                item.maxElevation\n            );\n\n            for (const zoomLevel of uniqueZoomLevels) {\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.set(\n                    TileOffsetUtils.getKeyForTileKeyAndOffset(item.tileKey, item.offset),\n                    tileKeyEntry\n                );\n            }\n        }\n\n        const useElevationRangeSource: boolean =\n            elevationRangeSource !== undefined &&\n            elevationRangeSource.getTilingScheme() === tilingScheme;\n        const workList = [...this.m_rootTileKeys.values()];\n\n        while (workList.length > 0) {\n            const tileEntry = workList.pop();\n\n            if (tileEntry === undefined) {\n                break;\n            }\n\n            // Stop subdivision if hightest visible level is reached\n            const tileKey = tileEntry.tileKey;\n            const subdivide = dataSources.some((ds, i) =>\n                ds.shouldSubdivide(zoomLevels[i], tileKey)\n            );\n            if (!subdivide) {\n                continue;\n            }\n\n            // Stop subdivision if area of tile is too small(mixed LOD only)\n            if (this.m_enableMixedLod && tileEntry.area < targetTileArea) {\n                continue;\n            }\n\n            const parentTileKey = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                tileKey,\n                tileEntry.offset\n            );\n\n            // delete parent tile key from applicable zoom levels\n            for (const zoomLevel of uniqueZoomLevels) {\n                if (tileKey.level >= zoomLevel) {\n                    continue;\n                }\n\n                const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                tileKeyEntries.delete(parentTileKey);\n            }\n\n            for (const childTileKey of tilingScheme.getSubTileKeys(tileKey)) {\n                const offset = tileEntry.offset;\n                const tileKeyAndOffset = TileOffsetUtils.getKeyForTileKeyAndOffset(\n                    childTileKey,\n                    offset\n                );\n\n                const geoBox = getGeoBox(tilingScheme, childTileKey, offset);\n\n                // For tiles without elevation range source, default 0 (getGeoBox always\n                // returns box with altitude min/max equal to zero) will be propagated as\n                // min and max elevation, these tiles most probably contains features that\n                // lays directly on the ground surface.\n                if (useElevationRangeSource) {\n                    const range = elevationRangeSource!.getElevationRange(childTileKey);\n                    geoBox.southWest.altitude = range.minElevation;\n                    geoBox.northEast.altitude = range.maxElevation;\n                    calculationFinal =\n                        calculationFinal &&\n                        range.calculationStatus === CalculationStatus.FinalPrecise;\n                }\n\n                this.mapView.projection.projectBox(geoBox, tileBounds);\n                const { area, distance } = this.computeTileAreaAndDistance(tileBounds);\n\n                if (area > 0) {\n                    const subTileEntry = new TileKeyEntry(\n                        childTileKey,\n                        area,\n                        offset,\n                        geoBox.southWest.altitude, // minElevation\n                        geoBox.northEast.altitude, // maxElevation\n                        distance\n                    );\n\n                    // insert sub tile entry into tile entries map per zoom level\n                    for (const zoomLevel of uniqueZoomLevels) {\n                        if (subTileEntry.tileKey.level > zoomLevel) {\n                            continue;\n                        }\n\n                        const tileKeyEntries = this.m_tileKeyEntries.get(zoomLevel)!;\n                        tileKeyEntries.set(tileKeyAndOffset, subTileEntry);\n                    }\n\n                    workList.push(subTileEntry);\n                }\n            }\n        }\n        return { tileKeyEntries: this.m_tileKeyEntries, calculationFinal };\n    }\n\n    /**\n     * Estimate screen space area of tile and distance to center of tile\n     * @param tileBounds The bounding volume of a tile\n     * @return Area estimate and distance to tile center in clip space\n     */\n    private computeTileAreaAndDistance(\n        tileBounds: THREE.Box3 | OrientedBox3\n    ): { area: number; distance: number } {\n        if (tileBounds instanceof THREE.Box3) {\n            if (\n                (this.m_extendedFrustumCulling &&\n                    !this.m_mapTileCuller.frustumIntersectsTileBox(tileBounds)) ||\n                !this.m_frustum.intersectsBox(tileBounds)\n            ) {\n                return {\n                    area: 0,\n                    distance: Infinity\n                };\n            }\n        } else if (!tileBounds.intersects(this.m_frustum)) {\n            return {\n                area: 0,\n                distance: Infinity\n            };\n        }\n\n        // Project tile bounds center\n        const center = tileBounds.getCenter(tmpVectors3[0]);\n        const projectedPoint = tmpVector4\n            .set(center.x, center.y, center.z, 1.0)\n            .applyMatrix4(this.m_viewProjectionMatrix);\n\n        // Estimate objects screen space size with diagonal of bounds\n        // Dividing by w projects object size to screen space\n        const size = tileBounds.getSize(tmpVectors3[1]);\n        const objectSize = (0.5 * size.length()) / projectedPoint.w;\n\n        return {\n            area: objectSize * objectSize,\n            distance: projectedPoint.z / projectedPoint.w\n        };\n    }\n\n    /**\n     * Create a list of root nodes to test against the frustum. The root nodes each start at level 0\n     * and have an offset (see [[Tile]]) based on:\n     * - the current position [[worldCenter]].\n     * - the height of the camera above the world.\n     * - the field of view of the camera (the maximum value between the horizontal / vertical\n     *   values)\n     * - the tilt of the camera (because we see more tiles when tilted).\n     *\n     * @param worldCenter The center of the camera in world space.\n     */\n    private computeRequiredInitialRootTileKeys(worldCenter: THREE.Vector3) {\n        this.m_rootTileKeys = [];\n        const rootTileKey = TileKey.fromRowColumnLevel(0, 0, 0);\n        const tileWrappingEnabled = this.mapView.projection.type === ProjectionType.Planar;\n\n        if (!tileWrappingEnabled || !this.m_tileWrappingEnabled) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, 0, 0));\n            return;\n        }\n\n        const worldGeoPoint = this.mapView.projection.unprojectPoint(worldCenter);\n        const startOffset = Math.round(worldGeoPoint.longitude / 360.0);\n\n        // This algorithm computes the number of offsets we need to test. The following diagram may\n        // help explain the algorithm below.\n        //\n        //   |🎥\n        //   |.\\ .\n        //   | . \\  .\n        // z |  .  \\   .c2\n        //   |  c1.  \\b    .\n        //   |     .   \\      .\n        //___|a___d1.____\\e______.d2______f\n        //\n        // Where:\n        // - 🎥 is the camera\n        // - z is the height of the camera above the ground.\n        // - a is a right angle.\n        // - b is the look at vector of the camera.\n        // - c1 and c2 are the frustum planes of the camera.\n        // - c1 to c2 is the fov.\n        // - d1 and d2 are the intersection points of the frustum with the world plane.\n        // - e is the tilt/pitch of the camera.\n        // - f is the world\n        //\n        // The goal is to find the distance from e->d2. This is a longitude value, and we convert it\n        // to some offset range. Note e->d2 >= e->d1 (because we can't have a negative tilt).\n        // To find e->d2, we use the right triangle 🎥, a, d2 and subtract the distance a->d2 with\n        // a->e.\n        // a->d2 is found using the angle between a and d2 from the 🎥, this is simply e (because of\n        // similar triangles, angle between a, 🎥 and e equals the tilt) + half of the fov (because\n        // we need the angle between e, 🎥 and d2) and using trigonometry, result is therefore:\n        // (tan(a->d2) * z).\n        // a->e needs just the tilt and trigonometry to compute, result is: (tan(a->e) * z).\n\n        const camera = this.m_camera;\n        const cameraPitch = MapViewUtils.extractAttitude(this.mapView, camera).pitch;\n        // Ensure that the aspect is >= 1.\n        const aspect = camera.aspect > 1 ? camera.aspect : 1 / camera.aspect;\n        // Angle between a->d2, note, the fov is vertical, hence we translate to horizontal.\n        const totalAngleRad = THREE.Math.degToRad((camera.fov * aspect) / 2) + cameraPitch;\n        // Length a->d2\n        const worldLengthHorizontalFull = Math.tan(totalAngleRad) * camera.position.z;\n        // Length a->e\n        const worldLengthHorizontalSmallerHalf = Math.tan(cameraPitch) * camera.position.z;\n        // Length e -> d2\n        const worldLengthHorizontal = worldLengthHorizontalFull - worldLengthHorizontalSmallerHalf;\n        const worldLeftPoint = new THREE.Vector3(\n            worldCenter.x - worldLengthHorizontal,\n            worldCenter.y,\n            worldCenter.z\n        );\n        const worldLeftGeoPoint = this.mapView.projection.unprojectPoint(worldLeftPoint);\n        // We multiply by SQRT2 because we need to account for a rotated view (in which case there\n        // are more tiles that can be seen).\n        const offsetRange = THREE.Math.clamp(\n            Math.ceil(\n                Math.abs((worldGeoPoint.longitude - worldLeftGeoPoint.longitude) / 360) * Math.SQRT2\n            ),\n            0,\n            // We can store currently up to 16 unique keys(2^4, where 4 is the default bit-shift\n            // value which is used currently in the [[VisibleTileSet]] methods) hence we can have a\n            // maximum range of 7 (because 2*7+1 = 15).\n            7\n        );\n        for (\n            let offset = -offsetRange + startOffset;\n            offset <= offsetRange + startOffset;\n            offset++\n        ) {\n            this.m_rootTileKeys.push(new TileKeyEntry(rootTileKey, Infinity, offset, 0, 0));\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Second step tile culling: Do additional check for intersection of box and frustum by checking if\n * the frustum is outside any plane of the tiles `bbox` (oriented, not AABB). It's in the inverse of\n * the standard frustum test, which excludes many cases where the large terrain tiles straddle the\n * planes of the frustum.\n *\n * @see http://www.iquilezles.org/www/articles/frustumcorrect/frustumcorrect.htm\n */\nexport class MapTileCuller {\n    private m_globalFrustumMin = new THREE.Vector3();\n    private m_globalFrustumMax = new THREE.Vector3();\n\n    private m_frustumCorners = [\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        new THREE.Vector3()\n    ];\n\n    /**\n     * Constructs a `MapTileCuller`.\n     *\n     * @param m_camera A `THREE.Camera`.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Sets up culling and computes frustum corners. You mus call this function before the culling\n     * starts.\n     */\n    setup() {\n        const frustumCorners = this.getFrustumCorners();\n\n        const matrix = this.m_camera.matrixWorld;\n\n        this.m_globalFrustumMin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this.m_globalFrustumMax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n        for (const frustumCorner of frustumCorners) {\n            frustumCorner.applyMatrix4(matrix);\n\n            this.m_globalFrustumMin.x = Math.min(this.m_globalFrustumMin.x, frustumCorner.x);\n            this.m_globalFrustumMin.y = Math.min(this.m_globalFrustumMin.y, frustumCorner.y);\n            this.m_globalFrustumMin.z = Math.min(this.m_globalFrustumMin.z, frustumCorner.z);\n\n            this.m_globalFrustumMax.x = Math.max(this.m_globalFrustumMax.x, frustumCorner.x);\n            this.m_globalFrustumMax.y = Math.max(this.m_globalFrustumMax.y, frustumCorner.y);\n            this.m_globalFrustumMax.z = Math.max(this.m_globalFrustumMax.z, frustumCorner.z);\n        }\n    }\n\n    /**\n     * Checks if the tile's bounding box intersects with the current view's frustum.\n     *\n     * @param tileBounds The bounding box for the tile.\n     */\n    frustumIntersectsTileBox(tileBounds: THREE.Box3): boolean {\n        const globalFrustumMin = this.m_globalFrustumMin;\n        const globalFrustumMax = this.m_globalFrustumMax;\n\n        if (\n            globalFrustumMax.x < tileBounds.min.x ||\n            globalFrustumMax.y < tileBounds.min.y ||\n            globalFrustumMax.z < tileBounds.min.z ||\n            globalFrustumMin.x > tileBounds.max.x ||\n            globalFrustumMin.y > tileBounds.max.y ||\n            globalFrustumMin.z > tileBounds.max.z\n        ) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Returns the eight corners of the frustum.\n     */\n    private getFrustumCorners(): THREE.Vector3[] {\n        const frustumCorners = this.m_frustumCorners;\n        const invProjMatrix = (this.m_camera as any).projectionMatrixInverse as THREE.Matrix4;\n\n        let cornerIndex = 0;\n\n        function addPoint(x: number, y: number, z: number) {\n            frustumCorners[cornerIndex++].set(x, y, z).applyMatrix4(invProjMatrix);\n        }\n\n        const w = 1;\n        const h = 1;\n        const n = -1;\n        const f = 1;\n\n        // near\n        addPoint(-w, -h, n);\n        addPoint(w, -h, n);\n        addPoint(-w, h, n);\n        addPoint(w, h, n);\n\n        // far\n        addPoint(-w, -h, f);\n        addPoint(w, -h, f);\n        addPoint(-w, h, f);\n        addPoint(w, h, f);\n\n        return frustumCorners;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\n\nimport { MapView } from \"../MapView\";\nimport { Tile } from \"../Tile\";\nimport { Phase, PhasedTileGeometryLoader } from \"./PhasedTileGeometryLoader\";\nimport { TileGeometryManagerBase } from \"./TileGeometryManager\";\n\n/**\n * The default phases to load geometry.\n */\nconst DefaultPhases: Phase[] = [\n    [GeometryKind.Background, GeometryKind.Terrain, GeometryKind.Area, GeometryKind.Border],\n    [GeometryKind.Line],\n    [GeometryKind.Building],\n    [GeometryKind.Label],\n    [GeometryKind.All]\n];\n\n// FIXME: This should (always) be the first phase, no?\nconst DefaultBasicGeometryKinds: GeometryKindSet = new GeometryKindSet(DefaultPhases[0]);\n\n/**\n * Manages the loading of [[Tile]] geometry in phases.\n */\nexport class PhasedTileGeometryManager extends TileGeometryManagerBase {\n    private m_maxUpdatedTilePerFrame = 5;\n    private m_loadPhaseDefinitions: Phase[] = DefaultPhases;\n    private m_basicGeometryKinds: GeometryKindSet = DefaultBasicGeometryKinds;\n\n    /**\n     * Creates an instance of PhasedTileGeometryManager. Keeps the reference to the [[MapView]].\n     *\n     * @param {MapView} mapView\n     */\n    constructor(mapView: MapView) {\n        super(mapView);\n    }\n\n    /** @override */\n    initTile(tile: Tile): void {\n        if (tile.dataSource.useGeometryLoader) {\n            tile.tileGeometryLoader = new PhasedTileGeometryLoader(\n                tile,\n                this.m_loadPhaseDefinitions,\n                this.m_basicGeometryKinds\n            );\n        }\n    }\n\n    /** @override */\n    updateTiles(tiles: Tile[]): void {\n        let needUpdate = this.mapView.isDynamicFrame\n            ? this.updateSomeTiles(tiles)\n            : this.updateAllTilesTogether(tiles);\n\n        if (this.m_tileUpdateCallback) {\n            for (const tile of tiles) {\n                this.m_tileUpdateCallback(tile);\n            }\n        }\n\n        // updateTileObjectVisibility() has always to be called.\n        needUpdate = this.updateTileObjectVisibility(tiles) || needUpdate;\n\n        if (needUpdate || !this.checkTilesFinished(tiles)) {\n            this.mapView.update();\n        }\n    }\n\n    private checkTilesFinished(tiles: Tile[]): boolean {\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n            if (phasedGeometryLoader !== undefined && !phasedGeometryLoader.allGeometryLoaded) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Update the tiles during dynamic frames. Number of tiles to update may be limited.\n     *\n     * @param {Tile[]} tiles\n     */\n    private updateSomeTiles(tiles: Tile[]): boolean {\n        let numTilesUpdated = 0;\n\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n\n            if (phasedGeometryLoader !== undefined) {\n                if (\n                    phasedGeometryLoader.update(\n                        this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                        this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                    )\n                ) {\n                    numTilesUpdated++;\n                    if (\n                        this.m_maxUpdatedTilePerFrame > 0 &&\n                        numTilesUpdated >= this.m_maxUpdatedTilePerFrame\n                    ) {\n                        break;\n                    }\n                }\n            }\n        }\n        return numTilesUpdated > 0;\n    }\n\n    /**\n     * Update the tiles during static frames. Before advancing to the next phase, any tiles lagging\n     * behind are allowed to catch up to their next phase. Only then all tiles will advance to the\n     * next phase together.\n     *\n     * @param {Tile[]} tiles\n     */\n    private updateAllTilesTogether(tiles: Tile[]): boolean {\n        let lowestPhase: number | undefined;\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n\n            if (\n                phasedGeometryLoader !== undefined &&\n                (lowestPhase === undefined || phasedGeometryLoader.currentPhase < lowestPhase)\n            ) {\n                lowestPhase = phasedGeometryLoader.currentPhase;\n            }\n        }\n\n        if (lowestPhase !== undefined && lowestPhase < this.m_loadPhaseDefinitions.length) {\n            const nextPhase = lowestPhase + 1;\n            needUpdate = this.updateTilesIfNeeded(tiles, nextPhase);\n        }\n        return needUpdate;\n    }\n\n    /**\n     * Update the tiles during static frames only if their phase is lower than the `toPhase`.\n     *\n     * @param {Tile[]} tiles\n     */\n    private updateTilesIfNeeded(tiles: Tile[], toPhase: number): boolean {\n        let needUpdate = false;\n\n        for (const tile of tiles) {\n            const phasedGeometryLoader = tile.tileGeometryLoader as PhasedTileGeometryLoader;\n            if (phasedGeometryLoader !== undefined) {\n                if (\n                    phasedGeometryLoader.updateToPhase(\n                        toPhase,\n                        this.enableFilterByKind ? this.enabledGeometryKinds : undefined,\n                        this.enableFilterByKind ? this.disabledGeometryKinds : undefined\n                    )\n                ) {\n                    needUpdate = true;\n                }\n            }\n        }\n        return needUpdate;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport {\n    DecodedTile,\n    GeometryKind,\n    GeometryKindSet,\n    isLineMarkerTechnique,\n    isPoiTechnique,\n    isTextTechnique,\n    Technique\n} from \"@here/harp-datasource-protocol\";\nimport { PerformanceTimer } from \"@here/harp-utils\";\n\nimport { PerformanceStatistics } from \"../Statistics\";\nimport { Tile } from \"../Tile\";\nimport { TileGeometryCreator } from \"./TileGeometryCreator\";\nimport { TileGeometryLoader } from \"./TileGeometryLoader\";\n\n/**\n * Describes the kinds of geometry that should be loaded in a single phase.\n */\nexport type Phase = GeometryKind[];\n\n/**\n * The `PhasedTileGeometryLoader` loads the geometry of a [[Tile]] using a list of [[Phase]]s.\n *\n */\nexport class PhasedTileGeometryLoader implements TileGeometryLoader {\n    private m_decodedTile?: DecodedTile;\n    private m_isFinished: boolean = false;\n    private m_availableGeometryKinds: GeometryKindSet | undefined;\n    private m_geometryKindsLoaded: GeometryKindSet = new GeometryKindSet();\n    private m_currentPhaseIndex = 0;\n\n    /**\n     * Creates an instance of PhasedTileGeometryLoader of a [[Tile]]. It stores the phases in which\n     * its geometry should be created.\n     *\n     * @param {Tile} m_tile Tile the loader manages.\n     * @param {Phase[]} m_loadPhaseDefinitions The definitions of the loading phases.\n     * @param {GeometryKindSet} m_basicGeometryKinds The set of [[GeometryKind]] s that have to be\n     *      created before the [[Tile]] is made visible.\n     */\n    constructor(\n        private m_tile: Tile,\n        private m_loadPhaseDefinitions: Phase[],\n        private m_basicGeometryKinds: GeometryKindSet\n    ) {}\n\n    /**\n     * The [[Tile]] this loader is managing.\n     */\n    get tile(): Tile {\n        return this.m_tile;\n    }\n\n    /**\n     * The index into the array of loading phases.\n     */\n    get currentPhase(): number {\n        return this.m_currentPhaseIndex;\n    }\n\n    /**\n     * The number of phases defined.\n     */\n    get numberOfPhases(): number {\n        return this.m_loadPhaseDefinitions.length;\n    }\n\n    /**\n     * The set of [[GeometryKind]]s already created in this [[Tile]].\n     */\n    get geometryKindsCreated(): GeometryKindSet {\n        return this.m_geometryKindsLoaded;\n    }\n\n    /**\n     * The set of [[GeometryKind]]s available in this [[Tile]].\n     */\n    get availableGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_availableGeometryKinds;\n    }\n\n    /**\n     * Returns `true` if all basic [[GeometryKind]]s have been loaded. The set of basic\n     * [[GeometryKind]]s is defined in the constructor of `PhasedTileGeometryLoader`.\n     */\n    get basicGeometryLoaded(): boolean {\n        for (const kind of this.m_basicGeometryKinds) {\n            if (!this.m_geometryKindsLoaded.has(kind)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Returns `true` if all [[GeometryKind]]s have been loaded.\n     */\n    get allGeometryLoaded(): boolean {\n        return this.currentPhase >= this.m_loadPhaseDefinitions.length;\n    }\n\n    /**\n     * Set the [[DecodedTile]] of the tile. Is called after the decoded tile has been loaded, and\n     * prepares its content for later processing in the 'updateXXX' methods.\n     *\n     * @param {DecodedTile} decodedTile The decoded tile with the flat geometry data belonging to\n     *      this tile.\n     * @returns {DecodedTile} The processed decoded tile.\n     */\n    setDecodedTile(decodedTile: DecodedTile): DecodedTile {\n        this.m_decodedTile = decodedTile;\n        this.m_currentPhaseIndex = 0;\n        this.m_geometryKindsLoaded.clear();\n\n        if (this.m_decodedTile !== undefined) {\n            this.m_availableGeometryKinds = TileGeometryLoader.prepareDecodedTile(\n                this.m_decodedTile\n            );\n        }\n        return this.m_decodedTile;\n    }\n\n    /**\n     * Update the tile to have all the content in its decoded tile. Load phases will be ignored.\n     *\n     * @param {(GeometryKindSet | undefined)} enabledKinds The [[GeometryKind]]s that should be\n     *      enabled.\n     * @param {(GeometryKindSet | undefined)} disabledKinds The [[GeometryKind]]s that should be\n     *      disabled.\n     * @returns {boolean} `true` if actual geometry has been created.\n     */\n    updateCompletely(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        return this.update(enabledKinds, disabledKinds, true);\n    }\n\n    /**\n     * Update the tile to the specified phase (index). All intermediate phases between the current\n     * and the specified phase will be processed.\n     *\n     * @param toPhase A value between 0 and `numberOfPhases`.\n     * @param {(GeometryKindSet | undefined)} enabledKinds The [[GeometryKind]]s that should be\n     *      enabled.\n     * @param {(GeometryKindSet | undefined)} disabledKinds The [[GeometryKind]]s that should be\n     *      disabled.\n     * @returns {boolean} `true` if `updateToPhase` was successful.\n     */\n    updateToPhase(\n        toPhase: number,\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined\n    ): boolean {\n        let didUpdate = false;\n        toPhase = Math.min(toPhase, this.numberOfPhases);\n        while (this.currentPhase < toPhase) {\n            if (!this.update(enabledKinds, disabledKinds)) {\n                break;\n            }\n            didUpdate = true;\n        }\n        return didUpdate;\n    }\n\n    /**\n     * Create all geometries in the current phase, or ignore the phases and create all remaining\n     * geometries if `doFullUpdate` is `true`.\n     *\n     * @param {(GeometryKindSet | undefined)} enabledKinds The [[GeometryKind]]s that should be\n     *      enabled.\n     * @param {(GeometryKindSet | undefined)} disabledKinds The [[GeometryKind]]s that should be\n     *      disabled.\n     * @param doFullUpdate If a value of `true` is specified, the current phase is ignored and all\n     *      remaining geometries are created.\n     * @returns {boolean} `true` if `update` was successful. If `currentPhase` is smaller than\n     *      `numberOfPhases`, `update` can be called again. If `false` is returned, another call to\n     *      `update` is not required.\n     */\n    update(\n        enabledKinds: GeometryKindSet | undefined,\n        disabledKinds: GeometryKindSet | undefined,\n        doFullUpdate: boolean = false\n    ): boolean {\n        const tile = this.tile;\n        const loadPhaseDefinitions = this.m_loadPhaseDefinitions;\n\n        if (!tile.dataSource.cacheable) {\n            this.m_currentPhaseIndex = loadPhaseDefinitions.length;\n            return false;\n        }\n\n        let decodedTile = this.m_decodedTile;\n        const currentPhase = this.currentPhase;\n\n        // First time this tile is handled:\n        if (decodedTile === undefined && tile.decodedTile !== undefined) {\n            decodedTile = this.setDecodedTile(tile.decodedTile);\n            TileGeometryCreator.instance.processTechniques(tile, enabledKinds, disabledKinds);\n            tile.clear();\n        }\n\n        if (decodedTile === undefined || currentPhase >= this.numberOfPhases) {\n            return false;\n        }\n\n        const geometryCreator = TileGeometryCreator.instance;\n\n        const stats = PerformanceStatistics.instance;\n        let now = 0;\n\n        if (stats.enabled) {\n            now = PerformanceTimer.now();\n        }\n\n        if (doFullUpdate) {\n            geometryCreator.createAllGeometries(tile, decodedTile);\n\n            // Mark it as finished.\n            this.m_currentPhaseIndex = loadPhaseDefinitions.length;\n        } else {\n            const currentPhaseDefinition = loadPhaseDefinitions[currentPhase];\n\n            for (const kind of currentPhaseDefinition) {\n                this.createKind(geometryCreator, kind);\n            }\n        }\n\n        if (stats.enabled) {\n            stats.currentFrame.addValue(\n                \"geometry.geometryCreationTime\",\n                PerformanceTimer.now() - now\n            );\n        }\n\n        if (this.nextPhase() === undefined) {\n            // All done, update the stats\n            if (stats.enabled) {\n                const currentFrame = stats.currentFrame;\n\n                currentFrame.addValue(\"geometryCount.numGeometries\", decodedTile.geometries.length);\n                currentFrame.addValue(\"geometryCount.numTechniques\", decodedTile.techniques.length);\n                currentFrame.addValue(\n                    \"geometryCount.numPoiGeometries\",\n                    decodedTile.poiGeometries !== undefined ? decodedTile.poiGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextGeometries\",\n                    decodedTile.textGeometries !== undefined ? decodedTile.textGeometries.length : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numTextPathGeometries\",\n                    decodedTile.textPathGeometries !== undefined\n                        ? decodedTile.textPathGeometries.length\n                        : 0\n                );\n                currentFrame.addValue(\n                    \"geometryCount.numPathGeometries\",\n                    decodedTile.pathGeometries !== undefined ? decodedTile.pathGeometries.length : 0\n                );\n                currentFrame.addMessage(\n                    `Decoded tile: ${tile.dataSource.name} # lvl=${tile.tileKey.level} ` +\n                        `col=${tile.tileKey.column} row=${tile.tileKey.row}`\n                );\n            }\n\n            this.finish();\n        }\n        return true;\n    }\n\n    get isFinished(): boolean {\n        return this.m_isFinished;\n    }\n\n    dispose(): void {\n        this.m_decodedTile = undefined;\n    }\n\n    reset(): void {\n        this.m_decodedTile = undefined;\n        this.m_isFinished = false;\n        this.m_availableGeometryKinds = undefined;\n        this.m_geometryKindsLoaded.clear();\n        this.m_currentPhaseIndex = 0;\n    }\n\n    private finish() {\n        this.m_decodedTile = undefined;\n        this.m_tile.loadingFinished();\n        this.m_tile.removeDecodedTile();\n        this.m_isFinished = true;\n    }\n\n    /**\n     * Increment the current phase to activate the next phase of geometries.\n     *\n     * @returns {(number | undefined)} The index into the now active current pase, or `undefined` if\n     *      the last phase has been reached.\n     */\n    private nextPhase(): number | undefined {\n        if (this.m_currentPhaseIndex < this.m_loadPhaseDefinitions.length) {\n            this.m_currentPhaseIndex++;\n        }\n\n        return this.m_currentPhaseIndex < this.m_loadPhaseDefinitions.length\n            ? this.m_currentPhaseIndex\n            : undefined;\n    }\n\n    /**\n     * Create all geometries of the specified [[GeometryKind]] `kindToCreate`.\n     *\n     * @param {TileGeometryCreator} geometryCreator\n     * @param {GeometryKind} kindToCreate\n     */\n    private createKind(geometryCreator: TileGeometryCreator, kindToCreate: GeometryKind): void {\n        if (this.m_geometryKindsLoaded.has(kindToCreate)) {\n            return;\n        }\n        this.m_geometryKindsLoaded.add(kindToCreate);\n\n        const tile = this.tile;\n        const decodedTile = this.m_decodedTile;\n\n        if (decodedTile !== undefined) {\n            const filter = (technique: Technique): boolean => {\n                if (technique.enabled === false) {\n                    return false;\n                }\n\n                const techniqueKind = technique.kind;\n\n                // All kinds are allowed, except those which are explicitly disabled.\n                if (kindToCreate === GeometryKind.All) {\n                    return true;\n                }\n\n                if (techniqueKind instanceof Set) {\n                    const techniqueKinds = techniqueKind as GeometryKindSet;\n\n                    // Check if that technique fits the expected kindToCreate.\n                    return techniqueKinds.has(kindToCreate);\n                } else {\n                    return techniqueKind === kindToCreate;\n                }\n            };\n\n            geometryCreator.createObjects(tile, decodedTile, filter);\n\n            const textFilter = (technique: Technique): boolean => {\n                if (\n                    !isPoiTechnique(technique) &&\n                    !isLineMarkerTechnique(technique) &&\n                    !isTextTechnique(technique)\n                ) {\n                    return false;\n                }\n                return filter(technique);\n            };\n\n            // TextElements do not get their geometry created by Tile, but are managed on a\n            // higher level.\n            geometryCreator.createTextElements(tile, decodedTile, textFilter);\n\n            geometryCreator.preparePois(tile, decodedTile);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\n/**\n * Raycasting points is not supported as necessary in Three.js. This class extends a\n * [[THREE.Raycaster]] and adds the width / height of the canvas to allow picking of screen space\n * geometry.\n *\n * @internal\n */\nexport class PickingRaycaster extends THREE.Raycaster {\n    /**\n     * Constructor.\n     *\n     * @param width the canvas width.\n     * @param height the canvas height.\n     */\n    constructor(public width: number, public height: number) {\n        super();\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TextCanvas } from \"@here/harp-text-canvas\";\nimport { MapView } from \"../MapView\";\nimport { PoiRenderer } from \"./PoiRenderer\";\n\nexport class PoiRendererFactory {\n    /**\n     * Creates an instance of poi renderer factory.\n     * @param m_mapView\n     */\n    constructor(private readonly m_mapView: MapView) {}\n\n    /**\n     * Creates poi renderer\n     * @param textCanvas\n     * @returns\n     */\n    createPoiRenderer(textCanvas: TextCanvas): PoiRenderer {\n        return new PoiRenderer(this.m_mapView, textCanvas);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/StyleSetEvaluator\";\nexport * from \"./lib/Extruder\";\nexport * from \"./lib/IMeshBuffers\";\nexport * from \"./lib/Outliner\";\nexport * from \"./lib/Expr\";\nexport * from \"./lib/ThreeBufferUtils\";\nexport * from \"./lib/GeoJsonDataType\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Fills an index buffer with the indices for the extruded walls for a polygon contour.\n *\n * @param indexBuffer Index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param contour Vertices that compose the contour.\n * @param contourEdges Collection of booleans indicating if contour edges should be added.\n * @param boundaryWalls If `false`, walls in tile boundaries will not be created.\n *\n */\nexport function addExtrudedWalls(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    contour: number[],\n    contourEdges?: boolean[],\n    boundaryWalls?: boolean\n): void {\n    // Infer the index buffer's position of the vertices that form the extruded-polygons' walls\n    // by stepping through the contour segment by segment.\n    const nSegments = contour.length / vertexStride;\n    for (let i = 0; i < nSegments; ++i) {\n        const vFootprint0 = vertexOffset + i * 2;\n        const vRoof0 = vFootprint0 + 1;\n        const vFootprint1 = vertexOffset + ((i + 1) % nSegments) * 2;\n        const vRoof1 = vFootprint1 + 1;\n        if (boundaryWalls !== false || contourEdges === undefined) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        } else if (contourEdges[i]) {\n            indexBuffer.push(vFootprint0, vRoof0, vRoof1, vRoof1, vFootprint1, vFootprint0);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nconst currEdgeStart = new THREE.Vector2();\nconst currEdgeGoal = new THREE.Vector2();\nconst prevEdgeStart = new THREE.Vector2();\nconst prevEdgeGoal = new THREE.Vector2();\n\n/**\n * Fills an index buffer with the indices for the edges of a polygon contour.\n *\n * @param indexBuffer Edge index buffer to be filled.\n * @param vertexOffset Starting offset of the vertices composing the contour.\n * @param vertexStride Number of elements per contour vertex.\n * @param polygonContour Vertices that compose the contour.\n * @param polygonContourEdges Collection of booleans indicating if contour edges should be added.\n */\nexport function addPolygonEdges(\n    indexBuffer: number[],\n    vertexOffset: number,\n    vertexStride: number,\n    polygonContour: number[],\n    polygonContourEdges: boolean[],\n    isExtruded?: boolean,\n    addFootprintEdges?: boolean,\n    wallEdgeSlope?: number\n) {\n    for (let i = 0; i < polygonContourEdges.length; ++i) {\n        if (polygonContourEdges[i]) {\n            if (isExtruded === true) {\n                const vFootprint0 = vertexOffset + i * 2;\n                const vRoof0 = vFootprint0 + 1;\n                const vFootprint1 = vertexOffset + ((i + 1) % polygonContourEdges.length) * 2;\n                const vRoof1 = vFootprint1 + 1;\n\n                if (addFootprintEdges === true) {\n                    indexBuffer.push(vFootprint0, vFootprint1);\n                }\n                indexBuffer.push(vRoof0, vRoof1);\n\n                const prevEdgeIdx = (i === 0 ? polygonContourEdges.length : i) - 1;\n                if (polygonContourEdges[prevEdgeIdx]) {\n                    if (wallEdgeSlope !== undefined) {\n                        const v0x = polygonContour[i * vertexStride];\n                        const v0y = polygonContour[i * vertexStride + 1];\n                        const v1x =\n                            polygonContour[((i + 1) % polygonContourEdges.length) * vertexStride];\n                        const v1y =\n                            polygonContour[\n                                ((i + 1) % polygonContourEdges.length) * vertexStride + 1\n                            ];\n\n                        currEdgeStart.set(v0x, v0y);\n                        currEdgeGoal.set(v1x, v1y);\n                        prevEdgeStart.set(\n                            polygonContour[prevEdgeIdx * vertexStride],\n                            polygonContour[prevEdgeIdx * vertexStride + 1]\n                        );\n                        prevEdgeGoal.set(currEdgeStart.x, currEdgeStart.y);\n\n                        if (\n                            prevEdgeGoal\n                                .sub(prevEdgeStart)\n                                .normalize()\n                                .dot(currEdgeGoal.sub(currEdgeStart).normalize()) <= wallEdgeSlope\n                        ) {\n                            indexBuffer.push(vFootprint0, vRoof0);\n                        }\n                    } else {\n                        indexBuffer.push(vFootprint0, vRoof0);\n                    }\n                }\n            } else {\n                const vFoot0 = vertexOffset + i;\n                const vRoof0 = vertexOffset + ((i + 1) % polygonContourEdges.length);\n                indexBuffer.push(vFoot0, vRoof0);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    BufferAttribute as ThreeBufferAttribute,\n    BufferGeometry as ThreeBufferGeometry,\n    InterleavedBufferAttribute as ThreeInterleavedBufferAttribute,\n    TypedArray\n} from \"three\";\nimport {\n    BufferAttribute,\n    BufferElementType,\n    Geometry,\n    GeometryType,\n    InterleavedBufferAttribute\n} from \"./DecodedTile\";\n\n/**\n * Collection of helper methods to convert\n * {@link https://threejs.org/docs/index.html#api/en/core/BufferGeometry|three.js BufferGeometry}\n * to [[Geometry]] that allows creation and transfering of THREE BufferGeometry in webworkers.\n * See also [[CustomDatasourceExample]].\n */\nexport namespace ThreeBufferUtils {\n    export function getBufferElementType(buffer: TypedArray): BufferElementType {\n        if (buffer instanceof Int8Array) {\n            return \"int8\";\n        } else if (buffer instanceof Uint8Array) {\n            return \"uint8\";\n        } else if (buffer instanceof Int16Array) {\n            return \"int16\";\n        } else if (buffer instanceof Uint16Array) {\n            return \"uint16\";\n        } else if (buffer instanceof Int32Array) {\n            return \"int32\";\n        } else if (buffer instanceof Uint32Array) {\n            return \"uint32\";\n        } else if (buffer instanceof Float32Array) {\n            return \"float\";\n        }\n\n        throw new Error(`Unsupported buffer type ${name}`);\n    }\n\n    export function fromThreeBufferAttribute(\n        bufferAttribute: ThreeBufferAttribute\n    ): BufferAttribute {\n        const buffer = (bufferAttribute.array as any) as TypedArray;\n        return {\n            name: bufferAttribute.name,\n            buffer: buffer.buffer,\n            type: getBufferElementType(buffer),\n            itemCount: bufferAttribute.itemSize,\n            normalized: bufferAttribute.normalized\n        };\n    }\n\n    export function fromThreeInterleavedBufferAttribute(\n        bufferAttribute: ThreeInterleavedBufferAttribute\n    ): InterleavedBufferAttribute {\n        throw new Error(\"Not implemented yet\");\n    }\n\n    export function fromThreeBufferGeometry(\n        bufferGeometry: ThreeBufferGeometry,\n        techniqueIndex: number\n    ): Geometry {\n        const vertexAttributes: BufferAttribute[] = [];\n        const attributeNames = Object.getOwnPropertyNames(bufferGeometry.attributes);\n        for (const name of attributeNames) {\n            const attribute = bufferGeometry.attributes[name];\n            // FIXME: Also support InterleavedBufferAttribute\n            const vertexAttribute = fromThreeBufferAttribute(attribute as ThreeBufferAttribute);\n            vertexAttribute.name = name;\n            vertexAttributes.push(vertexAttribute);\n        }\n        const index =\n            bufferGeometry.index !== null\n                ? fromThreeBufferAttribute(bufferGeometry.index)\n                : undefined;\n\n        let count = 0;\n        if (index !== undefined) {\n            count = bufferGeometry.index === null ? 0 : bufferGeometry.index.count;\n        } else {\n            // If there is no index buffer, try to deduce the count from the position attribute.\n            const posAttr = bufferGeometry.attributes.position as ThreeBufferAttribute;\n            if (posAttr === undefined) {\n                throw new Error(\"Missing position attibute to deduce item count\");\n            }\n            count = posAttr.count;\n        }\n\n        return {\n            type: GeometryType.Unspecified,\n            vertexAttributes,\n            index,\n            groups: [{ start: 0, count, technique: techniqueIndex }]\n        };\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Vector3Like } from \"@here/harp-geoutils\";\nimport * as THREE from \"three\";\n\n/**\n * Determines whether a position in NDC (Normalized Device Coordinates) is inside the screen.\n * @param ndc The position to check.\n */\nfunction isOnScreen(ndc: THREE.Vector3) {\n    return ndc.z > -1 && ndc.z < 1 && ndc.x >= -1 && ndc.x <= 1 && ndc.y >= -1 && ndc.y <= 1;\n}\n\n/**\n * @hidden\n * Handles the projection of world coordinates to screen coordinates.\n */\nexport class ScreenProjector {\n    static tempV2 = new THREE.Vector2();\n    static tempV3 = new THREE.Vector3();\n\n    private m_width: number = 0;\n    private m_height: number = 0;\n\n    /**\n     * Constructs a new `ScreenProjector`.\n     *\n     * @param m_camera Camera to project against.\n     */\n    constructor(private m_camera: THREE.Camera) {}\n\n    /**\n     * Height of the screen.\n     */\n    get width(): number {\n        return this.m_width;\n    }\n\n    /**\n     * Width of the screen.\n     */\n    get height(): number {\n        return this.m_height;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector2} target The target vector.\n     * @returns {THREE.Vector2} The projected vector (the parameter 'target') or undefined if\n     * outside the screen.\n     */\n    projectOnScreen(\n        source: Vector3Like,\n        target: THREE.Vector2 = new THREE.Vector2()\n    ): THREE.Vector2 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (isOnScreen(p)) {\n            return this.ndcToScreen(p, target);\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector into\n     * screen coordinates. The z component between -1 and 1 is also returned.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target') or undefined if\n     * outside the near / far plane.\n     */\n    project3(\n        source: Vector3Like,\n        target: THREE.Vector3 = new THREE.Vector3()\n    ): THREE.Vector3 | undefined {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        if (p.z > -1 && p.z < 1) {\n            target.set((p.x * this.m_width) / 2, (p.y * this.m_height) / 2, p.z);\n            return target;\n        }\n        return undefined;\n    }\n\n    /**\n     * Apply current projectionViewMatrix of the camera to project the source vector. Stores\n     * result in NDC in the target vector.\n     *\n     * @param {(Vector3Like)} source The source vector to project.\n     * @param {THREE.Vector3} target The target vector.\n     * @returns {THREE.Vector3} The projected vector (the parameter 'target').\n     */\n    projectVector(source: Vector3Like, target: THREE.Vector3): THREE.Vector3 {\n        target.set(source.x, source.y, source.z).project(this.m_camera);\n        return target;\n    }\n\n    /**\n     * Fast test to check if projected point is on screen.\n     *\n     * @returns {boolean} `true` if point is on screen, `false` otherwise.\n     */\n    onScreen(source: Vector3Like): boolean {\n        const p = this.projectVector(source, ScreenProjector.tempV3);\n        return isOnScreen(p);\n    }\n\n    /**\n     * Update the `ScreenProjector` with the latest values of the screen and the camera.\n     *\n     * @param {THREE.Camera} camera Camera to project against.\n     * @param {number} width Width of screen/canvas.\n     * @param {number} height Height of screen/canvas.\n     */\n    update(camera: THREE.Camera, width: number, height: number) {\n        this.m_camera = camera;\n        this.m_width = width;\n        this.m_height = height;\n    }\n\n    private ndcToScreen(ndc: THREE.Vector3, screenCoords: THREE.Vector2): THREE.Vector2 {\n        return screenCoords.set((ndc.x * this.m_width) / 2, (ndc.y * this.m_height) / 2);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { CubemapSky, GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { SkyCubemapTexture } from \"./SkyCubemapTexture\";\nimport { SkyGradientTexture } from \"./SkyGradientTexture\";\n\nimport * as THREE from \"three\";\n\n/**\n * Class that handles [[MapView]]'s sky background.\n */\nexport class SkyBackground {\n    private m_skyTexture?: SkyGradientTexture | SkyCubemapTexture;\n\n    /**\n     * Constructs a new `SkyBackground`.\n     *\n     * @param m_sky Sky configuration parameters.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param camera [[MapView]]'s camera.\n     */\n    constructor(\n        private m_sky: GradientSky | CubemapSky,\n        private m_projectionType: ProjectionType,\n        camera: THREE.Camera\n    ) {\n        switch (this.m_sky.type) {\n            case \"gradient\":\n                this.m_skyTexture = new SkyGradientTexture(this.m_sky, this.m_projectionType);\n                this.updateCamera(camera);\n                break;\n            case \"cubemap\": {\n                this.m_skyTexture = new SkyCubemapTexture(this.m_sky);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        this.m_skyTexture!.dispose();\n    }\n\n    /**\n     * Sky texture.\n     */\n    get texture(): THREE.Texture {\n        return this.m_skyTexture!.texture;\n    }\n\n    /**\n     * This method updates the skybox based on the camera position (needed for some types of sky).\n     *\n     * @param camera The camera used in the map view.\n     */\n    updateCamera(camera: THREE.Camera) {\n        if (this.m_sky.type === \"gradient\") {\n            (this.m_skyTexture! as SkyGradientTexture).update(camera);\n        }\n    }\n\n    /**\n     * Updates the sky texture with new parameters.\n     *\n     * @param params New sky configuration parameters.\n     * @param projectionType Which projection is used, this may also change (in which case the\n     * textures should be recreated).\n     */\n    updateTexture(params: GradientSky | CubemapSky, projectionType: ProjectionType) {\n        const isSameSkyType =\n            this.m_sky.type === params.type && this.m_projectionType === projectionType;\n        switch (params.type) {\n            case \"gradient\":\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyGradientTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyGradientTexture(params, projectionType);\n                }\n                break;\n            case \"cubemap\": {\n                if (isSameSkyType) {\n                    (this.m_skyTexture! as SkyCubemapTexture).updateTexture(params);\n                } else {\n                    this.m_skyTexture = new SkyCubemapTexture(params);\n                }\n                break;\n            }\n        }\n        this.m_projectionType = projectionType;\n        this.m_sky = params;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { GradientSky } from \"@here/harp-datasource-protocol\";\nimport { ProjectionType } from \"@here/harp-geoutils\";\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { Color, CubeTexture, DataTexture, Line3, Plane, RGBFormat, Texture, Vector3 } from \"three\";\n\nexport const DEFAULT_TEXTURE_SIZE = 512;\nexport const DEFAULT_MONOMIAL_POWER = 1;\n\n// Vectors used for skybox bitmap computation.\nconst cameraDir = [\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0),\n    new Vector3(0, -1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1)\n];\nconst cameraRight = [\n    new Vector3(0, 0, -1),\n    new Vector3(0, 0, 1),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(1, 0, 0),\n    new Vector3(-1, 0, 0)\n];\nconst cameraUp = [\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 0, 1),\n    new Vector3(0, 0, -1),\n    new Vector3(0, 1, 0),\n    new Vector3(0, 1, 0)\n];\n\n/**\n * Class tha generates a texture containing a linear gradient, to be used with [[SkyBackground]].\n *\n * The gradient is mapped onto a sphere, where `topColor` maps to the top of the upper hemisphere,\n * `bottomColor` to the bottom of the upper hemisphere, and `groundColor` fills the bottom\n *  hemisphere..\n */\nexport class SkyGradientTexture {\n    private m_width: number;\n    private m_faceCount: number;\n    private m_faces: DataTexture[];\n    private m_skybox?: CubeTexture;\n\n    // Used only in the planar case.\n    private m_farClipPlaneDividedVertically?: THREE.Line3;\n    private m_groundPlane?: THREE.Plane;\n    private m_bottomMidFarPoint?: THREE.Vector3;\n    private m_topMidFarPoint?: THREE.Vector3;\n    private m_horizonPosition?: THREE.Vector3;\n    private m_farClipPlaneCorners?: THREE.Vector3[];\n\n    /**\n     * Constructs a new `SkyGradientTexture`.\n     *\n     * @param sky Initial [[GradientSky]] configuration.\n     * @param m_projectionType [[MapView]]'s projection type.\n     * @param m_height Optional height parameter.\n     */\n    constructor(\n        sky: GradientSky,\n        private m_projectionType: ProjectionType,\n        private m_height: number = DEFAULT_TEXTURE_SIZE\n    ) {\n        const topColor = new Color(sky.topColor);\n        const bottomColor = new Color(sky.bottomColor);\n        const groundColor = new Color(sky.groundColor);\n\n        this.m_width = this.m_projectionType === ProjectionType.Planar ? 1.0 : this.m_height;\n        this.m_faceCount = this.m_projectionType === ProjectionType.Planar ? 1.0 : 6.0;\n        this.m_faces = [];\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            const data = new Uint8Array(3 * this.m_width * this.m_height);\n            this.fillTextureData(data, i, topColor, bottomColor, groundColor, sky.monomialPower);\n\n            const texture = new DataTexture(data, this.m_width, this.m_height, RGBFormat);\n            texture.needsUpdate = true;\n            texture.unpackAlignment = 1;\n            this.m_faces.push(texture);\n        }\n\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox = new CubeTexture(this.m_faces);\n            this.m_skybox.needsUpdate = true;\n        } else {\n            this.m_farClipPlaneDividedVertically = new Line3();\n            this.m_groundPlane = new Plane(new Vector3(0, 0, 1));\n            this.m_bottomMidFarPoint = new Vector3();\n            this.m_topMidFarPoint = new Vector3();\n            this.m_horizonPosition = new Vector3();\n            this.m_farClipPlaneCorners = [\n                new Vector3(),\n                new Vector3(),\n                new Vector3(),\n                new Vector3()\n            ];\n        }\n    }\n\n    /**\n     * Disposes allocated resources.\n     */\n    dispose() {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.m_faces[i].dispose();\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.dispose();\n        }\n    }\n\n    /**\n     * `SkyGradientTexture`'s texture resource (simple texture or cubemap depending on\n     * [[MapView]]'s projection).\n     */\n    get texture(): Texture {\n        return this.m_projectionType === ProjectionType.Planar ? this.m_faces[0] : this.m_skybox!;\n    }\n\n    /**\n     * This method updates the position of the texture depending on the camera frustum.\n     *\n     * @param camera The camera used in the map view.\n     */\n    update(camera: THREE.Camera) {\n        if (this.m_projectionType === ProjectionType.Planar) {\n            this.setHorizonPosition(camera);\n            this.updateTexturePosition();\n        }\n    }\n\n    /**\n     * Updates the `SkyGradientTexture` with new parameters.\n     *\n     * @param params New [[GradientSky]] configuration.\n     */\n    updateTexture(sky: GradientSky) {\n        for (let i = 0; i < this.m_faceCount; ++i) {\n            this.fillTextureData(\n                this.m_faces[i].image.data,\n                i,\n                new Color(sky.topColor),\n                new Color(sky.bottomColor),\n                new Color(sky.groundColor),\n                sky.monomialPower\n            );\n            this.m_faces[i].needsUpdate = true;\n        }\n        if (this.m_projectionType === ProjectionType.Spherical) {\n            this.m_skybox!.needsUpdate = true;\n        }\n    }\n\n    // When creating the texture, a Uint8Array is required, because the resulting texture passed\n    // to the scene as a background, is a texImage2D object, that does not accept UintClampedArray\n    // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D\n    // But, when updating the texture, a Uint8ClampedArray is passed as argument, because\n    // this.m_texture.image.data returns a Uint8ClampedArray. That's why this method accepts both.\n    private fillTextureData(\n        data: Uint8ClampedArray | Uint8Array,\n        faceIdx: number,\n        topColor: Color,\n        bottomColor: Color,\n        groundColor: Color,\n        monomialPower?: number\n    ) {\n        const color = new Color();\n        const dir = new Vector3();\n        const right = new Vector3();\n        const up = new Vector3();\n\n        const upDir = new Vector3(0, 0, 1);\n        for (let i = 0; i < this.m_height; ++i) {\n            for (let j = 0; j < this.m_width; ++j) {\n                if (this.m_projectionType === ProjectionType.Spherical) {\n                    const offsetX = right\n                        .copy(cameraRight[faceIdx])\n                        .multiplyScalar(((j + 0.5) / this.m_width) * 2.0 - 1.0);\n                    const offsetY = up\n                        .copy(cameraUp[faceIdx])\n                        .multiplyScalar(((i + 0.5) / this.m_height) * 2.0 - 1.0);\n                    dir.copy(cameraDir[faceIdx])\n                        .add(offsetX)\n                        .add(offsetY)\n                        .normalize();\n                    const t = Math.max(upDir.dot(dir), 0);\n\n                    color\n                        .copy(groundColor)\n                        .lerp(bottomColor, Math.min(t * 100, 1))\n                        .lerp(topColor, t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER))\n                        .multiplyScalar(255);\n                } else {\n                    const t = i / this.m_height;\n                    if (i === 0) {\n                        color.copy(groundColor).multiplyScalar(255);\n                    } else {\n                        color\n                            .copy(bottomColor)\n                            .lerp(\n                                topColor,\n                                t ** getOptionValue(monomialPower, DEFAULT_MONOMIAL_POWER)\n                            )\n                            .multiplyScalar(255);\n                    }\n                }\n\n                data[i * this.m_width * 3 + j * 3] = color.r;\n                data[i * this.m_width * 3 + j * 3 + 1] = color.g;\n                data[i * this.m_width * 3 + j * 3 + 2] = color.b;\n            }\n        }\n    }\n\n    private setHorizonPosition(camera: THREE.Camera) {\n        this.m_farClipPlaneCorners![0].set(-1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![1].set(1, -1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![2].set(-1, 1, 1).unproject(camera);\n        this.m_farClipPlaneCorners![3].set(1, 1, 1).unproject(camera);\n\n        this.m_bottomMidFarPoint!.copy(this.m_farClipPlaneCorners![0])\n            .add(this.m_farClipPlaneCorners![1])\n            .multiplyScalar(0.5);\n        this.m_topMidFarPoint!.copy(this.m_farClipPlaneCorners![2])\n            .add(this.m_farClipPlaneCorners![3])\n            .multiplyScalar(0.5);\n        this.m_farClipPlaneDividedVertically!.set(this.m_bottomMidFarPoint, this.m_topMidFarPoint);\n\n        const hasIntersection = this.m_groundPlane!.intersectLine(\n            this.m_farClipPlaneDividedVertically!,\n            this.m_horizonPosition!\n        );\n\n        // When there is no intersection between the ground plane and the\n        // farClipPlaneDividedVertically, be sure that the horizon is reset. Otherwise a previous\n        // intersection point stored in the m_horizonPosition will be considered the valid one.\n        if (!hasIntersection) {\n            this.m_horizonPosition!.set(0.0, 0.0, 0.0);\n        }\n    }\n\n    private updateTexturePosition() {\n        const coveredBySky = this.m_bottomMidFarPoint!.distanceTo(this.m_horizonPosition!);\n        const frustumHeight = this.m_farClipPlaneDividedVertically!.distance();\n        const skyRatio = coveredBySky / frustumHeight;\n\n        // If there is no intersection between the ground plane and the line that defines the far\n        // clip plane divided vertically, it means that there is no sky visible and therefore the\n        // ground color should be displayed. When there is no intersection, the length of the\n        // this.m_horizonPosition is still equal to zero, as threejs initialize an empty vector with\n        // all the three components to zero.\n        // If there is an intersection, calculate the offset.\n        const ratio = this.m_horizonPosition!.length() === 0 ? 1 : skyRatio - 2 / this.m_height;\n\n        // If the bottom part of the far clipping plane is under the ground plane, scroll the\n        // texture down. Otherwise, the camera is looking at the sky, therefore, scroll the texture\n        // up.\n        this.m_faces[0].offset.set(0, this.m_bottomMidFarPoint!.z <= 0 ? -ratio : skyRatio);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Theme } from \"@here/harp-datasource-protocol\";\nimport { FontCatalog } from \"@here/harp-text-canvas\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\n\nexport const DEFAULT_FONT_CATALOG_NAME = \"default\";\n\nconst logger = LoggerManager.instance.create(\"FontCatalogLoader\");\n\ntype FontCatalogCallback = (name: string, catalog: FontCatalog) => void;\n\nexport class FontCatalogLoader {\n    private m_catalogsLoading: number = 0;\n\n    constructor(private readonly m_theme: Theme) {}\n\n    /**\n     * Initializes font catalog loader.\n     * @param defaultFontCatalogUrl Url of the font catalog that will be used by default if the\n     * theme doesn't define any font catalog.\n     * @returns Name of the default font catalog.\n     */\n    initialize(defaultFontCatalogUrl: string): string {\n        if (this.m_theme.fontCatalogs === undefined || this.m_theme.fontCatalogs.length === 0) {\n            this.m_theme.fontCatalogs = [\n                {\n                    name: DEFAULT_FONT_CATALOG_NAME,\n                    url: defaultFontCatalogUrl\n                }\n            ];\n            return DEFAULT_FONT_CATALOG_NAME;\n        }\n\n        const defaultFontCatalogName = this.m_theme.fontCatalogs[0].name;\n        return defaultFontCatalogName;\n    }\n\n    async loadCatalogs(catalogCallback: FontCatalogCallback): Promise<void[]> {\n        assert(this.m_theme.fontCatalogs !== undefined);\n        assert(this.m_theme.fontCatalogs!.length > 0);\n\n        const promises: Array<Promise<void>> = [];\n\n        this.m_theme.fontCatalogs!.forEach(fontCatalogConfig => {\n            this.m_catalogsLoading += 1;\n            const fontCatalogPromise: Promise<void> = FontCatalog.load(fontCatalogConfig.url, 1024)\n                .then<void>(catalogCallback.bind(undefined, fontCatalogConfig.name))\n                .catch((error: Error) => {\n                    logger.error(\"Failed to load FontCatalog: \", error);\n                })\n                .finally(() => {\n                    this.m_catalogsLoading -= 1;\n                });\n            promises.push(fontCatalogPromise);\n        });\n\n        return Promise.all(promises);\n    }\n\n    get loading(): boolean {\n        return this.m_catalogsLoading > 0;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Env, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { Projection } from \"@here/harp-geoutils\";\nimport { ElevationProvider } from \"../ElevationProvider\";\nimport { MapView } from \"../MapView\";\nimport { ViewState } from \"./ViewState\";\n\n/**\n * View state obtained from a MapView instance.\n */\nexport class MapViewState implements ViewState {\n    constructor(\n        private readonly m_mapView: MapView,\n        private readonly m_renderedTilesChangeCheck: () => boolean\n    ) {}\n\n    get worldCenter(): THREE.Vector3 {\n        return this.m_mapView.worldCenter;\n    }\n    get cameraIsMoving(): boolean {\n        return this.m_mapView.cameraIsMoving;\n    }\n    get maxVisibilityDist(): number {\n        return this.m_mapView.viewRanges.maximum;\n    }\n    get zoomLevel(): number {\n        return this.m_mapView.zoomLevel;\n    }\n    get env(): Env {\n        return this.m_mapView.env;\n    }\n    get frameNumber(): number {\n        return this.m_mapView.frameNumber;\n    }\n    get lookAtDistance(): number {\n        return this.m_mapView.targetDistance;\n    }\n    get isDynamic(): boolean {\n        return this.m_mapView.isDynamicFrame;\n    }\n    get hiddenGeometryKinds(): GeometryKindSet | undefined {\n        return this.m_mapView.tileGeometryManager === undefined\n            ? undefined\n            : this.m_mapView.tileGeometryManager.hiddenGeometryKinds;\n    }\n\n    get renderedTilesChanged(): boolean {\n        return this.m_renderedTilesChangeCheck();\n    }\n\n    get projection(): Projection {\n        return this.m_mapView.projection;\n    }\n\n    get elevationProvider(): ElevationProvider | undefined {\n        return this.m_mapView.elevationProvider;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { FontCatalog, TextCanvas } from \"@here/harp-text-canvas\";\nimport { assert } from \"@here/harp-utils\";\n\nexport class TextCanvasFactory {\n    private m_minGlyphCount: number = 0; //Min amount of glyphs each [[TextCanvas]] layer can store.\n    private m_maxGlyphCount: number = 0; //Max amount of glyphs each [[TextCanvas]] layer can store.\n\n    /**\n     * Creates an instance of text canvas factory.\n     * @param m_renderer\n     */\n    constructor(private readonly m_renderer: THREE.WebGLRenderer) {}\n\n    setGlyphCountLimits(min: number, max: number) {\n        this.m_minGlyphCount = min;\n        this.m_maxGlyphCount = max;\n    }\n\n    /**\n     * Creates text canvas\n     * @param fontCatalog Initial [[FontCatalog]].\n     */\n    createTextCanvas(fontCatalog: FontCatalog): TextCanvas {\n        assert(this.m_maxGlyphCount > 0);\n\n        return new TextCanvas({\n            renderer: this.m_renderer,\n            fontCatalog,\n            minGlyphCount: this.m_minGlyphCount,\n            maxGlyphCount: this.m_maxGlyphCount\n        });\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { getOptionValue } from \"@here/harp-utils\";\nimport { MapView, MapViewEventNames } from \"../MapView\";\nimport { CopyrightInfo } from \"./CopyrightInfo\";\n\n/**\n * Helper class that maintains up-to-date [[MapView]] copyright information in DOM element.\n *\n * @example\n *\n *     // HTML snippet\n *     <div id=\"copyrightNotice\" style=\"position:absolute; right:0; bottom:0; z-index:100\"></div>\n *\n *     // JavaScript\n *     const mapView = new MapView({ ... });\n *     CopyrightElementHandler.install(\"copyrightNotice\", mapView);\n */\nexport class CopyrightElementHandler {\n    /**\n     * Install [[CopyrightElementHandler]] on DOM element and - optionally - attach to a [[MapView]]\n     * instance.\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView, optional, [[attach]] to this [[MapView]]\n     */\n    static install(element: string | HTMLElement, mapView?: MapView): CopyrightElementHandler {\n        return new CopyrightElementHandler(element, mapView);\n    }\n\n    /**\n     * Static copyright info.\n     *\n     * Use when [[MapView]]'s [[DataSource]]'s do not provide proper copyright information.\n     */\n    staticInfo: CopyrightInfo[] | undefined;\n\n    private m_defaults: Map<string, CopyrightInfo> = new Map();\n    private m_element: HTMLElement;\n    private m_mapViews: MapView[] = [];\n\n    /**\n     * Creates a new `CopyrightElementHandler` that updates the DOM element with the copyright info\n     * of the given `mapView`.\n     *\n     * Note: Generally, the static [[install]] method can be used to create and attach a new\n     * `CopyrightElementHandler` to a [[MapView]]\n     *\n     * @param element HTML DOM element or a HTML DOM element id\n     * @param mapView optional, [[attach]] to this [[MapView]] instance\n     */\n    constructor(element: string | HTMLElement, mapView?: MapView) {\n        if (typeof element === \"string\") {\n            const htmlElement = document.getElementById(element);\n            if (!htmlElement) {\n                throw new Error(`CopyrightElementHandler: unable to find DOM element #${element}`);\n            }\n            this.m_element = htmlElement;\n        } else {\n            this.m_element = element;\n        }\n\n        if (mapView !== undefined) {\n            this.attach(mapView);\n        }\n    }\n\n    /**\n     * Destroys this object by removing all event listeners from the attached [[MapView]]s.\n     */\n    destroy() {\n        for (const mapView of this.m_mapViews) {\n            mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        }\n    }\n\n    /**\n     * Attaches this [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    attach(mapView: MapView): this {\n        this.m_mapViews.push(mapView);\n\n        mapView.addEventListener(MapViewEventNames.CopyrightChanged, this.update);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Stop following [[CopyrightInfo]] updates from [[MapView]] instance.\n     */\n    detach(mapView: MapView): this {\n        mapView.removeEventListener(MapViewEventNames.CopyrightChanged, this.update);\n\n        this.m_mapViews = this.m_mapViews.filter(item => item !== mapView);\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Set [[CopyrightInfo]] defaults to be used in case [[DataSource]] does not provide deatailed\n     * copyright information.\n     *\n     * The defaults will applied to all undefined `year`, `label` and `link` values in the copyright\n     * information retrieved from [[MapView]].\n     */\n    setDefaults(defaults: CopyrightInfo[] | undefined): this {\n        this.m_defaults.clear();\n        if (defaults !== undefined) {\n            for (const item of defaults) {\n                this.m_defaults.set(item.id, item);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the [[staticInfo]] property.\n     *\n     * A `CopyrightElementHandler` always displays a deduplicated sum of static copyright info and\n     * copyright information obtained from attached [[MapView]]s.\n     *\n     * This information is used when [[DataSource]] instances of given [[MapView]] do not provide\n     * copyright information.\n     */\n    setStaticCopyightInfo(staticInfo: CopyrightInfo[] | undefined): this {\n        this.staticInfo = staticInfo;\n        return this;\n    }\n\n    /**\n     * Update copyright info text in controlled HTML element.\n     */\n    update = () => {\n        const mergedCopyrightInfo = this.m_mapViews\n            .map(mapView => mapView.copyrightInfo)\n            .reduce(CopyrightInfo.mergeArrays, this.staticInfo || []);\n\n        // Conditionally hiding of element with copyright information.\n        // If nothing to show we schould to avoid empty white rectangle in right bottom corner.\n        if (mergedCopyrightInfo.length === 0) {\n            this.m_element.style.display = \"none\";\n            return;\n        } else {\n            this.m_element.style.display = \"block\";\n        }\n\n        if (this.m_defaults.size !== 0) {\n            for (const sourceInfo of mergedCopyrightInfo) {\n                const defaults = this.m_defaults.get(sourceInfo.id);\n                if (defaults !== undefined) {\n                    sourceInfo.year = getOptionValue(sourceInfo.year, defaults.year);\n                    sourceInfo.label = getOptionValue(sourceInfo.label, defaults.label);\n                    sourceInfo.link = getOptionValue(sourceInfo.link, defaults.link);\n                }\n            }\n        }\n        const deduped = CopyrightInfo.mergeArrays(mergedCopyrightInfo);\n\n        this.m_element.innerHTML = CopyrightInfo.formatAsHtml(deduped);\n    };\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { TransferManager } from \"@here/harp-transfer-manager\";\nimport {\n    AreaCopyrightInfo,\n    CopyrightCoverageProvider,\n    CopyrightCoverageResponse\n} from \"./CopyrightCoverageProvider\";\n\n/**\n * Copyright provider which retrieves copyright coverage information from provided URL.\n */\nexport class UrlCopyrightProvider extends CopyrightCoverageProvider {\n    private m_cachedCopyrightResponse: Promise<AreaCopyrightInfo[]> | undefined;\n\n    /**\n     * Default constructor.\n     *\n     * @param m_fetchURL URL to fetch copyrights data from.\n     * @param m_baseScheme Scheme to get copyrights from.\n     */\n    constructor(private m_fetchURL: string, private m_baseScheme: string) {\n        super();\n    }\n\n    /**\n     * @inheritdoc\n     * @override\n     */\n    getCopyrightCoverageData(): Promise<AreaCopyrightInfo[]> {\n        if (this.m_cachedCopyrightResponse !== undefined) {\n            return this.m_cachedCopyrightResponse;\n        }\n\n        this.m_cachedCopyrightResponse = new TransferManager()\n            .downloadJson<CopyrightCoverageResponse>(this.m_fetchURL)\n            .then(json => json[this.m_baseScheme])\n            .catch(error => {\n                this.logger.error(error);\n                return [];\n            });\n\n        return this.m_cachedCopyrightResponse;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @module\n *\n * This module provides classes to ease downloading URLs. In particular, following redirects,\n * retrying on HTTP errors, and limiting the number of parallel concurrent downloads.\n */\n\nimport \"@here/harp-fetch\";\nimport { DeferredPromise } from \"./DeferredPromise\";\n\n/**\n * `TransferManager` for downloading URLs.\n *\n * Features:\n *\n * * Merges JSON downloads, for example, the same URL if requested as JSON will only be downloaded\n *   once.\n * * Limits the amount of parallel downloads, useful when requesting a large amount of URLs that\n *   would otherwise stall the browser.\n * * Retries the downloads with an increasing timeout on HTTP 503 replies.\n *\n * The static method [[instance]] can be used to get a default constructed instance.\n */\nexport class TransferManager {\n    /**\n     * The timeout in milliseconds to wait between retries. This timeout is multiplied with the\n     * number of retries. First retry waits for 0 ms, second retry for 500 ms, third for 1000 ms and\n     * so on.\n     */\n    static readonly retryTimeout = 500;\n    /**\n     * The amount of maximum parallel downloads to allow.\n     */\n    static readonly maxParallelDownloads = 16;\n    /**\n     * Returns a default instance of [[TransferManager]].\n     */\n    static instance(): TransferManager {\n        return TransferManager.defaultInstance;\n    }\n    private static readonly defaultInstance = new TransferManager();\n    private static async fetchRepeatedly(\n        fetchFunction: typeof fetch,\n        retryCount: number,\n        maxRetries: number,\n        url: string,\n        init?: RequestInit\n    ): Promise<Response> {\n        try {\n            const response = await fetchFunction(url, init);\n            if (response.status !== 503 || retryCount > maxRetries) {\n                return response;\n            }\n        } catch (err) {\n            if (\n                err.hasOwnProperty(\"isCancelled\") ||\n                (err.hasOwnProperty(\"name\") && err.name === \"AbortError\") ||\n                retryCount > maxRetries\n            ) {\n                throw err;\n            }\n        }\n        return TransferManager.waitFor(TransferManager.retryTimeout * retryCount).then(() =>\n            TransferManager.fetchRepeatedly(fetchFunction, maxRetries, retryCount + 1, url, init)\n        );\n    }\n    private static waitFor(milliseconds: number): Promise<void> {\n        return new Promise<void>(resolve => setTimeout(resolve, milliseconds));\n    }\n    private activeDownloadCount = 0;\n    private downloadQueue = new Array<DeferredPromise<Response>>();\n    private activeDownloads = new Map<string, Promise<any>>();\n    /**\n     * Constructs a new [[TransferManager]].\n     *\n     * @param fetchFunction The default fetch function to use.\n     * @param maxRetries The maximum amount to try to re-fetch a resource.\n     */\n    constructor(readonly fetchFunction = fetch, readonly maxRetries: number = 5) {}\n    /**\n     * Downloads a JSON object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download.\n     */\n    downloadJson<T>(url: string, init?: RequestInit): Promise<T> {\n        return this.downloadAs<T>(response => response.json(), url, init);\n    }\n    /**\n     * Downloads a binary object. Merges downloads if requested multiple times.\n     *\n     * Note: This method merges multiple downloads of the same resource to\n     * only one request. The init parameter is ignored if the download is merged.\n     * Call [[download]] instead to download the resource without merging.\n     *\n     * @param url The URL to download\n     * @param init Optional extra parameters for the download\n     */\n    downloadArrayBuffer(url: string, init?: RequestInit): Promise<ArrayBuffer> {\n        return this.download(url, init).then(response => response.arrayBuffer());\n    }\n    /**\n     * Downloads a URL and returns the response.\n     *\n     * Does not merge multiple requests to the same URL.\n     *\n     * @param url The URL to download.\n     * @param init Optional extra parameters for the download.\n     */\n    download(url: string, init?: RequestInit): Promise<Response> {\n        if (this.activeDownloadCount >= TransferManager.maxParallelDownloads) {\n            const deferred = new DeferredPromise<Response>(() => this.doDownload(url, init));\n            this.downloadQueue.push(deferred);\n            return deferred.promise;\n        }\n        return this.doDownload(url, init);\n    }\n    private async doDownload(url: string, init?: RequestInit): Promise<Response> {\n        try {\n            ++this.activeDownloadCount;\n            const response = await TransferManager.fetchRepeatedly(\n                this.fetchFunction,\n                0,\n                this.maxRetries,\n                url,\n                init\n            );\n\n            this.onDownloadDone();\n            return response;\n        } catch (error) {\n            this.onDownloadDone();\n            throw error;\n        }\n    }\n    private onDownloadDone() {\n        --this.activeDownloadCount;\n        this.execDeferredDownload();\n    }\n    private execDeferredDownload() {\n        const future = this.downloadQueue.pop();\n        if (future === undefined) {\n            return;\n        }\n        future.exec();\n    }\n    private downloadAs<T>(\n        converter: (response: Response) => Promise<T>,\n        url: string,\n        init?: RequestInit\n    ): Promise<T> {\n        const cacheKey = url;\n        const pendingFetch = this.activeDownloads.get(cacheKey);\n        if (pendingFetch !== undefined) {\n            return Promise.resolve(pendingFetch);\n        }\n        const newFetch = this.download(url, init)\n            .then(response => {\n                this.activeDownloads.delete(cacheKey);\n                if (response.ok) {\n                    return converter(response);\n                }\n                throw new Error(JSON.stringify(response));\n            })\n            .catch(err => {\n                this.activeDownloads.delete(cacheKey);\n                throw err;\n            });\n        this.activeDownloads.set(cacheKey, newFetch);\n        return newFetch;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n *\n * DeferredPromise takes an executor function for executing it later, when [[exec]] is called.\n * This class allows wrapping other promises or long running functions for later execution.\n * @internal\n * @hidden\n */\nexport class DeferredPromise<T> {\n    /**\n     * Internal promise to store the result of the deferred executor function.\n     */\n    readonly promise: Promise<T>;\n    private resolveFunc?: (result?: T) => void;\n    private rejectFunc?: (reason?: any) => void;\n\n    /**\n     * Constructs a new [[DeferredPromise]]\n     * @param executor Async function that should be executed at a later point in time.\n     */\n    constructor(private readonly executor: () => Promise<T>) {\n        this.promise = new Promise<T>((resolve, reject) => {\n            this.resolveFunc = resolve;\n            this.rejectFunc = reject;\n        });\n    }\n\n    /**\n     * When `exec` is called the deferred executor function is executed.\n     */\n    exec() {\n        this.executor()\n            .then(result => this.resolveFunc!(result))\n            .catch(error => this.rejectFunc!(error));\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * `ImageItem` is used to identify an image in the [[ImageCache]].\n */\nexport interface ImageItem {\n    /** URL of the image, or unique identifier. */\n    url: string;\n    /** Pixel data. */\n    imageData?: ImageData | ImageBitmap;\n    /** Turns to `true` when the data has finished loading. */\n    loaded: boolean;\n    /** `loadingPromise` is only used during loading/generating the image. */\n    loadingPromise?: Promise<ImageItem | undefined>;\n}\n\nexport namespace ImageItem {\n    /**\n     * Missing Typedoc\n     */\n    export function isLoading(imageItem: ImageItem): boolean {\n        return imageItem.loadingPromise !== undefined;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { GeometryType, getFeatureId } from \"@here/harp-datasource-protocol\";\nimport { assert, LoggerManager } from \"@here/harp-utils\";\nimport { Tile, TileFeatureData } from \"../Tile\";\nimport {\n    BufferedGeometryLineAccessor,\n    BufferedGeometryObject3dAccessor,\n    IGeometryAccessor,\n    ILineAccessor,\n    IndexedBufferedGeometryLineAccessor,\n    IObject3dAccessor,\n    isLineAccessor,\n    isObject3dAccessor\n} from \"./TileGeometry\";\n\nconst logger = LoggerManager.instance.create(\"TileDataAccessor\");\n\n/**\n * Interface for a client visitor that is used to visit all `THREE.Object`s in a tile.\n */\nexport interface ITileDataVisitor {\n    tile: Tile;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`. This function is called before the type of the object is even known.\n     */\n    wantsFeature(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the point with the specified\n     * `featureId`.\n     */\n    wantsPoint(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the line with the specified\n     * `featureId`.\n     */\n    wantsLine(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the area object with the specified\n     * `featureId`.\n     */\n    wantsArea(featureId: number | undefined): boolean;\n\n    /**\n     * Should return `true` if the visitor wants to visit the object with the specified\n     * `featureId`.\n     */\n    wantsObject3D(featureId: number | undefined): boolean;\n\n    /**\n     * Visits a point object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitPoint(featureId: number | undefined): void;\n\n    /**\n     * Visits a line object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitLine(featureId: number | undefined, lineAccessor: ILineAccessor): void;\n\n    /**\n     * Visit an area object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitArea(featureId: number | undefined): void;\n\n    /**\n     * Visits a 3D object with the specified `featureId`; use `pointAccessor` to get the\n     * object's properties.\n     */\n    visitObject3D(featureId: number | undefined, object3dAccessor: IObject3dAccessor): void;\n}\n\n/**\n * An interface that provides options for [[TileDataAccessor]].\n */\nexport interface TileDataAccessorOptions {\n    /** Limit to objects that have `featureID`s. */\n    onlyWithFeatureIds?: boolean;\n    /** Sets and overrides `wantPoints`, `wantLines`, `wantAreas`, `wantObject3D`. */\n    wantsAll?: boolean;\n    /** `true` to visit points. */\n    wantsPoints?: boolean;\n    /** `true` to visit lines. */\n    wantsLines?: boolean;\n    /** `true` to visit area objects. */\n    wantsAreas?: boolean;\n    /** `true` to visit general 3D objects. */\n    wantsObject3D?: boolean;\n}\n\n/**\n * An accessor for all geometries in a tile. This class uses a client-provided [[ITileDataVisitor]]\n * to visit all objects, based on filtering options specified by both, the `TileDataAccessor` and\n * the visitor itself.\n */\nexport class TileDataAccessor {\n    private m_wantsPoints = true;\n    private m_wantsLines = true;\n    private m_wantsAreas = true;\n    private m_wantsObject3D = true;\n\n    /**\n     * Constructs a `TileDataAccessor` instance.\n     *\n     * @param tile The tile to access.\n     * @param visitor The visitor.\n     * @param options Options for the tile.\n     */\n    constructor(\n        public tile: Tile,\n        private visitor: ITileDataVisitor,\n        options: TileDataAccessorOptions\n    ) {\n        const wantsAll = options.wantsAll === true;\n        this.m_wantsPoints = wantsAll || !(options.wantsPoints === false);\n        this.m_wantsLines = wantsAll || !(options.wantsLines === false);\n        this.m_wantsAreas = wantsAll || !(options.wantsAreas === false);\n        this.m_wantsObject3D = wantsAll || !(options.wantsObject3D === false);\n    }\n\n    /**\n     * Calls the visitor on all objects in the tile.\n     */\n    visitAll(): void {\n        const objects = this.tile.objects;\n\n        for (const object of objects) {\n            this.visitObject(object);\n        }\n    }\n\n    /**\n     * Visits a single object. This function should normally be called during visiting.\n     *\n     * @param object The object to visit.\n     */\n    protected visitObject(object: THREE.Object3D): void {\n        const featureData: TileFeatureData | undefined =\n            object.userData !== undefined\n                ? (object.userData.feature as TileFeatureData)\n                : undefined;\n\n        // early opt out if there is no feature data, or if the feature data has only a single id\n        // and the visitor wants to ignore that featureId\n        if (\n            featureData === undefined ||\n            (featureData.objInfos !== undefined &&\n                featureData.objInfos.length === 1 &&\n                !this.visitor.wantsFeature(getFeatureId(featureData.objInfos[0])))\n        ) {\n            return;\n        }\n\n        const geometryType = featureData.geometryType;\n        if (geometryType === undefined) {\n            logger.warn(\"#visitObject: visiting object failed, no geometryType\", object);\n            return;\n        }\n\n        assert(featureData.objInfos !== undefined, \"featureData.ids missing\");\n        assert(featureData.starts !== undefined, \"featureData.starts missing\");\n        assert(Array.isArray(featureData.starts), \"featureData.starts is not an array\");\n        if (featureData.objInfos !== undefined && featureData.starts !== undefined) {\n            assert(\n                featureData.objInfos.length === featureData.starts.length,\n                \"featureData.ids and featureData.starts have unequal length\"\n            );\n        }\n\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                if (!this.m_wantsPoints) {\n                    return;\n                }\n                break;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                if (!this.m_wantsLines) {\n                    return;\n                }\n                break;\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                if (!this.m_wantsAreas) {\n                    return;\n                }\n                break;\n            case GeometryType.Object3D:\n                if (!this.m_wantsObject3D) {\n                    return;\n                }\n                break;\n            default:\n                logger.warn(\"#visitObject: invalid geometryType\");\n        }\n\n        if (object.type !== \"Mesh\") {\n            logger.warn(\"#visitObject: visiting object failed, not of type 'Mesh'\", object);\n            return;\n        }\n\n        const mesh = object as THREE.Mesh;\n\n        this.visitMesh(mesh, featureData);\n    }\n\n    /**\n     * Gets the `BufferGeometry` from the specified object. This function requires the\n     * attribute `position` in `BufferGeometry` to be set.\n     *\n     * @param object The object from which to get the geometry.\n     * @returns the geometry of the object, or `undefined`.\n     */\n    protected getBufferGeometry(object: THREE.Mesh): THREE.BufferGeometry | undefined {\n        const geometry = object.geometry;\n\n        if (geometry.type !== \"BufferGeometry\") {\n            logger.warn(\"#visitObject: object does not have BufferGeometry\");\n            return undefined;\n        }\n\n        const bufferGeometry = geometry as THREE.BufferGeometry;\n\n        // we know its a BufferAttribute because it is a BufferGeometry\n        const position: THREE.BufferAttribute = bufferGeometry.getAttribute(\n            \"position\"\n        ) as THREE.BufferAttribute;\n\n        if (!position) {\n            logger.warn(\"#visitLines: BufferGeometry has no position attribute\");\n            return undefined;\n        }\n\n        return bufferGeometry;\n    }\n\n    /**\n     * Obtains an accessor for the nonindexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new BufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                return new BufferedGeometryObject3dAccessor(object, geometryType, bufferGeometry);\n            default:\n                logger.warn(\"#getGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Obtains an accessor for the indexed geometry. This function may return `undefined`\n     * if the accessor is not implemented.\n     *\n     * @param geometryType The type of geometry.\n     * @param object The object for which to access the attributes and geometry.\n     * @param bufferGeometry The object's `BufferGeometry`.\n     * @returns an accessor for a specified object, if available.\n     */\n    protected getIndexedGeometryAccessor(\n        geometryType: GeometryType,\n        object: THREE.Mesh,\n        bufferGeometry: THREE.BufferGeometry\n    ): IGeometryAccessor | undefined {\n        switch (geometryType) {\n            case GeometryType.Point:\n            case GeometryType.Text:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.SolidLine:\n            case GeometryType.ExtrudedLine:\n            case GeometryType.TextPath:\n                return new IndexedBufferedGeometryLineAccessor(\n                    object,\n                    geometryType,\n                    bufferGeometry\n                );\n            case GeometryType.Polygon:\n            case GeometryType.ExtrudedPolygon:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            case GeometryType.Object3D:\n                // return new RoBufferedGeometryLineAccessor(object, geometryType, bufferGeometry);\n                return undefined;\n            default:\n                logger.warn(\"#getIndexedGeometryAccessor: invalid geometryType\");\n        }\n        return undefined;\n    }\n\n    /**\n     * Visit the object.\n     *\n     * @param meshObject Object of type `Mesh`.\n     * @param featureData Dataset stored along with the object.\n     */\n    protected visitMesh(meshObject: THREE.Mesh, featureData: TileFeatureData): void {\n        const { objInfos, starts } = featureData;\n        const geometryType = featureData.geometryType;\n\n        // make linter happy: we already know that these both are valid\n        if (objInfos === undefined || starts === undefined || geometryType === undefined) {\n            return;\n        }\n\n        let geometryAccessor: IGeometryAccessor | undefined;\n\n        for (let featureIndex = 0; featureIndex < objInfos.length; featureIndex++) {\n            const featureId = getFeatureId(objInfos[featureIndex]);\n\n            if (!this.visitor.wantsFeature(featureId)) {\n                continue;\n            }\n\n            const featureStart = starts[featureIndex];\n            let featureEnd: number = -1;\n\n            // lazy creation of accessor, in case featureId was not wanted...\n            if (geometryAccessor === undefined) {\n                const bufferGeometry = this.getBufferGeometry(meshObject);\n                if (bufferGeometry === undefined) {\n                    continue;\n                }\n\n                if (bufferGeometry.index !== null) {\n                    geometryAccessor = this.getIndexedGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                } else {\n                    geometryAccessor = this.getGeometryAccessor(\n                        geometryType,\n                        meshObject,\n                        bufferGeometry\n                    );\n                }\n\n                if (geometryAccessor === undefined) {\n                    logger.warn(\"#visitObject: no accessor geometryType\", geometryType);\n                    continue;\n                }\n            }\n\n            featureEnd =\n                featureIndex < starts.length - 1\n                    ? starts[featureIndex + 1]\n                    : geometryAccessor.getCount();\n\n            // setup/update the accessor for the new range of the object\n            geometryAccessor.setRange(featureStart, featureEnd);\n\n            switch (geometryType) {\n                case GeometryType.Point:\n                case GeometryType.Text:\n                    this.visitor.visitPoint(featureId);\n                    break;\n                case GeometryType.SolidLine:\n                case GeometryType.ExtrudedLine:\n                case GeometryType.TextPath:\n                    assert(isLineAccessor(geometryAccessor));\n                    this.visitor.visitLine(featureId, (geometryAccessor as any) as ILineAccessor);\n                    break;\n                case GeometryType.Polygon:\n                case GeometryType.ExtrudedPolygon:\n                    this.visitor.visitArea(featureId);\n                    break;\n                case GeometryType.Object3D:\n                    assert(isObject3dAccessor(geometryAccessor));\n                    this.visitor.visitObject3D(\n                        featureId,\n                        (geometryAccessor as any) as IObject3dAccessor\n                    );\n                    break;\n                default:\n                    logger.warn(\"#visitObject: invalid geometryType\");\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/Lines\";\nexport * from \"./lib/TriangulateLines\";\nexport * from \"./lib/HighPrecisionLines\";\nexport * from \"./lib/HighPrecisionUtils\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport { Projection } from \"@here/harp-geoutils\";\nimport { assert } from \"@here/harp-utils\";\nimport * as THREE from \"three\";\n\n// Preallocate temp variables used during line generation.\nconst tmpV = new THREE.Vector3();\nconst tmpNormal = new THREE.Vector3();\nconst tmpTangent0 = new THREE.Vector3();\nconst tmpTangent1 = new THREE.Vector3();\nconst tmpBitangent = new THREE.Vector3();\nconst SEGMENT_OFFSET = 0.1;\n\n/**\n * Describes vertex attribute parameters of interleaved buffer.\n */\ninterface VertexAttributeDescriptor {\n    name: string;\n    itemSize: number;\n    offset: number;\n}\n\ninterface VertexDescriptor {\n    attributes: VertexAttributeDescriptor[];\n    stride: number;\n}\n\n/**\n * Declares all the vertex attributes used for rendering a line using the [[SolidLineMaterial]].\n */\n\n/** Base line vertex attributes. */\nconst LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        // The \"extrusionCoord\" is a vec4 which represents:\n        // xy: Extrusion coordinates\n        // sign(xy): Extrusion direction\n        // z: Line length\n        { name: \"extrusionCoord\", itemSize: 3, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 3 },\n        { name: \"tangent\", itemSize: 3, offset: 6 },\n        { name: \"bitangent\", itemSize: 4, offset: 9 }\n    ],\n    stride: 13\n};\n\n/** Optional normal and uv coordinates. */\nconst NORMAL_UV_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"uv\", itemSize: 2, offset: LINE_VERTEX_ATTRIBUTES.stride },\n        { name: \"normal\", itemSize: 3, offset: LINE_VERTEX_ATTRIBUTES.stride + 2 }\n    ],\n    stride: 5\n};\n\n/** Base line vertex attributes plus normals and uv coordinates. */\nconst LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [...LINE_VERTEX_ATTRIBUTES.attributes, ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes],\n    stride: LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Declares all the vertex attributes used for rendering a line using the\n * [[HighPrecisionLineMaterial]].\n */\nconst HP_LINE_VERTEX_ATTRIBUTES: VertexDescriptor = {\n    attributes: [\n        { name: \"extrusionCoord\", itemSize: 2, offset: 0 },\n        { name: \"position\", itemSize: 3, offset: 2 },\n        { name: \"positionLow\", itemSize: 3, offset: 5 },\n        { name: \"tangent\", itemSize: 3, offset: 8 },\n        { name: \"bitangent\", itemSize: 4, offset: 11 }\n    ],\n    stride: 15\n};\n\n/** High precision line vertex attributes plus normals and uv coordinates. */\nconst HP_LINE_VERTEX_ATTRIBUTES_NUV: VertexDescriptor = {\n    attributes: [\n        ...HP_LINE_VERTEX_ATTRIBUTES.attributes,\n        ...NORMAL_UV_VERTEX_ATTRIBUTES.attributes\n    ],\n    stride: HP_LINE_VERTEX_ATTRIBUTES.stride + NORMAL_UV_VERTEX_ATTRIBUTES.stride\n};\n\n/**\n * Class that holds the vertex and index attributes for a [[Lines]] object.\n */\nexport class LineGeometry {\n    vertices: number[] = [];\n    vertexColors: number[] = [];\n    indices: number[] = [];\n}\n\nfunction getVertexDescriptor(hasNormalsAndUvs: boolean, highPrecision: boolean): VertexDescriptor {\n    if (highPrecision) {\n        return hasNormalsAndUvs ? HP_LINE_VERTEX_ATTRIBUTES_NUV : HP_LINE_VERTEX_ATTRIBUTES;\n    } else {\n        return hasNormalsAndUvs ? LINE_VERTEX_ATTRIBUTES_NUV : LINE_VERTEX_ATTRIBUTES;\n    }\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param center Center of the polyline.\n * @param polyline Array of `numbers` describing a polyline.\n * @param offsets Array of `numbers` representing line segment offsets.\n * @param uvs Array of `numbers` representing texture coordinates.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n * @param highPrecision If `true` will create high-precision vertex information.\n */\nexport function createLineGeometry(\n    center: THREE.Vector3,\n    polyline: ArrayLike<number>,\n    projection: Projection,\n    offsets?: ArrayLike<number>,\n    uvs?: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry(),\n    highPrecision: boolean = false\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const stride = getVertexDescriptor(uvs !== undefined, highPrecision).stride;\n\n    const pointCount = polyline.length / 3;\n    const segments = new Array<number>(pointCount);\n    const tangents = new Array<number>(polyline.length - 3);\n    const baseVertex = geometry.vertices.length / stride;\n\n    const hasSegmentOffsets = offsets !== undefined && offsets.length > 0;\n    const hasTexCoords = uvs !== undefined && uvs.length > 0;\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    assert(!hasSegmentOffsets || offsets!.length === pointCount);\n    assert(!hasTexCoords || uvs!.length / 2 === pointCount);\n    assert(!vertexColors || colors!.length === polyline.length);\n\n    // Compute segments and tangents.\n    let sum = SEGMENT_OFFSET;\n    segments[0] = sum;\n    for (let i = 0; i < pointCount - 1; ++i) {\n        let sqrLength = 0;\n        for (let j = 0; j < 3; ++j) {\n            const d = polyline[(i + 1) * 3 + j] - polyline[i * 3 + j];\n            tangents[i * 3 + j] = d;\n            sqrLength += d * d;\n        }\n        const len = Math.sqrt(sqrLength);\n        sum = sum + len;\n        segments[i + 1] = sum;\n    }\n\n    const lineCoverage = hasSegmentOffsets\n        ? Math.abs(offsets![offsets!.length - 1] - offsets![0])\n        : 1.0;\n    const lineLength = segments[segments.length - 1] / lineCoverage;\n\n    // Override the segments if offsets are explicitly provided.\n    if (hasSegmentOffsets) {\n        for (let i = 0; i < pointCount; ++i) {\n            segments[i] = offsets![i] * lineLength + SEGMENT_OFFSET;\n        }\n    }\n\n    // Check if we're working with a closed line.\n    let isClosed = true;\n    for (let j = 0; j < 3; ++j) {\n        isClosed = isClosed && polyline[j] === polyline[polyline.length - 3 + j];\n    }\n\n    const tmpVertices: number[] = [];\n\n    const addVertexPair = (\n        i: number,\n        T1: number,\n        T2: number,\n        segment: number,\n        extrusionCoord: number\n    ) => {\n        tmpVertices.length = 0;\n\n        // Store the segment and extrusionCoord attributes.\n        geometry.vertices.push(segment, extrusionCoord * -1, lineLength);\n        tmpVertices.push(segment, extrusionCoord * 1, lineLength);\n\n        // Store the position attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            if (!highPrecision) {\n                geometry.vertices.push(polyline[i * 3 + j]);\n                tmpVertices.push(polyline[i * 3 + j]);\n            } else {\n                const highComp = Math.fround(polyline[i * 3 + j]);\n                const lowComp = polyline[i * 3 + j] - highComp;\n                geometry.vertices.push(highComp, lowComp);\n                tmpVertices.push(highComp, lowComp);\n            }\n            tmpNormal.setComponent(j, polyline[i * 3 + j]);\n        }\n\n        // Store the bitangent attribute (component-dependant).\n        for (let j = 0; j < 3; ++j) {\n            tmpTangent0.setComponent(j, tangents[T1 + j]);\n            tmpTangent1.setComponent(j, tangents[T2 + j]);\n        }\n        tmpTangent0.normalize();\n        geometry.vertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpVertices.push(tmpTangent0.x, tmpTangent0.y, tmpTangent0.z);\n        tmpNormal.add(center); // tmpNormal contains world position\n        projection.surfaceNormal(tmpNormal, tmpNormal);\n        const angle = computeBitangent(\n            tmpNormal,\n            tmpTangent0,\n            tmpTangent1.normalize(),\n            tmpBitangent\n        );\n        geometry.vertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n        tmpVertices.push(tmpBitangent.x, tmpBitangent.y, tmpBitangent.z, angle);\n\n        if (hasTexCoords) {\n            // uvs\n            geometry.vertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            tmpVertices.push(uvs![i * 2], uvs![i * 2 + 1]);\n            // normals\n            geometry.vertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n            tmpVertices.push(tmpNormal.x, tmpNormal.y, tmpNormal.z);\n        }\n\n        geometry.vertices.push(...tmpVertices);\n\n        // Add vertex colors (if supplied).\n        if (vertexColors) {\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n            geometry.vertexColors.push(colors![i * 3], colors![i * 3 + 1], colors![i * 3 + 2]);\n        }\n    };\n\n    for (let i = 0; i < pointCount; ++i) {\n        // Retrieve the per-point tangents.\n        const T1 = isClosed && i === 0 ? tangents.length - 3 : Math.max(0, i - 1) * 3;\n        const T2 = isClosed && i === pointCount - 1 ? 0 : Math.min(i * 3, tangents.length - 3);\n\n        // Process v0 and v1.\n        if (i > 0) {\n            addVertexPair(i, T1, T2, segments[i - 1], segments[i]);\n        }\n\n        // Process v2 and v3.\n        if (i + 1 < pointCount) {\n            addVertexPair(\n                i,\n                T1,\n                T2,\n                segments[Math.min(i, segments.length - 1)] * -1,\n                segments[Math.min(i + 1, segments.length - 1)]\n            );\n        }\n    }\n\n    // Store the triangle indices in the final index buffer.\n    for (let i = 0; i < pointCount - 1; ++i) {\n        const base = baseVertex + i * 4;\n        geometry.indices.push(base, base + 1, base + 2, base + 2, base + 1, base + 3);\n    }\n\n    return geometry;\n}\n\n/**\n * Creates a [[LineGeometry]] object out of a polyline.\n *\n * @param polyline Array of `numbers` describing a polyline.\n * @param colors Array of `numbers` describing a polyline's colors.\n * @param geometry [[LineGeometry]] object used to store the vertex and index attributes.\n */\nexport function createSimpleLineGeometry(\n    polyline: ArrayLike<number>,\n    colors?: ArrayLike<number>,\n    geometry = new LineGeometry()\n): LineGeometry {\n    if (polyline.length === 0) {\n        return geometry;\n    }\n\n    const pointCount = polyline.length / 3;\n    let index = geometry.vertices.length / 3;\n\n    const vertexColors = colors !== undefined && colors.length && polyline.length;\n\n    for (let i = 0; i < pointCount; ++i, index++) {\n        if (i > 0) {\n            geometry.indices.push(index);\n        }\n        if (i < pointCount - 1) {\n            geometry.indices.push(index);\n        }\n        for (let j = 0; j < 3; ++j) {\n            geometry.vertices.push(polyline[i * 3 + j]);\n            if (vertexColors) {\n                geometry.vertexColors.push(colors![i * 3 + j]);\n            }\n        }\n    }\n\n    return geometry;\n}\n\n/**\n * Class used to render groups (or batches) of width-variable lines (in the same tile).\n */\nexport class LineGroup {\n    /**\n     * Adds all the attribute data needed to a [[BufferGeometry]] object for rendering `Lines`.\n     *\n     * @param vertices Array of vertex attributes.\n     * @param colors Array of vertex colors.\n     * @param indices Array of vertex indices.\n     * @param geometry [[BufferGeometry]] object which will store all the `Lines` attribute data.\n     * @param hasNormalsAnUvs Whether vertices have normal and uv coordinates as attributes.\n     * @param highPrecision If `true` will create high-precision vertex information.\n     * @param isSimple `true` to create simple (nonsolid, nonextruded) lines. Defaults to `false`.\n     */\n    static createGeometry(\n        vertices: ArrayLike<number>,\n        colors: ArrayLike<number>,\n        indices: ArrayLike<number>,\n        geometry: THREE.BufferGeometry,\n        hasNormalsAndUvs: boolean = false,\n        highPrecision = false,\n        isSimple = false\n    ): THREE.BufferGeometry {\n        if (isSimple) {\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(new Float32Array(vertices), 3)\n            );\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n            return geometry;\n        } else {\n            const vertexDescriptor = getVertexDescriptor(hasNormalsAndUvs, highPrecision);\n\n            const buffer = new THREE.InterleavedBuffer(\n                new Float32Array(vertices),\n                vertexDescriptor.stride\n            );\n            vertexDescriptor.attributes.forEach(descr => {\n                const attribute = new THREE.InterleavedBufferAttribute(\n                    buffer,\n                    descr.itemSize,\n                    descr.offset,\n                    false\n                );\n                geometry.setAttribute(descr.name, attribute);\n            });\n            if (colors.length === vertices.length) {\n                geometry.setAttribute(\n                    \"color\",\n                    new THREE.BufferAttribute(new Float32Array(colors), 3)\n                );\n            }\n\n            geometry.setIndex(new THREE.BufferAttribute(new Uint32Array(indices), 1));\n\n            return geometry;\n        }\n    }\n\n    private readonly m_geometry: LineGeometry;\n\n    constructor(\n        readonly hasNormalsAndUvs: boolean = false,\n        readonly highPrecision: boolean = false,\n        readonly isSimple: boolean = false\n    ) {\n        this.m_geometry = new LineGeometry();\n    }\n\n    /**\n     * Clears the list of line strips.\n     */\n    clear() {\n        this.m_geometry.vertices = [];\n        this.m_geometry.vertexColors = [];\n        this.m_geometry.indices = [];\n    }\n\n    /**\n     * Add the given points to this line group.\n     *\n     * @param center World center of the provided points.\n     * @param points Sequence of (x,y,z) coordinates.\n     * @param offsets Sequence of line segment offsets.\n     * @param uvs Sequence of (u,v) texture coordinates.\n     * @param colors Sequence of (r,g,b) color components.\n     */\n    add(\n        center: THREE.Vector3,\n        points: ArrayLike<number>,\n        projection: Projection,\n        offsets?: ArrayLike<number>,\n        uvs?: ArrayLike<number>,\n        colors?: ArrayLike<number>\n    ): this {\n        if (!this.isSimple) {\n            assert(!this.hasNormalsAndUvs || uvs !== undefined);\n            createLineGeometry(\n                center,\n                points,\n                projection,\n                offsets,\n                uvs,\n                colors,\n                this.m_geometry,\n                this.highPrecision\n            );\n        } else {\n            createSimpleLineGeometry(points, colors, this.m_geometry);\n        }\n        return this;\n    }\n\n    /**\n     * Returns the list of vertices.\n     */\n    get vertices(): number[] {\n        return this.m_geometry.vertices;\n    }\n\n    /**\n     * Returns the list of vertex colors.\n     */\n    get vertexColors(): number[] {\n        return this.m_geometry.vertexColors;\n    }\n\n    /**\n     * Returns the list of indices.\n     */\n    get indices(): number[] {\n        return this.m_geometry.indices;\n    }\n\n    /**\n     * Returns the list of [[VertexAttributeDescriptor]]s.\n     */\n    get vertexAttributes(): VertexAttributeDescriptor[] {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).attributes;\n    }\n\n    /**\n     * Returns the vertex attribute stride.\n     */\n    get stride(): number {\n        return getVertexDescriptor(this.hasNormalsAndUvs, this.highPrecision).stride;\n    }\n\n    /**\n     * Creates a three.js geometry.\n     */\n    createGeometry(geometry?: THREE.BufferGeometry): THREE.BufferGeometry {\n        if (geometry === undefined) {\n            geometry = new THREE.BufferGeometry();\n        }\n        return LineGroup.createGeometry(\n            this.m_geometry.vertices,\n            this.m_geometry.vertexColors,\n            this.m_geometry.indices,\n            geometry,\n            this.hasNormalsAndUvs,\n            this.highPrecision\n        );\n    }\n}\n\nfunction computeBitangent(\n    n: THREE.Vector3,\n    t0: THREE.Vector3,\n    t1: THREE.Vector3,\n    bt: THREE.Vector3\n): number {\n    let angle = 0;\n    if (!t0.equals(t1)) {\n        angle = Math.acos(t0.dot(t1)) * Math.sign(n.dot(tmpV.copy(t0).cross(t1)));\n        if (Number.isNaN(angle)) {\n            angle = 0;\n        }\n    }\n    bt.copy(t0)\n        .add(t1)\n        .normalize()\n        .cross(n)\n        .normalize();\n    return angle;\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport * as THREE from \"three\";\n\nimport { HighPrecisionPointMaterial } from \"@here/harp-materials\";\n\nimport { HighPrecisionObject } from \"./HighPrecisionLines\";\nimport { HighPrecisionUtils } from \"./HighPrecisionUtils\";\n\n/**\n * Class used to render high-precision points.\n */\nexport class HighPrecisionPoints extends THREE.Points implements HighPrecisionObject {\n    matrixWorldInverse: THREE.Matrix4;\n\n    /**\n     * Number of dimensions this `HighPrecisionObject` is specified in (2D/3D).\n     */\n    dimensionality?: number;\n\n    /**\n     * Creates a `HighPrecisionPoints` object.\n     *\n     * @param geometry [[BufferGeometry]] used to render this object.\n     * @param material [[HighPrecisionLineMaterial]] used to render this object.\n     *     instances.\n     * @param positions Array of 2D/3D positions.\n     * @param color Color of the rendered point.\n     * @param opacity Opacity of the rendered point.\n     */\n    constructor(\n        geometry?: THREE.BufferGeometry,\n        material?: HighPrecisionPointMaterial,\n        positions?: number[] | THREE.Vector3[],\n        color?: THREE.Color,\n        opacity?: number\n    ) {\n        if (material === undefined) {\n            material = new HighPrecisionPointMaterial({\n                color: color ? color : HighPrecisionPointMaterial.DEFAULT_COLOR,\n                opacity: opacity !== undefined ? opacity : 1\n            });\n        }\n\n        super(geometry === undefined ? new THREE.BufferGeometry() : geometry, material);\n\n        this.matrixWorldInverse = new THREE.Matrix4();\n\n        if (positions) {\n            this.setPositions(positions);\n        }\n    }\n\n    get bufferGeometry(): THREE.BufferGeometry {\n        return this.geometry as THREE.BufferGeometry;\n    }\n\n    /**\n     * Clears the [[BufferGeometry]] used to render this point.\n     */\n    clearGeometry(): THREE.BufferGeometry {\n        return (this.geometry = new THREE.BufferGeometry());\n    }\n\n    get shaderMaterial(): THREE.ShaderMaterial {\n        return this.material as THREE.ShaderMaterial;\n    }\n\n    setPositions(positions: number[] | THREE.Vector3[]): void {\n        HighPrecisionUtils.setPositions(this, positions);\n    }\n\n    setupForRendering(): void {\n        if (\n            (this.material as any).isHighPrecisionPointsMaterial &&\n            this.dimensionality !== undefined\n        ) {\n            (this.material as any).setDimensionality(this.dimensionality);\n        }\n        this.onBeforeRender = (\n            _renderer: THREE.WebGLRenderer,\n            _scene: THREE.Scene,\n            camera: THREE.Camera,\n            _geometry: THREE.Geometry | THREE.BufferGeometry,\n            _material: THREE.Material,\n            _group: THREE.Group\n        ) => {\n            HighPrecisionUtils.updateHpUniforms(this, camera, this.shaderMaterial);\n        };\n    }\n\n    updateMatrixWorld(force: boolean) {\n        const doUpdateMatrixWorldInverse = this.matrixWorldNeedsUpdate || force;\n\n        super.updateMatrixWorld(force);\n\n        if (doUpdateMatrixWorldInverse) {\n            this.matrixWorldInverse.getInverse(this.matrixWorld);\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/OmvDataFilter\";\nexport * from \"./lib/OmvDataSource\";\nexport * from \"./lib/OmvDecoderDefs\";\nexport * from \"./lib/OmvTile\";\nexport * from \"./lib/OmvDebugLabelsTile\";\nexport * from \"./lib/OmvRestClient\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { GeometryKind, GeometryKindSet } from \"@here/harp-datasource-protocol\";\nimport { MapEnv } from \"@here/harp-datasource-protocol/index-decoder\";\nimport {\n    OmvFeatureFilterDescription,\n    OmvFilterDescription,\n    OmvFilterFeatureAttribute,\n    OmvFilterString,\n    OmvGeometryType,\n    OmvLayerFilterDescription\n} from \"./OmvDecoderDefs\";\n\n/**\n * The `OmvFeatureFilter` is designed to work in an `OmvVisitor`/`visitOmv` combination (for\n * example, `OmvDecoder`). Returning `false` from any of the calls terminates processing of that\n * layer or feature.\n *\n * The `OmvFeatureFilter` is an \"early-opt-out\" filter, which cannot filter individual features,\n * because at that point the features are not really decoded. Use the [[OmvFeatureModifier]] to\n * filter for individual features.\n */\nexport interface OmvFeatureFilter {\n    /**\n     * Returns `true` if the filter contains rules for specific kinds.\n     */\n    hasKindFilter: boolean;\n\n    /**\n     * Return `false` if the layer should not be processed.\n     *\n     * @param layer Current layer.\n     * @param level Level of tile.\n     */\n    wantsLayer(layer: string, level: number): boolean;\n\n    /**\n     * Return `false` if the point feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the line feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if the polygon feature should not be processed.\n     *\n     * @param layer Current layer.\n     * @param feature Current feature.\n     * @param level Level of tile.\n     */\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean;\n\n    /**\n     * Return `false` if kind of object is not enabled and the geometry should not be created.\n     *\n     * @param {(string | string[])} kind Tag \"kind\" of the tag.\n     * @returns {boolean}\n     */\n    wantsKind(kind: string | string[]): boolean;\n}\n\n/**\n * The `OmvFeatureModifier` can be used to filter individual features. It gets passed in the [[Env]]\n * of the feature, which contains all the values that can be searched for in a style. If a filter\n * function returns false, the feature is ignored, and no geometry is being created.\n *\n * In addition to pure filtering, the `OmvFeatureModifier` can also modify the [[Env]] of the\n * feature, or even add new properties to the feature, for example, traffic states. The\n * `OmvFeatureModifier` is executed before the styles are selected, so the geometry is created with\n * the modified feature properties.\n */\nexport interface OmvFeatureModifier {\n    /**\n     * Check if the point feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of point feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPointFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the line feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of line feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessLineFeature(layer: string, env: MapEnv, level: number): boolean;\n\n    /**\n     * Check if the polygon feature described by `env` should be processed. The properties can be\n     * modified or added to.\n     *\n     * @param layer Current layer.\n     * @param env Properties of polygon feature.\n     * @param level Level of tile.\n     * @returns `false` to ignore feature.\n     */\n    doProcessPolygonFeature(layer: string, env: MapEnv, level: number): boolean;\n}\n\n/**\n * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as well\n * as an [[OmvFeatureModifier]].\n *\n */\nexport class OmvFeatureFilterDescriptionBuilder {\n    private m_processLayersDefault: boolean = true;\n    private m_processPointsDefault: boolean = true;\n    private m_processLinesDefault: boolean = true;\n    private m_processPolygonsDefault: boolean = true;\n\n    private readonly m_layersToProcess = new Array<OmvLayerFilterDescription>();\n    private readonly m_layersToIgnore = new Array<OmvLayerFilterDescription>();\n    private readonly m_pointsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_ignoredPoints = new Array<OmvFilterDescription>();\n    private readonly m_linesToProcess = new Array<OmvFilterDescription>();\n    private readonly m_linesToIgnore = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToProcess = new Array<OmvFilterDescription>();\n    private readonly m_polygonsToIgnore = new Array<OmvFilterDescription>();\n\n    private m_kindsToProcess: string[] = [];\n    private m_kindsToIgnore: string[] = [];\n\n    /**\n     * Builds an `OmvFilterDescription` (internal type) that specifies an [[OmvFeatureFilter]] as\n     * well as an [[OmvFeatureModifier]].\n     *\n     * @param processLayersDefault If `true`, all unspecified layers will be processed. If `false`,\n     * all unspecified layers will be ignored.\n     * @param processPointsDefault If `true`, all unspecified point features will be processed. If\n     * `false`, all unspecified point features will be ignored.\n     * @param processLinesDefault If `true`, all unspecified line features will be processed. If\n     * `false`, all unspecified line features will be ignored.\n     * @param processPolygonsDefault If `true`, all unspecified polygon features will be processed.\n     * If `false`, all unspecified polygon features will be ignored.\n     */\n    constructor(\n        options?: OmvFeatureFilterDescriptionBuilder.OmvFeatureFilterDescriptionBuilderOptions\n    ) {\n        if (options) {\n            this.m_processLayersDefault =\n                options.processLayersDefault !== undefined ? options.processLayersDefault : true;\n            this.m_processPointsDefault =\n                options.processPointsDefault !== undefined ? options.processPointsDefault : true;\n            this.m_processLinesDefault =\n                options.processLinesDefault !== undefined ? options.processLinesDefault : true;\n            this.m_processPolygonsDefault =\n                options.processPolygonsDefault !== undefined\n                    ? options.processPolygonsDefault\n                    : true;\n        }\n    }\n\n    /**\n     * Add a layer that should be processed.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    processLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToProcess.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a layer that should be ignored.\n     *\n     * @param layer Layer name to be matched.\n     * @param match Match condition.\n     */\n    ignoreLayer(\n        layer: string,\n        match = OmvFilterString.StringMatch.Match,\n        minLevel: number = 0,\n        maxLevel: number = Infinity\n    ) {\n        this.m_layersToIgnore.push({\n            name: { value: layer, match },\n            minLevel,\n            maxLevel\n        });\n    }\n\n    /**\n     * Add a valid point feature.\n     *\n     * @param options Feature options.\n     */\n    processPoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add valid point features.\n     *\n     * @param options Multi feature options.\n     */\n    processPoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_pointsToProcess, options);\n    }\n\n    /**\n     * Add a point feature that should be ignored.\n     *\n     * @param options Feature options.\n     */\n    ignorePoint(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add point features that should be ignored.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePoints(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_ignoredPoints, options);\n    }\n\n    /**\n     * Add a valid line feature.\n     *\n     * @param options Feature options.\n     */\n    processLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Add valid line features.\n     *\n     * @param options Multi feature options.\n     */\n    processLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToProcess, options);\n    }\n\n    /**\n     * Ignore a line feature.\n     *\n     * @param options Feature options.\n     */\n    ignoreLine(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Ignore line features.\n     *\n     * @param options Multi feature options.\n     */\n    ignoreLines(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_linesToIgnore, options);\n    }\n\n    /**\n     * Add a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    processPolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Add valid polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    processPolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToProcess, options);\n    }\n\n    /**\n     * Ignore a valid polygon feature.\n     *\n     * @param options Feature options.\n     */\n    ignorePolygon(options: OmvFeatureFilterDescriptionBuilder.FeatureOption) {\n        this.addItem(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Ignore polygon features.\n     *\n     * @param options Multi feature options.\n     */\n    ignorePolygons(options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption) {\n        this.addItems(this.m_polygonsToIgnore, options);\n    }\n\n    /**\n     * Add all the specified strings as \"enabledKinds\".\n     *\n     * @param {string[]} enabledKinds List of kinds that should be generated.\n     */\n    processKinds(enabledKinds: string[]) {\n        this.m_kindsToProcess = this.m_kindsToProcess.concat(enabledKinds);\n    }\n\n    /**\n     * Add all the specified strings as \"disabledKinds\".\n     *\n     * @param {string[]} disabledKinds List of kinds that should _not_ be generated.\n     */\n    ignoreKinds(disabledKinds: string[]) {\n        this.m_kindsToIgnore = this.m_kindsToIgnore.concat(disabledKinds);\n    }\n\n    /**\n     * Create a filter description that can be passed as an option to the [[OmvDataSource]].\n     */\n    createDescription(): OmvFeatureFilterDescription {\n        return {\n            processLayersDefault: this.m_processLayersDefault,\n            processPointsDefault: this.m_processPointsDefault,\n            processLinesDefault: this.m_processLinesDefault,\n            processPolygonsDefault: this.m_processPolygonsDefault,\n\n            layersToProcess: this.m_layersToProcess,\n            layersToIgnore: this.m_layersToIgnore,\n            pointsToProcess: this.m_pointsToProcess,\n            pointsToIgnore: this.m_ignoredPoints,\n            linesToProcess: this.m_linesToProcess,\n            linesToIgnore: this.m_linesToIgnore,\n            polygonsToProcess: this.m_polygonsToProcess,\n            polygonsToIgnore: this.m_polygonsToIgnore,\n\n            kindsToProcess: this.m_kindsToProcess,\n            kindsToIgnore: this.m_kindsToIgnore\n        };\n    }\n\n    private addItem(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.FeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomType !== undefined\n                    ? Array.isArray(options.geomType)\n                        ? options.geomType\n                        : [options.geomType]\n                    : undefined,\n            classes: [\n                {\n                    value: options.featureClass,\n                    match:\n                        options.matchClass === undefined\n                            ? OmvFilterString.StringMatch.Match\n                            : options.matchClass\n                }\n            ],\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n\n    private addItems(\n        items: OmvFilterDescription[],\n        options: OmvFeatureFilterDescriptionBuilder.MultiFeatureOption\n    ) {\n        if (options.minLevel === undefined || isNaN(options.minLevel)) {\n            options.minLevel = 0;\n        }\n        if (options.maxLevel === undefined || isNaN(options.maxLevel)) {\n            options.maxLevel = Infinity;\n        }\n\n        const item: OmvFilterDescription = {\n            layerName: {\n                value: options.layer,\n                match:\n                    options.matchLayer === undefined\n                        ? OmvFilterString.StringMatch.Match\n                        : options.matchLayer\n            },\n            geometryTypes:\n                options.geomTypes !== undefined\n                    ? Array.isArray(options.geomTypes)\n                        ? options.geomTypes\n                        : [options.geomTypes]\n                    : undefined,\n            classes: options.featureClasses,\n            minLevel: options.minLevel,\n            maxLevel: options.maxLevel,\n            featureAttribute: options.featureAttribute\n        };\n\n        items.push(item);\n    }\n}\n\nexport namespace OmvFeatureFilterDescriptionBuilder {\n    /**\n     * Options for `OmvFeatureFilterDescriptionBuilder`.\n     */\n    export interface OmvFeatureFilterDescriptionBuilderOptions {\n        /**\n         * If `true`, all unspecified layers will be processed. If `false`, all unspecified layers\n         * will be ignored.\n         */\n        processLayersDefault?: boolean;\n        /**\n         * If `true`, all unspecified point features will be processed. If `false`, all unspecified\n         * point features will be ignored.\n         */\n        processPointsDefault?: boolean;\n        /**\n         * If `true`, all unspecified line features will be processed. If `false`, all unspecified\n         * line\n         * features will be ignored.\n         */\n        processLinesDefault?: boolean;\n        /**\n         * If `true`, all unspecified polygon features will be processed. If `false`, all\n         * unspecified polygon features will be ignored.\n         */\n        processPolygonsDefault?: boolean;\n    }\n\n    /**\n     * Description of a single feature.\n     */\n    export interface FeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomType: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional class to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClass: string;\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Match condition for `featureClass`.\n         */\n        matchClass?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n\n    /**\n     * Description for multiple features.\n     */\n    export interface MultiFeatureOption {\n        /**\n         * Layer name to be matched.\n         */\n        layer: string;\n        /**\n         * Optional geometry type to be limited to. If specified, but does not match, the feature is\n         * ignored.\n         */\n        geomTypes?: OmvGeometryType | OmvGeometryType[] | undefined;\n        /**\n         * Optional classes to match. If specified, but does not match, the feature is ignored.\n         */\n        featureClasses?: OmvFilterString[];\n        /**\n         * Match condition for the layer name.\n         */\n        matchLayer?: OmvFilterString.StringMatch;\n        /**\n         * Minimum tile level to match.\n         */\n        minLevel?: number;\n        /**\n         * Maximum tile level to match.\n         */\n        maxLevel?: number;\n        /**\n         * Feature attribute to match.\n         */\n        featureAttribute?: OmvFilterFeatureAttribute;\n    }\n}\n\n/**\n * `OmvFeatureFilter` implementation that uses a `OmvFeatureFilterDescription` to filter `TileData`\n * features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureFilter implements OmvFeatureFilter {\n    private static matchLayer(\n        layer: string,\n        layerItems: OmvLayerFilterDescription[],\n        level: number\n    ): boolean {\n        for (const layerItem of layerItems) {\n            if (level < layerItem.minLevel || level > layerItem.maxLevel) {\n                continue;\n            }\n\n            if (OmvFilterString.matchString(layer, layerItem.name)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private disabledKinds: GeometryKindSet | undefined;\n    private enabledKinds: GeometryKindSet | undefined;\n\n    constructor(private description: OmvFeatureFilterDescription) {\n        if (this.description.kindsToProcess.length > 0) {\n            this.enabledKinds = new GeometryKindSet(\n                this.description.kindsToProcess as GeometryKind[]\n            );\n        }\n        if (this.description.kindsToIgnore.length > 0) {\n            this.disabledKinds = new GeometryKindSet(\n                this.description.kindsToIgnore as GeometryKind[]\n            );\n        }\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToProcess, level)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureFilter.matchLayer(layer, this.description.layersToIgnore, level)) {\n            return false;\n        }\n\n        return this.description.processLayersDefault;\n    }\n\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPointsDefault\n        );\n    }\n\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processLinesDefault\n        );\n    }\n\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.wantsFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            geometryType,\n            level,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    wantsKind(kind: string | string[]): boolean {\n        // undefined -> no way to filter\n        if (kind === undefined) {\n            return true;\n        }\n\n        return (\n            !(\n                this.disabledKinds !== undefined &&\n                this.disabledKinds.hasOrIntersects(kind as GeometryKind)\n            ) ||\n            (this.enabledKinds !== undefined &&\n                this.enabledKinds.hasOrIntersects(kind as GeometryKind))\n        );\n    }\n\n    get hasKindFilter(): boolean {\n        return this.enabledKinds !== undefined || this.disabledKinds !== undefined;\n    }\n\n    private wantsFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        geometryType: OmvGeometryType,\n        level: number,\n        defaultResult: boolean\n    ): boolean {\n        for (const item of itemsToProcess) {\n            if (level < item.minLevel || level > item.maxLevel) {\n                continue;\n            }\n\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return true;\n            }\n        }\n\n        for (const item of itemsToIgnore) {\n            if (!OmvFilterString.matchString(layer, item.layerName)) {\n                // this rule is not for this layer\n                continue;\n            }\n\n            if (item.geometryTypes !== undefined && item.geometryTypes.indexOf(geometryType) >= 0) {\n                return false;\n            }\n        }\n\n        return defaultResult;\n    }\n}\n\n/**\n * An [[OmvFeatureFilter]] implementation that delegates all filter decision\n * returning `true` for any predicate if all delegates return `true`.\n */\nexport class ComposedDataFilter implements OmvFeatureFilter {\n    constructor(readonly filters: OmvFeatureFilter[]) {}\n\n    get hasKindFilter() {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.hasKindFilter,\n            true\n        );\n    }\n\n    wantsLayer(layer: string, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLayer(layer, level),\n            true\n        );\n    }\n    wantsPointFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPointFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsLineFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsLineFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsPolygonFeature(layer: string, geometryType: OmvGeometryType, level: number): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsPolygonFeature(layer, geometryType, level),\n            true\n        );\n    }\n    wantsKind(kind: string | string[]): boolean {\n        return this.filters.reduce<boolean>(\n            (result, filter) => result && filter.wantsKind(kind),\n            true\n        );\n    }\n}\n/**\n * `OmvFeatureModifier` implementation that uses a `OmvFeatureFilterDescription` to filter\n * `TileData` features before they are completely decoded.\n *\n * @hidden\n */\nexport class OmvGenericFeatureModifier implements OmvFeatureModifier {\n    static matchItems(\n        layerName: string,\n        featureClass: string,\n        items: OmvFilterDescription[]\n    ): boolean {\n        for (const item of items) {\n            if (item.classes !== undefined) {\n                if (!OmvFilterString.matchString(layerName, item.layerName)) {\n                    continue;\n                }\n                for (const matchClass of item.classes) {\n                    if (OmvFilterString.matchString(featureClass, matchClass)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    static matchAttribute(layerName: string, env: MapEnv, items: OmvFilterDescription[]): boolean {\n        for (const item of items) {\n            if (item.featureAttribute !== undefined) {\n                if (\n                    OmvFilterString.matchString(layerName, item.layerName) &&\n                    env.lookup(item.featureAttribute.key) === item.featureAttribute.value\n                ) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    constructor(private description: OmvFeatureFilterDescription) {}\n\n    doProcessPointFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.pointsToProcess,\n            this.description.pointsToIgnore,\n            layer,\n            env,\n            this.description.processPointsDefault\n        );\n    }\n\n    doProcessLineFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.linesToProcess,\n            this.description.linesToIgnore,\n            layer,\n            env,\n            this.description.processLinesDefault\n        );\n    }\n\n    doProcessPolygonFeature(layer: string, env: MapEnv): boolean {\n        return this.doProcessFeature(\n            this.description.polygonsToProcess,\n            this.description.polygonsToIgnore,\n            layer,\n            env,\n            this.description.processPolygonsDefault\n        );\n    }\n\n    protected doProcessFeature(\n        itemsToProcess: OmvFilterDescription[],\n        itemsToIgnore: OmvFilterDescription[],\n        layer: string,\n        env: MapEnv,\n        defaultResult: boolean\n    ): boolean {\n        if (layer === undefined || (itemsToProcess.length === 0 && itemsToIgnore.length === 0)) {\n            return defaultResult;\n        }\n\n        let featureClass: string | undefined;\n        const featureClassThing = env.lookup(\"class\");\n\n        if (featureClassThing !== undefined && featureClassThing !== null) {\n            featureClass = featureClassThing.toString();\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToProcess)\n        ) {\n            return true;\n        }\n\n        if (\n            featureClass &&\n            OmvGenericFeatureModifier.matchItems(layer, featureClass, itemsToIgnore)\n        ) {\n            return false;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToProcess)) {\n            return true;\n        }\n\n        if (OmvGenericFeatureModifier.matchAttribute(layer, env, itemsToIgnore)) {\n            return false;\n        }\n\n        return defaultResult;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    AttributeMap,\n    Definitions,\n    GeometryType,\n    ITileDecoder,\n    OptionsMap,\n    StyleSet,\n    WorkerServiceProtocol\n} from \"@here/harp-datasource-protocol\";\nimport { EarthConstants, TileKey, webMercatorTilingScheme } from \"@here/harp-geoutils\";\nimport { LineGroup } from \"@here/harp-lines\";\nimport { CopyrightInfo, CopyrightProvider } from \"@here/harp-mapview\";\nimport { DataProvider, TileDataSource, TileFactory } from \"@here/harp-mapview-decoder\";\nimport { getOptionValue, LoggerManager } from \"@here/harp-utils\";\nimport {\n    FeatureModifierId,\n    OMV_TILE_DECODER_SERVICE_TYPE,\n    OmvDecoderOptions,\n    OmvFeatureFilterDescription\n} from \"./OmvDecoderDefs\";\nimport { OmvRestClient, OmvRestClientParameters } from \"./OmvRestClient\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst logger = LoggerManager.instance.create(\"OmvDataSource\");\n\nexport interface LinesGeometry {\n    type: GeometryType;\n    lines: LineGroup;\n    renderOrderOffset?: number;\n    technique: number;\n\n    /**\n     * Optional array of objects. It can be used to pass user data from the geometry to the mesh.\n     */\n    objInfos?: AttributeMap[];\n\n    /**\n     * Optional list of feature start indices. The indices point into the index attribute.\n     */\n    featureStarts?: number[];\n}\n\nexport interface OmvTileFactory {\n    /** Create an instance of [[OmvTile]] or a subclass. */\n    createTile(dataSource: OmvDataSource, tileKey: TileKey): OmvTile;\n}\n\nexport interface OmvDataSourceParameters {\n    /**\n     * The unique name of the [[OmvDataSource]].\n     */\n    name?: string;\n\n    /**\n     * The name of the [[StyleSet]] that this [[OmvDataSource]] should use for decoding.\n     *\n     *  @default \"omv\"\n     */\n    styleSetName?: string;\n\n    /**\n     * If set to `true`, features that have no technique in the theme will be printed to the console\n     * (can be excessive!).\n     */\n    showMissingTechniques?: boolean;\n\n    /**\n     * If set to `true`, an [[ExtendedTileInfo]] is created for every tile in addition to the\n     * [[DecodedTile]]. This is useful if the features should be passed on for processing without\n     * geometry being automatically created from them. One application is picking.\n     */\n    createTileInfo?: boolean;\n\n    /**\n     * Specify the decoder that should be used. If not supplied, the default will be used.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optionally specify the DataProvider that should be used.\n     */\n    dataProvider?: DataProvider;\n\n    /**\n     * Specify the URL to the decoder bundle. If not supplied, the default will be used.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Gather feature IDs from `OmvData`. Defaults to `false`.\n     * @deprecated, FeatureIds are always gathered, use [[gatherFeatureAttributes]] to gather\n     * all feature attributes.\n     */\n    gatherFeatureIds?: boolean;\n\n    /**\n     * Gather feature attributes from `OmvData`. Defaults to `false`.\n     */\n    gatherFeatureAttributes?: boolean;\n\n    /**\n     * Gather road segments data from [[OmvData]]. Defaults to `false`.\n     */\n    gatherRoadSegments?: boolean;\n\n    /**\n     * If not set to `false`, very short text labels will be skipped during decoding based on a\n     * heuristic.\n     */\n    skipShortLabels?: boolean;\n\n    /**\n     * A description for the feature filter that can be safely passed down to the web workers. It\n     * has to be generated with the help of the [[OmvFeatureFilterDescriptionBuilder]] (to guarantee\n     * correctness). This parameter gets applied to the decoder used in the [[OmvDataSource]]\n     * which might be shared between various [[OmvDataSource]]s.\n     */\n    filterDescr?: OmvFeatureFilterDescription;\n\n    /**\n     * Optional, custom factory for [[Tile]] instances created by this [[OmvDataSource]].\n     */\n    tileFactory?: TileFactory<OmvTile>;\n\n    /**\n     * Identifier used to choose OmvFeatureModifier, if undefined [[OmvGenericFeatureModifier]] is\n     * used. This parameter gets applied to the decoder used in the [[OmvDataSource]] which might\n     * be shared between various [[OmvDataSource]]s.\n     */\n    featureModifierId?: FeatureModifierId;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Optional minimum zoom level (storage level) for [[Tile]]s. Default is 1.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Optional maximum zoom level (storage level) for [[Tile]]s. Default is 14.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * Maximum geometry height above groud level this `OmvDataSource` can produce.\n     *\n     * Used in first stage of frustum culling before [[Tile.maxGeometryHeight]] data is available.\n     *\n     * @default [[EarthConstants.MAX_BUILDING_HEIGHT]].\n     */\n    maxGeometryHeight?: number;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is -1.\n     */\n    storageLevelOffset?: number;\n\n    /**\n     * Indicates whether overlay on elevation is enabled. Defaults to `false`.\n     */\n    enableElevationOverlay?: boolean;\n\n    /**\n     * Indicates whether to add a ground plane to cover the tile completely. This is necessary for\n     * the fallback logic, such that the parent fall back tiles don't overlap the children tiles.\n     * Default is true (i.e. if not defined it is taken to be true)\n     */\n    addGroundPlane?: boolean;\n}\n\n/**\n * A helper function to retrieve the [[DataProvider]] from the [[OmvDataSource]]s parameters.\n *\n * @param params The parameters passed into the OmvDataSource.\n */\nfunction getDataProvider(params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n    if ((params as OmvWithCustomDataProvider).dataProvider) {\n        return (params as OmvWithCustomDataProvider).dataProvider;\n    } else if (\n        (params as OmvWithRestClientParams).baseUrl ||\n        (params as OmvWithRestClientParams).url\n    ) {\n        return new OmvRestClient(params as OmvRestClientParameters);\n    } else {\n        throw new Error(\"OmvDataSource: missing url, baseUrl or dataProvider params\");\n    }\n}\n\nexport type OmvWithRestClientParams = OmvRestClientParameters & OmvDataSourceParameters;\nexport type OmvWithCustomDataProvider = OmvDataSourceParameters & { dataProvider: DataProvider };\n\nlet missingOmvDecoderServiceInfoEmitted: boolean = false;\n\nexport class OmvDataSource extends TileDataSource<OmvTile> {\n    private readonly m_decoderOptions: OmvDecoderOptions;\n\n    constructor(private m_params: OmvWithRestClientParams | OmvWithCustomDataProvider) {\n        super(m_params.tileFactory || new TileFactory(OmvTile), {\n            styleSetName: m_params.styleSetName || \"omv\",\n            name: m_params.name,\n            tilingScheme: webMercatorTilingScheme,\n            dataProvider: getDataProvider(m_params),\n            concurrentDecoderServiceName: OMV_TILE_DECODER_SERVICE_TYPE,\n            decoder: m_params.decoder,\n            concurrentDecoderScriptUrl: m_params.concurrentDecoderScriptUrl,\n            copyrightInfo: m_params.copyrightInfo,\n            copyrightProvider: m_params.copyrightProvider,\n            minZoomLevel: getOptionValue(m_params.minZoomLevel, 1),\n            maxZoomLevel: getOptionValue(m_params.maxZoomLevel, 14),\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1)\n        });\n\n        this.cacheable = true;\n        this.addGroundPlane =\n            m_params.addGroundPlane === undefined || m_params.addGroundPlane === true;\n\n        this.m_decoderOptions = {\n            showMissingTechniques: this.m_params.showMissingTechniques === true,\n            filterDescription: this.m_params.filterDescr,\n            gatherFeatureAttributes: this.m_params.gatherFeatureAttributes === true,\n            createTileInfo: this.m_params.createTileInfo === true,\n            gatherRoadSegments: this.m_params.gatherRoadSegments === true,\n            featureModifierId: this.m_params.featureModifierId,\n            skipShortLabels: this.m_params.skipShortLabels,\n            storageLevelOffset: getOptionValue(m_params.storageLevelOffset, -1),\n            enableElevationOverlay: this.m_params.enableElevationOverlay === true\n        };\n\n        this.maxGeometryHeight = getOptionValue(\n            m_params.maxGeometryHeight,\n            EarthConstants.MAX_BUILDING_HEIGHT\n        );\n    }\n\n    /** @override */\n    async connect() {\n        try {\n            await super.connect();\n        } catch (error) {\n            if (\n                WorkerServiceProtocol.isUnknownServiceError(error) &&\n                !missingOmvDecoderServiceInfoEmitted\n            ) {\n                logger.info(\n                    \"Unable to create decoder service in worker. Use \" +\n                        \" 'OmvTileDecoderService.start();' in decoder script.\"\n                );\n                missingOmvDecoderServiceInfoEmitted = true;\n            }\n            throw error;\n        }\n        this.configureDecoder(undefined, undefined, undefined, this.m_decoderOptions);\n    }\n\n    /**\n     * Remove the current data filter.\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     */\n    removeDataFilter(): void {\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription: null\n        });\n    }\n\n    /**\n     * Set a new data filter. Can also be done during the creation of an [[OmvDataSource]].\n     * Will be applied to the decoder, which might be shared with other omv datasources.\n     *\n     * @param filterDescription Data filter description created with\n     * [[OmvFeatureFilterDescriptionBuilder]].\n     */\n    setDataFilter(filterDescription: OmvFeatureFilterDescription): void {\n        this.m_decoderOptions.filterDescription =\n            filterDescription !== null ? filterDescription : undefined;\n\n        this.configureDecoder(undefined, undefined, undefined, {\n            filterDescription\n        });\n    }\n\n    /** @override */\n    shouldPreloadTiles(): boolean {\n        return true;\n    }\n\n    /**\n     * Check if a data source should be rendered or not depending on the zoom level.\n     *\n     * @param zoomLevel Zoom level.\n     * @param tileKey Level of the tile.\n     * @returns `true` if the data source should be rendered.\n     * @override\n     */\n    canGetTile(zoomLevel: number, tileKey: TileKey): boolean {\n        if (tileKey.level > this.maxZoomLevel) {\n            return false;\n        }\n        if (tileKey.level <= this.maxZoomLevel && zoomLevel >= this.maxZoomLevel) {\n            return true;\n        }\n        return super.canGetTile(zoomLevel, tileKey);\n    }\n\n    /** @override */\n    setLanguages(languages?: string[]): void {\n        if (languages !== undefined) {\n            this.configureDecoder(undefined, undefined, languages, undefined);\n        }\n    }\n\n    /** @override */\n    get storageLevelOffset() {\n        return super.storageLevelOffset;\n    }\n\n    /** @override */\n    set storageLevelOffset(levelOffset: number) {\n        super.storageLevelOffset = levelOffset;\n        this.m_decoderOptions.storageLevelOffset = this.storageLevelOffset;\n        this.configureDecoder(undefined, undefined, undefined, {\n            storageLevelOffset: this.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setEnableElevationOverlay(enable: boolean) {\n        if (this.m_decoderOptions.enableElevationOverlay !== enable) {\n            this.m_decoderOptions.enableElevationOverlay = enable;\n            this.configureDecoder(undefined, undefined, undefined, {\n                enableElevationOverlay: enable\n            });\n        }\n    }\n\n    private configureDecoder(\n        styleSet?: StyleSet,\n        definitions?: Definitions,\n        languages?: string[],\n        options?: OptionsMap\n    ) {\n        this.clearCache();\n        this.decoder.configure(styleSet, definitions, languages, options);\n        this.mapView.markTilesDirty(this);\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nexport * from \"./lib/DataProvider\";\nexport * from \"./lib/TileDataSource\";\nexport * from \"./lib/TileLoader\";\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n    Definitions,\n    ITileDecoder,\n    StyleSet,\n    Theme,\n    TileInfo\n} from \"@here/harp-datasource-protocol\";\nimport { TileKey, TilingScheme } from \"@here/harp-geoutils\";\nimport {\n    ConcurrentDecoderFacade,\n    CopyrightInfo,\n    CopyrightProvider,\n    DataSource,\n    Tile,\n    TileLoaderState\n} from \"@here/harp-mapview\";\nimport { LoggerManager } from \"@here/harp-utils\";\nimport { DataProvider } from \"./DataProvider\";\nimport { TileInfoLoader, TileLoader } from \"./TileLoader\";\n\n/**\n * Set of common options for all [[TileDataSource]]s.\n */\nexport interface TileDataSourceOptions {\n    /**\n     * Name of [[TileDataSource]], must be unique.\n     */\n    name?: string;\n\n    /**\n     * The name of the [[StyleSet]] to evaluate for the decoding.\n     */\n    styleSetName: string;\n\n    /**\n     * The [[TilingScheme]] the data source is using.\n     */\n    tilingScheme: TilingScheme;\n\n    /**\n     * The [[DataProvider]] to use for downloading the actual data.\n     */\n    dataProvider: DataProvider;\n\n    /**\n     * Optional: Specify [[ITileDecoder]] instance.\n     */\n    decoder?: ITileDecoder;\n\n    /**\n     * Optional name of decoder service class.\n     * @see [[ConcurrentDecoderFacade]]\n     * @see [[ConcurrentWorkerSet]]\n     */\n    concurrentDecoderServiceName?: string;\n\n    /**\n     * Optional URL for decoder bundle to be loaded into web worker.\n     */\n    concurrentDecoderScriptUrl?: string;\n\n    /**\n     * Optional count of web workers to use with the decoder bundle.\n     */\n    concurrentDecoderWorkerCount?: number;\n\n    /**\n     * Optional, default copyright information of tiles provided by this data source.\n     * Implementation should provide this information from the source data if possible.\n     */\n    copyrightInfo?: CopyrightInfo[];\n\n    /**\n     * Optional copyright info provider for tiles provided by this data source. Copyrights from\n     * provider are concatenated with default ones from `copyrightInfo`.\n     */\n    copyrightProvider?: CopyrightProvider;\n\n    /**\n     * Optional minimum zoom level (storage level) for [[Tile]]s. Default is 1.\n     */\n    minZoomLevel?: number;\n\n    /**\n     * Optional maximum zoom level (storage level) for [[Tile]]s. Default is 20.\n     */\n    maxZoomLevel?: number;\n\n    /**\n     * Optional storage level offset for [[Tile]]s. Default is 0.\n     */\n    storageLevelOffset?: number;\n}\n\n/**\n * Templated factory class to create instances of [[Tile]].\n */\nexport class TileFactory<TileType extends Tile> {\n    /**\n     * Initialize the factory using the constructor of the element to be called when a [[Tile]] is\n     * created.\n     *\n     * @param m_modelConstructor Constructor of (subclass of) [[Tile]].\n     */\n    constructor(\n        private m_modelConstructor: new (dataSource: DataSource, tileKey: TileKey) => TileType\n    ) {}\n\n    /**\n     * Create an instance of (subclass of) [[Tile]]. The required parameters are passed as arguments\n     * to the constructor of [[Tile]].\n     *\n     * @param dataSource [[Datasource]] this class belongs to.\n     * @param tileKey Quadtree address of the [[Tile]].\n     */\n    create(dataSource: DataSource, tileKey: TileKey): TileType {\n        return new this.m_modelConstructor(dataSource, tileKey);\n    }\n}\n\n/**\n * Common base class for the typical [[DataSource]] which uses an [[ITileDecoder]] to decode the\n * tile content asynchronously. The decoder can be passed in as an option, or a default\n * asynchronous one is generated.\n */\nexport class TileDataSource<TileType extends Tile> extends DataSource {\n    protected readonly logger = LoggerManager.instance.create(\"TileDataSource\");\n    protected readonly m_decoder: ITileDecoder;\n    private m_isReady: boolean = false;\n\n    /**\n     * Set up the `TileDataSource`.\n     *\n     * @param m_tileFactory Factory to create the [[Tile]] instances.\n     * @param m_options Options specifying the parameters of the [[DataSource]].\n     */\n    constructor(\n        private readonly m_tileFactory: TileFactory<TileType>,\n        private readonly m_options: TileDataSourceOptions\n    ) {\n        super(\n            m_options.name,\n            m_options.styleSetName,\n            m_options.minZoomLevel,\n            m_options.maxZoomLevel,\n            m_options.storageLevelOffset\n        );\n        if (m_options.decoder) {\n            this.m_decoder = m_options.decoder;\n        } else if (m_options.concurrentDecoderServiceName) {\n            this.m_decoder = ConcurrentDecoderFacade.getTileDecoder(\n                m_options.concurrentDecoderServiceName,\n                m_options.concurrentDecoderScriptUrl,\n                m_options.concurrentDecoderWorkerCount\n            );\n        } else {\n            throw new Error(\n                `TileDataSource[${this.name}]: unable to create, missing decoder or ` +\n                    `concurrentDecoderServiceName`\n            );\n        }\n        this.useGeometryLoader = true;\n        this.cacheable = true;\n    }\n\n    /** @override */\n    dispose() {\n        this.decoder.dispose();\n    }\n\n    /** @override */\n    ready(): boolean {\n        return this.m_isReady && this.m_options.dataProvider.ready();\n    }\n\n    /**\n     * Get the [[ITileDecoder]] of this `ITileDataSource`, which has either been passed in with\n     * the options, or has been supplied by the [[ConcurrentDecoderFacade]].\n     */\n    get decoder(): ITileDecoder {\n        return this.m_decoder;\n    }\n\n    /** @override */\n    async connect() {\n        await Promise.all([this.m_options.dataProvider.connect(), this.m_decoder.connect()]);\n        this.m_isReady = true;\n\n        this.m_decoder.configure(undefined, undefined, undefined, {\n            storageLevelOffset: this.m_options.storageLevelOffset\n        });\n    }\n\n    /** @override */\n    setStyleSet(styleSet?: StyleSet, definitions?: Definitions, languages?: string[]): void {\n        this.m_decoder.configure(styleSet, definitions, languages);\n        this.mapView.markTilesDirty(this);\n    }\n\n    /**\n     * Apply the [[Theme]] to this data source.\n     *\n     * Applies new [[StyleSet]] and definitions from theme only if matching styleset (see\n     * `styleSetName` property) is found in `theme`.\n     * @override\n     */\n    setTheme(theme: Theme, languages?: string[]): void {\n        const styleSet =\n            this.styleSetName !== undefined && theme.styles\n                ? theme.styles[this.styleSetName]\n                : undefined;\n\n        if (styleSet !== undefined) {\n            this.setStyleSet(styleSet, theme.definitions, languages);\n        }\n    }\n\n    /**\n     * Get the [[DataProvider]] that has been passed in with the options.\n     */\n    dataProvider(): DataProvider {\n        return this.m_options.dataProvider;\n    }\n\n    /** @override */\n    getTilingScheme(): TilingScheme {\n        return this.m_options.tilingScheme;\n    }\n\n    /**\n     * Create a [[Tile]] and start the asynchronous download of the tile content. The [[Tile]] will\n     * be empty, but the download and decoding will be scheduled immediately. [[Tile]] instance is\n     * initialized with default copyrights, concatenated with copyrights from copyright provider of\n     * this data source.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @override\n     */\n    getTile(tileKey: TileKey): TileType | undefined {\n        const tile = this.m_tileFactory.create(this, tileKey);\n        tile.tileLoader = new TileLoader(\n            this,\n            tileKey,\n            this.m_options.dataProvider,\n            this.decoder,\n            0\n        );\n        tile.copyrightInfo = this.m_options.copyrightInfo;\n        if (this.m_options.copyrightProvider !== undefined) {\n            this.m_options.copyrightProvider\n                .getCopyrights(tile.geoBox, tileKey.level)\n                .then(copyrightInfo => {\n                    tile.copyrightInfo =\n                        tile.copyrightInfo === undefined\n                            ? copyrightInfo\n                            : [...tile.copyrightInfo, ...copyrightInfo];\n                    this.requestUpdate();\n                });\n        }\n        tile.load();\n\n        return tile;\n    }\n\n    /**\n     * Get [[TileInfo]] of a tile.\n     *\n     * @param tileKey Quadtree address of the requested tile.\n     * @returns A promise which will contain the [[TileInfo]] when resolved.\n     */\n    getTileInfo(tileKey: TileKey): Promise<TileInfo | undefined> {\n        const promise = new Promise<TileInfo | undefined>((resolve, reject) => {\n            const tileLoader = new TileInfoLoader(\n                this,\n                tileKey,\n                this.m_options.dataProvider,\n                this.decoder,\n                0\n            );\n\n            tileLoader.loadAndDecode().then(loaderState => {\n                if (loaderState === TileLoaderState.Ready) {\n                    resolve(tileLoader.tileInfo);\n                } else {\n                    reject(\n                        new Error(`TileDataSource#getInfoTile wrong final state: ${loaderState}`)\n                    );\n                }\n            });\n        });\n\n        return promise;\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { getPropertyValue, isTextTechnique } from \"@here/harp-datasource-protocol\";\nimport { TileKey } from \"@here/harp-geoutils/lib/tiling/TileKey\";\nimport { DataSource, TextElement } from \"@here/harp-mapview\";\nimport { debugContext } from \"@here/harp-mapview/lib/DebugContext\";\nimport {\n    ContextualArabicConverter,\n    FontUnit,\n    TextLayoutStyle,\n    TextRenderStyle\n} from \"@here/harp-text-canvas\";\nimport * as THREE from \"three\";\n\nimport { TileGeometryCreator } from \"@here/harp-mapview/lib/geometry/TileGeometryCreator\";\nimport { OmvTile } from \"./OmvTile\";\n\nconst debugMaterial = new THREE.LineBasicMaterial({\n    color: 0x000000,\n    linewidth: 2,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst debugCircleMaterialWF = new THREE.MeshBasicMaterial({\n    color: 0xff0000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterialWF.wireframe = true;\n\nconst debugCircleMaterial2WF = new THREE.MeshBasicMaterial({\n    color: 0x8080ff,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\ndebugCircleMaterial2WF.wireframe = true;\n\nconst debugBlackCircleMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000000,\n    depthTest: false,\n    depthFunc: THREE.NeverDepth\n});\n\nconst textRenderStyle = new TextRenderStyle();\nconst textLayoutStyle = new TextLayoutStyle();\n\ntextRenderStyle.fontSize = {\n    unit: FontUnit.Point,\n    size: 9,\n    backgroundSize: 0\n};\ntextRenderStyle.opacity = 0.75;\ntextRenderStyle.backgroundOpacity = 0.75;\n\nexport class OmvDebugLabelsTile extends OmvTile {\n    constructor(dataSource: DataSource, tileKey: TileKey) {\n        super(dataSource, tileKey);\n    }\n\n    /** @override */\n    loadingFinished() {\n        this.addLabelDebugInfo();\n    }\n\n    /**\n     * Create [[TextElement]] objects from the given decoded [[Tile]] and list of materials.\n     */\n    private addLabelDebugInfo() {\n        // activate in the browser with:\n        // window.__debugContext.setValue(\"DEBUG_TEXT_PATHS\", true)\n        const debugTextPaths = debugContext.getValue(\"DEBUG_TEXT_PATHS\");\n        const debugTextPathsFull = debugContext.getValue(\"DEBUG_TEXT_PATHS_FULL\");\n\n        if (!(debugTextPaths || debugTextPathsFull) || this.decodedTile === undefined) {\n            return;\n        }\n\n        const tileGeometryCreator = TileGeometryCreator.instance;\n        const decodedTile = this.decodedTile!;\n\n        tileGeometryCreator.createTextElements(this, decodedTile);\n\n        const colorMap = new Map<number, THREE.Color>();\n\n        // allow limiting to specific names and/or index. There can be many paths with the same text\n        const textFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.TEXT\");\n        const indexFilter = debugContext.getValue(\"DEBUG_TEXT_PATHS.FILTER.INDEX\");\n        const env = this.mapView.env;\n\n        if (decodedTile.textPathGeometries !== undefined) {\n            this.preparedTextPaths = tileGeometryCreator.prepareTextPaths(\n                decodedTile.textPathGeometries,\n                decodedTile\n            );\n        }\n\n        if (this.preparedTextPaths !== undefined) {\n            const lineGeometry = new THREE.BufferGeometry();\n            const lineIndices = new Array<number>();\n            const linePositions = new Array<number>();\n\n            const redPointGeometry = new THREE.BufferGeometry();\n            const redPointIndices = new Array<number>();\n            const redPointPositions = new Array<number>();\n\n            const blackPointGeometry = new THREE.BufferGeometry();\n            const blackPointIndices = new Array<number>();\n            const blackPointPositions = new Array<number>();\n\n            let baseVertex = 0;\n            const pointScale = this.mapView.pixelToWorld;\n            const worldOffsetX = this.computeWorldOffsetX();\n\n            for (const textPath of this.preparedTextPaths) {\n                const technique = decodedTile.techniques[textPath.technique];\n                if (!isTextTechnique(technique)) {\n                    continue;\n                }\n                if (technique.color !== undefined) {\n                    colorMap.set(\n                        textPath.technique,\n                        new THREE.Color(getPropertyValue(technique.color, env))\n                    );\n                }\n\n                baseVertex = linePositions.length / 3;\n\n                const text = textPath.text;\n\n                const elementIndex = this.preparedTextPaths.indexOf(textPath);\n\n                const createDebugInfo =\n                    (!textFilter || (text && text.indexOf(textFilter) >= 0)) &&\n                    (indexFilter === undefined || indexFilter === elementIndex);\n\n                if (createDebugInfo) {\n                    for (let i = 0; i < textPath.path.length; i += 3) {\n                        const pathIndex = i / 3;\n                        const x = textPath.path[i];\n                        const y = textPath.path[i + 1];\n                        // raise it a bit, so we get identify connectivity visually by tilting\n                        const z = textPath.path[i + 2] + i / 3;\n\n                        if (debugTextPaths) {\n                            linePositions.push(x, y, z);\n                        }\n\n                        const isRedPoint = i === 0;\n\n                        if (debugTextPathsFull || isRedPoint) {\n                            const pointSize = pointScale * (isRedPoint ? 6 : 4);\n\n                            const positions = isRedPoint ? redPointPositions : blackPointPositions;\n                            const indices = isRedPoint ? redPointIndices : blackPointIndices;\n\n                            positions.push(x, y - pointSize, z);\n                            positions.push(x + pointSize, y, z);\n                            positions.push(x, y + pointSize, z);\n                            positions.push(x - pointSize, y, z);\n\n                            const pointIndex = positions.length / 3;\n\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 3);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 4);\n                            indices.push(pointIndex - 2);\n                            indices.push(pointIndex - 1);\n\n                            if (debugTextPathsFull) {\n                                // give point index a label\n                                const label: string =\n                                    pathIndex % 5 === 0\n                                        ? text + \":\" + pathIndex\n                                        : Number(pathIndex).toString();\n                                const labelElement = new TextElement(\n                                    ContextualArabicConverter.instance.convert(label),\n                                    new THREE.Vector3(x + worldOffsetX, y, z),\n                                    textRenderStyle,\n                                    textLayoutStyle,\n                                    getPropertyValue(technique.priority || 0, env),\n                                    technique.xOffset || 0.0,\n                                    technique.yOffset || 0.0\n                                );\n                                labelElement.minZoomLevel = technique.minZoomLevel;\n                                labelElement.mayOverlap = true;\n                                labelElement.reserveSpace = false;\n                                labelElement.alwaysOnTop = true;\n                                labelElement.ignoreDistance = true;\n                                this.addUserTextElement(labelElement);\n                            }\n                        }\n                    }\n\n                    // the lines of a path share a common geometry\n                    const N = textPath.path.length / 3;\n                    for (let i = 0; i < N; ++i) {\n                        if (i > 0) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                        if (i + 1 < N) {\n                            lineIndices.push(baseVertex + i);\n                        }\n                    }\n                }\n            }\n\n            if (lineIndices.length > 0) {\n                lineGeometry.addGroup(0, lineIndices.length, 0);\n\n                lineGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(linePositions), 3)\n                );\n\n                lineGeometry.setIndex(new THREE.BufferAttribute(new Uint32Array(lineIndices), 1));\n                const lineMesh = new THREE.LineSegments(lineGeometry, debugMaterial);\n                lineMesh.renderOrder = 2000;\n                this.objects.push(lineMesh);\n            }\n\n            if (redPointIndices.length > 0) {\n                redPointGeometry.addGroup(0, redPointIndices.length, 0);\n\n                redPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(redPointPositions), 3)\n                );\n\n                redPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(redPointIndices), 1)\n                );\n                const redPointMesh = new THREE.Mesh(redPointGeometry, debugCircleMaterial);\n                redPointMesh.renderOrder = 3000;\n                this.objects.push(redPointMesh);\n            }\n\n            if (blackPointIndices.length > 0) {\n                blackPointGeometry.addGroup(0, blackPointIndices.length, 0);\n\n                blackPointGeometry.setAttribute(\n                    \"position\",\n                    new THREE.BufferAttribute(new Float32Array(blackPointPositions), 3)\n                );\n\n                blackPointGeometry.setIndex(\n                    new THREE.BufferAttribute(new Uint32Array(blackPointIndices), 1)\n                );\n                const blackPointMesh = new THREE.Mesh(blackPointGeometry, debugBlackCircleMaterial);\n                blackPointMesh.renderOrder = 2500;\n                this.objects.push(blackPointMesh);\n            }\n        }\n    }\n}\n","/*\n * Copyright (C) 2017-2019 HERE Europe B.V.\n * Licensed under Apache 2.0, see full license in LICENSE\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/** @hidden */\nexport const appId = \"devportal-demo-20180625\";\n\n/** @hidden */\nexport const appCode = \"9v2BkviRwi9Ot26kp2IysQ\";\n\n/** @hidden */\nexport const accessToken = \"AGln99HORnqL1kfIQtsQl70\";\n\n/** @hidden */\nexport const copyrightInfo = [\n    {\n        id: \"here.com\",\n        year: new Date().getFullYear(),\n        label: \"HERE\",\n        link: \"https://legal.here.com/terms\"\n    }\n];\n"],"sourceRoot":""}